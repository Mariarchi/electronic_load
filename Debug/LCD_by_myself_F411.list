
LCD_by_myself_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000460c  0800bfdc  0800bfdc  0000cfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105e8  080105e8  00012180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080105e8  080105e8  000115e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105f0  080105f0  00012180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105f0  080105f0  000115f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080105f4  080105f4  000115f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  080105f8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000211c  20000180  08010778  00012180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000229c  08010778  0001229c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eac8  00000000  00000000  000121b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005429  00000000  00000000  00030c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  000360a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001476  00000000  00000000  00037bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2ce  00000000  00000000  0003903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a11  00000000  00000000  0005630c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009914d  00000000  00000000  0007bd1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007614  00000000  00000000  00114eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011c4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bfc4 	.word	0x0800bfc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800bfc4 	.word	0x0800bfc4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a2f      	ldr	r2, [pc, #188]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a28      	ldr	r2, [pc, #160]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_GPIO_Init+0xdc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800062c:	481b      	ldr	r0, [pc, #108]	@ (800069c <MX_GPIO_Init+0xe0>)
 800062e:	f000 ffa3 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin|TP_CS_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	21d0      	movs	r1, #208	@ 0xd0
 8000636:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 8000638:	f000 ff9e 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 800063c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	4811      	ldr	r0, [pc, #68]	@ (800069c <MX_GPIO_Init+0xe0>)
 8000656:	f000 fdf3 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800065a:	2308      	movs	r3, #8
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4619      	mov	r1, r3
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 800066e:	f000 fde7 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LCD_CS_Pin TP_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin|TP_CS_Pin;
 8000672:	23d0      	movs	r3, #208	@ 0xd0
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 800068a:	f000 fdd9 	bl	8001240 <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400

080006a4 <USB_Send_Message>:
#include "LCD_Touch.h"
#include "LCD_Bmp.h"
#include "Show_Lib.h"
#include "ec11.h"

void USB_Send_Message(const char *msg) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff fd97 	bl	80001e0 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f007 f9dc 	bl	8007a74 <CDC_Transmit_FS>
	HAL_Delay(10);
 80006bc:	200a      	movs	r0, #10
 80006be:	f000 fc6d 	bl	8000f9c <HAL_Delay>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <main>:
}

void SystemClock_Config(void);

int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af02      	add	r7, sp, #8
	HAL_Init();
 80006d2:	f000 fbf1 	bl	8000eb8 <HAL_Init>

	SystemClock_Config();
 80006d6:	f000 f869 	bl	80007ac <SystemClock_Config>

	MX_GPIO_Init();
 80006da:	f7ff ff6f 	bl	80005bc <MX_GPIO_Init>
	MX_SPI1_Init();
 80006de:	f000 f8f3 	bl	80008c8 <MX_SPI1_Init>
	MX_TIM3_Init();
 80006e2:	f000 fa8b 	bl	8000bfc <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80006e6:	f000 fb47 	bl	8000d78 <MX_USART2_UART_Init>
	MX_USB_DEVICE_Init();
 80006ea:	f007 f8fb 	bl	80078e4 <MX_USB_DEVICE_Init>

	printf("3.5inch TFT Touch Shield Demo\r\n");
 80006ee:	4829      	ldr	r0, [pc, #164]	@ (8000794 <main+0xc8>)
 80006f0:	f00a feb4 	bl	800b45c <puts>
	System_Init();
 80006f4:	f007 fe1a 	bl	800832c <System_Init>

	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;//SCAN_DIR_DFT = D2U_L2R направление отрисовки?
 80006f8:	2306      	movs	r3, #6
 80006fa:	72fb      	strb	r3, [r7, #11]
	printf("Init LCD...\r\n");
 80006fc:	4826      	ldr	r0, [pc, #152]	@ (8000798 <main+0xcc>)
 80006fe:	f00a fead 	bl	800b45c <puts>
	LCD_Init(Lcd_ScanDir, 64000); // управление яркостью
 8000702:	7afb      	ldrb	r3, [r7, #11]
 8000704:	f44f 417a 	mov.w	r1, #64000	@ 0xfa00
 8000708:	4618      	mov	r0, r3
 800070a:	f008 fdb7 	bl	800927c <LCD_Init>
	printf("Init TouchPad...\r\n");
 800070e:	4823      	ldr	r0, [pc, #140]	@ (800079c <main+0xd0>)
 8000710:	f00a fea4 	bl	800b45c <puts>
	TP_Init(Lcd_ScanDir);
 8000714:	7afb      	ldrb	r3, [r7, #11]
 8000716:	4618      	mov	r0, r3
 8000718:	f00a f9b2 	bl	800aa80 <TP_Init>
	printf("Init SDcard...\r\n");
 800071c:	4820      	ldr	r0, [pc, #128]	@ (80007a0 <main+0xd4>)
 800071e:	f00a fe9d 	bl	800b45c <puts>
	SD_Init();
 8000722:	f008 fb1b 	bl	8008d5c <SD_Init>
	printf("Install factory TP set...\r\n");
 8000726:	481f      	ldr	r0, [pc, #124]	@ (80007a4 <main+0xd8>)
 8000728:	f00a fe98 	bl	800b45c <puts>
	TP_GetAdFac();//Get the default calibration factor
 800072c:	f009 ffa2 	bl	800a674 <TP_GetAdFac>
	printf("Initialization for Electronic load \r\n");
 8000730:	481d      	ldr	r0, [pc, #116]	@ (80007a8 <main+0xdc>)
 8000732:	f00a fe93 	bl	800b45c <puts>
	LOAD_Init();
 8000736:	f00a f9c1 	bl	800aabc <LOAD_Init>
	printf("**********Touch Draw Board**********\r\n");
	TP_GetAdFac();//Get the default calibration factor
	TP_Dialog();//initialize the drawing board
*/

	uint32_t previousTick = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]

	DEV_TIME sDev_time;
	sDev_time.Hour = 00;
 800073e:	2300      	movs	r3, #0
 8000740:	713b      	strb	r3, [r7, #4]
	sDev_time.Min = 00;
 8000742:	2300      	movs	r3, #0
 8000744:	717b      	strb	r3, [r7, #5]
	sDev_time.Sec = 00;
 8000746:	2300      	movs	r3, #0
 8000748:	71bb      	strb	r3, [r7, #6]

	LCD_Clear(LCD_BACKGROUND);
 800074a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800074e:	f008 fe85 	bl	800945c <LCD_Clear>
	TP_MenuDialog();
 8000752:	f00a f807 	bl	800a764 <TP_MenuDialog>
	  //GUI_Show();
	  //LCD_Show_bmp(Bmp_ScanDir , Lcd_ScanDir);
	  //TP_DrawBoard();
	  //GUI_DisGrayMap(0, 0, gImage_ninja);

		TP_MenuTouch();
 8000756:	f00a f919 	bl	800a98c <TP_MenuTouch>
		TP_IndicationsUnit();
 800075a:	f00a f8d9 	bl	800a910 <TP_IndicationsUnit>

	    if (HAL_GetTick() - previousTick >= 1000) {
 800075e:	f000 fc11 	bl	8000f84 <HAL_GetTick>
 8000762:	4602      	mov	r2, r0
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800076c:	d3f3      	bcc.n	8000756 <main+0x8a>
	        previousTick = HAL_GetTick();
 800076e:	f000 fc09 	bl	8000f84 <HAL_GetTick>
 8000772:	60f8      	str	r0, [r7, #12]

			sDev_time.Sec++;
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	3301      	adds	r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	71bb      	strb	r3, [r7, #6]
			GUI_Showtime(0, 0, 126, 25, &sDev_time, BLUE);
 800077c:	231f      	movs	r3, #31
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	463b      	mov	r3, r7
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2319      	movs	r3, #25
 8000786:	227e      	movs	r2, #126	@ 0x7e
 8000788:	2100      	movs	r1, #0
 800078a:	2000      	movs	r0, #0
 800078c:	f009 faf8 	bl	8009d80 <GUI_Showtime>
		TP_MenuTouch();
 8000790:	e7e1      	b.n	8000756 <main+0x8a>
 8000792:	bf00      	nop
 8000794:	0800bfdc 	.word	0x0800bfdc
 8000798:	0800bffc 	.word	0x0800bffc
 800079c:	0800c00c 	.word	0x0800c00c
 80007a0:	0800c020 	.word	0x0800c020
 80007a4:	0800c030 	.word	0x0800c030
 80007a8:	0800c04c 	.word	0x0800c04c

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	@ 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	@ 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00a ff2e 	bl	800b61c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b33      	ldr	r3, [pc, #204]	@ (80008a4 <SystemClock_Config+0xf8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	4a32      	ldr	r2, [pc, #200]	@ (80008a4 <SystemClock_Config+0xf8>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e0:	4b30      	ldr	r3, [pc, #192]	@ (80008a4 <SystemClock_Config+0xf8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <SystemClock_Config+0xfc>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a2c      	ldr	r2, [pc, #176]	@ (80008a8 <SystemClock_Config+0xfc>)
 80007f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b2a      	ldr	r3, [pc, #168]	@ (80008a8 <SystemClock_Config+0xfc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800081c:	2310      	movs	r3, #16
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 123;
 8000820:	237b      	movs	r3, #123	@ 0x7b
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f002 f90d 	bl	8002a50 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <SystemClock_Config+0x98>
  {
	  _Error_Handler(__FILE__, __LINE__);
 800083c:	2194      	movs	r1, #148	@ 0x94
 800083e:	481b      	ldr	r0, [pc, #108]	@ (80008ac <SystemClock_Config+0x100>)
 8000840:	f000 f838 	bl	80008b4 <_Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2103      	movs	r1, #3
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fb6d 	bl	8002f40 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d003      	beq.n	8000874 <SystemClock_Config+0xc8>
  {
	  _Error_Handler(__FILE__, __LINE__);
 800086c:	21a2      	movs	r1, #162	@ 0xa2
 800086e:	480f      	ldr	r0, [pc, #60]	@ (80008ac <SystemClock_Config+0x100>)
 8000870:	f000 f820 	bl	80008b4 <_Error_Handler>
  }

	  /**Configure the Systick interrupt time
	  */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000874:	f002 fd10 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 8000878:	4603      	mov	r3, r0
 800087a:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <SystemClock_Config+0x104>)
 800087c:	fba2 2303 	umull	r2, r3, r2, r3
 8000880:	099b      	lsrs	r3, r3, #6
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fcb3 	bl	80011ee <HAL_SYSTICK_Config>

	  /**Configure the Systick
	  */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000888:	2004      	movs	r0, #4
 800088a:	f000 fcbd 	bl	8001208 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	f04f 30ff 	mov.w	r0, #4294967295
 8000896:	f000 fc80 	bl	800119a <HAL_NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	@ 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000
 80008ac:	0800c074 	.word	0x0800c074
 80008b0:	10624dd3 	.word	0x10624dd3

080008b4 <_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008be:	b672      	cpsid	i
}
 80008c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c2:	bf00      	nop
 80008c4:	e7fd      	b.n	80008c2 <_Error_Handler+0xe>
	...

080008c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008cc:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_SPI1_Init+0x68>)
 80008ce:	4a19      	ldr	r2, [pc, #100]	@ (8000934 <MX_SPI1_Init+0x6c>)
 80008d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_SPI1_Init+0x68>)
 80008d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_SPI1_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_SPI1_Init+0x68>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_SPI1_Init+0x68>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_SPI1_Init+0x68>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_SPI1_Init+0x68>)
 80008f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <MX_SPI1_Init+0x68>)
 80008fc:	2210      	movs	r2, #16
 80008fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000900:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_SPI1_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <MX_SPI1_Init+0x68>)
 8000908:	2200      	movs	r2, #0
 800090a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090c:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_SPI1_Init+0x68>)
 800090e:	2200      	movs	r2, #0
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000912:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <MX_SPI1_Init+0x68>)
 8000914:	220a      	movs	r2, #10
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_SPI1_Init+0x68>)
 800091a:	f002 fcf1 	bl	8003300 <HAL_SPI_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000924:	2136      	movs	r1, #54	@ 0x36
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_SPI1_Init+0x70>)
 8000928:	f7ff ffc4 	bl	80008b4 <_Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000019c 	.word	0x2000019c
 8000934:	40013000 	.word	0x40013000
 8000938:	0800c088 	.word	0x0800c088

0800093c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	@ 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <HAL_SPI_MspInit+0x84>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12b      	bne.n	80009b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <HAL_SPI_MspInit+0x88>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a17      	ldr	r2, [pc, #92]	@ (80009c4 <HAL_SPI_MspInit+0x88>)
 8000968:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_SPI_MspInit+0x88>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <HAL_SPI_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <HAL_SPI_MspInit+0x88>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <HAL_SPI_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000996:	23e0      	movs	r3, #224	@ 0xe0
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a6:	2305      	movs	r3, #5
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <HAL_SPI_MspInit+0x8c>)
 80009b2:	f000 fc45 	bl	8001240 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	@ 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40013000 	.word	0x40013000
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	4a0f      	ldr	r2, [pc, #60]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a08      	ldr	r2, [pc, #32]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 fa73 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <OTG_FS_IRQHandler+0x10>)
 8000a82:	f000 fed6 	bl	8001832 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000176c 	.word	0x2000176c

08000a90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	e00a      	b.n	8000ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa2:	f3af 8000 	nop.w
 8000aa6:	4601      	mov	r1, r0
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	b2ca      	uxtb	r2, r1
 8000ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dbf0      	blt.n	8000aa2 <_read+0x12>
  }

  return len;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	e009      	b.n	8000af0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf1      	blt.n	8000adc <_write+0x12>
  }
  return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_close>:

int _close(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_isatty>:

int _isatty(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f00a fd9c 	bl	800b6d8 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20020000 	.word	0x20020000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	200001f4 	.word	0x200001f4
 8000bd4:	200022a0 	.word	0x200022a0

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	615a      	str	r2, [r3, #20]
 8000c1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c20:	4a25      	ldr	r2, [pc, #148]	@ (8000cb8 <MX_TIM3_Init+0xbc>)
 8000c22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c24:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c30:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c44:	481b      	ldr	r0, [pc, #108]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c46:	f002 fbe4 	bl	8003412 <HAL_TIM_PWM_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000c50:	2133      	movs	r1, #51	@ 0x33
 8000c52:	481a      	ldr	r0, [pc, #104]	@ (8000cbc <MX_TIM3_Init+0xc0>)
 8000c54:	f7ff fe2e 	bl	80008b4 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c60:	f107 0320 	add.w	r3, r7, #32
 8000c64:	4619      	mov	r1, r3
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c68:	f002 ffcc 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c72:	2139      	movs	r1, #57	@ 0x39
 8000c74:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <MX_TIM3_Init+0xc0>)
 8000c76:	f7ff fe1d 	bl	80008b4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7a:	2360      	movs	r3, #96	@ 0x60
 8000c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4808      	ldr	r0, [pc, #32]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c92:	f002 fcbd 	bl	8003610 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000c9c:	2141      	movs	r1, #65	@ 0x41
 8000c9e:	4807      	ldr	r0, [pc, #28]	@ (8000cbc <MX_TIM3_Init+0xc0>)
 8000ca0:	f7ff fe08 	bl	80008b4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <MX_TIM3_Init+0xb8>)
 8000ca6:	f000 f82d 	bl	8000d04 <HAL_TIM_MspPostInit>

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	@ 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001f8 	.word	0x200001f8
 8000cb8:	40000400 	.word	0x40000400
 8000cbc:	0800c09c 	.word	0x0800c09c

08000cc0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cfc <HAL_TIM_PWM_MspInit+0x3c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10d      	bne.n	8000cee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_TIM_PWM_MspInit+0x40>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a09      	ldr	r2, [pc, #36]	@ (8000d00 <HAL_TIM_PWM_MspInit+0x40>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <HAL_TIM_PWM_MspInit+0x40>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40000400 	.word	0x40000400
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <HAL_TIM_MspPostInit+0x68>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d11d      	bne.n	8000d62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <HAL_TIM_MspPostInit+0x6c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000d42:	2320      	movs	r3, #32
 8000d44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <HAL_TIM_MspPostInit+0x70>)
 8000d5e:	f000 fa6f 	bl	8001240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40000400 	.word	0x40000400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400

08000d78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d7e:	4a13      	ldr	r2, [pc, #76]	@ (8000dcc <MX_USART2_UART_Init+0x54>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4806      	ldr	r0, [pc, #24]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000db0:	f002 ff96 	bl	8003ce0 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000dba:	2133      	movs	r1, #51	@ 0x33
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <MX_USART2_UART_Init+0x58>)
 8000dbe:	f7ff fd79 	bl	80008b4 <_Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000240 	.word	0x20000240
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	0800c0b0 	.word	0x0800c0b0

08000dd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <HAL_UART_MspInit+0x84>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12b      	bne.n	8000e4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e2e:	230c      	movs	r3, #12
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e4a:	f000 f9f9 	bl	8001240 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004400 	.word	0x40004400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e68:	f7ff feb6 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	@ (8000ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e92:	f00a fc27 	bl	800b6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fc19 	bl	80006cc <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ea8:	080105f8 	.word	0x080105f8
  ldr r2, =_sbss
 8000eac:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000eb0:	2000229c 	.word	0x2000229c

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	@ (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f94f 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f7ff fd6e 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f967 	bl	80011ee <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f92f 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000288 	.word	0x20000288

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000288 	.word	0x20000288

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	@ (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	@ (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	@ (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	@ 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff29 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff3e 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff31 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa2 	bl	8001140 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b04      	cmp	r3, #4
 8001214:	d106      	bne.n	8001224 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a08      	ldr	r2, [pc, #32]	@ (800123c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001222:	e005      	b.n	8001230 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800122a:	f023 0304 	bic.w	r3, r3, #4
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	e159      	b.n	8001510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 8148 	bne.w	800150a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d005      	beq.n	8001292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	2b02      	cmp	r3, #2
 8001290:	d130      	bne.n	80012f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d017      	beq.n	8001330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a2 	beq.w	800150a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b57      	ldr	r3, [pc, #348]	@ (8001528 <HAL_GPIO_Init+0x2e8>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	4a56      	ldr	r2, [pc, #344]	@ (8001528 <HAL_GPIO_Init+0x2e8>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d6:	4b54      	ldr	r3, [pc, #336]	@ (8001528 <HAL_GPIO_Init+0x2e8>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e2:	4a52      	ldr	r2, [pc, #328]	@ (800152c <HAL_GPIO_Init+0x2ec>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a49      	ldr	r2, [pc, #292]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x202>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <HAL_GPIO_Init+0x2f4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x1fe>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a47      	ldr	r2, [pc, #284]	@ (8001538 <HAL_GPIO_Init+0x2f8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x1fa>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a46      	ldr	r2, [pc, #280]	@ (800153c <HAL_GPIO_Init+0x2fc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x1f6>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a45      	ldr	r2, [pc, #276]	@ (8001540 <HAL_GPIO_Init+0x300>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x1f2>
 800142e:	2304      	movs	r3, #4
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001432:	2307      	movs	r3, #7
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x204>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x204>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001442:	2300      	movs	r3, #0
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001454:	4935      	ldr	r1, [pc, #212]	@ (800152c <HAL_GPIO_Init+0x2ec>)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <HAL_GPIO_Init+0x304>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a2f      	ldr	r2, [pc, #188]	@ (8001544 <HAL_GPIO_Init+0x304>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <HAL_GPIO_Init+0x304>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a24      	ldr	r2, [pc, #144]	@ (8001544 <HAL_GPIO_Init+0x304>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <HAL_GPIO_Init+0x304>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014da:	4a1a      	ldr	r2, [pc, #104]	@ (8001544 <HAL_GPIO_Init+0x304>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_GPIO_Init+0x304>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001504:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <HAL_GPIO_Init+0x304>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	f67f aea2 	bls.w	800125c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3724      	adds	r7, #36	@ 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40013800 	.word	0x40013800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020400 	.word	0x40020400
 8001538:	40020800 	.word	0x40020800
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40021000 	.word	0x40021000
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e001      	b.n	800156a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af02      	add	r7, sp, #8
 80015b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e101      	b.n	80017c0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f006 fb94 	bl	8007d04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015ea:	d102      	bne.n	80015f2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 ff4d 	bl	8004496 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7c1a      	ldrb	r2, [r3, #16]
 8001604:	f88d 2000 	strb.w	r2, [sp]
 8001608:	3304      	adds	r3, #4
 800160a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160c:	f002 fe2c 	bl	8004268 <USB_CoreInit>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0ce      	b.n	80017c0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f002 ff45 	bl	80044b8 <USB_SetCurrentMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0bf      	b.n	80017c0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e04a      	b.n	80016dc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3315      	adds	r3, #21
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3314      	adds	r3, #20
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	b298      	uxth	r0, r3
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	332e      	adds	r3, #46	@ 0x2e
 8001682:	4602      	mov	r2, r0
 8001684:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	3318      	adds	r3, #24
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	331c      	adds	r3, #28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3320      	adds	r3, #32
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3324      	adds	r3, #36	@ 0x24
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3301      	adds	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	791b      	ldrb	r3, [r3, #4]
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3af      	bcc.n	8001646 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e044      	b.n	8001776 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	3301      	adds	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	791b      	ldrb	r3, [r3, #4]
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3b5      	bcc.n	80016ec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7c1a      	ldrb	r2, [r3, #16]
 8001788:	f88d 2000 	strb.w	r2, [sp]
 800178c:	3304      	adds	r3, #4
 800178e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001790:	f002 fede 	bl	8004550 <USB_DevInit>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2202      	movs	r2, #2
 800179e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00c      	b.n	80017c0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 ff28 	bl	800560e <USB_DevDisconnect>

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_PCD_Start+0x1c>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e022      	b.n	800182a <HAL_PCD_Start+0x62>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001804:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fe2f 	bl	8004474 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fed6 	bl	80055cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001832:	b590      	push	{r4, r7, lr}
 8001834:	b08d      	sub	sp, #52	@ 0x34
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f003 ff94 	bl	8005776 <USB_GetMode>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 848c 	bne.w	800216e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fef8 	bl	8005650 <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8482 	beq.w	800216c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f003 fee5 	bl	8005650 <USB_ReadInterrupts>
 8001886:	4603      	mov	r3, r0
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b02      	cmp	r3, #2
 800188e:	d107      	bne.n	80018a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f002 0202 	and.w	r2, r2, #2
 800189e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fed3 	bl	8005650 <USB_ReadInterrupts>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d161      	bne.n	8001978 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699a      	ldr	r2, [r3, #24]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0210 	bic.w	r2, r2, #16
 80018c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f003 020f 	and.w	r2, r3, #15
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80018ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018ee:	d124      	bne.n	800193a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d035      	beq.n	8001968 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800190a:	b29b      	uxth	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	6a38      	ldr	r0, [r7, #32]
 8001910:	f003 fd0a 	bl	8005328 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001920:	441a      	add	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001932:	441a      	add	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	e016      	b.n	8001968 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001940:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001944:	d110      	bne.n	8001968 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800194c:	2208      	movs	r2, #8
 800194e:	4619      	mov	r1, r3
 8001950:	6a38      	ldr	r0, [r7, #32]
 8001952:	f003 fce9 	bl	8005328 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001962:	441a      	add	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699a      	ldr	r2, [r3, #24]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0210 	orr.w	r2, r2, #16
 8001976:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fe67 	bl	8005650 <USB_ReadInterrupts>
 8001982:	4603      	mov	r3, r0
 8001984:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001988:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800198c:	f040 80a7 	bne.w	8001ade <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fe6c 	bl	8005676 <USB_ReadDevAllOutEpInterrupt>
 800199e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80019a0:	e099      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 808e 	beq.w	8001aca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fe90 	bl	80056de <USB_ReadDevOutEPInterrupt>
 80019be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00c      	beq.n	80019e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019d6:	461a      	mov	r2, r3
 80019d8:	2301      	movs	r3, #1
 80019da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fea4 	bl	800272c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00c      	beq.n	8001a08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	015a      	lsls	r2, r3, #5
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019fa:	461a      	mov	r2, r3
 80019fc:	2308      	movs	r3, #8
 80019fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 ff7a 	bl	80028fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	015a      	lsls	r2, r3, #5
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4413      	add	r3, r2
 8001a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2310      	movs	r3, #16
 8001a22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d030      	beq.n	8001a90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a36:	2b80      	cmp	r3, #128	@ 0x80
 8001a38:	d109      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	3304      	adds	r3, #4
 8001a62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	78db      	ldrb	r3, [r3, #3]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f006 fa43 	bl	8007f04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	015a      	lsls	r2, r3, #5
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ac8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	3301      	adds	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f47f af62 	bne.w	80019a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fdb4 	bl	8005650 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001af2:	f040 80db 	bne.w	8001cac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fdd5 	bl	80056aa <USB_ReadDevAllInEpInterrupt>
 8001b00:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001b06:	e0cd      	b.n	8001ca4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80c2 	beq.w	8001c98 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fdfb 	bl	800571a <USB_ReadDevInEPInterrupt>
 8001b24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d057      	beq.n	8001be0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	2201      	movs	r2, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69f9      	ldr	r1, [r7, #28]
 8001b4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001b50:	4013      	ands	r3, r2
 8001b52:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b60:	461a      	mov	r2, r3
 8001b62:	2301      	movs	r3, #1
 8001b64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	799b      	ldrb	r3, [r3, #6]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d132      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3320      	adds	r3, #32
 8001b7e:	6819      	ldr	r1, [r3, #0]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4403      	add	r3, r0
 8001b8e:	331c      	adds	r3, #28
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4419      	add	r1, r3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4403      	add	r3, r0
 8001ba2:	3320      	adds	r3, #32
 8001ba4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d113      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x3a2>
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3324      	adds	r3, #36	@ 0x24
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d108      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2101      	movs	r1, #1
 8001bd0:	f003 fe02 	bl	80057d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f006 f913 	bl	8007e06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d008      	beq.n	8001bfc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c12:	461a      	mov	r2, r3
 8001c14:	2310      	movs	r3, #16
 8001c16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d008      	beq.n	8001c34 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2340      	movs	r3, #64	@ 0x40
 8001c32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d023      	beq.n	8001c86 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c40:	6a38      	ldr	r0, [r7, #32]
 8001c42:	f002 fde9 	bl	8004818 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	3310      	adds	r3, #16
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	78db      	ldrb	r3, [r3, #3]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d108      	bne.n	8001c74 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2200      	movs	r2, #0
 8001c66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f006 f95a 	bl	8007f28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c80:	461a      	mov	r2, r3
 8001c82:	2302      	movs	r3, #2
 8001c84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fcbd 	bl	8002612 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f47f af2e 	bne.w	8001b08 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 fccd 	bl	8005650 <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001cc0:	d122      	bne.n	8001d08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d108      	bne.n	8001cf2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fea4 	bl	8002a38 <HAL_PCDEx_LPM_Callback>
 8001cf0:	e002      	b.n	8001cf8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f006 f8f8 	bl	8007ee8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fc9f 	bl	8005650 <USB_ReadInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d1c:	d112      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f006 f8b4 	bl	8007e9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001d42:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fc81 	bl	8005650 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d58:	f040 80b7 	bne.w	8001eca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2110      	movs	r1, #16
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fd4e 	bl	8004818 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d80:	e046      	b.n	8001e10 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001da6:	0151      	lsls	r1, r2, #5
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	440a      	add	r2, r1
 8001dac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001db0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001dc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001de4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dfa:	0151      	lsls	r1, r2, #5
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	440a      	add	r2, r1
 8001e00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001e04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	791b      	ldrb	r3, [r3, #4]
 8001e14:	461a      	mov	r2, r3
 8001e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d3b2      	bcc.n	8001d82 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e2a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001e2e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7bdb      	ldrb	r3, [r3, #15]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d016      	beq.n	8001e66 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e48:	f043 030b 	orr.w	r3, r3, #11
 8001e4c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e5e:	f043 030b 	orr.w	r3, r3, #11
 8001e62:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e64:	e015      	b.n	8001e92 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e78:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001e7c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e8c:	f043 030b 	orr.w	r3, r3, #11
 8001e90:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ea0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001ea4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f003 fc8f 	bl	80057d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fbbe 	bl	8005650 <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ede:	d123      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fc54 	bl	8005792 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 fd0b 	bl	800490a <USB_GetDevSpeed>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681c      	ldr	r4, [r3, #0]
 8001f00:	f001 f9ca 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 8001f04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f002 fa0f 	bl	8004330 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f005 ffa0 	bl	8007e58 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 fb8f 	bl	8005650 <USB_ReadInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d10a      	bne.n	8001f52 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f005 ff7c 	bl	8007e3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f002 0208 	and.w	r2, r2, #8
 8001f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fb7a 	bl	8005650 <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	2b80      	cmp	r3, #128	@ 0x80
 8001f64:	d123      	bne.n	8001fae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f72:	2301      	movs	r3, #1
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f76:	e014      	b.n	8001fa2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fb0a 	bl	80025b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	791b      	ldrb	r3, [r3, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d3e4      	bcc.n	8001f78 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 fb4c 	bl	8005650 <USB_ReadInterrupts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fc2:	d13c      	bne.n	800203e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc8:	e02b      	b.n	8002022 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3318      	adds	r3, #24
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d115      	bne.n	800201c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ff0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da12      	bge.n	800201c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3317      	adds	r3, #23
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002012:	b2db      	uxtb	r3, r3
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 faca 	bl	80025b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	3301      	adds	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	791b      	ldrb	r3, [r3, #4]
 8002026:	461a      	mov	r2, r3
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	4293      	cmp	r3, r2
 800202c:	d3cd      	bcc.n	8001fca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800203c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fb04 	bl	8005650 <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800204e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002052:	d156      	bne.n	8002102 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002054:	2301      	movs	r3, #1
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
 8002058:	e045      	b.n	80020e6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d12e      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002082:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002084:	2b00      	cmp	r3, #0
 8002086:	da2b      	bge.n	80020e0 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	0c1a      	lsrs	r2, r3, #16
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002092:	4053      	eors	r3, r2
 8002094:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002098:	2b00      	cmp	r3, #0
 800209a:	d121      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020dc:	6053      	str	r3, [r2, #4]
            break;
 80020de:	e008      	b.n	80020f2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	3301      	adds	r3, #1
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	791b      	ldrb	r3, [r3, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d3b3      	bcc.n	800205a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002100:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 faa2 	bl	8005650 <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002116:	d10a      	bne.n	800212e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f005 ff17 	bl	8007f4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800212c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fa8c 	bl	8005650 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b04      	cmp	r3, #4
 8002140:	d115      	bne.n	800216e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f005 ff07 	bl	8007f68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	e000      	b.n	800216e <HAL_PCD_IRQHandler+0x93c>
      return;
 800216c:	bf00      	nop
    }
  }
}
 800216e:	3734      	adds	r7, #52	@ 0x34
 8002170:	46bd      	mov	sp, r7
 8002172:	bd90      	pop	{r4, r7, pc}

08002174 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_PCD_SetAddress+0x1a>
 800218a:	2302      	movs	r3, #2
 800218c:	e012      	b.n	80021b4 <HAL_PCD_SetAddress+0x40>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 f9eb 	bl	8005580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	70fb      	strb	r3, [r7, #3]
 80021ce:	460b      	mov	r3, r1
 80021d0:	803b      	strh	r3, [r7, #0]
 80021d2:	4613      	mov	r3, r2
 80021d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da0f      	bge.n	8002202 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 020f 	and.w	r2, r3, #15
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3310      	adds	r3, #16
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	705a      	strb	r2, [r3, #1]
 8002200:	e00f      	b.n	8002222 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f003 020f 	and.w	r2, r3, #15
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800222e:	883b      	ldrh	r3, [r7, #0]
 8002230:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	78ba      	ldrb	r2, [r7, #2]
 800223c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	785b      	ldrb	r3, [r3, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002250:	78bb      	ldrb	r3, [r7, #2]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d102      	bne.n	800225c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_PCD_EP_Open+0xae>
 8002266:	2302      	movs	r3, #2
 8002268:	e00e      	b.n	8002288 <HAL_PCD_EP_Open+0xcc>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68f9      	ldr	r1, [r7, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	f002 fb6b 	bl	8004954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002286:	7afb      	ldrb	r3, [r7, #11]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800229c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da0f      	bge.n	80022c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	f003 020f 	and.w	r2, r3, #15
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	3310      	adds	r3, #16
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	705a      	strb	r2, [r3, #1]
 80022c2:	e00f      	b.n	80022e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	f003 020f 	and.w	r2, r3, #15
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	3304      	adds	r3, #4
 80022dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_PCD_EP_Close+0x6e>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e00e      	b.n	800231c <HAL_PCD_EP_Close+0x8c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fba9 	bl	8004a64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	460b      	mov	r3, r1
 8002332:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	f003 020f 	and.w	r2, r3, #15
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4413      	add	r3, r2
 800234a:	3304      	adds	r3, #4
 800234c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2200      	movs	r2, #0
 800235e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2200      	movs	r2, #0
 8002364:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002366:	7afb      	ldrb	r3, [r7, #11]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	b2da      	uxtb	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	799b      	ldrb	r3, [r3, #6]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d102      	bne.n	8002380 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	799b      	ldrb	r3, [r3, #6]
 8002388:	461a      	mov	r2, r3
 800238a:	6979      	ldr	r1, [r7, #20]
 800238c:	f002 fc46 	bl	8004c1c <USB_EPStartXfer>

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	f003 020f 	and.w	r2, r3, #15
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80023bc:	681b      	ldr	r3, [r3, #0]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	460b      	mov	r3, r1
 80023d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 020f 	and.w	r2, r3, #15
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	3310      	adds	r3, #16
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	3304      	adds	r3, #4
 80023f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2201      	movs	r2, #1
 8002408:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800240a:	7afb      	ldrb	r3, [r7, #11]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	b2da      	uxtb	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	799b      	ldrb	r3, [r3, #6]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d102      	bne.n	8002424 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	799b      	ldrb	r3, [r3, #6]
 800242c:	461a      	mov	r2, r3
 800242e:	6979      	ldr	r1, [r7, #20]
 8002430:	f002 fbf4 	bl	8004c1c <USB_EPStartXfer>

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	7912      	ldrb	r2, [r2, #4]
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e04f      	b.n	80024fc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800245c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002460:	2b00      	cmp	r3, #0
 8002462:	da0f      	bge.n	8002484 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 020f 	and.w	r2, r3, #15
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	3310      	adds	r3, #16
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	705a      	strb	r2, [r3, #1]
 8002482:	e00d      	b.n	80024a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	3304      	adds	r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_PCD_EP_SetStall+0x82>
 80024bc:	2302      	movs	r3, #2
 80024be:	e01d      	b.n	80024fc <HAL_PCD_EP_SetStall+0xbe>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 ff82 	bl	80053d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7999      	ldrb	r1, [r3, #6]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024ec:	461a      	mov	r2, r3
 80024ee:	f003 f973 	bl	80057d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	7912      	ldrb	r2, [r2, #4]
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e042      	b.n	80025a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002526:	2b00      	cmp	r3, #0
 8002528:	da0f      	bge.n	800254a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f003 020f 	and.w	r2, r3, #15
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	3310      	adds	r3, #16
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	3304      	adds	r3, #4
 8002540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	705a      	strb	r2, [r3, #1]
 8002548:	e00f      	b.n	800256a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f003 020f 	and.w	r2, r3, #15
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_PCD_EP_ClrStall+0x86>
 8002586:	2302      	movs	r3, #2
 8002588:	e00e      	b.n	80025a8 <HAL_PCD_EP_ClrStall+0xa4>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68f9      	ldr	r1, [r7, #12]
 8002598:	4618      	mov	r0, r3
 800259a:	f002 ff8b 	bl	80054b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80025bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	da0c      	bge.n	80025de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 020f 	and.w	r2, r3, #15
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	3310      	adds	r3, #16
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	3304      	adds	r3, #4
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e00c      	b.n	80025f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f003 020f 	and.w	r2, r3, #15
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	3304      	adds	r3, #4
 80025f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68f9      	ldr	r1, [r7, #12]
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fdaa 	bl	8005158 <USB_EPStopXfer>
 8002604:	4603      	mov	r3, r0
 8002606:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002608:	7afb      	ldrb	r3, [r7, #11]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b08a      	sub	sp, #40	@ 0x28
 8002616:	af02      	add	r7, sp, #8
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	3310      	adds	r3, #16
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	3304      	adds	r3, #4
 8002638:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	429a      	cmp	r2, r3
 8002644:	d901      	bls.n	800264a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06b      	b.n	8002722 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	429a      	cmp	r2, r3
 800265e:	d902      	bls.n	8002666 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3303      	adds	r3, #3
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800266e:	e02a      	b.n	80026c6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	429a      	cmp	r2, r3
 8002684:	d902      	bls.n	800268c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3303      	adds	r3, #3
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	4603      	mov	r3, r0
 80026a8:	6978      	ldr	r0, [r7, #20]
 80026aa:	f002 fdff 	bl	80052ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	441a      	add	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	441a      	add	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d809      	bhi.n	80026f0 <PCD_WriteEmptyTxFifo+0xde>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d203      	bcs.n	80026f0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1bf      	bne.n	8002670 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d811      	bhi.n	8002720 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	2201      	movs	r2, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	43db      	mvns	r3, r3
 8002716:	6939      	ldr	r1, [r7, #16]
 8002718:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800271c:	4013      	ands	r3, r2
 800271e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	333c      	adds	r3, #60	@ 0x3c
 8002744:	3304      	adds	r3, #4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	799b      	ldrb	r3, [r3, #6]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d17b      	bne.n	800285a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	4a61      	ldr	r2, [pc, #388]	@ (80028f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	f240 80b9 	bls.w	80028e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80b3 	beq.w	80028e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800278e:	461a      	mov	r2, r3
 8002790:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002794:	6093      	str	r3, [r2, #8]
 8002796:	e0a7      	b.n	80028e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ae:	461a      	mov	r2, r3
 80027b0:	2320      	movs	r3, #32
 80027b2:	6093      	str	r3, [r2, #8]
 80027b4:	e098      	b.n	80028e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 8093 	bne.w	80028e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	4a4b      	ldr	r2, [pc, #300]	@ (80028f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d90f      	bls.n	80027ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e0:	461a      	mov	r2, r3
 80027e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e6:	6093      	str	r3, [r2, #8]
 80027e8:	e07e      	b.n	80028e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	0159      	lsls	r1, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	440b      	add	r3, r1
 800280c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002816:	1ad2      	subs	r2, r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d114      	bne.n	800284c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002834:	461a      	mov	r2, r3
 8002836:	2101      	movs	r1, #1
 8002838:	f002 ffce 	bl	80057d8 <USB_EP0_OutStart>
 800283c:	e006      	b.n	800284c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	441a      	add	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f005 fabc 	bl	8007dd0 <HAL_PCD_DataOutStageCallback>
 8002858:	e046      	b.n	80028e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	4a26      	ldr	r2, [pc, #152]	@ (80028f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d124      	bne.n	80028ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002878:	461a      	mov	r2, r3
 800287a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800287e:	6093      	str	r3, [r2, #8]
 8002880:	e032      	b.n	80028e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002898:	461a      	mov	r2, r3
 800289a:	2320      	movs	r3, #32
 800289c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f005 fa93 	bl	8007dd0 <HAL_PCD_DataOutStageCallback>
 80028aa:	e01d      	b.n	80028e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d114      	bne.n	80028dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028d4:	461a      	mov	r2, r3
 80028d6:	2100      	movs	r1, #0
 80028d8:	f002 ff7e 	bl	80057d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f005 fa74 	bl	8007dd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	4f54300a 	.word	0x4f54300a
 80028f8:	4f54310a 	.word	0x4f54310a

080028fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	333c      	adds	r3, #60	@ 0x3c
 8002914:	3304      	adds	r3, #4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4a15      	ldr	r2, [pc, #84]	@ (8002984 <PCD_EP_OutSetupPacket_int+0x88>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d90e      	bls.n	8002950 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002948:	461a      	mov	r2, r3
 800294a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800294e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f005 fa2b 	bl	8007dac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a0a      	ldr	r2, [pc, #40]	@ (8002984 <PCD_EP_OutSetupPacket_int+0x88>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d90c      	bls.n	8002978 <PCD_EP_OutSetupPacket_int+0x7c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	799b      	ldrb	r3, [r3, #6]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d108      	bne.n	8002978 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002970:	461a      	mov	r2, r3
 8002972:	2101      	movs	r1, #1
 8002974:	f002 ff30 	bl	80057d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	4f54300a 	.word	0x4f54300a

08002988 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	70fb      	strb	r3, [r7, #3]
 8002994:	4613      	mov	r3, r2
 8002996:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029a6:	883b      	ldrh	r3, [r7, #0]
 80029a8:	0419      	lsls	r1, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80029b4:	e028      	b.n	8002a08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4413      	add	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	e00d      	b.n	80029e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	3340      	adds	r3, #64	@ 0x40
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4413      	add	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	3301      	adds	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3ec      	bcc.n	80029ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029f0:	883b      	ldrh	r3, [r7, #0]
 80029f2:	0418      	lsls	r0, r3, #16
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6819      	ldr	r1, [r3, #0]
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	4302      	orrs	r2, r0
 8002a00:	3340      	adds	r3, #64	@ 0x40
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e267      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a6e:	4b88      	ldr	r3, [pc, #544]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b82      	ldr	r3, [pc, #520]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b7e      	ldr	r3, [pc, #504]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e242      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x74>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b70      	ldr	r3, [pc, #448]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6f      	ldr	r2, [pc, #444]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6c      	ldr	r2, [pc, #432]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	4b69      	ldr	r3, [pc, #420]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a68      	ldr	r2, [pc, #416]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b66      	ldr	r3, [pc, #408]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fa3c 	bl	8000f84 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fa38 	bl	8000f84 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e207      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5b      	ldr	r3, [pc, #364]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fa28 	bl	8000f84 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fa24 	bl	8000f84 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1f3      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b51      	ldr	r3, [pc, #324]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b66:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c7      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	@ (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe f9dd 	bl	8000f84 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe f9d9 	bl	8000f84 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a8      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	@ (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe f9bc 	bl	8000f84 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe f9b8 	bl	8000f84 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e187      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe f99c 	bl	8000f84 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe f998 	bl	8000f84 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e167      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe f985 	bl	8000f84 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe f981 	bl	8000f84 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e150      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b81      	ldr	r3, [pc, #516]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7d      	ldr	r3, [pc, #500]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	4a7c      	ldr	r2, [pc, #496]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b77      	ldr	r3, [pc, #476]	@ (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b74      	ldr	r3, [pc, #464]	@ (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	@ (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe f941 	bl	8000f84 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe f93d 	bl	8000f84 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e10c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
 8002d2c:	4b64      	ldr	r3, [pc, #400]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d30:	4a63      	ldr	r2, [pc, #396]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x30c>
 8002d42:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	4a5e      	ldr	r2, [pc, #376]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	4a5b      	ldr	r2, [pc, #364]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d5c:	4b58      	ldr	r3, [pc, #352]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a57      	ldr	r2, [pc, #348]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d68:	4b55      	ldr	r3, [pc, #340]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	4a54      	ldr	r2, [pc, #336]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe f902 	bl	8000f84 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe f8fe 	bl	8000f84 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0cb      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b49      	ldr	r3, [pc, #292]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fe f8ec 	bl	8000f84 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe f8e8 	bl	8000f84 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0b5      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	4a38      	ldr	r2, [pc, #224]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a1 	beq.w	8002f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b34      	ldr	r3, [pc, #208]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d05c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d141      	bne.n	8002e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b31      	ldr	r3, [pc, #196]	@ (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe f8bc 	bl	8000f84 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe f8b8 	bl	8000f84 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e087      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b27      	ldr	r3, [pc, #156]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	491b      	ldr	r1, [pc, #108]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe f891 	bl	8000f84 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe f88d 	bl	8000f84 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e05c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x416>
 8002e84:	e054      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f87a 	bl	8000f84 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe f876 	bl	8000f84 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e045      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e038      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x4ec>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d121      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11a      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cc      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b68      	ldr	r3, [pc, #416]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d90c      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b65      	ldr	r3, [pc, #404]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3b      	ldr	r3, [pc, #236]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e067      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b37      	ldr	r3, [pc, #220]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4934      	ldr	r1, [pc, #208]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fd ffa8 	bl	8000f84 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fd ffa4 	bl	8000f84 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2b      	ldr	r3, [pc, #172]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b25      	ldr	r3, [pc, #148]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d20c      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b22      	ldr	r3, [pc, #136]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd ff08 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	0800c8c0 	.word	0x0800c8c0
 8003104:	20000000 	.word	0x20000000
 8003108:	20000004 	.word	0x20000004

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b090      	sub	sp, #64	@ 0x40
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003124:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d00d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x40>
 8003130:	2b08      	cmp	r3, #8
 8003132:	f200 80a1 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x16c>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x3a>
 800313e:	e09b      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b53      	ldr	r3, [pc, #332]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x184>)
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003144:	e09b      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003146:	4b53      	ldr	r3, [pc, #332]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x188>)
 8003148:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800314a:	e098      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4b4f      	ldr	r3, [pc, #316]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003154:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003156:	4b4d      	ldr	r3, [pc, #308]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d028      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b4a      	ldr	r3, [pc, #296]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2200      	movs	r2, #0
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	627a      	str	r2, [r7, #36]	@ 0x24
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003174:	2100      	movs	r1, #0
 8003176:	4b47      	ldr	r3, [pc, #284]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x188>)
 8003178:	fb03 f201 	mul.w	r2, r3, r1
 800317c:	2300      	movs	r3, #0
 800317e:	fb00 f303 	mul.w	r3, r0, r3
 8003182:	4413      	add	r3, r2
 8003184:	4a43      	ldr	r2, [pc, #268]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x188>)
 8003186:	fba0 1202 	umull	r1, r2, r0, r2
 800318a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800318c:	460a      	mov	r2, r1
 800318e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003192:	4413      	add	r3, r2
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003198:	2200      	movs	r2, #0
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	61fa      	str	r2, [r7, #28]
 800319e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031a6:	f7fd f873 	bl	8000290 <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4613      	mov	r3, r2
 80031b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031b2:	e053      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b4:	4b35      	ldr	r3, [pc, #212]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	2200      	movs	r2, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	617a      	str	r2, [r7, #20]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031c6:	f04f 0b00 	mov.w	fp, #0
 80031ca:	4652      	mov	r2, sl
 80031cc:	465b      	mov	r3, fp
 80031ce:	f04f 0000 	mov.w	r0, #0
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	0159      	lsls	r1, r3, #5
 80031d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031dc:	0150      	lsls	r0, r2, #5
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	ebb2 080a 	subs.w	r8, r2, sl
 80031e6:	eb63 090b 	sbc.w	r9, r3, fp
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031fe:	ebb2 0408 	subs.w	r4, r2, r8
 8003202:	eb63 0509 	sbc.w	r5, r3, r9
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	00eb      	lsls	r3, r5, #3
 8003210:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003214:	00e2      	lsls	r2, r4, #3
 8003216:	4614      	mov	r4, r2
 8003218:	461d      	mov	r5, r3
 800321a:	eb14 030a 	adds.w	r3, r4, sl
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	eb45 030b 	adc.w	r3, r5, fp
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003232:	4629      	mov	r1, r5
 8003234:	028b      	lsls	r3, r1, #10
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800323c:	4621      	mov	r1, r4
 800323e:	028a      	lsls	r2, r1, #10
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003246:	2200      	movs	r2, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	60fa      	str	r2, [r7, #12]
 800324c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003250:	f7fd f81e 	bl	8000290 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800326c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003276:	e002      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x184>)
 800327a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800327c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003280:	4618      	mov	r0, r3
 8003282:	3740      	adds	r7, #64	@ 0x40
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	00f42400 	.word	0x00f42400
 8003294:	017d7840 	.word	0x017d7840

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	0800c8d0 	.word	0x0800c8d0

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffdc 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0b5b      	lsrs	r3, r3, #13
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	0800c8d0 	.word	0x0800c8d0

08003300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07b      	b.n	800340a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003322:	d009      	beq.n	8003338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	61da      	str	r2, [r3, #28]
 800332a:	e005      	b.n	8003338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd faf2 	bl	800093c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800336e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033bc:	ea42 0103 	orr.w	r1, r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0104 	and.w	r1, r3, #4
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	f003 0210 	and.w	r2, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e041      	b.n	80034a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fd fc41 	bl	8000cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f000 f99f 	bl	8003794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d109      	bne.n	80034d4 <HAL_TIM_PWM_Start+0x24>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	e022      	b.n	800351a <HAL_TIM_PWM_Start+0x6a>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d109      	bne.n	80034ee <HAL_TIM_PWM_Start+0x3e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e015      	b.n	800351a <HAL_TIM_PWM_Start+0x6a>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d109      	bne.n	8003508 <HAL_TIM_PWM_Start+0x58>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e008      	b.n	800351a <HAL_TIM_PWM_Start+0x6a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e068      	b.n	80035f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d104      	bne.n	8003532 <HAL_TIM_PWM_Start+0x82>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003530:	e013      	b.n	800355a <HAL_TIM_PWM_Start+0xaa>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d104      	bne.n	8003542 <HAL_TIM_PWM_Start+0x92>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003540:	e00b      	b.n	800355a <HAL_TIM_PWM_Start+0xaa>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d104      	bne.n	8003552 <HAL_TIM_PWM_Start+0xa2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003550:	e003      	b.n	800355a <HAL_TIM_PWM_Start+0xaa>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2201      	movs	r2, #1
 8003560:	6839      	ldr	r1, [r7, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb28 	bl	8003bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a23      	ldr	r2, [pc, #140]	@ (80035fc <HAL_TIM_PWM_Start+0x14c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d107      	bne.n	8003582 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1d      	ldr	r2, [pc, #116]	@ (80035fc <HAL_TIM_PWM_Start+0x14c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003594:	d013      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a19      	ldr	r2, [pc, #100]	@ (8003600 <HAL_TIM_PWM_Start+0x150>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a17      	ldr	r2, [pc, #92]	@ (8003604 <HAL_TIM_PWM_Start+0x154>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a16      	ldr	r2, [pc, #88]	@ (8003608 <HAL_TIM_PWM_Start+0x158>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_TIM_PWM_Start+0x10e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a14      	ldr	r2, [pc, #80]	@ (800360c <HAL_TIM_PWM_Start+0x15c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d111      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d010      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	e007      	b.n	80035f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40010000 	.word	0x40010000
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40014000 	.word	0x40014000

08003610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800362a:	2302      	movs	r3, #2
 800362c:	e0ae      	b.n	800378c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0c      	cmp	r3, #12
 800363a:	f200 809f 	bhi.w	800377c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800363e:	a201      	add	r2, pc, #4	@ (adr r2, 8003644 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003679 	.word	0x08003679
 8003648:	0800377d 	.word	0x0800377d
 800364c:	0800377d 	.word	0x0800377d
 8003650:	0800377d 	.word	0x0800377d
 8003654:	080036b9 	.word	0x080036b9
 8003658:	0800377d 	.word	0x0800377d
 800365c:	0800377d 	.word	0x0800377d
 8003660:	0800377d 	.word	0x0800377d
 8003664:	080036fb 	.word	0x080036fb
 8003668:	0800377d 	.word	0x0800377d
 800366c:	0800377d 	.word	0x0800377d
 8003670:	0800377d 	.word	0x0800377d
 8003674:	0800373b 	.word	0x0800373b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f90e 	bl	80038a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0204 	bic.w	r2, r2, #4
 80036a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6999      	ldr	r1, [r3, #24]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	619a      	str	r2, [r3, #24]
      break;
 80036b6:	e064      	b.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f954 	bl	800396c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6999      	ldr	r1, [r3, #24]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	619a      	str	r2, [r3, #24]
      break;
 80036f8:	e043      	b.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f99f 	bl	8003a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0208 	orr.w	r2, r2, #8
 8003714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0204 	bic.w	r2, r2, #4
 8003724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69d9      	ldr	r1, [r3, #28]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	61da      	str	r2, [r3, #28]
      break;
 8003738:	e023      	b.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f9e9 	bl	8003b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69d9      	ldr	r1, [r3, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	61da      	str	r2, [r3, #28]
      break;
 800377a:	e002      	b.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
      break;
 8003780:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a37      	ldr	r2, [pc, #220]	@ (8003884 <TIM_Base_SetConfig+0xf0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00f      	beq.n	80037cc <TIM_Base_SetConfig+0x38>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b2:	d00b      	beq.n	80037cc <TIM_Base_SetConfig+0x38>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a34      	ldr	r2, [pc, #208]	@ (8003888 <TIM_Base_SetConfig+0xf4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d007      	beq.n	80037cc <TIM_Base_SetConfig+0x38>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a33      	ldr	r2, [pc, #204]	@ (800388c <TIM_Base_SetConfig+0xf8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d003      	beq.n	80037cc <TIM_Base_SetConfig+0x38>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a32      	ldr	r2, [pc, #200]	@ (8003890 <TIM_Base_SetConfig+0xfc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d108      	bne.n	80037de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a28      	ldr	r2, [pc, #160]	@ (8003884 <TIM_Base_SetConfig+0xf0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01b      	beq.n	800381e <TIM_Base_SetConfig+0x8a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ec:	d017      	beq.n	800381e <TIM_Base_SetConfig+0x8a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a25      	ldr	r2, [pc, #148]	@ (8003888 <TIM_Base_SetConfig+0xf4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <TIM_Base_SetConfig+0x8a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a24      	ldr	r2, [pc, #144]	@ (800388c <TIM_Base_SetConfig+0xf8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00f      	beq.n	800381e <TIM_Base_SetConfig+0x8a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a23      	ldr	r2, [pc, #140]	@ (8003890 <TIM_Base_SetConfig+0xfc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00b      	beq.n	800381e <TIM_Base_SetConfig+0x8a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <TIM_Base_SetConfig+0x100>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d007      	beq.n	800381e <TIM_Base_SetConfig+0x8a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a21      	ldr	r2, [pc, #132]	@ (8003898 <TIM_Base_SetConfig+0x104>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d003      	beq.n	800381e <TIM_Base_SetConfig+0x8a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a20      	ldr	r2, [pc, #128]	@ (800389c <TIM_Base_SetConfig+0x108>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d108      	bne.n	8003830 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a0c      	ldr	r2, [pc, #48]	@ (8003884 <TIM_Base_SetConfig+0xf0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d103      	bne.n	800385e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f043 0204 	orr.w	r2, r3, #4
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f023 0201 	bic.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 0302 	bic.w	r3, r3, #2
 80038e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <TIM_OC1_SetConfig+0xc8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10c      	bne.n	8003916 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0308 	bic.w	r3, r3, #8
 8003902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a13      	ldr	r2, [pc, #76]	@ (8003968 <TIM_OC1_SetConfig+0xc8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d111      	bne.n	8003942 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40010000 	.word	0x40010000

0800396c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f023 0210 	bic.w	r2, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0320 	bic.w	r3, r3, #32
 80039b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <TIM_OC2_SetConfig+0xd4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10d      	bne.n	80039e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a15      	ldr	r2, [pc, #84]	@ (8003a40 <TIM_OC2_SetConfig+0xd4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d113      	bne.n	8003a18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40010000 	.word	0x40010000

08003a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0303 	bic.w	r3, r3, #3
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <TIM_OC3_SetConfig+0xd0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d10d      	bne.n	8003abe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a14      	ldr	r2, [pc, #80]	@ (8003b14 <TIM_OC3_SetConfig+0xd0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d113      	bne.n	8003aee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40010000 	.word	0x40010000

08003b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	031b      	lsls	r3, r3, #12
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a10      	ldr	r2, [pc, #64]	@ (8003bb4 <TIM_OC4_SetConfig+0x9c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d109      	bne.n	8003b8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	019b      	lsls	r3, r3, #6
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000

08003bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2201      	movs	r2, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a1a      	ldr	r2, [r3, #32]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	401a      	ands	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e050      	b.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d018      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c68:	d013      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a18      	ldr	r2, [pc, #96]	@ (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a13      	ldr	r2, [pc, #76]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10c      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40014000 	.word	0x40014000

08003ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e042      	b.n	8003d78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd f864 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	@ 0x24
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f82b 	bl	8003d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b0c0      	sub	sp, #256	@ 0x100
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9c:	68d9      	ldr	r1, [r3, #12]
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	ea40 0301 	orr.w	r3, r0, r1
 8003da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dd8:	f021 010c 	bic.w	r1, r1, #12
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003de6:	430b      	orrs	r3, r1
 8003de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	6999      	ldr	r1, [r3, #24]
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	ea40 0301 	orr.w	r3, r0, r1
 8003e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800404c <UART_SetConfig+0x2cc>)
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d005      	beq.n	8003e20 <UART_SetConfig+0xa0>
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004050 <UART_SetConfig+0x2d0>)
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d104      	bne.n	8003e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7ff fa5a 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8003e24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e28:	e003      	b.n	8003e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e2a:	f7ff fa41 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8003e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e3c:	f040 810c 	bne.w	8004058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e52:	4622      	mov	r2, r4
 8003e54:	462b      	mov	r3, r5
 8003e56:	1891      	adds	r1, r2, r2
 8003e58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e5a:	415b      	adcs	r3, r3
 8003e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e62:	4621      	mov	r1, r4
 8003e64:	eb12 0801 	adds.w	r8, r2, r1
 8003e68:	4629      	mov	r1, r5
 8003e6a:	eb43 0901 	adc.w	r9, r3, r1
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e82:	4690      	mov	r8, r2
 8003e84:	4699      	mov	r9, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	eb18 0303 	adds.w	r3, r8, r3
 8003e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e90:	462b      	mov	r3, r5
 8003e92:	eb49 0303 	adc.w	r3, r9, r3
 8003e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eae:	460b      	mov	r3, r1
 8003eb0:	18db      	adds	r3, r3, r3
 8003eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	eb42 0303 	adc.w	r3, r2, r3
 8003eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ec4:	f7fc f9e4 	bl	8000290 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4b61      	ldr	r3, [pc, #388]	@ (8004054 <UART_SetConfig+0x2d4>)
 8003ece:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	011c      	lsls	r4, r3, #4
 8003ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ef8:	4641      	mov	r1, r8
 8003efa:	eb12 0a01 	adds.w	sl, r2, r1
 8003efe:	4649      	mov	r1, r9
 8003f00:	eb43 0b01 	adc.w	fp, r3, r1
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f18:	4692      	mov	sl, r2
 8003f1a:	469b      	mov	fp, r3
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f26:	464b      	mov	r3, r9
 8003f28:	eb4b 0303 	adc.w	r3, fp, r3
 8003f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f44:	460b      	mov	r3, r1
 8003f46:	18db      	adds	r3, r3, r3
 8003f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f5a:	f7fc f999 	bl	8000290 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	4b3b      	ldr	r3, [pc, #236]	@ (8004054 <UART_SetConfig+0x2d4>)
 8003f66:	fba3 2301 	umull	r2, r3, r3, r1
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2264      	movs	r2, #100	@ 0x64
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	1acb      	subs	r3, r1, r3
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f7a:	4b36      	ldr	r3, [pc, #216]	@ (8004054 <UART_SetConfig+0x2d4>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f88:	441c      	add	r4, r3
 8003f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fac:	4641      	mov	r1, r8
 8003fae:	1851      	adds	r1, r2, r1
 8003fb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	00cb      	lsls	r3, r1, #3
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fce:	4651      	mov	r1, sl
 8003fd0:	00ca      	lsls	r2, r1, #3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004000:	460b      	mov	r3, r1
 8004002:	18db      	adds	r3, r3, r3
 8004004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004006:	4613      	mov	r3, r2
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004016:	f7fc f93b 	bl	8000290 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <UART_SetConfig+0x2d4>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	@ 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	3332      	adds	r3, #50	@ 0x32
 8004032:	4a08      	ldr	r2, [pc, #32]	@ (8004054 <UART_SetConfig+0x2d4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 0207 	and.w	r2, r3, #7
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4422      	add	r2, r4
 8004046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004048:	e106      	b.n	8004258 <UART_SetConfig+0x4d8>
 800404a:	bf00      	nop
 800404c:	40011000 	.word	0x40011000
 8004050:	40011400 	.word	0x40011400
 8004054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800406a:	4642      	mov	r2, r8
 800406c:	464b      	mov	r3, r9
 800406e:	1891      	adds	r1, r2, r2
 8004070:	6239      	str	r1, [r7, #32]
 8004072:	415b      	adcs	r3, r3
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
 8004076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800407a:	4641      	mov	r1, r8
 800407c:	1854      	adds	r4, r2, r1
 800407e:	4649      	mov	r1, r9
 8004080:	eb43 0501 	adc.w	r5, r3, r1
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	00eb      	lsls	r3, r5, #3
 800408e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004092:	00e2      	lsls	r2, r4, #3
 8004094:	4614      	mov	r4, r2
 8004096:	461d      	mov	r5, r3
 8004098:	4643      	mov	r3, r8
 800409a:	18e3      	adds	r3, r4, r3
 800409c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040a0:	464b      	mov	r3, r9
 80040a2:	eb45 0303 	adc.w	r3, r5, r3
 80040a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040c6:	4629      	mov	r1, r5
 80040c8:	008b      	lsls	r3, r1, #2
 80040ca:	4621      	mov	r1, r4
 80040cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d0:	4621      	mov	r1, r4
 80040d2:	008a      	lsls	r2, r1, #2
 80040d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040d8:	f7fc f8da 	bl	8000290 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b60      	ldr	r3, [pc, #384]	@ (8004264 <UART_SetConfig+0x4e4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	61b9      	str	r1, [r7, #24]
 8004104:	415b      	adcs	r3, r3
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800410c:	4641      	mov	r1, r8
 800410e:	1851      	adds	r1, r2, r1
 8004110:	6139      	str	r1, [r7, #16]
 8004112:	4649      	mov	r1, r9
 8004114:	414b      	adcs	r3, r1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004124:	4659      	mov	r1, fp
 8004126:	00cb      	lsls	r3, r1, #3
 8004128:	4651      	mov	r1, sl
 800412a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412e:	4651      	mov	r1, sl
 8004130:	00ca      	lsls	r2, r1, #3
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	4603      	mov	r3, r0
 8004138:	4642      	mov	r2, r8
 800413a:	189b      	adds	r3, r3, r2
 800413c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004140:	464b      	mov	r3, r9
 8004142:	460a      	mov	r2, r1
 8004144:	eb42 0303 	adc.w	r3, r2, r3
 8004148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004156:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004164:	4649      	mov	r1, r9
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	4641      	mov	r1, r8
 800416a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416e:	4641      	mov	r1, r8
 8004170:	008a      	lsls	r2, r1, #2
 8004172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004176:	f7fc f88b 	bl	8000290 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4611      	mov	r1, r2
 8004180:	4b38      	ldr	r3, [pc, #224]	@ (8004264 <UART_SetConfig+0x4e4>)
 8004182:	fba3 2301 	umull	r2, r3, r3, r1
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2264      	movs	r2, #100	@ 0x64
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	1acb      	subs	r3, r1, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	@ 0x32
 8004194:	4a33      	ldr	r2, [pc, #204]	@ (8004264 <UART_SetConfig+0x4e4>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041a0:	441c      	add	r4, r3
 80041a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a6:	2200      	movs	r2, #0
 80041a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80041aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80041ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	415b      	adcs	r3, r3
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c0:	4641      	mov	r1, r8
 80041c2:	1851      	adds	r1, r2, r1
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	4649      	mov	r1, r9
 80041c8:	414b      	adcs	r3, r1
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041d8:	4659      	mov	r1, fp
 80041da:	00cb      	lsls	r3, r1, #3
 80041dc:	4651      	mov	r1, sl
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	4651      	mov	r1, sl
 80041e4:	00ca      	lsls	r2, r1, #3
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	4642      	mov	r2, r8
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041f2:	464b      	mov	r3, r9
 80041f4:	460a      	mov	r2, r1
 80041f6:	eb42 0303 	adc.w	r3, r2, r3
 80041fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	663b      	str	r3, [r7, #96]	@ 0x60
 8004206:	667a      	str	r2, [r7, #100]	@ 0x64
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004214:	4649      	mov	r1, r9
 8004216:	008b      	lsls	r3, r1, #2
 8004218:	4641      	mov	r1, r8
 800421a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421e:	4641      	mov	r1, r8
 8004220:	008a      	lsls	r2, r1, #2
 8004222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004226:	f7fc f833 	bl	8000290 <__aeabi_uldivmod>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4b0d      	ldr	r3, [pc, #52]	@ (8004264 <UART_SetConfig+0x4e4>)
 8004230:	fba3 1302 	umull	r1, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	2164      	movs	r1, #100	@ 0x64
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	3332      	adds	r3, #50	@ 0x32
 8004242:	4a08      	ldr	r2, [pc, #32]	@ (8004264 <UART_SetConfig+0x4e4>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	f003 020f 	and.w	r2, r3, #15
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4422      	add	r2, r4
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800425e:	46bd      	mov	sp, r7
 8004260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004264:	51eb851f 	.word	0x51eb851f

08004268 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004268:	b084      	sub	sp, #16
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	f107 001c 	add.w	r0, r7, #28
 8004276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800427a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800427e:	2b01      	cmp	r3, #1
 8004280:	d123      	bne.n	80042ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f001 fae8 	bl	8005894 <USB_CoreReset>
 80042c4:	4603      	mov	r3, r0
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e01b      	b.n	8004302 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f001 fadc 	bl	8005894 <USB_CoreReset>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80042f4:	e005      	b.n	8004302 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004302:	7fbb      	ldrb	r3, [r7, #30]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d10b      	bne.n	8004320 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f043 0206 	orr.w	r2, r3, #6
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800432c:	b004      	add	sp, #16
 800432e:	4770      	bx	lr

08004330 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d165      	bne.n	8004410 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a41      	ldr	r2, [pc, #260]	@ (800444c <USB_SetTurnaroundTime+0x11c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d906      	bls.n	800435a <USB_SetTurnaroundTime+0x2a>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4a40      	ldr	r2, [pc, #256]	@ (8004450 <USB_SetTurnaroundTime+0x120>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d202      	bcs.n	800435a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004354:	230f      	movs	r3, #15
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e062      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a3c      	ldr	r2, [pc, #240]	@ (8004450 <USB_SetTurnaroundTime+0x120>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d306      	bcc.n	8004370 <USB_SetTurnaroundTime+0x40>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4a3b      	ldr	r2, [pc, #236]	@ (8004454 <USB_SetTurnaroundTime+0x124>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d202      	bcs.n	8004370 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800436a:	230e      	movs	r3, #14
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e057      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a38      	ldr	r2, [pc, #224]	@ (8004454 <USB_SetTurnaroundTime+0x124>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d306      	bcc.n	8004386 <USB_SetTurnaroundTime+0x56>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4a37      	ldr	r2, [pc, #220]	@ (8004458 <USB_SetTurnaroundTime+0x128>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d202      	bcs.n	8004386 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004380:	230d      	movs	r3, #13
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e04c      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4a33      	ldr	r2, [pc, #204]	@ (8004458 <USB_SetTurnaroundTime+0x128>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d306      	bcc.n	800439c <USB_SetTurnaroundTime+0x6c>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a32      	ldr	r2, [pc, #200]	@ (800445c <USB_SetTurnaroundTime+0x12c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d802      	bhi.n	800439c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004396:	230c      	movs	r3, #12
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e041      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a2f      	ldr	r2, [pc, #188]	@ (800445c <USB_SetTurnaroundTime+0x12c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d906      	bls.n	80043b2 <USB_SetTurnaroundTime+0x82>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004460 <USB_SetTurnaroundTime+0x130>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d802      	bhi.n	80043b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043ac:	230b      	movs	r3, #11
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e036      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004460 <USB_SetTurnaroundTime+0x130>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d906      	bls.n	80043c8 <USB_SetTurnaroundTime+0x98>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4a29      	ldr	r2, [pc, #164]	@ (8004464 <USB_SetTurnaroundTime+0x134>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d802      	bhi.n	80043c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043c2:	230a      	movs	r3, #10
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e02b      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4a26      	ldr	r2, [pc, #152]	@ (8004464 <USB_SetTurnaroundTime+0x134>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d906      	bls.n	80043de <USB_SetTurnaroundTime+0xae>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4a25      	ldr	r2, [pc, #148]	@ (8004468 <USB_SetTurnaroundTime+0x138>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d202      	bcs.n	80043de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043d8:	2309      	movs	r3, #9
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e020      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4a21      	ldr	r2, [pc, #132]	@ (8004468 <USB_SetTurnaroundTime+0x138>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d306      	bcc.n	80043f4 <USB_SetTurnaroundTime+0xc4>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4a20      	ldr	r2, [pc, #128]	@ (800446c <USB_SetTurnaroundTime+0x13c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d802      	bhi.n	80043f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043ee:	2308      	movs	r3, #8
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e015      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4a1d      	ldr	r2, [pc, #116]	@ (800446c <USB_SetTurnaroundTime+0x13c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d906      	bls.n	800440a <USB_SetTurnaroundTime+0xda>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004470 <USB_SetTurnaroundTime+0x140>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d202      	bcs.n	800440a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004404:	2307      	movs	r3, #7
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e00a      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800440a:	2306      	movs	r3, #6
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e007      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004416:	2309      	movs	r3, #9
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e001      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800441c:	2309      	movs	r3, #9
 800441e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	00d8acbf 	.word	0x00d8acbf
 8004450:	00e4e1c0 	.word	0x00e4e1c0
 8004454:	00f42400 	.word	0x00f42400
 8004458:	01067380 	.word	0x01067380
 800445c:	011a499f 	.word	0x011a499f
 8004460:	01312cff 	.word	0x01312cff
 8004464:	014ca43f 	.word	0x014ca43f
 8004468:	016e3600 	.word	0x016e3600
 800446c:	01a6ab1f 	.word	0x01a6ab1f
 8004470:	01e84800 	.word	0x01e84800

08004474 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f023 0201 	bic.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d115      	bne.n	8004506 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044e6:	200a      	movs	r0, #10
 80044e8:	f7fc fd58 	bl	8000f9c <HAL_Delay>
      ms += 10U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	330a      	adds	r3, #10
 80044f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 f93f 	bl	8005776 <USB_GetMode>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d01e      	beq.n	800453c <USB_SetCurrentMode+0x84>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2bc7      	cmp	r3, #199	@ 0xc7
 8004502:	d9f0      	bls.n	80044e6 <USB_SetCurrentMode+0x2e>
 8004504:	e01a      	b.n	800453c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d115      	bne.n	8004538 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004518:	200a      	movs	r0, #10
 800451a:	f7fc fd3f 	bl	8000f9c <HAL_Delay>
      ms += 10U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	330a      	adds	r3, #10
 8004522:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f001 f926 	bl	8005776 <USB_GetMode>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <USB_SetCurrentMode+0x84>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2bc7      	cmp	r3, #199	@ 0xc7
 8004534:	d9f0      	bls.n	8004518 <USB_SetCurrentMode+0x60>
 8004536:	e001      	b.n	800453c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e005      	b.n	8004548 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004540:	d101      	bne.n	8004546 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004550:	b084      	sub	sp, #16
 8004552:	b580      	push	{r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800455e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e009      	b.n	8004584 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3340      	adds	r3, #64	@ 0x40
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	2200      	movs	r2, #0
 800457c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	3301      	adds	r3, #1
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b0e      	cmp	r3, #14
 8004588:	d9f2      	bls.n	8004570 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800458a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11c      	bne.n	80045cc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80045ca:	e00b      	b.n	80045e4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80045ea:	461a      	mov	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10d      	bne.n	8004614 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004600:	2100      	movs	r1, #0
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f968 	bl	80048d8 <USB_SetDevSpeed>
 8004608:	e008      	b.n	800461c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800460a:	2101      	movs	r1, #1
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f963 	bl	80048d8 <USB_SetDevSpeed>
 8004612:	e003      	b.n	800461c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004614:	2103      	movs	r1, #3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f95e 	bl	80048d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800461c:	2110      	movs	r1, #16
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8fa 	bl	8004818 <USB_FlushTxFifo>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f924 	bl	800487c <USB_FlushRxFifo>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004644:	461a      	mov	r2, r3
 8004646:	2300      	movs	r3, #0
 8004648:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004650:	461a      	mov	r2, r3
 8004652:	2300      	movs	r3, #0
 8004654:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800465c:	461a      	mov	r2, r3
 800465e:	2300      	movs	r3, #0
 8004660:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e043      	b.n	80046f0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800467a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800467e:	d118      	bne.n	80046b2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004692:	461a      	mov	r2, r3
 8004694:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e013      	b.n	80046c4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a8:	461a      	mov	r2, r3
 80046aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e008      	b.n	80046c4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046be:	461a      	mov	r2, r3
 80046c0:	2300      	movs	r3, #0
 80046c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d0:	461a      	mov	r2, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e2:	461a      	mov	r2, r3
 80046e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046f4:	461a      	mov	r2, r3
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d3b5      	bcc.n	8004668 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e043      	b.n	800478a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004718:	d118      	bne.n	800474c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800472c:	461a      	mov	r2, r3
 800472e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e013      	b.n	800475e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004742:	461a      	mov	r2, r3
 8004744:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e008      	b.n	800475e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004758:	461a      	mov	r2, r3
 800475a:	2300      	movs	r3, #0
 800475c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476a:	461a      	mov	r2, r3
 800476c:	2300      	movs	r3, #0
 800476e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477c:	461a      	mov	r2, r3
 800477e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004782:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	3301      	adds	r3, #1
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800478e:	461a      	mov	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4293      	cmp	r3, r2
 8004794:	d3b5      	bcc.n	8004702 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f043 0210 	orr.w	r2, r3, #16
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699a      	ldr	r2, [r3, #24]
 80047d0:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <USB_DevInit+0x2c4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f043 0208 	orr.w	r2, r3, #8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d107      	bne.n	8004804 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004804:	7dfb      	ldrb	r3, [r7, #23]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004810:	b004      	add	sp, #16
 8004812:	4770      	bx	lr
 8004814:	803c3800 	.word	0x803c3800

08004818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004832:	d901      	bls.n	8004838 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e01b      	b.n	8004870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	daf2      	bge.n	8004826 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	019b      	lsls	r3, r3, #6
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800485c:	d901      	bls.n	8004862 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e006      	b.n	8004870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	d0f0      	beq.n	8004850 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004894:	d901      	bls.n	800489a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e018      	b.n	80048cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	daf2      	bge.n	8004888 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2210      	movs	r2, #16
 80048aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3301      	adds	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048b8:	d901      	bls.n	80048be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e006      	b.n	80048cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d0f0      	beq.n	80048ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0306 	and.w	r3, r3, #6
 8004922:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]
 800492e:	e00a      	b.n	8004946 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d002      	beq.n	800493c <USB_GetDevSpeed+0x32>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b06      	cmp	r3, #6
 800493a:	d102      	bne.n	8004942 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800493c:	2302      	movs	r3, #2
 800493e:	75fb      	strb	r3, [r7, #23]
 8004940:	e001      	b.n	8004946 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004942:	230f      	movs	r3, #15
 8004944:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
}
 8004948:	4618      	mov	r0, r3
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	785b      	ldrb	r3, [r3, #1]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d13a      	bne.n	80049e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	2101      	movs	r1, #1
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	b29b      	uxth	r3, r3
 8004988:	68f9      	ldr	r1, [r7, #12]
 800498a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800498e:	4313      	orrs	r3, r2
 8004990:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d155      	bne.n	8004a54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	791b      	ldrb	r3, [r3, #4]
 80049c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	059b      	lsls	r3, r3, #22
 80049ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049cc:	4313      	orrs	r3, r2
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	0151      	lsls	r1, r2, #5
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	440a      	add	r2, r1
 80049d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	e036      	b.n	8004a54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	2101      	movs	r1, #1
 80049f8:	fa01 f303 	lsl.w	r3, r1, r3
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d11a      	bne.n	8004a54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	791b      	ldrb	r3, [r3, #4]
 8004a38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d161      	bne.n	8004b44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a96:	d11f      	bne.n	8004ad8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ab2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ab6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ad2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	2101      	movs	r1, #1
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004af8:	4013      	ands	r3, r2
 8004afa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	0159      	lsls	r1, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	440b      	add	r3, r1
 8004b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4b35      	ldr	r3, [pc, #212]	@ (8004c14 <USB_DeactivateEndpoint+0x1b0>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
 8004b42:	e060      	b.n	8004c06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b5a:	d11f      	bne.n	8004b9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004be0:	4013      	ands	r3, r2
 8004be2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	0159      	lsls	r1, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	440b      	add	r3, r1
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <USB_DeactivateEndpoint+0x1b4>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	ec337800 	.word	0xec337800
 8004c18:	eff37800 	.word	0xeff37800

08004c1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	@ 0x28
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	f040 817f 	bne.w	8004f3c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d132      	bne.n	8004cac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca4:	0cdb      	lsrs	r3, r3, #19
 8004ca6:	04db      	lsls	r3, r3, #19
 8004ca8:	6113      	str	r3, [r2, #16]
 8004caa:	e097      	b.n	8004ddc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc6:	0cdb      	lsrs	r3, r3, #19
 8004cc8:	04db      	lsls	r3, r3, #19
 8004cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	0151      	lsls	r1, r2, #5
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	440a      	add	r2, r1
 8004ce2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004cea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004cee:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11a      	bne.n	8004d2c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d903      	bls.n	8004d0a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d28:	6113      	str	r3, [r2, #16]
 8004d2a:	e044      	b.n	8004db6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	1e5a      	subs	r2, r3, #1
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	8afb      	ldrh	r3, [r7, #22]
 8004d52:	04d9      	lsls	r1, r3, #19
 8004d54:	4ba4      	ldr	r3, [pc, #656]	@ (8004fe8 <USB_EPStartXfer+0x3cc>)
 8004d56:	400b      	ands	r3, r1
 8004d58:	69b9      	ldr	r1, [r7, #24]
 8004d5a:	0148      	lsls	r0, r1, #5
 8004d5c:	69f9      	ldr	r1, [r7, #28]
 8004d5e:	4401      	add	r1, r0
 8004d60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d64:	4313      	orrs	r3, r2
 8004d66:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	791b      	ldrb	r3, [r3, #4]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d122      	bne.n	8004db6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d8a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004d8e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	8afb      	ldrh	r3, [r7, #22]
 8004da0:	075b      	lsls	r3, r3, #29
 8004da2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004da6:	69b9      	ldr	r1, [r7, #24]
 8004da8:	0148      	lsls	r0, r1, #5
 8004daa:	69f9      	ldr	r1, [r7, #28]
 8004dac:	4401      	add	r1, r0
 8004dae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004db2:	4313      	orrs	r3, r2
 8004db4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dcc:	69b9      	ldr	r1, [r7, #24]
 8004dce:	0148      	lsls	r0, r1, #5
 8004dd0:	69f9      	ldr	r1, [r7, #28]
 8004dd2:	4401      	add	r1, r0
 8004dd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d14b      	bne.n	8004e7a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df6:	461a      	mov	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	791b      	ldrb	r3, [r3, #4]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d128      	bne.n	8004e58 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d110      	bne.n	8004e38 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e00f      	b.n	8004e58 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e56:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e72:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	e166      	b.n	8005148 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e98:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	791b      	ldrb	r3, [r3, #4]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d015      	beq.n	8004ece <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 814e 	beq.w	8005148 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	69f9      	ldr	r1, [r7, #28]
 8004ec4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	634b      	str	r3, [r1, #52]	@ 0x34
 8004ecc:	e13c      	b.n	8005148 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d110      	bne.n	8004f00 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ef8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e00f      	b.n	8004f20 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	0151      	lsls	r1, r2, #5
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	440a      	add	r2, r1
 8004f16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f1e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	68d9      	ldr	r1, [r3, #12]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	781a      	ldrb	r2, [r3, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	b298      	uxth	r0, r3
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	4603      	mov	r3, r0
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f9b9 	bl	80052ac <USB_WritePacket>
 8004f3a:	e105      	b.n	8005148 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f56:	0cdb      	lsrs	r3, r3, #19
 8004f58:	04db      	lsls	r3, r3, #19
 8004f5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f76:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f7a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f7e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d132      	bne.n	8004fec <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb4:	69b9      	ldr	r1, [r7, #24]
 8004fb6:	0148      	lsls	r0, r1, #5
 8004fb8:	69f9      	ldr	r1, [r7, #28]
 8004fba:	4401      	add	r1, r0
 8004fbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fe2:	6113      	str	r3, [r2, #16]
 8004fe4:	e062      	b.n	80050ac <USB_EPStartXfer+0x490>
 8004fe6:	bf00      	nop
 8004fe8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d123      	bne.n	800503c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500a:	69b9      	ldr	r1, [r7, #24]
 800500c:	0148      	lsls	r0, r1, #5
 800500e:	69f9      	ldr	r1, [r7, #28]
 8005010:	4401      	add	r1, r0
 8005012:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005016:	4313      	orrs	r3, r2
 8005018:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005034:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005038:	6113      	str	r3, [r2, #16]
 800503a:	e037      	b.n	80050ac <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4413      	add	r3, r2
 8005046:	1e5a      	subs	r2, r3, #1
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	8afa      	ldrh	r2, [r7, #22]
 8005058:	fb03 f202 	mul.w	r2, r3, r2
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	8afb      	ldrh	r3, [r7, #22]
 8005070:	04d9      	lsls	r1, r3, #19
 8005072:	4b38      	ldr	r3, [pc, #224]	@ (8005154 <USB_EPStartXfer+0x538>)
 8005074:	400b      	ands	r3, r1
 8005076:	69b9      	ldr	r1, [r7, #24]
 8005078:	0148      	lsls	r0, r1, #5
 800507a:	69f9      	ldr	r1, [r7, #28]
 800507c:	4401      	add	r1, r0
 800507e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509c:	69b9      	ldr	r1, [r7, #24]
 800509e:	0148      	lsls	r0, r1, #5
 80050a0:	69f9      	ldr	r1, [r7, #28]
 80050a2:	4401      	add	r1, r0
 80050a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050a8:	4313      	orrs	r3, r2
 80050aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10d      	bne.n	80050ce <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	68d9      	ldr	r1, [r3, #12]
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ca:	460a      	mov	r2, r1
 80050cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	791b      	ldrb	r3, [r3, #4]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d128      	bne.n	8005128 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d110      	bne.n	8005108 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005100:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e00f      	b.n	8005128 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005126:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005142:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	1ff80000 	.word	0x1ff80000

08005158 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d14a      	bne.n	800520c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800518a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800518e:	f040 8086 	bne.w	800529e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	7812      	ldrb	r2, [r2, #0]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3301      	adds	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d902      	bls.n	80051f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
          break;
 80051ee:	e056      	b.n	800529e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005208:	d0e7      	beq.n	80051da <USB_EPStopXfer+0x82>
 800520a:	e048      	b.n	800529e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005224:	d13b      	bne.n	800529e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005244:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005248:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005268:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800526c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f242 7210 	movw	r2, #10000	@ 0x2710
 800527a:	4293      	cmp	r3, r2
 800527c:	d902      	bls.n	8005284 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
          break;
 8005282:	e00c      	b.n	800529e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800529c:	d0e7      	beq.n	800526e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800529e:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b089      	sub	sp, #36	@ 0x24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	460b      	mov	r3, r1
 80052bc:	71fb      	strb	r3, [r7, #7]
 80052be:	4613      	mov	r3, r2
 80052c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d123      	bne.n	800531a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052d2:	88bb      	ldrh	r3, [r7, #4]
 80052d4:	3303      	adds	r3, #3
 80052d6:	089b      	lsrs	r3, r3, #2
 80052d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e018      	b.n	8005312 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	031a      	lsls	r2, r3, #12
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ec:	461a      	mov	r2, r3
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	3301      	adds	r3, #1
 80052f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3301      	adds	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	3301      	adds	r3, #1
 8005304:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	3301      	adds	r3, #1
 800530a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	3301      	adds	r3, #1
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	429a      	cmp	r2, r3
 8005318:	d3e2      	bcc.n	80052e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3724      	adds	r7, #36	@ 0x24
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005328:	b480      	push	{r7}
 800532a:	b08b      	sub	sp, #44	@ 0x2c
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	b29b      	uxth	r3, r3
 8005344:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800534e:	2300      	movs	r3, #0
 8005350:	623b      	str	r3, [r7, #32]
 8005352:	e014      	b.n	800537e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	3301      	adds	r3, #1
 8005364:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	3301      	adds	r3, #1
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	3301      	adds	r3, #1
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	3301      	adds	r3, #1
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	3301      	adds	r3, #1
 800537c:	623b      	str	r3, [r7, #32]
 800537e:	6a3a      	ldr	r2, [r7, #32]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	429a      	cmp	r2, r3
 8005384:	d3e6      	bcc.n	8005354 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005386:	8bfb      	ldrh	r3, [r7, #30]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01e      	beq.n	80053ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005396:	461a      	mov	r2, r3
 8005398:	f107 0310 	add.w	r3, r7, #16
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	701a      	strb	r2, [r3, #0]
      i++;
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	3301      	adds	r3, #1
 80053b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	3301      	adds	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80053be:	8bfb      	ldrh	r3, [r7, #30]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053c4:	8bfb      	ldrh	r3, [r7, #30]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1ea      	bne.n	80053a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	372c      	adds	r7, #44	@ 0x2c
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d12c      	bne.n	800544e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	db12      	blt.n	800542c <USB_EPSetStall+0x54>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00f      	beq.n	800542c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005426:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800542a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005446:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	e02b      	b.n	80054a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	db12      	blt.n	8005486 <USB_EPSetStall+0xae>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00f      	beq.n	8005486 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	440a      	add	r2, r1
 800547c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005480:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005484:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d128      	bne.n	8005522 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	791b      	ldrb	r3, [r3, #4]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d003      	beq.n	8005500 <USB_EPClearStall+0x4c>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	791b      	ldrb	r3, [r3, #4]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d138      	bne.n	8005572 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	e027      	b.n	8005572 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	440a      	add	r2, r1
 8005538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800553c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005540:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	791b      	ldrb	r3, [r3, #4]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d003      	beq.n	8005552 <USB_EPClearStall+0x9e>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	791b      	ldrb	r3, [r3, #4]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d10f      	bne.n	8005572 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800556c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005570:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800559e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80055b4:	68f9      	ldr	r1, [r7, #12]
 80055b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055e6:	f023 0303 	bic.w	r3, r3, #3
 80055ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055fa:	f023 0302 	bic.w	r3, r3, #2
 80055fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005628:	f023 0303 	bic.w	r3, r3, #3
 800562c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4013      	ands	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	0c1b      	lsrs	r3, r3, #16
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	4013      	ands	r3, r2
 80056cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	b29b      	uxth	r3, r3
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4013      	ands	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800570c:	68bb      	ldr	r3, [r7, #8]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800571a:	b480      	push	{r7}
 800571c:	b087      	sub	sp, #28
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	fa22 f303 	lsr.w	r3, r2, r3
 800574a:	01db      	lsls	r3, r3, #7
 800574c:	b2db      	uxtb	r3, r3
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4013      	ands	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005768:	68bb      	ldr	r3, [r7, #8]
}
 800576a:	4618      	mov	r0, r3
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f003 0301 	and.w	r3, r3, #1
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80057b0:	f023 0307 	bic.w	r3, r3, #7
 80057b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	460b      	mov	r3, r1
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	333c      	adds	r3, #60	@ 0x3c
 80057ee:	3304      	adds	r3, #4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4a26      	ldr	r2, [pc, #152]	@ (8005890 <USB_EP0_OutStart+0xb8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d90a      	bls.n	8005812 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800580c:	d101      	bne.n	8005812 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e037      	b.n	8005882 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005818:	461a      	mov	r2, r3
 800581a:	2300      	movs	r3, #0
 800581c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800582c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005840:	f043 0318 	orr.w	r3, r3, #24
 8005844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005854:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005858:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800585a:	7afb      	ldrb	r3, [r7, #11]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d10f      	bne.n	8005880 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005866:	461a      	mov	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800587a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800587e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	4f54300a 	.word	0x4f54300a

08005894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058ac:	d901      	bls.n	80058b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e022      	b.n	80058f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	daf2      	bge.n	80058a0 <USB_CoreReset+0xc>

  count = 10U;
 80058ba:	230a      	movs	r3, #10
 80058bc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80058be:	e002      	b.n	80058c6 <USB_CoreReset+0x32>
  {
    count--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f9      	bne.n	80058c0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f043 0201 	orr.w	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e4:	d901      	bls.n	80058ea <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e006      	b.n	80058f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d0f0      	beq.n	80058d8 <USB_CoreReset+0x44>

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005910:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005914:	f002 fcc6 	bl	80082a4 <USBD_static_malloc>
 8005918:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	32b0      	adds	r2, #176	@ 0xb0
 800592a:	2100      	movs	r1, #0
 800592c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005930:	2302      	movs	r3, #2
 8005932:	e0d4      	b.n	8005ade <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005934:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005938:	2100      	movs	r1, #0
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f005 fe6e 	bl	800b61c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	32b0      	adds	r2, #176	@ 0xb0
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	32b0      	adds	r2, #176	@ 0xb0
 800595a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7c1b      	ldrb	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d138      	bne.n	80059de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800596c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ae8 <USBD_CDC_Init+0x1e4>)
 800596e:	7819      	ldrb	r1, [r3, #0]
 8005970:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005974:	2202      	movs	r2, #2
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f002 fb71 	bl	800805e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800597c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ae8 <USBD_CDC_Init+0x1e4>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	3323      	adds	r3, #35	@ 0x23
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005996:	4b55      	ldr	r3, [pc, #340]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005998:	7819      	ldrb	r1, [r3, #0]
 800599a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800599e:	2202      	movs	r2, #2
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f002 fb5c 	bl	800805e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059a6:	4b51      	ldr	r3, [pc, #324]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f003 020f 	and.w	r2, r3, #15
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80059be:	2201      	movs	r2, #1
 80059c0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059c2:	4b4b      	ldr	r3, [pc, #300]	@ (8005af0 <USBD_CDC_Init+0x1ec>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	331c      	adds	r3, #28
 80059d8:	2210      	movs	r2, #16
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	e035      	b.n	8005a4a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059de:	4b42      	ldr	r3, [pc, #264]	@ (8005ae8 <USBD_CDC_Init+0x1e4>)
 80059e0:	7819      	ldrb	r1, [r3, #0]
 80059e2:	2340      	movs	r3, #64	@ 0x40
 80059e4:	2202      	movs	r2, #2
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f002 fb39 	bl	800805e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059ec:	4b3e      	ldr	r3, [pc, #248]	@ (8005ae8 <USBD_CDC_Init+0x1e4>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f003 020f 	and.w	r2, r3, #15
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	3323      	adds	r3, #35	@ 0x23
 8005a02:	2201      	movs	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a06:	4b39      	ldr	r3, [pc, #228]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005a08:	7819      	ldrb	r1, [r3, #0]
 8005a0a:	2340      	movs	r3, #64	@ 0x40
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f002 fb25 	bl	800805e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a14:	4b35      	ldr	r3, [pc, #212]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 020f 	and.w	r2, r3, #15
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a30:	4b2f      	ldr	r3, [pc, #188]	@ (8005af0 <USBD_CDC_Init+0x1ec>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 020f 	and.w	r2, r3, #15
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	331c      	adds	r3, #28
 8005a46:	2210      	movs	r2, #16
 8005a48:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a4a:	4b29      	ldr	r3, [pc, #164]	@ (8005af0 <USBD_CDC_Init+0x1ec>)
 8005a4c:	7819      	ldrb	r1, [r3, #0]
 8005a4e:	2308      	movs	r3, #8
 8005a50:	2203      	movs	r2, #3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f002 fb03 	bl	800805e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a58:	4b25      	ldr	r3, [pc, #148]	@ (8005af0 <USBD_CDC_Init+0x1ec>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f003 020f 	and.w	r2, r3, #15
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3323      	adds	r3, #35	@ 0x23
 8005a6e:	2201      	movs	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	33b0      	adds	r3, #176	@ 0xb0
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e018      	b.n	8005ade <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7c1b      	ldrb	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005ab6:	7819      	ldrb	r1, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005abe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f002 fbba 	bl	800823c <USBD_LL_PrepareReceive>
 8005ac8:	e008      	b.n	8005adc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005aca:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <USBD_CDC_Init+0x1e8>)
 8005acc:	7819      	ldrb	r1, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ad4:	2340      	movs	r3, #64	@ 0x40
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f002 fbb0 	bl	800823c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000093 	.word	0x20000093
 8005aec:	20000094 	.word	0x20000094
 8005af0:	20000095 	.word	0x20000095

08005af4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b00:	4b3a      	ldr	r3, [pc, #232]	@ (8005bec <USBD_CDC_DeInit+0xf8>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f002 facf 	bl	80080aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b0c:	4b37      	ldr	r3, [pc, #220]	@ (8005bec <USBD_CDC_DeInit+0xf8>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f003 020f 	and.w	r2, r3, #15
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	3323      	adds	r3, #35	@ 0x23
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b26:	4b32      	ldr	r3, [pc, #200]	@ (8005bf0 <USBD_CDC_DeInit+0xfc>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f002 fabc 	bl	80080aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b32:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf0 <USBD_CDC_DeInit+0xfc>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b4e:	4b29      	ldr	r3, [pc, #164]	@ (8005bf4 <USBD_CDC_DeInit+0x100>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f002 faa8 	bl	80080aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b5a:	4b26      	ldr	r3, [pc, #152]	@ (8005bf4 <USBD_CDC_DeInit+0x100>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f003 020f 	and.w	r2, r3, #15
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	3323      	adds	r3, #35	@ 0x23
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b74:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf4 <USBD_CDC_DeInit+0x100>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	331c      	adds	r3, #28
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	32b0      	adds	r2, #176	@ 0xb0
 8005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01f      	beq.n	8005be0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	33b0      	adds	r3, #176	@ 0xb0
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	32b0      	adds	r2, #176	@ 0xb0
 8005bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f002 fb7c 	bl	80082c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	32b0      	adds	r2, #176	@ 0xb0
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000093 	.word	0x20000093
 8005bf0:	20000094 	.word	0x20000094
 8005bf4:	20000095 	.word	0x20000095

08005bf8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	32b0      	adds	r2, #176	@ 0xb0
 8005c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0bf      	b.n	8005da8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d050      	beq.n	8005cd6 <USBD_CDC_Setup+0xde>
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	f040 80af 	bne.w	8005d98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	88db      	ldrh	r3, [r3, #6]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d03a      	beq.n	8005cb8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	b25b      	sxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	da1b      	bge.n	8005c84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	33b0      	adds	r3, #176	@ 0xb0
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	88d2      	ldrh	r2, [r2, #6]
 8005c68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	88db      	ldrh	r3, [r3, #6]
 8005c6e:	2b07      	cmp	r3, #7
 8005c70:	bf28      	it	cs
 8005c72:	2307      	movcs	r3, #7
 8005c74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	89fa      	ldrh	r2, [r7, #14]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fda9 	bl	80077d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c82:	e090      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	785a      	ldrb	r2, [r3, #1]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	88db      	ldrh	r3, [r3, #6]
 8005c92:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c94:	d803      	bhi.n	8005c9e <USBD_CDC_Setup+0xa6>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	88db      	ldrh	r3, [r3, #6]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	e000      	b.n	8005ca0 <USBD_CDC_Setup+0xa8>
 8005c9e:	2240      	movs	r2, #64	@ 0x40
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005ca6:	6939      	ldr	r1, [r7, #16]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005cae:	461a      	mov	r2, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 fdbe 	bl	8007832 <USBD_CtlPrepareRx>
      break;
 8005cb6:	e076      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	33b0      	adds	r3, #176	@ 0xb0
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	7850      	ldrb	r0, [r2, #1]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	4798      	blx	r3
      break;
 8005cd4:	e067      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	2b0b      	cmp	r3, #11
 8005cdc:	d851      	bhi.n	8005d82 <USBD_CDC_Setup+0x18a>
 8005cde:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce4 <USBD_CDC_Setup+0xec>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005d15 	.word	0x08005d15
 8005ce8:	08005d91 	.word	0x08005d91
 8005cec:	08005d83 	.word	0x08005d83
 8005cf0:	08005d83 	.word	0x08005d83
 8005cf4:	08005d83 	.word	0x08005d83
 8005cf8:	08005d83 	.word	0x08005d83
 8005cfc:	08005d83 	.word	0x08005d83
 8005d00:	08005d83 	.word	0x08005d83
 8005d04:	08005d83 	.word	0x08005d83
 8005d08:	08005d83 	.word	0x08005d83
 8005d0c:	08005d3f 	.word	0x08005d3f
 8005d10:	08005d69 	.word	0x08005d69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d107      	bne.n	8005d30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d20:	f107 030a 	add.w	r3, r7, #10
 8005d24:	2202      	movs	r2, #2
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 fd53 	bl	80077d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d2e:	e032      	b.n	8005d96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fcd1 	bl	80076da <USBD_CtlError>
            ret = USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3c:	e02b      	b.n	8005d96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d107      	bne.n	8005d5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d4a:	f107 030d 	add.w	r3, r7, #13
 8005d4e:	2201      	movs	r2, #1
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 fd3e 	bl	80077d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d58:	e01d      	b.n	8005d96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fcbc 	bl	80076da <USBD_CtlError>
            ret = USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	75fb      	strb	r3, [r7, #23]
          break;
 8005d66:	e016      	b.n	8005d96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d00f      	beq.n	8005d94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 fcaf 	bl	80076da <USBD_CtlError>
            ret = USBD_FAIL;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d80:	e008      	b.n	8005d94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fca8 	bl	80076da <USBD_CtlError>
          ret = USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8e:	e002      	b.n	8005d96 <USBD_CDC_Setup+0x19e>
          break;
 8005d90:	bf00      	nop
 8005d92:	e008      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>
          break;
 8005d94:	bf00      	nop
      }
      break;
 8005d96:	e006      	b.n	8005da6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fc9d 	bl	80076da <USBD_CtlError>
      ret = USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	75fb      	strb	r3, [r7, #23]
      break;
 8005da4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005dc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	32b0      	adds	r2, #176	@ 0xb0
 8005dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e065      	b.n	8005ea6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	32b0      	adds	r2, #176	@ 0xb0
 8005de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	f003 020f 	and.w	r2, r3, #15
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3314      	adds	r3, #20
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02f      	beq.n	8005e64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	f003 020f 	and.w	r2, r3, #15
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	3314      	adds	r3, #20
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	f003 010f 	and.w	r1, r3, #15
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	460b      	mov	r3, r1
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	440b      	add	r3, r1
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4403      	add	r3, r0
 8005e2c:	331c      	adds	r3, #28
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d112      	bne.n	8005e64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	f003 020f 	and.w	r2, r3, #15
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	3314      	adds	r3, #20
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e56:	78f9      	ldrb	r1, [r7, #3]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f002 f9cc 	bl	80081fa <USBD_LL_Transmit>
 8005e62:	e01f      	b.n	8005ea4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	33b0      	adds	r3, #176	@ 0xb0
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d010      	beq.n	8005ea4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	33b0      	adds	r3, #176	@ 0xb0
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005ea0:	78fa      	ldrb	r2, [r7, #3]
 8005ea2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	32b0      	adds	r2, #176	@ 0xb0
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	32b0      	adds	r2, #176	@ 0xb0
 8005ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e01a      	b.n	8005f16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f002 f9ca 	bl	800827e <USBD_LL_GetRxDataSize>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	33b0      	adds	r3, #176	@ 0xb0
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f10:	4611      	mov	r1, r2
 8005f12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	32b0      	adds	r2, #176	@ 0xb0
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e024      	b.n	8005f8a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	33b0      	adds	r3, #176	@ 0xb0
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d019      	beq.n	8005f88 <USBD_CDC_EP0_RxReady+0x6a>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f5a:	2bff      	cmp	r3, #255	@ 0xff
 8005f5c:	d014      	beq.n	8005f88 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	33b0      	adds	r3, #176	@ 0xb0
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	22ff      	movs	r2, #255	@ 0xff
 8005f84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f9c:	2182      	movs	r1, #130	@ 0x82
 8005f9e:	4818      	ldr	r0, [pc, #96]	@ (8006000 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fa0:	f000 fd62 	bl	8006a68 <USBD_GetEpDesc>
 8005fa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4815      	ldr	r0, [pc, #84]	@ (8006000 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005faa:	f000 fd5d 	bl	8006a68 <USBD_GetEpDesc>
 8005fae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fb0:	2181      	movs	r1, #129	@ 0x81
 8005fb2:	4813      	ldr	r0, [pc, #76]	@ (8006000 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fb4:	f000 fd58 	bl	8006a68 <USBD_GetEpDesc>
 8005fb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2210      	movs	r2, #16
 8005fc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d006      	beq.n	8005fda <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fd4:	711a      	strb	r2, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d006      	beq.n	8005fee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fe8:	711a      	strb	r2, [r3, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2243      	movs	r2, #67	@ 0x43
 8005ff2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ff4:	4b02      	ldr	r3, [pc, #8]	@ (8006000 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000050 	.word	0x20000050

08006004 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800600c:	2182      	movs	r1, #130	@ 0x82
 800600e:	4818      	ldr	r0, [pc, #96]	@ (8006070 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006010:	f000 fd2a 	bl	8006a68 <USBD_GetEpDesc>
 8006014:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006016:	2101      	movs	r1, #1
 8006018:	4815      	ldr	r0, [pc, #84]	@ (8006070 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800601a:	f000 fd25 	bl	8006a68 <USBD_GetEpDesc>
 800601e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006020:	2181      	movs	r1, #129	@ 0x81
 8006022:	4813      	ldr	r0, [pc, #76]	@ (8006070 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006024:	f000 fd20 	bl	8006a68 <USBD_GetEpDesc>
 8006028:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2210      	movs	r2, #16
 8006034:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2200      	movs	r2, #0
 8006040:	711a      	strb	r2, [r3, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f042 0202 	orr.w	r2, r2, #2
 8006048:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d006      	beq.n	800605e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	711a      	strb	r2, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f042 0202 	orr.w	r2, r2, #2
 800605c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2243      	movs	r2, #67	@ 0x43
 8006062:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006064:	4b02      	ldr	r3, [pc, #8]	@ (8006070 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000050 	.word	0x20000050

08006074 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800607c:	2182      	movs	r1, #130	@ 0x82
 800607e:	4818      	ldr	r0, [pc, #96]	@ (80060e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006080:	f000 fcf2 	bl	8006a68 <USBD_GetEpDesc>
 8006084:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006086:	2101      	movs	r1, #1
 8006088:	4815      	ldr	r0, [pc, #84]	@ (80060e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800608a:	f000 fced 	bl	8006a68 <USBD_GetEpDesc>
 800608e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006090:	2181      	movs	r1, #129	@ 0x81
 8006092:	4813      	ldr	r0, [pc, #76]	@ (80060e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006094:	f000 fce8 	bl	8006a68 <USBD_GetEpDesc>
 8006098:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2210      	movs	r2, #16
 80060a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d006      	beq.n	80060ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060b4:	711a      	strb	r2, [r3, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d006      	beq.n	80060ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060c8:	711a      	strb	r2, [r3, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2243      	movs	r2, #67	@ 0x43
 80060d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060d4:	4b02      	ldr	r3, [pc, #8]	@ (80060e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000050 	.word	0x20000050

080060e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	220a      	movs	r2, #10
 80060f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060f2:	4b03      	ldr	r3, [pc, #12]	@ (8006100 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	2000000c 	.word	0x2000000c

08006104 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006114:	2303      	movs	r3, #3
 8006116:	e009      	b.n	800612c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	33b0      	adds	r3, #176	@ 0xb0
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	32b0      	adds	r2, #176	@ 0xb0
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800615a:	2303      	movs	r3, #3
 800615c:	e008      	b.n	8006170 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	32b0      	adds	r2, #176	@ 0xb0
 8006190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006194:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	e004      	b.n	80061aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	32b0      	adds	r2, #176	@ 0xb0
 80061ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80061da:	2303      	movs	r3, #3
 80061dc:	e025      	b.n	800622a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11f      	bne.n	8006228 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80061f0:	4b10      	ldr	r3, [pc, #64]	@ (8006234 <USBD_CDC_TransmitPacket+0x7c>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f003 020f 	and.w	r2, r3, #15
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4403      	add	r3, r0
 800620a:	3314      	adds	r3, #20
 800620c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800620e:	4b09      	ldr	r3, [pc, #36]	@ (8006234 <USBD_CDC_TransmitPacket+0x7c>)
 8006210:	7819      	ldrb	r1, [r3, #0]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 ffeb 	bl	80081fa <USBD_LL_Transmit>

    ret = USBD_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000093 	.word	0x20000093

08006238 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	32b0      	adds	r2, #176	@ 0xb0
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	32b0      	adds	r2, #176	@ 0xb0
 800625a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006262:	2303      	movs	r3, #3
 8006264:	e018      	b.n	8006298 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	7c1b      	ldrb	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800626e:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <USBD_CDC_ReceivePacket+0x68>)
 8006270:	7819      	ldrb	r1, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006278:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 ffdd 	bl	800823c <USBD_LL_PrepareReceive>
 8006282:	e008      	b.n	8006296 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006284:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <USBD_CDC_ReceivePacket+0x68>)
 8006286:	7819      	ldrb	r1, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800628e:	2340      	movs	r3, #64	@ 0x40
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 ffd3 	bl	800823c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20000094 	.word	0x20000094

080062a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e01f      	b.n	80062fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	79fa      	ldrb	r2, [r7, #7]
 80062ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f001 fe47 	bl	8007f84 <USBD_LL_Init>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006318:	2303      	movs	r3, #3
 800631a:	e025      	b.n	8006368 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32ae      	adds	r2, #174	@ 0xae
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00f      	beq.n	8006358 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	32ae      	adds	r2, #174	@ 0xae
 8006342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006348:	f107 020e 	add.w	r2, r7, #14
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 fe55 	bl	8008028 <USBD_LL_Start>
 800637e:	4603      	mov	r3, r0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006390:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	78fa      	ldrb	r2, [r7, #3]
 80063c2:	4611      	mov	r1, r2
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	78fa      	ldrb	r2, [r7, #3]
 80063f0:	4611      	mov	r1, r2
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f922 	bl	8007666 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2b02      	cmp	r3, #2
 8006444:	d01a      	beq.n	800647c <USBD_LL_SetupStage+0x72>
 8006446:	2b02      	cmp	r3, #2
 8006448:	d822      	bhi.n	8006490 <USBD_LL_SetupStage+0x86>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <USBD_LL_SetupStage+0x4a>
 800644e:	2b01      	cmp	r3, #1
 8006450:	d00a      	beq.n	8006468 <USBD_LL_SetupStage+0x5e>
 8006452:	e01d      	b.n	8006490 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fb77 	bl	8006b50 <USBD_StdDevReq>
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]
      break;
 8006466:	e020      	b.n	80064aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fbdf 	bl	8006c34 <USBD_StdItfReq>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]
      break;
 800647a:	e016      	b.n	80064aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fc41 	bl	8006d0c <USBD_StdEPReq>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
      break;
 800648e:	e00c      	b.n	80064aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006496:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800649a:	b2db      	uxtb	r3, r3
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fe22 	bl	80080e8 <USBD_LL_StallEP>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
      break;
 80064a8:	bf00      	nop
  }

  return ret;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	460b      	mov	r3, r1
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d177      	bne.n	80065bc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80064d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80064da:	2b03      	cmp	r3, #3
 80064dc:	f040 80a1 	bne.w	8006622 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	8992      	ldrh	r2, [r2, #12]
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d91c      	bls.n	8006526 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	8992      	ldrh	r2, [r2, #12]
 80064f4:	1a9a      	subs	r2, r3, r2
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	8992      	ldrh	r2, [r2, #12]
 8006502:	441a      	add	r2, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6919      	ldr	r1, [r3, #16]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	899b      	ldrh	r3, [r3, #12]
 8006510:	461a      	mov	r2, r3
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4293      	cmp	r3, r2
 8006518:	bf38      	it	cc
 800651a:	4613      	movcc	r3, r2
 800651c:	461a      	mov	r2, r3
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f001 f9a8 	bl	8007874 <USBD_CtlContinueRx>
 8006524:	e07d      	b.n	8006622 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800652c:	f003 031f 	and.w	r3, r3, #31
 8006530:	2b02      	cmp	r3, #2
 8006532:	d014      	beq.n	800655e <USBD_LL_DataOutStage+0xaa>
 8006534:	2b02      	cmp	r3, #2
 8006536:	d81d      	bhi.n	8006574 <USBD_LL_DataOutStage+0xc0>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <USBD_LL_DataOutStage+0x8e>
 800653c:	2b01      	cmp	r3, #1
 800653e:	d003      	beq.n	8006548 <USBD_LL_DataOutStage+0x94>
 8006540:	e018      	b.n	8006574 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	75bb      	strb	r3, [r7, #22]
            break;
 8006546:	e018      	b.n	800657a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800654e:	b2db      	uxtb	r3, r3
 8006550:	4619      	mov	r1, r3
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fa6e 	bl	8006a34 <USBD_CoreFindIF>
 8006558:	4603      	mov	r3, r0
 800655a:	75bb      	strb	r3, [r7, #22]
            break;
 800655c:	e00d      	b.n	800657a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006564:	b2db      	uxtb	r3, r3
 8006566:	4619      	mov	r1, r3
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fa70 	bl	8006a4e <USBD_CoreFindEP>
 800656e:	4603      	mov	r3, r0
 8006570:	75bb      	strb	r3, [r7, #22]
            break;
 8006572:	e002      	b.n	800657a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	75bb      	strb	r3, [r7, #22]
            break;
 8006578:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800657a:	7dbb      	ldrb	r3, [r7, #22]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d119      	bne.n	80065b4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b03      	cmp	r3, #3
 800658a:	d113      	bne.n	80065b4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800658c:	7dba      	ldrb	r2, [r7, #22]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	32ae      	adds	r2, #174	@ 0xae
 8006592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800659c:	7dba      	ldrb	r2, [r7, #22]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80065a4:	7dba      	ldrb	r2, [r7, #22]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	32ae      	adds	r2, #174	@ 0xae
 80065aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f001 f96e 	bl	8007896 <USBD_CtlSendStatus>
 80065ba:	e032      	b.n	8006622 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fa41 	bl	8006a4e <USBD_CoreFindEP>
 80065cc:	4603      	mov	r3, r0
 80065ce:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065d0:	7dbb      	ldrb	r3, [r7, #22]
 80065d2:	2bff      	cmp	r3, #255	@ 0xff
 80065d4:	d025      	beq.n	8006622 <USBD_LL_DataOutStage+0x16e>
 80065d6:	7dbb      	ldrb	r3, [r7, #22]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d122      	bne.n	8006622 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d117      	bne.n	8006618 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065e8:	7dba      	ldrb	r2, [r7, #22]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	32ae      	adds	r2, #174	@ 0xae
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00f      	beq.n	8006618 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80065f8:	7dba      	ldrb	r2, [r7, #22]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006600:	7dba      	ldrb	r2, [r7, #22]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	32ae      	adds	r2, #174	@ 0xae
 8006606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	7afa      	ldrb	r2, [r7, #11]
 800660e:	4611      	mov	r1, r2
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	4798      	blx	r3
 8006614:	4603      	mov	r3, r0
 8006616:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800661e:	7dfb      	ldrb	r3, [r7, #23]
 8006620:	e000      	b.n	8006624 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	460b      	mov	r3, r1
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d178      	bne.n	8006732 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3314      	adds	r3, #20
 8006644:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800664c:	2b02      	cmp	r3, #2
 800664e:	d163      	bne.n	8006718 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	8992      	ldrh	r2, [r2, #12]
 8006658:	4293      	cmp	r3, r2
 800665a:	d91c      	bls.n	8006696 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	8992      	ldrh	r2, [r2, #12]
 8006664:	1a9a      	subs	r2, r3, r2
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	8992      	ldrh	r2, [r2, #12]
 8006672:	441a      	add	r2, r3
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6919      	ldr	r1, [r3, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	461a      	mov	r2, r3
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 f8c4 	bl	8007810 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006688:	2300      	movs	r3, #0
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f001 fdd4 	bl	800823c <USBD_LL_PrepareReceive>
 8006694:	e040      	b.n	8006718 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	899b      	ldrh	r3, [r3, #12]
 800669a:	461a      	mov	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d11c      	bne.n	80066de <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d316      	bcc.n	80066de <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d20f      	bcs.n	80066de <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f001 f8a4 	bl	8007810 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066d0:	2300      	movs	r3, #0
 80066d2:	2200      	movs	r2, #0
 80066d4:	2100      	movs	r1, #0
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f001 fdb0 	bl	800823c <USBD_LL_PrepareReceive>
 80066dc:	e01c      	b.n	8006718 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d10f      	bne.n	800670a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800670a:	2180      	movs	r1, #128	@ 0x80
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f001 fceb 	bl	80080e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f001 f8d2 	bl	80078bc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d03a      	beq.n	8006798 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff fe30 	bl	8006388 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006730:	e032      	b.n	8006798 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006738:	b2db      	uxtb	r3, r3
 800673a:	4619      	mov	r1, r3
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f986 	bl	8006a4e <USBD_CoreFindEP>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2bff      	cmp	r3, #255	@ 0xff
 800674a:	d025      	beq.n	8006798 <USBD_LL_DataInStage+0x16c>
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d122      	bne.n	8006798 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b03      	cmp	r3, #3
 800675c:	d11c      	bne.n	8006798 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800675e:	7dfa      	ldrb	r2, [r7, #23]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	32ae      	adds	r2, #174	@ 0xae
 8006764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d014      	beq.n	8006798 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800676e:	7dfa      	ldrb	r2, [r7, #23]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006776:	7dfa      	ldrb	r2, [r7, #23]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	32ae      	adds	r2, #174	@ 0xae
 800677c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	7afa      	ldrb	r2, [r7, #11]
 8006784:	4611      	mov	r1, r2
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	4798      	blx	r3
 800678a:	4603      	mov	r3, r0
 800678c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800678e:	7dbb      	ldrb	r3, [r7, #22]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006794:	7dbb      	ldrb	r3, [r7, #22]
 8006796:	e000      	b.n	800679a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d014      	beq.n	8006808 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6852      	ldr	r2, [r2, #4]
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	4611      	mov	r1, r2
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006804:	2303      	movs	r3, #3
 8006806:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006808:	2340      	movs	r3, #64	@ 0x40
 800680a:	2200      	movs	r2, #0
 800680c:	2100      	movs	r1, #0
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 fc25 	bl	800805e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2240      	movs	r2, #64	@ 0x40
 8006820:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006824:	2340      	movs	r3, #64	@ 0x40
 8006826:	2200      	movs	r2, #0
 8006828:	2180      	movs	r1, #128	@ 0x80
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fc17 	bl	800805e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2240      	movs	r2, #64	@ 0x40
 800683c:	841a      	strh	r2, [r3, #32]

  return ret;
 800683e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	78fa      	ldrb	r2, [r7, #3]
 8006858:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b04      	cmp	r3, #4
 800687a:	d006      	beq.n	800688a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006882:	b2da      	uxtb	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2204      	movs	r2, #4
 800688e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d106      	bne.n	80068c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d110      	bne.n	8006906 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00b      	beq.n	8006906 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	32ae      	adds	r2, #174	@ 0xae
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800692e:	2303      	movs	r3, #3
 8006930:	e01c      	b.n	800696c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b03      	cmp	r3, #3
 800693c:	d115      	bne.n	800696a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	32ae      	adds	r2, #174	@ 0xae
 8006948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	32ae      	adds	r2, #174	@ 0xae
 800695c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	78fa      	ldrb	r2, [r7, #3]
 8006964:	4611      	mov	r1, r2
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	32ae      	adds	r2, #174	@ 0xae
 800698a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006992:	2303      	movs	r3, #3
 8006994:	e01c      	b.n	80069d0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d115      	bne.n	80069ce <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	32ae      	adds	r2, #174	@ 0xae
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	32ae      	adds	r2, #174	@ 0xae
 80069c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	4611      	mov	r1, r2
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00e      	beq.n	8006a2a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6852      	ldr	r2, [r2, #4]
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a26:	2303      	movs	r3, #3
 8006a28:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	885b      	ldrh	r3, [r3, #2]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	7812      	ldrb	r2, [r2, #0]
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d91f      	bls.n	8006ace <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a94:	e013      	b.n	8006abe <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a96:	f107 030a 	add.w	r3, r7, #10
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6978      	ldr	r0, [r7, #20]
 8006a9e:	f000 f81b 	bl	8006ad8 <USBD_GetNextDesc>
 8006aa2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	2b05      	cmp	r3, #5
 8006aaa:	d108      	bne.n	8006abe <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	789b      	ldrb	r3, [r3, #2]
 8006ab4:	78fa      	ldrb	r2, [r7, #3]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d008      	beq.n	8006acc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	885b      	ldrh	r3, [r3, #2]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	897b      	ldrh	r3, [r7, #10]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d8e5      	bhi.n	8006a96 <USBD_GetEpDesc+0x2e>
 8006aca:	e000      	b.n	8006ace <USBD_GetEpDesc+0x66>
          break;
 8006acc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006ace:	693b      	ldr	r3, [r7, #16]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	7812      	ldrb	r2, [r2, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006b02:	68fb      	ldr	r3, [r7, #12]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	3301      	adds	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	b21a      	sxth	r2, r3
 8006b36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b21b      	sxth	r3, r3
 8006b3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b40:	89fb      	ldrh	r3, [r7, #14]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b66:	2b40      	cmp	r3, #64	@ 0x40
 8006b68:	d005      	beq.n	8006b76 <USBD_StdDevReq+0x26>
 8006b6a:	2b40      	cmp	r3, #64	@ 0x40
 8006b6c:	d857      	bhi.n	8006c1e <USBD_StdDevReq+0xce>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00f      	beq.n	8006b92 <USBD_StdDevReq+0x42>
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d153      	bne.n	8006c1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	32ae      	adds	r2, #174	@ 0xae
 8006b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b90:	e04a      	b.n	8006c28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d83b      	bhi.n	8006c12 <USBD_StdDevReq+0xc2>
 8006b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba0 <USBD_StdDevReq+0x50>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006c09 	.word	0x08006c09
 8006ba8:	08006c13 	.word	0x08006c13
 8006bac:	08006bff 	.word	0x08006bff
 8006bb0:	08006c13 	.word	0x08006c13
 8006bb4:	08006bd3 	.word	0x08006bd3
 8006bb8:	08006bc9 	.word	0x08006bc9
 8006bbc:	08006c13 	.word	0x08006c13
 8006bc0:	08006beb 	.word	0x08006beb
 8006bc4:	08006bdd 	.word	0x08006bdd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa3e 	bl	800704c <USBD_GetDescriptor>
          break;
 8006bd0:	e024      	b.n	8006c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fba3 	bl	8007320 <USBD_SetAddress>
          break;
 8006bda:	e01f      	b.n	8006c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fbe2 	bl	80073a8 <USBD_SetConfig>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
          break;
 8006be8:	e018      	b.n	8006c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fc85 	bl	80074fc <USBD_GetConfig>
          break;
 8006bf2:	e013      	b.n	8006c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fcb6 	bl	8007568 <USBD_GetStatus>
          break;
 8006bfc:	e00e      	b.n	8006c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fce5 	bl	80075d0 <USBD_SetFeature>
          break;
 8006c06:	e009      	b.n	8006c1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fd09 	bl	8007622 <USBD_ClrFeature>
          break;
 8006c10:	e004      	b.n	8006c1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fd60 	bl	80076da <USBD_CtlError>
          break;
 8006c1a:	bf00      	nop
      }
      break;
 8006c1c:	e004      	b.n	8006c28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fd5a 	bl	80076da <USBD_CtlError>
      break;
 8006c26:	bf00      	nop
  }

  return ret;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop

08006c34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c4a:	2b40      	cmp	r3, #64	@ 0x40
 8006c4c:	d005      	beq.n	8006c5a <USBD_StdItfReq+0x26>
 8006c4e:	2b40      	cmp	r3, #64	@ 0x40
 8006c50:	d852      	bhi.n	8006cf8 <USBD_StdItfReq+0xc4>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <USBD_StdItfReq+0x26>
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	d14e      	bne.n	8006cf8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d840      	bhi.n	8006cea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	889b      	ldrh	r3, [r3, #4]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d836      	bhi.n	8006ce0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	889b      	ldrh	r3, [r3, #4]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff feda 	bl	8006a34 <USBD_CoreFindIF>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	2bff      	cmp	r3, #255	@ 0xff
 8006c88:	d01d      	beq.n	8006cc6 <USBD_StdItfReq+0x92>
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d11a      	bne.n	8006cc6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c90:	7bba      	ldrb	r2, [r7, #14]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	32ae      	adds	r2, #174	@ 0xae
 8006c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006ca0:	7bba      	ldrb	r2, [r7, #14]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ca8:	7bba      	ldrb	r2, [r7, #14]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	32ae      	adds	r2, #174	@ 0xae
 8006cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cbe:	e004      	b.n	8006cca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cc4:	e001      	b.n	8006cca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	88db      	ldrh	r3, [r3, #6]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d110      	bne.n	8006cf4 <USBD_StdItfReq+0xc0>
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fddc 	bl	8007896 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cde:	e009      	b.n	8006cf4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fcf9 	bl	80076da <USBD_CtlError>
          break;
 8006ce8:	e004      	b.n	8006cf4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fcf4 	bl	80076da <USBD_CtlError>
          break;
 8006cf2:	e000      	b.n	8006cf6 <USBD_StdItfReq+0xc2>
          break;
 8006cf4:	bf00      	nop
      }
      break;
 8006cf6:	e004      	b.n	8006d02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fced 	bl	80076da <USBD_CtlError>
      break;
 8006d00:	bf00      	nop
  }

  return ret;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	889b      	ldrh	r3, [r3, #4]
 8006d1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	d007      	beq.n	8006d3c <USBD_StdEPReq+0x30>
 8006d2c:	2b40      	cmp	r3, #64	@ 0x40
 8006d2e:	f200 8181 	bhi.w	8007034 <USBD_StdEPReq+0x328>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d02a      	beq.n	8006d8c <USBD_StdEPReq+0x80>
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	f040 817c 	bne.w	8007034 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff fe84 	bl	8006a4e <USBD_CoreFindEP>
 8006d46:	4603      	mov	r3, r0
 8006d48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d4a:	7b7b      	ldrb	r3, [r7, #13]
 8006d4c:	2bff      	cmp	r3, #255	@ 0xff
 8006d4e:	f000 8176 	beq.w	800703e <USBD_StdEPReq+0x332>
 8006d52:	7b7b      	ldrb	r3, [r7, #13]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f040 8172 	bne.w	800703e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006d5a:	7b7a      	ldrb	r2, [r7, #13]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d62:	7b7a      	ldrb	r2, [r7, #13]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	32ae      	adds	r2, #174	@ 0xae
 8006d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8165 	beq.w	800703e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d74:	7b7a      	ldrb	r2, [r7, #13]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	32ae      	adds	r2, #174	@ 0xae
 8006d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d8a:	e158      	b.n	800703e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d008      	beq.n	8006da6 <USBD_StdEPReq+0x9a>
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	f300 8147 	bgt.w	8007028 <USBD_StdEPReq+0x31c>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 809b 	beq.w	8006ed6 <USBD_StdEPReq+0x1ca>
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d03c      	beq.n	8006e1e <USBD_StdEPReq+0x112>
 8006da4:	e140      	b.n	8007028 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d002      	beq.n	8006db8 <USBD_StdEPReq+0xac>
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d016      	beq.n	8006de4 <USBD_StdEPReq+0xd8>
 8006db6:	e02c      	b.n	8006e12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <USBD_StdEPReq+0xce>
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	2b80      	cmp	r3, #128	@ 0x80
 8006dc2:	d00a      	beq.n	8006dda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f98d 	bl	80080e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dce:	2180      	movs	r1, #128	@ 0x80
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 f989 	bl	80080e8 <USBD_LL_StallEP>
 8006dd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dd8:	e020      	b.n	8006e1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fc7c 	bl	80076da <USBD_CtlError>
              break;
 8006de2:	e01b      	b.n	8006e1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	885b      	ldrh	r3, [r3, #2]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10e      	bne.n	8006e0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00b      	beq.n	8006e0a <USBD_StdEPReq+0xfe>
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b80      	cmp	r3, #128	@ 0x80
 8006df6:	d008      	beq.n	8006e0a <USBD_StdEPReq+0xfe>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	88db      	ldrh	r3, [r3, #6]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d104      	bne.n	8006e0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 f96f 	bl	80080e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fd43 	bl	8007896 <USBD_CtlSendStatus>

              break;
 8006e10:	e004      	b.n	8006e1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fc60 	bl	80076da <USBD_CtlError>
              break;
 8006e1a:	bf00      	nop
          }
          break;
 8006e1c:	e109      	b.n	8007032 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d002      	beq.n	8006e30 <USBD_StdEPReq+0x124>
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d016      	beq.n	8006e5c <USBD_StdEPReq+0x150>
 8006e2e:	e04b      	b.n	8006ec8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00d      	beq.n	8006e52 <USBD_StdEPReq+0x146>
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	2b80      	cmp	r3, #128	@ 0x80
 8006e3a:	d00a      	beq.n	8006e52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f951 	bl	80080e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e46:	2180      	movs	r1, #128	@ 0x80
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 f94d 	bl	80080e8 <USBD_LL_StallEP>
 8006e4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e50:	e040      	b.n	8006ed4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fc40 	bl	80076da <USBD_CtlError>
              break;
 8006e5a:	e03b      	b.n	8006ed4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	885b      	ldrh	r3, [r3, #2]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d136      	bne.n	8006ed2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d004      	beq.n	8006e78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 f957 	bl	8008126 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fd0c 	bl	8007896 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff fde3 	bl	8006a4e <USBD_CoreFindEP>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e8c:	7b7b      	ldrb	r3, [r7, #13]
 8006e8e:	2bff      	cmp	r3, #255	@ 0xff
 8006e90:	d01f      	beq.n	8006ed2 <USBD_StdEPReq+0x1c6>
 8006e92:	7b7b      	ldrb	r3, [r7, #13]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11c      	bne.n	8006ed2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e98:	7b7a      	ldrb	r2, [r7, #13]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ea0:	7b7a      	ldrb	r2, [r7, #13]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	32ae      	adds	r2, #174	@ 0xae
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d010      	beq.n	8006ed2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006eb0:	7b7a      	ldrb	r2, [r7, #13]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32ae      	adds	r2, #174	@ 0xae
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ec6:	e004      	b.n	8006ed2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fc05 	bl	80076da <USBD_CtlError>
              break;
 8006ed0:	e000      	b.n	8006ed4 <USBD_StdEPReq+0x1c8>
              break;
 8006ed2:	bf00      	nop
          }
          break;
 8006ed4:	e0ad      	b.n	8007032 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d002      	beq.n	8006ee8 <USBD_StdEPReq+0x1dc>
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d033      	beq.n	8006f4e <USBD_StdEPReq+0x242>
 8006ee6:	e099      	b.n	800701c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <USBD_StdEPReq+0x1f2>
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b80      	cmp	r3, #128	@ 0x80
 8006ef2:	d004      	beq.n	8006efe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fbef 	bl	80076da <USBD_CtlError>
                break;
 8006efc:	e093      	b.n	8007026 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006efe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da0b      	bge.n	8006f1e <USBD_StdEPReq+0x212>
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	3310      	adds	r3, #16
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4413      	add	r3, r2
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	e00b      	b.n	8006f36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	4413      	add	r3, r2
 8006f34:	3304      	adds	r3, #4
 8006f36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	330e      	adds	r3, #14
 8006f42:	2202      	movs	r2, #2
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fc44 	bl	80077d4 <USBD_CtlSendData>
              break;
 8006f4c:	e06b      	b.n	8007026 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	da11      	bge.n	8006f7a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	f003 020f 	and.w	r2, r3, #15
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	3323      	adds	r3, #35	@ 0x23
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d117      	bne.n	8006fa0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fbb1 	bl	80076da <USBD_CtlError>
                  break;
 8006f78:	e055      	b.n	8007026 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	f003 020f 	and.w	r2, r3, #15
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d104      	bne.n	8006fa0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb9e 	bl	80076da <USBD_CtlError>
                  break;
 8006f9e:	e042      	b.n	8007026 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	da0b      	bge.n	8006fc0 <USBD_StdEPReq+0x2b4>
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	3310      	adds	r3, #16
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	4413      	add	r3, r2
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	e00b      	b.n	8006fd8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <USBD_StdEPReq+0x2da>
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2b80      	cmp	r3, #128	@ 0x80
 8006fe4:	d103      	bne.n	8006fee <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	739a      	strb	r2, [r3, #14]
 8006fec:	e00e      	b.n	800700c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 f8b6 	bl	8008164 <USBD_LL_IsStallEP>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2201      	movs	r2, #1
 8007002:	739a      	strb	r2, [r3, #14]
 8007004:	e002      	b.n	800700c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2200      	movs	r2, #0
 800700a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	330e      	adds	r3, #14
 8007010:	2202      	movs	r2, #2
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fbdd 	bl	80077d4 <USBD_CtlSendData>
              break;
 800701a:	e004      	b.n	8007026 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb5b 	bl	80076da <USBD_CtlError>
              break;
 8007024:	bf00      	nop
          }
          break;
 8007026:	e004      	b.n	8007032 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fb55 	bl	80076da <USBD_CtlError>
          break;
 8007030:	bf00      	nop
      }
      break;
 8007032:	e005      	b.n	8007040 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fb4f 	bl	80076da <USBD_CtlError>
      break;
 800703c:	e000      	b.n	8007040 <USBD_StdEPReq+0x334>
      break;
 800703e:	bf00      	nop
  }

  return ret;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	885b      	ldrh	r3, [r3, #2]
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	2b06      	cmp	r3, #6
 800706e:	f200 8128 	bhi.w	80072c2 <USBD_GetDescriptor+0x276>
 8007072:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <USBD_GetDescriptor+0x2c>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007095 	.word	0x08007095
 800707c:	080070ad 	.word	0x080070ad
 8007080:	080070ed 	.word	0x080070ed
 8007084:	080072c3 	.word	0x080072c3
 8007088:	080072c3 	.word	0x080072c3
 800708c:	08007263 	.word	0x08007263
 8007090:	0800728f 	.word	0x0800728f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	7c12      	ldrb	r2, [r2, #16]
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
      break;
 80070aa:	e112      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7c1b      	ldrb	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10d      	bne.n	80070d0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	f107 0208 	add.w	r2, r7, #8
 80070c0:	4610      	mov	r0, r2
 80070c2:	4798      	blx	r3
 80070c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	2202      	movs	r2, #2
 80070cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070ce:	e100      	b.n	80072d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	f107 0208 	add.w	r2, r7, #8
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
 80070e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	2202      	movs	r2, #2
 80070e8:	701a      	strb	r2, [r3, #0]
      break;
 80070ea:	e0f2      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	885b      	ldrh	r3, [r3, #2]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	f200 80ac 	bhi.w	8007250 <USBD_GetDescriptor+0x204>
 80070f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <USBD_GetDescriptor+0xb4>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007119 	.word	0x08007119
 8007104:	0800714d 	.word	0x0800714d
 8007108:	08007181 	.word	0x08007181
 800710c:	080071b5 	.word	0x080071b5
 8007110:	080071e9 	.word	0x080071e9
 8007114:	0800721d 	.word	0x0800721d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7c12      	ldrb	r2, [r2, #16]
 8007130:	f107 0108 	add.w	r1, r7, #8
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713a:	e091      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 facb 	bl	80076da <USBD_CtlError>
            err++;
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	3301      	adds	r3, #1
 8007148:	72fb      	strb	r3, [r7, #11]
          break;
 800714a:	e089      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	7c12      	ldrb	r2, [r2, #16]
 8007164:	f107 0108 	add.w	r1, r7, #8
 8007168:	4610      	mov	r0, r2
 800716a:	4798      	blx	r3
 800716c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716e:	e077      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fab1 	bl	80076da <USBD_CtlError>
            err++;
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	3301      	adds	r3, #1
 800717c:	72fb      	strb	r3, [r7, #11]
          break;
 800717e:	e06f      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	7c12      	ldrb	r2, [r2, #16]
 8007198:	f107 0108 	add.w	r1, r7, #8
 800719c:	4610      	mov	r0, r2
 800719e:	4798      	blx	r3
 80071a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a2:	e05d      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa97 	bl	80076da <USBD_CtlError>
            err++;
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	3301      	adds	r3, #1
 80071b0:	72fb      	strb	r3, [r7, #11]
          break;
 80071b2:	e055      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	7c12      	ldrb	r2, [r2, #16]
 80071cc:	f107 0108 	add.w	r1, r7, #8
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
 80071d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d6:	e043      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa7d 	bl	80076da <USBD_CtlError>
            err++;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	3301      	adds	r3, #1
 80071e4:	72fb      	strb	r3, [r7, #11]
          break;
 80071e6:	e03b      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7c12      	ldrb	r2, [r2, #16]
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720a:	e029      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa63 	bl	80076da <USBD_CtlError>
            err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
          break;
 800721a:	e021      	b.n	8007260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 0108 	add.w	r1, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723e:	e00f      	b.n	8007260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa49 	bl	80076da <USBD_CtlError>
            err++;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	3301      	adds	r3, #1
 800724c:	72fb      	strb	r3, [r7, #11]
          break;
 800724e:	e007      	b.n	8007260 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa41 	bl	80076da <USBD_CtlError>
          err++;
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	3301      	adds	r3, #1
 800725c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800725e:	bf00      	nop
      }
      break;
 8007260:	e037      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	7c1b      	ldrb	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007272:	f107 0208 	add.w	r2, r7, #8
 8007276:	4610      	mov	r0, r2
 8007278:	4798      	blx	r3
 800727a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800727c:	e029      	b.n	80072d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa2a 	bl	80076da <USBD_CtlError>
        err++;
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	3301      	adds	r3, #1
 800728a:	72fb      	strb	r3, [r7, #11]
      break;
 800728c:	e021      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	7c1b      	ldrb	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10d      	bne.n	80072b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729e:	f107 0208 	add.w	r2, r7, #8
 80072a2:	4610      	mov	r0, r2
 80072a4:	4798      	blx	r3
 80072a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	2207      	movs	r2, #7
 80072ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072b0:	e00f      	b.n	80072d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fa10 	bl	80076da <USBD_CtlError>
        err++;
 80072ba:	7afb      	ldrb	r3, [r7, #11]
 80072bc:	3301      	adds	r3, #1
 80072be:	72fb      	strb	r3, [r7, #11]
      break;
 80072c0:	e007      	b.n	80072d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa08 	bl	80076da <USBD_CtlError>
      err++;
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	3301      	adds	r3, #1
 80072ce:	72fb      	strb	r3, [r7, #11]
      break;
 80072d0:	bf00      	nop
  }

  if (err != 0U)
 80072d2:	7afb      	ldrb	r3, [r7, #11]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11e      	bne.n	8007316 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	88db      	ldrh	r3, [r3, #6]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d016      	beq.n	800730e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	88da      	ldrh	r2, [r3, #6]
 80072ea:	893b      	ldrh	r3, [r7, #8]
 80072ec:	4293      	cmp	r3, r2
 80072ee:	bf28      	it	cs
 80072f0:	4613      	movcs	r3, r2
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072f6:	893b      	ldrh	r3, [r7, #8]
 80072f8:	461a      	mov	r2, r3
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa69 	bl	80077d4 <USBD_CtlSendData>
 8007302:	e009      	b.n	8007318 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f9e7 	bl	80076da <USBD_CtlError>
 800730c:	e004      	b.n	8007318 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fac1 	bl	8007896 <USBD_CtlSendStatus>
 8007314:	e000      	b.n	8007318 <USBD_GetDescriptor+0x2cc>
    return;
 8007316:	bf00      	nop
  }
}
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop

08007320 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	889b      	ldrh	r3, [r3, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d131      	bne.n	8007396 <USBD_SetAddress+0x76>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	88db      	ldrh	r3, [r3, #6]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d12d      	bne.n	8007396 <USBD_SetAddress+0x76>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	885b      	ldrh	r3, [r3, #2]
 800733e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007340:	d829      	bhi.n	8007396 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	885b      	ldrh	r3, [r3, #2]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b03      	cmp	r3, #3
 8007358:	d104      	bne.n	8007364 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f9bc 	bl	80076da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007362:	e01d      	b.n	80073a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	7bfa      	ldrb	r2, [r7, #15]
 8007368:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 ff23 	bl	80081bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa8d 	bl	8007896 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d004      	beq.n	800738c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738a:	e009      	b.n	80073a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007394:	e004      	b.n	80073a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f99e 	bl	80076da <USBD_CtlError>
  }
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	885b      	ldrh	r3, [r3, #2]
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	4b4e      	ldr	r3, [pc, #312]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073c0:	4b4d      	ldr	r3, [pc, #308]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d905      	bls.n	80073d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f985 	bl	80076da <USBD_CtlError>
    return USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e08c      	b.n	80074ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d002      	beq.n	80073e6 <USBD_SetConfig+0x3e>
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d029      	beq.n	8007438 <USBD_SetConfig+0x90>
 80073e4:	e075      	b.n	80074d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073e6:	4b44      	ldr	r3, [pc, #272]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d020      	beq.n	8007430 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073ee:	4b42      	ldr	r3, [pc, #264]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073f8:	4b3f      	ldr	r3, [pc, #252]	@ (80074f8 <USBD_SetConfig+0x150>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fe ffcd 	bl	800639e <USBD_SetClassConfig>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f962 	bl	80076da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2202      	movs	r2, #2
 800741a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800741e:	e065      	b.n	80074ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fa38 	bl	8007896 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2203      	movs	r2, #3
 800742a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800742e:	e05d      	b.n	80074ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa30 	bl	8007896 <USBD_CtlSendStatus>
      break;
 8007436:	e059      	b.n	80074ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007438:	4b2f      	ldr	r3, [pc, #188]	@ (80074f8 <USBD_SetConfig+0x150>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d112      	bne.n	8007466 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007448:	4b2b      	ldr	r3, [pc, #172]	@ (80074f8 <USBD_SetConfig+0x150>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007452:	4b29      	ldr	r3, [pc, #164]	@ (80074f8 <USBD_SetConfig+0x150>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7fe ffbc 	bl	80063d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa19 	bl	8007896 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007464:	e042      	b.n	80074ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007466:	4b24      	ldr	r3, [pc, #144]	@ (80074f8 <USBD_SetConfig+0x150>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	429a      	cmp	r2, r3
 8007472:	d02a      	beq.n	80074ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fe ffaa 	bl	80063d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007482:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <USBD_SetConfig+0x150>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800748c:	4b1a      	ldr	r3, [pc, #104]	@ (80074f8 <USBD_SetConfig+0x150>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fe ff83 	bl	800639e <USBD_SetClassConfig>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00f      	beq.n	80074c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f918 	bl	80076da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fe ff8f 	bl	80063d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074c0:	e014      	b.n	80074ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f9e7 	bl	8007896 <USBD_CtlSendStatus>
      break;
 80074c8:	e010      	b.n	80074ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f9e3 	bl	8007896 <USBD_CtlSendStatus>
      break;
 80074d0:	e00c      	b.n	80074ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f900 	bl	80076da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074da:	4b07      	ldr	r3, [pc, #28]	@ (80074f8 <USBD_SetConfig+0x150>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fe ff78 	bl	80063d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074e6:	2303      	movs	r3, #3
 80074e8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ea:	bf00      	nop
  }

  return ret;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	2000028c 	.word	0x2000028c

080074fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	88db      	ldrh	r3, [r3, #6]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d004      	beq.n	8007518 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f8e2 	bl	80076da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007516:	e023      	b.n	8007560 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	dc02      	bgt.n	800752a <USBD_GetConfig+0x2e>
 8007524:	2b00      	cmp	r3, #0
 8007526:	dc03      	bgt.n	8007530 <USBD_GetConfig+0x34>
 8007528:	e015      	b.n	8007556 <USBD_GetConfig+0x5a>
 800752a:	2b03      	cmp	r3, #3
 800752c:	d00b      	beq.n	8007546 <USBD_GetConfig+0x4a>
 800752e:	e012      	b.n	8007556 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3308      	adds	r3, #8
 800753a:	2201      	movs	r2, #1
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f948 	bl	80077d4 <USBD_CtlSendData>
        break;
 8007544:	e00c      	b.n	8007560 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3304      	adds	r3, #4
 800754a:	2201      	movs	r2, #1
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f940 	bl	80077d4 <USBD_CtlSendData>
        break;
 8007554:	e004      	b.n	8007560 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f8be 	bl	80076da <USBD_CtlError>
        break;
 800755e:	bf00      	nop
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007578:	b2db      	uxtb	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	2b02      	cmp	r3, #2
 800757e:	d81e      	bhi.n	80075be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	88db      	ldrh	r3, [r3, #6]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d004      	beq.n	8007592 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8a5 	bl	80076da <USBD_CtlError>
        break;
 8007590:	e01a      	b.n	80075c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f043 0202 	orr.w	r2, r3, #2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	330c      	adds	r3, #12
 80075b2:	2202      	movs	r2, #2
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f90c 	bl	80077d4 <USBD_CtlSendData>
      break;
 80075bc:	e004      	b.n	80075c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f88a 	bl	80076da <USBD_CtlError>
      break;
 80075c6:	bf00      	nop
  }
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	885b      	ldrh	r3, [r3, #2]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d107      	bne.n	80075f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f953 	bl	8007896 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075f0:	e013      	b.n	800761a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d10b      	bne.n	8007612 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	889b      	ldrh	r3, [r3, #4]
 80075fe:	0a1b      	lsrs	r3, r3, #8
 8007600:	b29b      	uxth	r3, r3
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f943 	bl	8007896 <USBD_CtlSendStatus>
}
 8007610:	e003      	b.n	800761a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f860 	bl	80076da <USBD_CtlError>
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007632:	b2db      	uxtb	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	2b02      	cmp	r3, #2
 8007638:	d80b      	bhi.n	8007652 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	885b      	ldrh	r3, [r3, #2]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d10c      	bne.n	800765c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f923 	bl	8007896 <USBD_CtlSendStatus>
      }
      break;
 8007650:	e004      	b.n	800765c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f840 	bl	80076da <USBD_CtlError>
      break;
 800765a:	e000      	b.n	800765e <USBD_ClrFeature+0x3c>
      break;
 800765c:	bf00      	nop
  }
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	781a      	ldrb	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3301      	adds	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff fa3d 	bl	8006b10 <SWAPBYTE>
 8007696:	4603      	mov	r3, r0
 8007698:	461a      	mov	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff fa30 	bl	8006b10 <SWAPBYTE>
 80076b0:	4603      	mov	r3, r0
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7ff fa23 	bl	8006b10 <SWAPBYTE>
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	80da      	strh	r2, [r3, #6]
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076e4:	2180      	movs	r1, #128	@ 0x80
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fcfe 	bl	80080e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076ec:	2100      	movs	r1, #0
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fcfa 	bl	80080e8 <USBD_LL_StallEP>
}
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d042      	beq.n	8007798 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007716:	6938      	ldr	r0, [r7, #16]
 8007718:	f000 f842 	bl	80077a0 <USBD_GetLen>
 800771c:	4603      	mov	r3, r0
 800771e:	3301      	adds	r3, #1
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007726:	d808      	bhi.n	800773a <USBD_GetString+0x3e>
 8007728:	6938      	ldr	r0, [r7, #16]
 800772a:	f000 f839 	bl	80077a0 <USBD_GetLen>
 800772e:	4603      	mov	r3, r0
 8007730:	3301      	adds	r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	e001      	b.n	800773e <USBD_GetString+0x42>
 800773a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
  idx++;
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	3301      	adds	r3, #1
 8007752:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	2203      	movs	r2, #3
 800775c:	701a      	strb	r2, [r3, #0]
  idx++;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	3301      	adds	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007764:	e013      	b.n	800778e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	4413      	add	r3, r2
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	7812      	ldrb	r2, [r2, #0]
 8007770:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	3301      	adds	r3, #1
 8007776:	613b      	str	r3, [r7, #16]
    idx++;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
 800777a:	3301      	adds	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	4413      	add	r3, r2
 8007784:	2200      	movs	r2, #0
 8007786:	701a      	strb	r2, [r3, #0]
    idx++;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	3301      	adds	r3, #1
 800778c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e7      	bne.n	8007766 <USBD_GetString+0x6a>
 8007796:	e000      	b.n	800779a <USBD_GetString+0x9e>
    return;
 8007798:	bf00      	nop
  }
}
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077b0:	e005      	b.n	80077be <USBD_GetLen+0x1e>
  {
    len++;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	3301      	adds	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3301      	adds	r3, #1
 80077bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f5      	bne.n	80077b2 <USBD_GetLen+0x12>
  }

  return len;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	2100      	movs	r1, #0
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fcfa 	bl	80081fa <USBD_LL_Transmit>

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	2100      	movs	r1, #0
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fce9 	bl	80081fa <USBD_LL_Transmit>

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2203      	movs	r2, #3
 8007842:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	2100      	movs	r1, #0
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 fce9 	bl	800823c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	2100      	movs	r1, #0
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 fcd8 	bl	800823c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2204      	movs	r2, #4
 80078a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078a6:	2300      	movs	r3, #0
 80078a8:	2200      	movs	r2, #0
 80078aa:	2100      	movs	r1, #0
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fca4 	bl	80081fa <USBD_LL_Transmit>

  return USBD_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2205      	movs	r2, #5
 80078c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078cc:	2300      	movs	r3, #0
 80078ce:	2200      	movs	r2, #0
 80078d0:	2100      	movs	r1, #0
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fcb2 	bl	800823c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078e8:	2200      	movs	r2, #0
 80078ea:	4916      	ldr	r1, [pc, #88]	@ (8007944 <MX_USB_DEVICE_Init+0x60>)
 80078ec:	4816      	ldr	r0, [pc, #88]	@ (8007948 <MX_USB_DEVICE_Init+0x64>)
 80078ee:	f7fe fcd9 	bl	80062a4 <USBD_Init>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 80078f8:	2149      	movs	r1, #73	@ 0x49
 80078fa:	4814      	ldr	r0, [pc, #80]	@ (800794c <MX_USB_DEVICE_Init+0x68>)
 80078fc:	f7f8 ffda 	bl	80008b4 <_Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007900:	4913      	ldr	r1, [pc, #76]	@ (8007950 <MX_USB_DEVICE_Init+0x6c>)
 8007902:	4811      	ldr	r0, [pc, #68]	@ (8007948 <MX_USB_DEVICE_Init+0x64>)
 8007904:	f7fe fcfe 	bl	8006304 <USBD_RegisterClass>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
 800790e:	214d      	movs	r1, #77	@ 0x4d
 8007910:	480e      	ldr	r0, [pc, #56]	@ (800794c <MX_USB_DEVICE_Init+0x68>)
 8007912:	f7f8 ffcf 	bl	80008b4 <_Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007916:	490f      	ldr	r1, [pc, #60]	@ (8007954 <MX_USB_DEVICE_Init+0x70>)
 8007918:	480b      	ldr	r0, [pc, #44]	@ (8007948 <MX_USB_DEVICE_Init+0x64>)
 800791a:	f7fe fbf3 	bl	8006104 <USBD_CDC_RegisterInterface>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <MX_USB_DEVICE_Init+0x48>
  {
    Error_Handler();
 8007924:	2151      	movs	r1, #81	@ 0x51
 8007926:	4809      	ldr	r0, [pc, #36]	@ (800794c <MX_USB_DEVICE_Init+0x68>)
 8007928:	f7f8 ffc4 	bl	80008b4 <_Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800792c:	4806      	ldr	r0, [pc, #24]	@ (8007948 <MX_USB_DEVICE_Init+0x64>)
 800792e:	f7fe fd1f 	bl	8006370 <USBD_Start>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
 8007938:	2155      	movs	r1, #85	@ 0x55
 800793a:	4804      	ldr	r0, [pc, #16]	@ (800794c <MX_USB_DEVICE_Init+0x68>)
 800793c:	f7f8 ffba 	bl	80008b4 <_Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007940:	bf00      	nop
 8007942:	bd80      	pop	{r7, pc}
 8007944:	200000ac 	.word	0x200000ac
 8007948:	20000290 	.word	0x20000290
 800794c:	0800c0c4 	.word	0x0800c0c4
 8007950:	20000018 	.word	0x20000018
 8007954:	20000098 	.word	0x20000098

08007958 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800795c:	2200      	movs	r2, #0
 800795e:	4905      	ldr	r1, [pc, #20]	@ (8007974 <CDC_Init_FS+0x1c>)
 8007960:	4805      	ldr	r0, [pc, #20]	@ (8007978 <CDC_Init_FS+0x20>)
 8007962:	f7fe fbe9 	bl	8006138 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007966:	4905      	ldr	r1, [pc, #20]	@ (800797c <CDC_Init_FS+0x24>)
 8007968:	4803      	ldr	r0, [pc, #12]	@ (8007978 <CDC_Init_FS+0x20>)
 800796a:	f7fe fc07 	bl	800617c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800796e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007970:	4618      	mov	r0, r3
 8007972:	bd80      	pop	{r7, pc}
 8007974:	20000d6c 	.word	0x20000d6c
 8007978:	20000290 	.word	0x20000290
 800797c:	2000056c 	.word	0x2000056c

08007980 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007984:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007986:	4618      	mov	r0, r3
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	6039      	str	r1, [r7, #0]
 800799a:	71fb      	strb	r3, [r7, #7]
 800799c:	4613      	mov	r3, r2
 800799e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	2b23      	cmp	r3, #35	@ 0x23
 80079a4:	d84a      	bhi.n	8007a3c <CDC_Control_FS+0xac>
 80079a6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ac <CDC_Control_FS+0x1c>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	08007a3d 	.word	0x08007a3d
 80079b0:	08007a3d 	.word	0x08007a3d
 80079b4:	08007a3d 	.word	0x08007a3d
 80079b8:	08007a3d 	.word	0x08007a3d
 80079bc:	08007a3d 	.word	0x08007a3d
 80079c0:	08007a3d 	.word	0x08007a3d
 80079c4:	08007a3d 	.word	0x08007a3d
 80079c8:	08007a3d 	.word	0x08007a3d
 80079cc:	08007a3d 	.word	0x08007a3d
 80079d0:	08007a3d 	.word	0x08007a3d
 80079d4:	08007a3d 	.word	0x08007a3d
 80079d8:	08007a3d 	.word	0x08007a3d
 80079dc:	08007a3d 	.word	0x08007a3d
 80079e0:	08007a3d 	.word	0x08007a3d
 80079e4:	08007a3d 	.word	0x08007a3d
 80079e8:	08007a3d 	.word	0x08007a3d
 80079ec:	08007a3d 	.word	0x08007a3d
 80079f0:	08007a3d 	.word	0x08007a3d
 80079f4:	08007a3d 	.word	0x08007a3d
 80079f8:	08007a3d 	.word	0x08007a3d
 80079fc:	08007a3d 	.word	0x08007a3d
 8007a00:	08007a3d 	.word	0x08007a3d
 8007a04:	08007a3d 	.word	0x08007a3d
 8007a08:	08007a3d 	.word	0x08007a3d
 8007a0c:	08007a3d 	.word	0x08007a3d
 8007a10:	08007a3d 	.word	0x08007a3d
 8007a14:	08007a3d 	.word	0x08007a3d
 8007a18:	08007a3d 	.word	0x08007a3d
 8007a1c:	08007a3d 	.word	0x08007a3d
 8007a20:	08007a3d 	.word	0x08007a3d
 8007a24:	08007a3d 	.word	0x08007a3d
 8007a28:	08007a3d 	.word	0x08007a3d
 8007a2c:	08007a3d 	.word	0x08007a3d
 8007a30:	08007a3d 	.word	0x08007a3d
 8007a34:	08007a3d 	.word	0x08007a3d
 8007a38:	08007a3d 	.word	0x08007a3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a3c:	bf00      	nop
  }

  return (USBD_OK);
 8007a3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	4805      	ldr	r0, [pc, #20]	@ (8007a70 <CDC_Receive_FS+0x24>)
 8007a5a:	f7fe fb8f 	bl	800617c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a5e:	4804      	ldr	r0, [pc, #16]	@ (8007a70 <CDC_Receive_FS+0x24>)
 8007a60:	f7fe fbea 	bl	8006238 <USBD_CDC_ReceivePacket>
  //CDC_Transmit_FS(Buf, *Len); // ничего не получилось
  return (USBD_OK);
 8007a64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000290 	.word	0x20000290

08007a74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a84:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <CDC_Transmit_FS+0x48>)
 8007a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e00b      	b.n	8007ab2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a9a:	887b      	ldrh	r3, [r7, #2]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4806      	ldr	r0, [pc, #24]	@ (8007abc <CDC_Transmit_FS+0x48>)
 8007aa2:	f7fe fb49 	bl	8006138 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007aa6:	4805      	ldr	r0, [pc, #20]	@ (8007abc <CDC_Transmit_FS+0x48>)
 8007aa8:	f7fe fb86 	bl	80061b8 <USBD_CDC_TransmitPacket>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20000290 	.word	0x20000290

08007ac0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	4613      	mov	r3, r2
 8007acc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2212      	movs	r2, #18
 8007af4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007af6:	4b03      	ldr	r3, [pc, #12]	@ (8007b04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	200000c8 	.word	0x200000c8

08007b08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2204      	movs	r2, #4
 8007b18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b1a:	4b03      	ldr	r3, [pc, #12]	@ (8007b28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	200000dc 	.word	0x200000dc

08007b2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	6039      	str	r1, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d105      	bne.n	8007b4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	4907      	ldr	r1, [pc, #28]	@ (8007b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b42:	4808      	ldr	r0, [pc, #32]	@ (8007b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b44:	f7ff fdda 	bl	80076fc <USBD_GetString>
 8007b48:	e004      	b.n	8007b54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4904      	ldr	r1, [pc, #16]	@ (8007b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b4e:	4805      	ldr	r0, [pc, #20]	@ (8007b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b50:	f7ff fdd4 	bl	80076fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b54:	4b02      	ldr	r3, [pc, #8]	@ (8007b60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	2000156c 	.word	0x2000156c
 8007b64:	0800c0e4 	.word	0x0800c0e4

08007b68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	4904      	ldr	r1, [pc, #16]	@ (8007b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b78:	4804      	ldr	r0, [pc, #16]	@ (8007b8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b7a:	f7ff fdbf 	bl	80076fc <USBD_GetString>
  return USBD_StrDesc;
 8007b7e:	4b02      	ldr	r3, [pc, #8]	@ (8007b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	2000156c 	.word	0x2000156c
 8007b8c:	0800c0fc 	.word	0x0800c0fc

08007b90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	221a      	movs	r2, #26
 8007ba0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ba2:	f000 f843 	bl	8007c2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ba6:	4b02      	ldr	r3, [pc, #8]	@ (8007bb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200000e0 	.word	0x200000e0

08007bb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	6039      	str	r1, [r7, #0]
 8007bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d105      	bne.n	8007bd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4907      	ldr	r1, [pc, #28]	@ (8007be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bca:	4808      	ldr	r0, [pc, #32]	@ (8007bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bcc:	f7ff fd96 	bl	80076fc <USBD_GetString>
 8007bd0:	e004      	b.n	8007bdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	4904      	ldr	r1, [pc, #16]	@ (8007be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bd6:	4805      	ldr	r0, [pc, #20]	@ (8007bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bd8:	f7ff fd90 	bl	80076fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bdc:	4b02      	ldr	r3, [pc, #8]	@ (8007be8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	2000156c 	.word	0x2000156c
 8007bec:	0800c110 	.word	0x0800c110

08007bf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	4907      	ldr	r1, [pc, #28]	@ (8007c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c06:	4808      	ldr	r0, [pc, #32]	@ (8007c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c08:	f7ff fd78 	bl	80076fc <USBD_GetString>
 8007c0c:	e004      	b.n	8007c18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4904      	ldr	r1, [pc, #16]	@ (8007c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c12:	4805      	ldr	r0, [pc, #20]	@ (8007c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c14:	f7ff fd72 	bl	80076fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c18:	4b02      	ldr	r3, [pc, #8]	@ (8007c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	2000156c 	.word	0x2000156c
 8007c28:	0800c11c 	.word	0x0800c11c

08007c2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c32:	4b0f      	ldr	r3, [pc, #60]	@ (8007c70 <Get_SerialNum+0x44>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c38:	4b0e      	ldr	r3, [pc, #56]	@ (8007c74 <Get_SerialNum+0x48>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c78 <Get_SerialNum+0x4c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4413      	add	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c52:	2208      	movs	r2, #8
 8007c54:	4909      	ldr	r1, [pc, #36]	@ (8007c7c <Get_SerialNum+0x50>)
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f814 	bl	8007c84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	4908      	ldr	r1, [pc, #32]	@ (8007c80 <Get_SerialNum+0x54>)
 8007c60:	68b8      	ldr	r0, [r7, #8]
 8007c62:	f000 f80f 	bl	8007c84 <IntToUnicode>
  }
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	1fff7a10 	.word	0x1fff7a10
 8007c74:	1fff7a14 	.word	0x1fff7a14
 8007c78:	1fff7a18 	.word	0x1fff7a18
 8007c7c:	200000e2 	.word	0x200000e2
 8007c80:	200000f2 	.word	0x200000f2

08007c84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]
 8007c9a:	e027      	b.n	8007cec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	0f1b      	lsrs	r3, r3, #28
 8007ca0:	2b09      	cmp	r3, #9
 8007ca2:	d80b      	bhi.n	8007cbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	0f1b      	lsrs	r3, r3, #28
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	4619      	mov	r1, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3230      	adds	r2, #48	@ 0x30
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	e00a      	b.n	8007cd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	0f1b      	lsrs	r3, r3, #28
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	440b      	add	r3, r1
 8007ccc:	3237      	adds	r2, #55	@ 0x37
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	3301      	adds	r3, #1
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
 8007cec:	7dfa      	ldrb	r2, [r7, #23]
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d3d3      	bcc.n	8007c9c <IntToUnicode+0x18>
  }
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
	...

08007d04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08a      	sub	sp, #40	@ 0x28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d0c:	f107 0314 	add.w	r3, r7, #20
 8007d10:	2200      	movs	r2, #0
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	605a      	str	r2, [r3, #4]
 8007d16:	609a      	str	r2, [r3, #8]
 8007d18:	60da      	str	r2, [r3, #12]
 8007d1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d24:	d13a      	bne.n	8007d9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d36:	4b1b      	ldr	r3, [pc, #108]	@ (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d48:	2302      	movs	r3, #2
 8007d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d50:	2303      	movs	r3, #3
 8007d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d54:	230a      	movs	r3, #10
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d58:	f107 0314 	add.w	r3, r7, #20
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4812      	ldr	r0, [pc, #72]	@ (8007da8 <HAL_PCD_MspInit+0xa4>)
 8007d60:	f7f9 fa6e 	bl	8001240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d64:	4b0f      	ldr	r3, [pc, #60]	@ (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d68:	4a0e      	ldr	r2, [pc, #56]	@ (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d6e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	4b0b      	ldr	r3, [pc, #44]	@ (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d78:	4a0a      	ldr	r2, [pc, #40]	@ (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d80:	4b08      	ldr	r3, [pc, #32]	@ (8007da4 <HAL_PCD_MspInit+0xa0>)
 8007d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2100      	movs	r1, #0
 8007d90:	2043      	movs	r0, #67	@ 0x43
 8007d92:	f7f9 fa02 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d96:	2043      	movs	r0, #67	@ 0x43
 8007d98:	f7f9 fa1b 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3728      	adds	r7, #40	@ 0x28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	40023800 	.word	0x40023800
 8007da8:	40020000 	.word	0x40020000

08007dac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f7fe fb21 	bl	800640a <USBD_LL_SetupStage>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7fe fb5b 	bl	80064b4 <USBD_LL_DataOutStage>
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	440b      	add	r3, r1
 8007e26:	3320      	adds	r3, #32
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	f7fe fbfd 	bl	800662c <USBD_LL_DataInStage>
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fd41 	bl	80068d0 <USBD_LL_SOF>
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e60:	2301      	movs	r3, #1
 8007e62:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	79db      	ldrb	r3, [r3, #7]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d003      	beq.n	8007e74 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007e6c:	21c8      	movs	r1, #200	@ 0xc8
 8007e6e:	480a      	ldr	r0, [pc, #40]	@ (8007e98 <HAL_PCD_ResetCallback+0x40>)
 8007e70:	f7f8 fd20 	bl	80008b4 <_Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e7a:	7bfa      	ldrb	r2, [r7, #15]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fce2 	bl	8006848 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe fc89 	bl	80067a2 <USBD_LL_Reset>
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	0800c12c 	.word	0x0800c12c

08007e9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fcdc 	bl	8006868 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6812      	ldr	r2, [r2, #0]
 8007ebe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ec2:	f043 0301 	orr.w	r3, r3, #1
 8007ec6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7adb      	ldrb	r3, [r3, #11]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d005      	beq.n	8007edc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ed0:	4b04      	ldr	r3, [pc, #16]	@ (8007ee4 <HAL_PCD_SuspendCallback+0x48>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	4a03      	ldr	r2, [pc, #12]	@ (8007ee4 <HAL_PCD_SuspendCallback+0x48>)
 8007ed6:	f043 0306 	orr.w	r3, r3, #6
 8007eda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fcd2 	bl	80068a0 <USBD_LL_Resume>
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fd2a 	bl	8006974 <USBD_LL_IsoOUTIncomplete>
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f3a:	78fa      	ldrb	r2, [r7, #3]
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fce6 	bl	8006910 <USBD_LL_IsoINIncomplete>
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe fd3c 	bl	80069d8 <USBD_LL_DevConnected>
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe fd39 	bl	80069ee <USBD_LL_DevDisconnected>
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d13f      	bne.n	8008014 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f94:	4a22      	ldr	r2, [pc, #136]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a20      	ldr	r2, [pc, #128]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fa0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fa6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007faa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007fac:	4b1c      	ldr	r3, [pc, #112]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fae:	2204      	movs	r2, #4
 8007fb0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fb8:	4b19      	ldr	r3, [pc, #100]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fbe:	4b18      	ldr	r3, [pc, #96]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fc4:	4b16      	ldr	r3, [pc, #88]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007fca:	4b15      	ldr	r3, [pc, #84]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fd0:	4b13      	ldr	r3, [pc, #76]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007fd6:	4b12      	ldr	r3, [pc, #72]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fdc:	4b10      	ldr	r3, [pc, #64]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fe2:	480f      	ldr	r0, [pc, #60]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007fe4:	f7f9 fae1 	bl	80015aa <HAL_PCD_Init>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8007fee:	f240 1153 	movw	r1, #339	@ 0x153
 8007ff2:	480c      	ldr	r0, [pc, #48]	@ (8008024 <USBD_LL_Init+0xa0>)
 8007ff4:	f7f8 fc5e 	bl	80008b4 <_Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ff8:	2180      	movs	r1, #128	@ 0x80
 8007ffa:	4809      	ldr	r0, [pc, #36]	@ (8008020 <USBD_LL_Init+0x9c>)
 8007ffc:	f7fa fd0b 	bl	8002a16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008000:	2240      	movs	r2, #64	@ 0x40
 8008002:	2100      	movs	r1, #0
 8008004:	4806      	ldr	r0, [pc, #24]	@ (8008020 <USBD_LL_Init+0x9c>)
 8008006:	f7fa fcbf 	bl	8002988 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800800a:	2280      	movs	r2, #128	@ 0x80
 800800c:	2101      	movs	r1, #1
 800800e:	4804      	ldr	r0, [pc, #16]	@ (8008020 <USBD_LL_Init+0x9c>)
 8008010:	f7fa fcba 	bl	8002988 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	2000176c 	.word	0x2000176c
 8008024:	0800c12c 	.word	0x0800c12c

08008028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800803e:	4618      	mov	r0, r3
 8008040:	f7f9 fbc2 	bl	80017c8 <HAL_PCD_Start>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f942 	bl	80082d4 <USBD_Get_USB_Status>
 8008050:	4603      	mov	r3, r0
 8008052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008054:	7bbb      	ldrb	r3, [r7, #14]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	4608      	mov	r0, r1
 8008068:	4611      	mov	r1, r2
 800806a:	461a      	mov	r2, r3
 800806c:	4603      	mov	r3, r0
 800806e:	70fb      	strb	r3, [r7, #3]
 8008070:	460b      	mov	r3, r1
 8008072:	70bb      	strb	r3, [r7, #2]
 8008074:	4613      	mov	r3, r2
 8008076:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008086:	78bb      	ldrb	r3, [r7, #2]
 8008088:	883a      	ldrh	r2, [r7, #0]
 800808a:	78f9      	ldrb	r1, [r7, #3]
 800808c:	f7fa f896 	bl	80021bc <HAL_PCD_EP_Open>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 f91c 	bl	80082d4 <USBD_Get_USB_Status>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080c4:	78fa      	ldrb	r2, [r7, #3]
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fa f8e1 	bl	8002290 <HAL_PCD_EP_Close>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 f8fd 	bl	80082d4 <USBD_Get_USB_Status>
 80080da:	4603      	mov	r3, r0
 80080dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080de:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008102:	78fa      	ldrb	r2, [r7, #3]
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f7fa f999 	bl	800243e <HAL_PCD_EP_SetStall>
 800810c:	4603      	mov	r3, r0
 800810e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f8de 	bl	80082d4 <USBD_Get_USB_Status>
 8008118:	4603      	mov	r3, r0
 800811a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811c:	7bbb      	ldrb	r3, [r7, #14]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008140:	78fa      	ldrb	r2, [r7, #3]
 8008142:	4611      	mov	r1, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f7fa f9dd 	bl	8002504 <HAL_PCD_EP_ClrStall>
 800814a:	4603      	mov	r3, r0
 800814c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	4618      	mov	r0, r3
 8008152:	f000 f8bf 	bl	80082d4 <USBD_Get_USB_Status>
 8008156:	4603      	mov	r3, r0
 8008158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815a:	7bbb      	ldrb	r3, [r7, #14]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008176:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	da0b      	bge.n	8008198 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	4613      	mov	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	3316      	adds	r3, #22
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	e00b      	b.n	80081b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800819e:	68f9      	ldr	r1, [r7, #12]
 80081a0:	4613      	mov	r3, r2
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80081ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081d6:	78fa      	ldrb	r2, [r7, #3]
 80081d8:	4611      	mov	r1, r2
 80081da:	4618      	mov	r0, r3
 80081dc:	f7f9 ffca 	bl	8002174 <HAL_PCD_SetAddress>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f874 	bl	80082d4 <USBD_Get_USB_Status>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b086      	sub	sp, #24
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
 8008206:	460b      	mov	r3, r1
 8008208:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008218:	7af9      	ldrb	r1, [r7, #11]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	f7fa f8d4 	bl	80023ca <HAL_PCD_EP_Transmit>
 8008222:	4603      	mov	r3, r0
 8008224:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 f853 	bl	80082d4 <USBD_Get_USB_Status>
 800822e:	4603      	mov	r3, r0
 8008230:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008232:	7dbb      	ldrb	r3, [r7, #22]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	607a      	str	r2, [r7, #4]
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	460b      	mov	r3, r1
 800824a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800825a:	7af9      	ldrb	r1, [r7, #11]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	f7fa f860 	bl	8002324 <HAL_PCD_EP_Receive>
 8008264:	4603      	mov	r3, r0
 8008266:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 f832 	bl	80082d4 <USBD_Get_USB_Status>
 8008270:	4603      	mov	r3, r0
 8008272:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008274:	7dbb      	ldrb	r3, [r7, #22]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008290:	78fa      	ldrb	r2, [r7, #3]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f7fa f880 	bl	800239a <HAL_PCD_EP_GetRxCount>
 800829a:	4603      	mov	r3, r0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082ac:	4b03      	ldr	r3, [pc, #12]	@ (80082bc <USBD_static_malloc+0x18>)
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	20001c50 	.word	0x20001c50

080082c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d817      	bhi.n	8008318 <USBD_Get_USB_Status+0x44>
 80082e8:	a201      	add	r2, pc, #4	@ (adr r2, 80082f0 <USBD_Get_USB_Status+0x1c>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008301 	.word	0x08008301
 80082f4:	08008307 	.word	0x08008307
 80082f8:	0800830d 	.word	0x0800830d
 80082fc:	08008313 	.word	0x08008313
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	e00b      	b.n	800831e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008306:	2303      	movs	r3, #3
 8008308:	73fb      	strb	r3, [r7, #15]
    break;
 800830a:	e008      	b.n	800831e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
    break;
 8008310:	e005      	b.n	800831e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008312:	2303      	movs	r3, #3
 8008314:	73fb      	strb	r3, [r7, #15]
    break;
 8008316:	e002      	b.n	800831e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008318:	2303      	movs	r3, #3
 800831a:	73fb      	strb	r3, [r7, #15]
    break;
 800831c:	bf00      	nop
  }
  return usb_status;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
#if USE_SPI_4W
    printf("USE 4wire spi\r\n");
 8008330:	4802      	ldr	r0, [pc, #8]	@ (800833c <System_Init+0x10>)
 8008332:	f003 f893 	bl	800b45c <puts>
#elif USE_IIC
    printf("USE i2c\r\n");
#endif
    return 0;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	bd80      	pop	{r7, pc}
 800833c:	0800c150 	.word	0x0800c150

08008340 <PWM_SetValue>:
{

}

void PWM_SetValue(uint16_t value)
{		
 8008340:	b580      	push	{r7, lr}
 8008342:	b08a      	sub	sp, #40	@ 0x28
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	80fb      	strh	r3, [r7, #6]
////	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	
    TIM_OC_InitTypeDef sConfigOC;
	
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800834a:	2360      	movs	r3, #96	@ 0x60
 800834c:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008356:	2300      	movs	r3, #0
 8008358:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 800835a:	f107 030c 	add.w	r3, r7, #12
 800835e:	2204      	movs	r2, #4
 8008360:	4619      	mov	r1, r3
 8008362:	4805      	ldr	r0, [pc, #20]	@ (8008378 <PWM_SetValue+0x38>)
 8008364:	f7fb f954 	bl	8003610 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  
 8008368:	2104      	movs	r1, #4
 800836a:	4803      	ldr	r0, [pc, #12]	@ (8008378 <PWM_SetValue+0x38>)
 800836c:	f7fb f8a0 	bl	80034b0 <HAL_TIM_PWM_Start>
}
 8008370:	bf00      	nop
 8008372:	3728      	adds	r7, #40	@ 0x28
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	200001f8 	.word	0x200001f8

0800837c <SPI4W_Write_Byte>:
note:
	SPI4W_Write_Byte(value) : 
		Register hardware SPI
*********************************************/	
uint8_t SPI4W_Write_Byte(uint8_t value)                                    
{   
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	71fb      	strb	r3, [r7, #7]
    __HAL_SPI_ENABLE(&hspi1);
 8008386:	4b17      	ldr	r3, [pc, #92]	@ (80083e4 <SPI4W_Write_Byte+0x68>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <SPI4W_Write_Byte+0x68>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008394:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 8008396:	4b14      	ldr	r3, [pc, #80]	@ (80083e8 <SPI4W_Write_Byte+0x6c>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	4a13      	ldr	r2, [pc, #76]	@ (80083e8 <SPI4W_Write_Byte+0x6c>)
 800839c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80083a0:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 80083a2:	bf00      	nop
 80083a4:	4b10      	ldr	r3, [pc, #64]	@ (80083e8 <SPI4W_Write_Byte+0x6c>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 0302 	and.w	r3, r3, #2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0f9      	beq.n	80083a4 <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 80083b0:	4a0e      	ldr	r2, [pc, #56]	@ (80083ec <SPI4W_Write_Byte+0x70>)
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 80083b6:	bf00      	nop
 80083b8:	4b0b      	ldr	r3, [pc, #44]	@ (80083e8 <SPI4W_Write_Byte+0x6c>)
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1f9      	bne.n	80083b8 <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 80083c4:	bf00      	nop
 80083c6:	4b08      	ldr	r3, [pc, #32]	@ (80083e8 <SPI4W_Write_Byte+0x6c>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0f9      	beq.n	80083c6 <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 80083d2:	4b06      	ldr	r3, [pc, #24]	@ (80083ec <SPI4W_Write_Byte+0x70>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	b2db      	uxtb	r3, r3
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	2000019c 	.word	0x2000019c
 80083e8:	40013000 	.word	0x40013000
 80083ec:	4001300c 	.word	0x4001300c

080083f0 <SPI4W_Read_Byte>:

uint8_t SPI4W_Read_Byte(uint8_t value)                                    
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
	return SPI4W_Write_Byte(value);
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff ffbd 	bl	800837c <SPI4W_Write_Byte>
 8008402:	4603      	mov	r3, r0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7f8 fdc1 	bl	8000f9c <HAL_Delay>
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <Driver_Delay_us>:

void Driver_Delay_us(uint32_t xus)
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
	int j;
    for(j=xus; j > 0; j--);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	e002      	b.n	8008436 <Driver_Delay_us+0x14>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3b01      	subs	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	dcf9      	bgt.n	8008430 <Driver_Delay_us+0xe>
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <disk_initialize>:

//��ʼ������
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive nmuber (0..) */
)
{	
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	4603      	mov	r3, r0
 8008452:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0;	    
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
	switch(drv)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10e      	bne.n	800847c <disk_initialize+0x32>
	{
		case SD_CARD://SD��
			res = SD_Initialize();//SD_Initialize() 
 800845e:	f002 fc75 	bl	800ad4c <SD_Initialize>
 8008462:	4603      	mov	r3, r0
 8008464:	73fb      	strb	r3, [r7, #15]
		 	if(res)//STM32 SPI��bug,��sd������ʧ�ܵ�ʱ�������ִ����������,���ܵ���SPI��д�쳣
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00a      	beq.n	8008482 <disk_initialize+0x38>
			{
				SD_SPI_SpeedLow();
 800846c:	f002 fb4c 	bl	800ab08 <SD_SPI_SpeedLow>
				SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 8008470:	20ff      	movs	r0, #255	@ 0xff
 8008472:	f002 fb3b 	bl	800aaec <SD_SPI_ReadWriteByte>
				SD_SPI_SpeedHigh();
 8008476:	f002 fb4e 	bl	800ab16 <SD_SPI_SpeedHigh>
			}
  			break;
 800847a:	e002      	b.n	8008482 <disk_initialize+0x38>
		default:
			res=1; 
 800847c:	2301      	movs	r3, #1
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	e000      	b.n	8008484 <disk_initialize+0x3a>
  			break;
 8008482:	bf00      	nop
	}		 
	if(res)return  STA_NOINIT;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <disk_initialize+0x44>
 800848a:	2301      	movs	r3, #1
 800848c:	e000      	b.n	8008490 <disk_initialize+0x46>
	else return 0; //��ʼ���ɹ�
 800848e:	2300      	movs	r3, #0
}   
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <disk_status>:
//��ô���״̬
DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0..) */
)
{		   
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	71fb      	strb	r3, [r7, #7]
    return 0;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <disk_read>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60b9      	str	r1, [r7, #8]
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	461a      	mov	r2, r3
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
 80084c0:	4613      	mov	r3, r2
 80084c2:	73bb      	strb	r3, [r7, #14]
	uint8_t res=0; 
 80084c4:	2300      	movs	r3, #0
 80084c6:	75fb      	strb	r3, [r7, #23]
    if (!count)return RES_PARERR;//count���ܵ���0�����򷵻ز�������		 	 
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <disk_read+0x22>
 80084ce:	2304      	movs	r3, #4
 80084d0:	e01f      	b.n	8008512 <disk_read+0x62>
	switch(drv)
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d112      	bne.n	80084fe <disk_read+0x4e>
	{
		case SD_CARD://SD��
			res=SD_ReadDisk(buff,sector,count);	 
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	461a      	mov	r2, r3
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	68b8      	ldr	r0, [r7, #8]
 80084e0:	f002 fd32 	bl	800af48 <SD_ReadDisk>
 80084e4:	4603      	mov	r3, r0
 80084e6:	75fb      	strb	r3, [r7, #23]
		 	if(res)//STM32 SPI��bug,��sd������ʧ�ܵ�ʱ�������ִ����������,���ܵ���SPI��д�쳣
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <disk_read+0x54>
			{
				SD_SPI_SpeedLow();
 80084ee:	f002 fb0b 	bl	800ab08 <SD_SPI_SpeedLow>
				SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 80084f2:	20ff      	movs	r0, #255	@ 0xff
 80084f4:	f002 fafa 	bl	800aaec <SD_SPI_ReadWriteByte>
				SD_SPI_SpeedHigh();
 80084f8:	f002 fb0d 	bl	800ab16 <SD_SPI_SpeedHigh>
			}
			break;
 80084fc:	e002      	b.n	8008504 <disk_read+0x54>
		default:
			res=1; 
 80084fe:	2301      	movs	r3, #1
 8008500:	75fb      	strb	r3, [r7, #23]
 8008502:	e000      	b.n	8008506 <disk_read+0x56>
			break;
 8008504:	bf00      	nop
	}
   //������ֵ����SPI_SD_driver.c�ķ���ֵת��ff.c�ķ���ֵ
    if(res==0x00)return RES_OK;	 
 8008506:	7dfb      	ldrb	r3, [r7, #23]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <disk_read+0x60>
 800850c:	2300      	movs	r3, #0
 800850e:	e000      	b.n	8008512 <disk_read+0x62>
    else return RES_ERROR;	   
 8008510:	2301      	movs	r3, #1
}  
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	        /* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	461a      	mov	r2, r3
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]
 800852a:	4613      	mov	r3, r2
 800852c:	73bb      	strb	r3, [r7, #14]
	uint8_t res=0;  
 800852e:	2300      	movs	r3, #0
 8008530:	75fb      	strb	r3, [r7, #23]
    if (!count)return RES_PARERR;//count���ܵ���0�����򷵻ز�������		 	 
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <disk_write+0x22>
 8008538:	2304      	movs	r3, #4
 800853a:	e013      	b.n	8008564 <disk_write+0x4a>
	switch(drv)
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d108      	bne.n	8008554 <disk_write+0x3a>
	{
		case SD_CARD://SD��
			res=SD_WriteDisk((uint8_t*)buff,sector,count);
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	461a      	mov	r2, r3
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	68b8      	ldr	r0, [r7, #8]
 800854a:	f002 fd49 	bl	800afe0 <SD_WriteDisk>
 800854e:	4603      	mov	r3, r0
 8008550:	75fb      	strb	r3, [r7, #23]
			break;
 8008552:	e001      	b.n	8008558 <disk_write+0x3e>
		default:
			res=1; 
 8008554:	2301      	movs	r3, #1
 8008556:	75fb      	strb	r3, [r7, #23]
	}
    //������ֵ����SPI_SD_driver.c�ķ���ֵת��ff.c�ķ���ֵ
    if(res == 0x00)return RES_OK;	 
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <disk_write+0x48>
 800855e:	2300      	movs	r3, #0
 8008560:	e000      	b.n	8008564 <disk_write+0x4a>
    else return RES_ERROR;		 
 8008562:	2301      	movs	r3, #1
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	791b      	ldrb	r3, [r3, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d033      	beq.n	80085e4 <sync_window+0x78>
		wsect = fs->winsect;	/* Current sector number */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008580:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	7858      	ldrb	r0, [r3, #1]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800858c:	2301      	movs	r3, #1
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f7ff ffc3 	bl	800851a <disk_write>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <sync_window+0x32>
			return FR_DISK_ERR;
 800859a:	2301      	movs	r3, #1
 800859c:	e023      	b.n	80085e6 <sync_window+0x7a>
		fs->wflag = 0;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	711a      	strb	r2, [r3, #4]
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	1ad2      	subs	r2, r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d217      	bcs.n	80085e4 <sync_window+0x78>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	78db      	ldrb	r3, [r3, #3]
 80085b8:	60bb      	str	r3, [r7, #8]
 80085ba:	e010      	b.n	80085de <sync_window+0x72>
				wsect += fs->fsize;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	7858      	ldrb	r0, [r3, #1]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80085d0:	2301      	movs	r3, #1
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	f7ff ffa1 	bl	800851a <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	3b01      	subs	r3, #1
 80085dc:	60bb      	str	r3, [r7, #8]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d8eb      	bhi.n	80085bc <sync_window+0x50>
			}
		}
	}
	return FR_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d018      	beq.n	8008634 <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff ffb2 	bl	800856c <sync_window>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <move_window+0x24>
			return FR_DISK_ERR;
 800860e:	2301      	movs	r3, #1
 8008610:	e011      	b.n	8008636 <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7858      	ldrb	r0, [r3, #1]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800861c:	2301      	movs	r3, #1
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	f7ff ff46 	bl	80084b0 <disk_read>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <move_window+0x40>
			return FR_DISK_ERR;
 800862a:	2301      	movs	r3, #1
 800862c:	e003      	b.n	8008636 <move_window+0x48>
		fs->winsect = sector;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	return FR_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
	int vol = -1;
 8008646:	f04f 33ff 	mov.w	r3, #4294967295
 800864a:	60fb      	str	r3, [r7, #12]


	if (*path) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01b      	beq.n	800868c <get_ldnumber+0x4e>
		vol = (*path)[0] - '0';
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	3b30      	subs	r3, #48	@ 0x30
 800865c:	60fb      	str	r3, [r7, #12]
		if ((UINT)vol < 9 && (*path)[1] == ':') {	/* There is a drive number */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b08      	cmp	r3, #8
 8008662:	d811      	bhi.n	8008688 <get_ldnumber+0x4a>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b3a      	cmp	r3, #58	@ 0x3a
 800866e:	d10b      	bne.n	8008688 <get_ldnumber+0x4a>
			*path += 2;		/* Get value and strip it */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	1c9a      	adds	r2, r3, #2
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	601a      	str	r2, [r3, #0]
			if (vol >= _VOLUMES) vol = -1;	/* Check if the drive number is valid */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dd05      	ble.n	800868c <get_ldnumber+0x4e>
 8008680:	f04f 33ff 	mov.w	r3, #4294967295
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	e001      	b.n	800868c <get_ldnumber+0x4e>
		} else {			/* No drive number use default drive */
#if _FS_RPATH && _VOLUMES >= 2
			vol = CurrVol;	/* Current drive */
#else
			vol = 0;		/* Drive 0 */
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]
#endif
		}
	}

	return vol;
 800868c:	68fb      	ldr	r3, [r7, #12]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
	...

0800869c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	711a      	strb	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295
 80086b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff ff99 	bl	80085ee <move_window>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <check_fs+0x2a>
		return 3;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e04b      	b.n	800875e <check_fs+0xc2>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f203 232e 	addw	r3, r3, #558	@ 0x22e
 80086cc:	3301      	adds	r3, #1
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b21b      	sxth	r3, r3
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	b21a      	sxth	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 80086dc:	b21b      	sxth	r3, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	b21b      	sxth	r3, r3
 80086e2:	4a21      	ldr	r2, [pc, #132]	@ (8008768 <check_fs+0xcc>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d001      	beq.n	80086ec <check_fs+0x50>
		return 2;
 80086e8:	2302      	movs	r3, #2
 80086ea:	e038      	b.n	800875e <check_fs+0xc2>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3366      	adds	r3, #102	@ 0x66
 80086f0:	3303      	adds	r3, #3
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	061a      	lsls	r2, r3, #24
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3366      	adds	r3, #102	@ 0x66
 80086fa:	3302      	adds	r3, #2
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	041b      	lsls	r3, r3, #16
 8008700:	431a      	orrs	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3366      	adds	r3, #102	@ 0x66
 8008706:	3301      	adds	r3, #1
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	021b      	lsls	r3, r3, #8
 800870c:	4313      	orrs	r3, r2
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 8008714:	4313      	orrs	r3, r2
 8008716:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800871a:	4a14      	ldr	r2, [pc, #80]	@ (800876c <check_fs+0xd0>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d101      	bne.n	8008724 <check_fs+0x88>
		return 0;
 8008720:	2300      	movs	r3, #0
 8008722:	e01c      	b.n	800875e <check_fs+0xc2>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3382      	adds	r3, #130	@ 0x82
 8008728:	3303      	adds	r3, #3
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	061a      	lsls	r2, r3, #24
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3382      	adds	r3, #130	@ 0x82
 8008732:	3302      	adds	r3, #2
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	041b      	lsls	r3, r3, #16
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3382      	adds	r3, #130	@ 0x82
 800873e:	3301      	adds	r3, #1
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	4313      	orrs	r3, r2
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
 800874c:	4313      	orrs	r3, r2
 800874e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008752:	4a06      	ldr	r2, [pc, #24]	@ (800876c <check_fs+0xd0>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d101      	bne.n	800875c <check_fs+0xc0>
		return 0;
 8008758:	2300      	movs	r3, #0
 800875a:	e000      	b.n	800875e <check_fs+0xc2>

	return 1;
 800875c:	2301      	movs	r3, #1
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	ffffaa55 	.word	0xffffaa55
 800876c:	00544146 	.word	0x00544146

08008770 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b096      	sub	sp, #88	@ 0x58
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008784:	68b8      	ldr	r0, [r7, #8]
 8008786:	f7ff ff5a 	bl	800863e <get_ldnumber>
 800878a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800878c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800878e:	2b00      	cmp	r3, #0
 8008790:	da01      	bge.n	8008796 <find_volume+0x26>
 8008792:	230b      	movs	r3, #11
 8008794:	e294      	b.n	8008cc0 <find_volume+0x550>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008796:	4a9b      	ldr	r2, [pc, #620]	@ (8008a04 <find_volume+0x294>)
 8008798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800879a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800879e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80087a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <find_volume+0x3a>
 80087a6:	230c      	movs	r3, #12
 80087a8:	e28a      	b.n	8008cc0 <find_volume+0x550>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087ae:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80087b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01a      	beq.n	80087ee <find_volume+0x7e>
		stat = disk_status(fs->drv);
 80087b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff fe6b 	bl	8008498 <disk_status>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80087c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10c      	bne.n	80087ee <find_volume+0x7e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <find_volume+0x7a>
 80087da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087de:	f003 0304 	and.w	r3, r3, #4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <find_volume+0x7a>
				return FR_WRITE_PROTECTED;
 80087e6:	230a      	movs	r3, #10
 80087e8:	e26a      	b.n	8008cc0 <find_volume+0x550>
			return FR_OK;				/* The file system object is valid */
 80087ea:	2300      	movs	r3, #0
 80087ec:	e268      	b.n	8008cc0 <find_volume+0x550>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80087ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f0:	2200      	movs	r2, #0
 80087f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80087fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fe:	785b      	ldrb	r3, [r3, #1]
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff fe22 	bl	800844a <disk_initialize>
 8008806:	4603      	mov	r3, r0
 8008808:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800880c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <find_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008818:	2303      	movs	r3, #3
 800881a:	e251      	b.n	8008cc0 <find_volume+0x550>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <find_volume+0xc2>
 8008822:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <find_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800882e:	230a      	movs	r3, #10
 8008830:	e246      	b.n	8008cc0 <find_volume+0x550>
#if _MAX_SS != 512						/* Get sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008836:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008838:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800883a:	f7ff ff2f 	bl	800869c <check_fs>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008844:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008848:	2b01      	cmp	r3, #1
 800884a:	d155      	bne.n	80088f8 <find_volume+0x188>
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800884c:	2300      	movs	r3, #0
 800884e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008850:	e02a      	b.n	80088a8 <find_volume+0x138>
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
 8008852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008854:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008860:	4413      	add	r3, r2
 8008862:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	3304      	adds	r3, #4
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d012      	beq.n	8008894 <find_volume+0x124>
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	330b      	adds	r3, #11
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	061a      	lsls	r2, r3, #24
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	330a      	adds	r3, #10
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	041b      	lsls	r3, r3, #16
 800887e:	431a      	orrs	r2, r3
 8008880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008882:	3309      	adds	r3, #9
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	4313      	orrs	r3, r2
 800888a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800888c:	3208      	adds	r2, #8
 800888e:	7812      	ldrb	r2, [r2, #0]
 8008890:	431a      	orrs	r2, r3
 8008892:	e000      	b.n	8008896 <find_volume+0x126>
 8008894:	2200      	movs	r2, #0
 8008896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	3358      	adds	r3, #88	@ 0x58
 800889c:	443b      	add	r3, r7
 800889e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80088a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a4:	3301      	adds	r3, #1
 80088a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80088a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d9d1      	bls.n	8008852 <find_volume+0xe2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80088ae:	2300      	movs	r3, #0
 80088b0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80088b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <find_volume+0x14e>
 80088b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088ba:	3b01      	subs	r3, #1
 80088bc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80088be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	3358      	adds	r3, #88	@ 0x58
 80088c4:	443b      	add	r3, r7
 80088c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80088ca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80088cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d005      	beq.n	80088de <find_volume+0x16e>
 80088d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80088d6:	f7ff fee1 	bl	800869c <check_fs>
 80088da:	4603      	mov	r3, r0
 80088dc:	e000      	b.n	80088e0 <find_volume+0x170>
 80088de:	2302      	movs	r3, #2
 80088e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80088e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <find_volume+0x188>
 80088ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088ee:	3301      	adds	r3, #1
 80088f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80088f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d9e2      	bls.n	80088be <find_volume+0x14e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80088f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d101      	bne.n	8008904 <find_volume+0x194>
 8008900:	2301      	movs	r3, #1
 8008902:	e1dd      	b.n	8008cc0 <find_volume+0x550>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008904:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <find_volume+0x1a0>
 800890c:	230d      	movs	r3, #13
 800890e:	e1d7      	b.n	8008cc0 <find_volume+0x550>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008916:	b21b      	sxth	r3, r3
 8008918:	021b      	lsls	r3, r3, #8
 800891a:	b21a      	sxth	r2, r3
 800891c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008922:	b21b      	sxth	r3, r3
 8008924:	4313      	orrs	r3, r2
 8008926:	b21b      	sxth	r3, r3
 8008928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800892c:	d001      	beq.n	8008932 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800892e:	230d      	movs	r3, #13
 8008930:	e1c6      	b.n	8008cc0 <find_volume+0x550>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8008932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008934:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008938:	b21b      	sxth	r3, r3
 800893a:	021b      	lsls	r3, r3, #8
 800893c:	b21a      	sxth	r2, r3
 800893e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008940:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008944:	b21b      	sxth	r3, r3
 8008946:	4313      	orrs	r3, r2
 8008948:	b21b      	sxth	r3, r3
 800894a:	b29b      	uxth	r3, r3
 800894c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 800894e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008950:	2b00      	cmp	r3, #0
 8008952:	d112      	bne.n	800897a <find_volume+0x20a>
 8008954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008956:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 800895a:	061a      	lsls	r2, r3, #24
 800895c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008962:	041b      	lsls	r3, r3, #16
 8008964:	431a      	orrs	r2, r3
 8008966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008968:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	4313      	orrs	r3, r2
 8008970:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008972:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8008976:	4313      	orrs	r3, r2
 8008978:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800897a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800897e:	619a      	str	r2, [r3, #24]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8008980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008982:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800898a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898c:	78db      	ldrb	r3, [r3, #3]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d005      	beq.n	800899e <find_volume+0x22e>
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	78db      	ldrb	r3, [r3, #3]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d001      	beq.n	800899e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800899a:	230d      	movs	r3, #13
 800899c:	e190      	b.n	8008cc0 <find_volume+0x550>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	78db      	ldrb	r3, [r3, #3]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089a6:	fb02 f303 	mul.w	r3, r2, r3
 80089aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80089b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b8:	789b      	ldrb	r3, [r3, #2]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d008      	beq.n	80089d0 <find_volume+0x260>
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	789b      	ldrb	r3, [r3, #2]
 80089c2:	461a      	mov	r2, r3
 80089c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c6:	789b      	ldrb	r3, [r3, #2]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	4013      	ands	r3, r2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <find_volume+0x264>
		return FR_NO_FILESYSTEM;
 80089d0:	230d      	movs	r3, #13
 80089d2:	e175      	b.n	8008cc0 <find_volume+0x550>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 80089d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089da:	b21b      	sxth	r3, r3
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	b21a      	sxth	r2, r3
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089e6:	b21b      	sxth	r3, r3
 80089e8:	4313      	orrs	r3, r2
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f0:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	891b      	ldrh	r3, [r3, #8]
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <find_volume+0x298>
		return FR_NO_FILESYSTEM;
 8008a00:	230d      	movs	r3, #13
 8008a02:	e15d      	b.n	8008cc0 <find_volume+0x550>
 8008a04:	20001e70 	.word	0x20001e70

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8008a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a0e:	b21b      	sxth	r3, r3
 8008a10:	021b      	lsls	r3, r3, #8
 8008a12:	b21a      	sxth	r2, r3
 8008a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a1a:	b21b      	sxth	r3, r3
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	b21b      	sxth	r3, r3
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8008a24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d112      	bne.n	8008a50 <find_volume+0x2e0>
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8008a30:	061a      	lsls	r2, r3, #24
 8008a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a34:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008a38:	041b      	lsls	r3, r3, #16
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a42:	021b      	lsls	r3, r3, #8
 8008a44:	4313      	orrs	r3, r2
 8008a46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a48:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8008a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a52:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a56:	b21b      	sxth	r3, r3
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	b21a      	sxth	r2, r3
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a62:	b21b      	sxth	r3, r3
 8008a64:	4313      	orrs	r3, r2
 8008a66:	b21b      	sxth	r3, r3
 8008a68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008a6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <find_volume+0x304>
 8008a70:	230d      	movs	r3, #13
 8008a72:	e125      	b.n	8008cc0 <find_volume+0x550>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8008a74:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a78:	4413      	add	r3, r2
 8008a7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a7c:	8912      	ldrh	r2, [r2, #8]
 8008a7e:	0912      	lsrs	r2, r2, #4
 8008a80:	b292      	uxth	r2, r2
 8008a82:	4413      	add	r3, r2
 8008a84:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d201      	bcs.n	8008a92 <find_volume+0x322>
 8008a8e:	230d      	movs	r3, #13
 8008a90:	e116      	b.n	8008cc0 <find_volume+0x550>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a9a:	7892      	ldrb	r2, [r2, #2]
 8008a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aa0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <find_volume+0x33c>
 8008aa8:	230d      	movs	r3, #13
 8008aaa:	e109      	b.n	8008cc0 <find_volume+0x550>
	fmt = FS_FAT12;
 8008aac:	2301      	movs	r3, #1
 8008aae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d902      	bls.n	8008ac2 <find_volume+0x352>
 8008abc:	2302      	movs	r3, #2
 8008abe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d902      	bls.n	8008ad2 <find_volume+0x362>
 8008acc:	2303      	movs	r3, #3
 8008ace:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	1c9a      	adds	r2, r3, #2
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	615a      	str	r2, [r3, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ade:	61da      	str	r2, [r3, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008ae0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ae4:	441a      	add	r2, r3
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae8:	621a      	str	r2, [r3, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8008aea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aee:	441a      	add	r2, r3
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8008af4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d11e      	bne.n	8008b3a <find_volume+0x3ca>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	891b      	ldrh	r3, [r3, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <find_volume+0x398>
 8008b04:	230d      	movs	r3, #13
 8008b06:	e0db      	b.n	8008cc0 <find_volume+0x550>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8008b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0a:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8008b0e:	061a      	lsls	r2, r3, #24
 8008b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b12:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8008b16:	041b      	lsls	r3, r3, #16
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b20:	021b      	lsls	r3, r3, #8
 8008b22:	4313      	orrs	r3, r2
 8008b24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b26:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	625a      	str	r2, [r3, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b38:	e01f      	b.n	8008b7a <find_volume+0x40a>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	891b      	ldrh	r3, [r3, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <find_volume+0x3d6>
 8008b42:	230d      	movs	r3, #13
 8008b44:	e0bc      	b.n	8008cc0 <find_volume+0x550>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b48:	6a1a      	ldr	r2, [r3, #32]
 8008b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b4c:	441a      	add	r2, r3
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	625a      	str	r2, [r3, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008b52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d103      	bne.n	8008b62 <find_volume+0x3f2>
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	e00a      	b.n	8008b78 <find_volume+0x408>
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b64:	695a      	ldr	r2, [r3, #20]
 8008b66:	4613      	mov	r3, r2
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	4413      	add	r3, r2
 8008b6c:	085a      	lsrs	r2, r3, #1
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 8008b78:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7c:	699a      	ldr	r2, [r3, #24]
 8008b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b80:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008b84:	0a5b      	lsrs	r3, r3, #9
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d201      	bcs.n	8008b8e <find_volume+0x41e>
		return FR_NO_FILESYSTEM;
 8008b8a:	230d      	movs	r3, #13
 8008b8c:	e098      	b.n	8008cc0 <find_volume+0x550>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b90:	f04f 32ff 	mov.w	r2, #4294967295
 8008b94:	611a      	str	r2, [r3, #16]
 8008b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b98:	691a      	ldr	r2, [r3, #16]
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba0:	2280      	movs	r2, #128	@ 0x80
 8008ba2:	715a      	strb	r2, [r3, #5]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008ba4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d17a      	bne.n	8008ca2 <find_volume+0x532>
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
 8008bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bae:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8008bb2:	b21b      	sxth	r3, r3
 8008bb4:	021b      	lsls	r3, r3, #8
 8008bb6:	b21a      	sxth	r2, r3
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8008bbe:	b21b      	sxth	r3, r3
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	b21b      	sxth	r3, r3
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d16c      	bne.n	8008ca2 <find_volume+0x532>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bca:	3301      	adds	r3, #1
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008bd0:	f7ff fd0d 	bl	80085ee <move_window>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d163      	bne.n	8008ca2 <find_volume+0x532>
	{
		fs->fsi_flag = 0;
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	2200      	movs	r2, #0
 8008bde:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 8008be6:	b21b      	sxth	r3, r3
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	b21a      	sxth	r2, r3
 8008bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bee:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8008bf2:	b21b      	sxth	r3, r3
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	b21b      	sxth	r3, r3
 8008bf8:	4a33      	ldr	r2, [pc, #204]	@ (8008cc8 <find_volume+0x558>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d151      	bne.n	8008ca2 <find_volume+0x532>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c00:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008c04:	061a      	lsls	r2, r3, #24
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c1c:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8008c20:	4313      	orrs	r3, r2
 8008c22:	4a2a      	ldr	r2, [pc, #168]	@ (8008ccc <find_volume+0x55c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d13c      	bne.n	8008ca2 <find_volume+0x532>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 8008c2e:	061a      	lsls	r2, r3, #24
 8008c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c32:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8008c36:	041b      	lsls	r3, r3, #16
 8008c38:	431a      	orrs	r2, r3
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3c:	f893 3215 	ldrb.w	r3, [r3, #533]	@ 0x215
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	4313      	orrs	r3, r2
 8008c44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c46:	f892 2214 	ldrb.w	r2, [r2, #532]	@ 0x214
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	4a20      	ldr	r2, [pc, #128]	@ (8008cd0 <find_volume+0x560>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d127      	bne.n	8008ca2 <find_volume+0x532>
		{
#if !_FS_NOFSINFO
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8008c58:	061a      	lsls	r2, r3, #24
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8008c60:	041b      	lsls	r3, r3, #16
 8008c62:	431a      	orrs	r2, r3
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8008c6a:	021b      	lsls	r3, r3, #8
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c70:	f892 2218 	ldrb.w	r2, [r2, #536]	@ 0x218
 8008c74:	431a      	orrs	r2, r3
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	611a      	str	r2, [r3, #16]
#endif
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8008c80:	061a      	lsls	r2, r3, #24
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8008c88:	041b      	lsls	r3, r3, #16
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8008c92:	021b      	lsls	r3, r3, #8
 8008c94:	4313      	orrs	r3, r2
 8008c96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c98:	f892 221c 	ldrb.w	r2, [r2, #540]	@ 0x21c
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca0:	60da      	str	r2, [r3, #12]
		}
	}
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008ca8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8008caa:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd4 <find_volume+0x564>)
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	4b08      	ldr	r3, [pc, #32]	@ (8008cd4 <find_volume+0x564>)
 8008cb4:	801a      	strh	r2, [r3, #0]
 8008cb6:	4b07      	ldr	r3, [pc, #28]	@ (8008cd4 <find_volume+0x564>)
 8008cb8:	881a      	ldrh	r2, [r3, #0]
 8008cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3758      	adds	r7, #88	@ 0x58
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	ffffaa55 	.word	0xffffaa55
 8008ccc:	41615252 	.word	0x41615252
 8008cd0:	61417272 	.word	0x61417272
 8008cd4:	20001e74 	.word	0x20001e74

08008cd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b088      	sub	sp, #32
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;


	vol = get_ldnumber(&path);
 8008ce6:	f107 0308 	add.w	r3, r7, #8
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff fca7 	bl	800863e <get_ldnumber>
 8008cf0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da01      	bge.n	8008cfc <f_mount+0x24>
 8008cf8:	230b      	movs	r3, #11
 8008cfa:	e028      	b.n	8008d4e <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008cfc:	4a16      	ldr	r2, [pc, #88]	@ (8008d58 <f_mount+0x80>)
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <f_mount+0x3a>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	490d      	ldr	r1, [pc, #52]	@ (8008d58 <f_mount+0x80>)
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <f_mount+0x5c>
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d001      	beq.n	8008d38 <f_mount+0x60>
 8008d34:	2300      	movs	r3, #0
 8008d36:	e00a      	b.n	8008d4e <f_mount+0x76>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	f107 030c 	add.w	r3, r7, #12
 8008d40:	2200      	movs	r2, #0
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fd14 	bl	8008770 <find_volume>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3720      	adds	r7, #32
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20001e70 	.word	0x20001e70

08008d5c <SD_Init>:
char* pDirectoryFiles[ MAX_BMP_FILES ];
uint8_t str[20];
FRESULT f_res;
FATFS microSDFatFs;

void SD_Init(void){
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
	
	SD_CS_1;
 8008d62:	2201      	movs	r2, #1
 8008d64:	2110      	movs	r1, #16
 8008d66:	481f      	ldr	r0, [pc, #124]	@ (8008de4 <SD_Init+0x88>)
 8008d68:	f7f8 fc06 	bl	8001578 <HAL_GPIO_WritePin>
	LCD_CS_1;
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	2140      	movs	r1, #64	@ 0x40
 8008d70:	481c      	ldr	r0, [pc, #112]	@ (8008de4 <SD_Init+0x88>)
 8008d72:	f7f8 fc01 	bl	8001578 <HAL_GPIO_WritePin>
	TP_CS_1;
 8008d76:	2201      	movs	r2, #1
 8008d78:	2180      	movs	r1, #128	@ 0x80
 8008d7a:	481a      	ldr	r0, [pc, #104]	@ (8008de4 <SD_Init+0x88>)
 8008d7c:	f7f8 fbfc 	bl	8001578 <HAL_GPIO_WritePin>
	
	int counter = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	607b      	str	r3, [r7, #4]
    //Check the mounted device
	f_res = f_mount(&microSDFatFs,(TCHAR const*)"/",1);
 8008d84:	2201      	movs	r2, #1
 8008d86:	4918      	ldr	r1, [pc, #96]	@ (8008de8 <SD_Init+0x8c>)
 8008d88:	4818      	ldr	r0, [pc, #96]	@ (8008dec <SD_Init+0x90>)
 8008d8a:	f7ff ffa5 	bl	8008cd8 <f_mount>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	461a      	mov	r2, r3
 8008d92:	4b17      	ldr	r3, [pc, #92]	@ (8008df0 <SD_Init+0x94>)
 8008d94:	701a      	strb	r2, [r3, #0]
	if(f_res!=FR_OK){
 8008d96:	4b16      	ldr	r3, [pc, #88]	@ (8008df0 <SD_Init+0x94>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d006      	beq.n	8008dac <SD_Init+0x50>
		printf("SD card mount file system failed ,error code :(%d)\r\n",f_res);
 8008d9e:	4b14      	ldr	r3, [pc, #80]	@ (8008df0 <SD_Init+0x94>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	4619      	mov	r1, r3
 8008da4:	4813      	ldr	r0, [pc, #76]	@ (8008df4 <SD_Init+0x98>)
 8008da6:	f002 faf1 	bl	800b38c <iprintf>
		USB_Send_Message("SD card mount file system success!!\r\n");
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
			pDirectoryFiles[counter] = malloc(11); 
		}	
	}
}
 8008daa:	e017      	b.n	8008ddc <SD_Init+0x80>
		printf("SD card mount file system success!! \r\n");
 8008dac:	4812      	ldr	r0, [pc, #72]	@ (8008df8 <SD_Init+0x9c>)
 8008dae:	f002 fb55 	bl	800b45c <puts>
		USB_Send_Message("SD card mount file system success!!\r\n");
 8008db2:	4812      	ldr	r0, [pc, #72]	@ (8008dfc <SD_Init+0xa0>)
 8008db4:	f7f7 fc76 	bl	80006a4 <USB_Send_Message>
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
 8008db8:	2300      	movs	r3, #0
 8008dba:	607b      	str	r3, [r7, #4]
 8008dbc:	e00b      	b.n	8008dd6 <SD_Init+0x7a>
			pDirectoryFiles[counter] = malloc(11); 
 8008dbe:	200b      	movs	r0, #11
 8008dc0:	f002 f96c 	bl	800b09c <malloc>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8008e00 <SD_Init+0xa4>)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b18      	cmp	r3, #24
 8008dda:	ddf0      	ble.n	8008dbe <SD_Init+0x62>
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	40020400 	.word	0x40020400
 8008de8:	0800c160 	.word	0x0800c160
 8008dec:	20001ee0 	.word	0x20001ee0
 8008df0:	20001edc 	.word	0x20001edc
 8008df4:	0800c164 	.word	0x0800c164
 8008df8:	0800c19c 	.word	0x0800c19c
 8008dfc:	0800c1c4 	.word	0x0800c1c4
 8008e00:	20001e78 	.word	0x20001e78

08008e04 <LCD_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_Reset(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
    LCD_RST_1;
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e0e:	480e      	ldr	r0, [pc, #56]	@ (8008e48 <LCD_Reset+0x44>)
 8008e10:	f7f8 fbb2 	bl	8001578 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8008e14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e18:	f7ff faf8 	bl	800840c <Driver_Delay_ms>
    LCD_RST_0;
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e22:	4809      	ldr	r0, [pc, #36]	@ (8008e48 <LCD_Reset+0x44>)
 8008e24:	f7f8 fba8 	bl	8001578 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8008e28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e2c:	f7ff faee 	bl	800840c <Driver_Delay_ms>
    LCD_RST_1;
 8008e30:	2201      	movs	r2, #1
 8008e32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e36:	4804      	ldr	r0, [pc, #16]	@ (8008e48 <LCD_Reset+0x44>)
 8008e38:	f7f8 fb9e 	bl	8001578 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8008e3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e40:	f7ff fae4 	bl	800840c <Driver_Delay_ms>
}
 8008e44:	bf00      	nop
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	40020000 	.word	0x40020000

08008e4c <LCD_SetBackLight>:

static void LCD_SetBackLight(uint16_t value)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	80fb      	strh	r3, [r7, #6]
	PWM_SetValue(value);
 8008e56:	88fb      	ldrh	r3, [r7, #6]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff fa71 	bl	8008340 <PWM_SetValue>
}
 8008e5e:	bf00      	nop
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <LCD_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
void LCD_WriteReg(uint8_t Reg)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	71fb      	strb	r3, [r7, #7]
    LCD_DC_0;
 8008e72:	2200      	movs	r2, #0
 8008e74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008e78:	480a      	ldr	r0, [pc, #40]	@ (8008ea4 <LCD_WriteReg+0x3c>)
 8008e7a:	f7f8 fb7d 	bl	8001578 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2140      	movs	r1, #64	@ 0x40
 8008e82:	4809      	ldr	r0, [pc, #36]	@ (8008ea8 <LCD_WriteReg+0x40>)
 8008e84:	f7f8 fb78 	bl	8001578 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff fa76 	bl	800837c <SPI4W_Write_Byte>
    LCD_CS_1;
 8008e90:	2201      	movs	r2, #1
 8008e92:	2140      	movs	r1, #64	@ 0x40
 8008e94:	4804      	ldr	r0, [pc, #16]	@ (8008ea8 <LCD_WriteReg+0x40>)
 8008e96:	f7f8 fb6f 	bl	8001578 <HAL_GPIO_WritePin>
}
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	40020000 	.word	0x40020000
 8008ea8:	40020400 	.word	0x40020400

08008eac <LCD_WriteData>:

void LCD_WriteData(uint8_t Data)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
    LCD_DC_1;
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008ebc:	480d      	ldr	r0, [pc, #52]	@ (8008ef4 <LCD_WriteData+0x48>)
 8008ebe:	f7f8 fb5b 	bl	8001578 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2140      	movs	r1, #64	@ 0x40
 8008ec6:	480c      	ldr	r0, [pc, #48]	@ (8008ef8 <LCD_WriteData+0x4c>)
 8008ec8:	f7f8 fb56 	bl	8001578 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data >> 8);
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	121b      	asrs	r3, r3, #8
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff fa52 	bl	800837c <SPI4W_Write_Byte>
    SPI4W_Write_Byte(Data & 0XFF);
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff fa4e 	bl	800837c <SPI4W_Write_Byte>
    LCD_CS_1;
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	2140      	movs	r1, #64	@ 0x40
 8008ee4:	4804      	ldr	r0, [pc, #16]	@ (8008ef8 <LCD_WriteData+0x4c>)
 8008ee6:	f7f8 fb47 	bl	8001578 <HAL_GPIO_WritePin>
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40020000 	.word	0x40020000
 8008ef8:	40020400 	.word	0x40020400

08008efc <LCD_Write_AllData>:
/*******************************************************************************
function:
		Write register data
*******************************************************************************/
static void LCD_Write_AllData(uint16_t Data, uint32_t DataLen)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	6039      	str	r1, [r7, #0]
 8008f06:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_DC_1;
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008f0e:	4813      	ldr	r0, [pc, #76]	@ (8008f5c <LCD_Write_AllData+0x60>)
 8008f10:	f7f8 fb32 	bl	8001578 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8008f14:	2200      	movs	r2, #0
 8008f16:	2140      	movs	r1, #64	@ 0x40
 8008f18:	4811      	ldr	r0, [pc, #68]	@ (8008f60 <LCD_Write_AllData+0x64>)
 8008f1a:	f7f8 fb2d 	bl	8001578 <HAL_GPIO_WritePin>
    for(i = 0; i < DataLen; i++) {
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	e00e      	b.n	8008f42 <LCD_Write_AllData+0x46>
        SPI4W_Write_Byte(Data >> 8);
 8008f24:	88fb      	ldrh	r3, [r7, #6]
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fa25 	bl	800837c <SPI4W_Write_Byte>
        SPI4W_Write_Byte(Data & 0XFF);
 8008f32:	88fb      	ldrh	r3, [r7, #6]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff fa20 	bl	800837c <SPI4W_Write_Byte>
    for(i = 0; i < DataLen; i++) {
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d3ec      	bcc.n	8008f24 <LCD_Write_AllData+0x28>
    }
    LCD_CS_1;
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	2140      	movs	r1, #64	@ 0x40
 8008f4e:	4804      	ldr	r0, [pc, #16]	@ (8008f60 <LCD_Write_AllData+0x64>)
 8008f50:	f7f8 fb12 	bl	8001578 <HAL_GPIO_WritePin>
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	40020000 	.word	0x40020000
 8008f60:	40020400 	.word	0x40020400

08008f64 <LCD_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
    LCD_WriteReg(0XF9);
 8008f68:	20f9      	movs	r0, #249	@ 0xf9
 8008f6a:	f7ff ff7d 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8008f6e:	2000      	movs	r0, #0
 8008f70:	f7ff ff9c 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x08);
 8008f74:	2008      	movs	r0, #8
 8008f76:	f7ff ff99 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0xC0);
 8008f7a:	20c0      	movs	r0, #192	@ 0xc0
 8008f7c:	f7ff ff74 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x19);//VREG1OUT POSITIVE
 8008f80:	2019      	movs	r0, #25
 8008f82:	f7ff ff93 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x1a);//VREG2OUT NEGATIVE
 8008f86:	201a      	movs	r0, #26
 8008f88:	f7ff ff90 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0xC1);
 8008f8c:	20c1      	movs	r0, #193	@ 0xc1
 8008f8e:	f7ff ff6b 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x45);//VGH,VGL    VGH>=14V.
 8008f92:	2045      	movs	r0, #69	@ 0x45
 8008f94:	f7ff ff8a 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 8008f98:	2000      	movs	r0, #0
 8008f9a:	f7ff ff87 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0xC2);	//Normal mode, increase can change the display quality, while increasing power consumption
 8008f9e:	20c2      	movs	r0, #194	@ 0xc2
 8008fa0:	f7ff ff62 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x33);
 8008fa4:	2033      	movs	r0, #51	@ 0x33
 8008fa6:	f7ff ff81 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0XC5);
 8008faa:	20c5      	movs	r0, #197	@ 0xc5
 8008fac:	f7ff ff5c 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	f7ff ff7b 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x28);//VCM_REG[7:0]. <=0X80.
 8008fb6:	2028      	movs	r0, #40	@ 0x28
 8008fb8:	f7ff ff78 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0xB1);//Sets the frame frequency of full color normal mode
 8008fbc:	20b1      	movs	r0, #177	@ 0xb1
 8008fbe:	f7ff ff53 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0xA0);//0XB0 =70HZ, <=0XB0.0xA0=62HZ
 8008fc2:	20a0      	movs	r0, #160	@ 0xa0
 8008fc4:	f7ff ff72 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x11);
 8008fc8:	2011      	movs	r0, #17
 8008fca:	f7ff ff6f 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0xB4);
 8008fce:	20b4      	movs	r0, #180	@ 0xb4
 8008fd0:	f7ff ff4a 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x02); //2 DOT FRAME MODE,F<=70HZ.
 8008fd4:	2002      	movs	r0, #2
 8008fd6:	f7ff ff69 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0xB6);//
 8008fda:	20b6      	movs	r0, #182	@ 0xb6
 8008fdc:	f7ff ff44 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f7ff ff63 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x42);//0 GS SS SM ISC[3:0];
 8008fe6:	2042      	movs	r0, #66	@ 0x42
 8008fe8:	f7ff ff60 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x3B);
 8008fec:	203b      	movs	r0, #59	@ 0x3b
 8008fee:	f7ff ff5d 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0xB7);
 8008ff2:	20b7      	movs	r0, #183	@ 0xb7
 8008ff4:	f7ff ff38 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x07);
 8008ff8:	2007      	movs	r0, #7
 8008ffa:	f7ff ff57 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0xE0);
 8008ffe:	20e0      	movs	r0, #224	@ 0xe0
 8009000:	f7ff ff32 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8009004:	201f      	movs	r0, #31
 8009006:	f7ff ff51 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x25);
 800900a:	2025      	movs	r0, #37	@ 0x25
 800900c:	f7ff ff4e 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x22);
 8009010:	2022      	movs	r0, #34	@ 0x22
 8009012:	f7ff ff4b 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x0B);
 8009016:	200b      	movs	r0, #11
 8009018:	f7ff ff48 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x06);
 800901c:	2006      	movs	r0, #6
 800901e:	f7ff ff45 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x0A);
 8009022:	200a      	movs	r0, #10
 8009024:	f7ff ff42 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x4E);
 8009028:	204e      	movs	r0, #78	@ 0x4e
 800902a:	f7ff ff3f 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0xC6);
 800902e:	20c6      	movs	r0, #198	@ 0xc6
 8009030:	f7ff ff3c 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x39);
 8009034:	2039      	movs	r0, #57	@ 0x39
 8009036:	f7ff ff39 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 800903a:	2000      	movs	r0, #0
 800903c:	f7ff ff36 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 8009040:	2000      	movs	r0, #0
 8009042:	f7ff ff33 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 8009046:	2000      	movs	r0, #0
 8009048:	f7ff ff30 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 800904c:	2000      	movs	r0, #0
 800904e:	f7ff ff2d 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 8009052:	2000      	movs	r0, #0
 8009054:	f7ff ff2a 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 8009058:	2000      	movs	r0, #0
 800905a:	f7ff ff27 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0XE1);
 800905e:	20e1      	movs	r0, #225	@ 0xe1
 8009060:	f7ff ff02 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8009064:	201f      	movs	r0, #31
 8009066:	f7ff ff21 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x3F);
 800906a:	203f      	movs	r0, #63	@ 0x3f
 800906c:	f7ff ff1e 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x3F);
 8009070:	203f      	movs	r0, #63	@ 0x3f
 8009072:	f7ff ff1b 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009076:	200f      	movs	r0, #15
 8009078:	f7ff ff18 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x1F);
 800907c:	201f      	movs	r0, #31
 800907e:	f7ff ff15 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009082:	200f      	movs	r0, #15
 8009084:	f7ff ff12 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x46);
 8009088:	2046      	movs	r0, #70	@ 0x46
 800908a:	f7ff ff0f 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x49);
 800908e:	2049      	movs	r0, #73	@ 0x49
 8009090:	f7ff ff0c 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x31);
 8009094:	2031      	movs	r0, #49	@ 0x31
 8009096:	f7ff ff09 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x05);
 800909a:	2005      	movs	r0, #5
 800909c:	f7ff ff06 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x09);
 80090a0:	2009      	movs	r0, #9
 80090a2:	f7ff ff03 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x03);
 80090a6:	2003      	movs	r0, #3
 80090a8:	f7ff ff00 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x1C);
 80090ac:	201c      	movs	r0, #28
 80090ae:	f7ff fefd 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x1A);
 80090b2:	201a      	movs	r0, #26
 80090b4:	f7ff fefa 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 80090b8:	2000      	movs	r0, #0
 80090ba:	f7ff fef7 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0XF1);
 80090be:	20f1      	movs	r0, #241	@ 0xf1
 80090c0:	f7ff fed2 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x36);
 80090c4:	2036      	movs	r0, #54	@ 0x36
 80090c6:	f7ff fef1 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x04);
 80090ca:	2004      	movs	r0, #4
 80090cc:	f7ff feee 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 80090d0:	2000      	movs	r0, #0
 80090d2:	f7ff feeb 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x3C);
 80090d6:	203c      	movs	r0, #60	@ 0x3c
 80090d8:	f7ff fee8 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x0F);
 80090dc:	200f      	movs	r0, #15
 80090de:	f7ff fee5 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x0F);
 80090e2:	200f      	movs	r0, #15
 80090e4:	f7ff fee2 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0xA4);
 80090e8:	20a4      	movs	r0, #164	@ 0xa4
 80090ea:	f7ff fedf 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x02);
 80090ee:	2002      	movs	r0, #2
 80090f0:	f7ff fedc 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0XF2);
 80090f4:	20f2      	movs	r0, #242	@ 0xf2
 80090f6:	f7ff feb7 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x18);
 80090fa:	2018      	movs	r0, #24
 80090fc:	f7ff fed6 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0xA3);
 8009100:	20a3      	movs	r0, #163	@ 0xa3
 8009102:	f7ff fed3 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x12);
 8009106:	2012      	movs	r0, #18
 8009108:	f7ff fed0 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x02);
 800910c:	2002      	movs	r0, #2
 800910e:	f7ff fecd 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x32);
 8009112:	2032      	movs	r0, #50	@ 0x32
 8009114:	f7ff feca 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x12);
 8009118:	2012      	movs	r0, #18
 800911a:	f7ff fec7 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0xFF);
 800911e:	20ff      	movs	r0, #255	@ 0xff
 8009120:	f7ff fec4 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x32);
 8009124:	2032      	movs	r0, #50	@ 0x32
 8009126:	f7ff fec1 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 800912a:	2000      	movs	r0, #0
 800912c:	f7ff febe 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0XF4);
 8009130:	20f4      	movs	r0, #244	@ 0xf4
 8009132:	f7ff fe99 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x40);
 8009136:	2040      	movs	r0, #64	@ 0x40
 8009138:	f7ff feb8 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x00);
 800913c:	2000      	movs	r0, #0
 800913e:	f7ff feb5 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x08);
 8009142:	2008      	movs	r0, #8
 8009144:	f7ff feb2 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x91);
 8009148:	2091      	movs	r0, #145	@ 0x91
 800914a:	f7ff feaf 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x04);
 800914e:	2004      	movs	r0, #4
 8009150:	f7ff feac 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0XF8);
 8009154:	20f8      	movs	r0, #248	@ 0xf8
 8009156:	f7ff fe87 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x21);
 800915a:	2021      	movs	r0, #33	@ 0x21
 800915c:	f7ff fea6 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(0x04);
 8009160:	2004      	movs	r0, #4
 8009162:	f7ff fea3 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0X3A);	//Set Interface Pixel Format
 8009166:	203a      	movs	r0, #58	@ 0x3a
 8009168:	f7ff fe7e 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0x55);
 800916c:	2055      	movs	r0, #85	@ 0x55
 800916e:	f7ff fe9d 	bl	8008eac <LCD_WriteData>

}
 8009172:	bf00      	nop
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <LCD_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	71fb      	strb	r3, [r7, #7]
    uint16_t MemoryAccessReg_Data = 0; //addr:0x36
 8009182:	2300      	movs	r3, #0
 8009184:	81fb      	strh	r3, [r7, #14]
    uint16_t DisFunReg_Data = 0; //addr:0xB6
 8009186:	2300      	movs	r3, #0
 8009188:	81bb      	strh	r3, [r7, #12]

    // Gets the scan direction of GRAM
    switch (Scan_dir) {
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	2b07      	cmp	r3, #7
 800918e:	d83b      	bhi.n	8009208 <LCD_SetGramScanWay+0x90>
 8009190:	a201      	add	r2, pc, #4	@ (adr r2, 8009198 <LCD_SetGramScanWay+0x20>)
 8009192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009196:	bf00      	nop
 8009198:	080091b9 	.word	0x080091b9
 800919c:	080091c3 	.word	0x080091c3
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	080091d7 	.word	0x080091d7
 80091a8:	080091e1 	.word	0x080091e1
 80091ac:	080091eb 	.word	0x080091eb
 80091b0:	080091f5 	.word	0x080091f5
 80091b4:	080091ff 	.word	0x080091ff
    case L2R_U2D:
        MemoryAccessReg_Data = 0x08;//0x08 | 0X8
 80091b8:	2308      	movs	r3, #8
 80091ba:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 80091bc:	2322      	movs	r3, #34	@ 0x22
 80091be:	81bb      	strh	r3, [r7, #12]
        break;
 80091c0:	e022      	b.n	8009208 <LCD_SetGramScanWay+0x90>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x08;
 80091c2:	2308      	movs	r3, #8
 80091c4:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 80091c6:	2362      	movs	r3, #98	@ 0x62
 80091c8:	81bb      	strh	r3, [r7, #12]
        break;
 80091ca:	e01d      	b.n	8009208 <LCD_SetGramScanWay+0x90>
    case R2L_U2D: //0X4
        MemoryAccessReg_Data = 0x08;
 80091cc:	2308      	movs	r3, #8
 80091ce:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 80091d0:	2302      	movs	r3, #2
 80091d2:	81bb      	strh	r3, [r7, #12]
        break;
 80091d4:	e018      	b.n	8009208 <LCD_SetGramScanWay+0x90>
    case R2L_D2U: //0XC
        MemoryAccessReg_Data = 0x08;
 80091d6:	2308      	movs	r3, #8
 80091d8:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 80091da:	2342      	movs	r3, #66	@ 0x42
 80091dc:	81bb      	strh	r3, [r7, #12]
        break;
 80091de:	e013      	b.n	8009208 <LCD_SetGramScanWay+0x90>
    case U2D_L2R: //0X2
        MemoryAccessReg_Data = 0x28;
 80091e0:	2328      	movs	r3, #40	@ 0x28
 80091e2:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 80091e4:	2322      	movs	r3, #34	@ 0x22
 80091e6:	81bb      	strh	r3, [r7, #12]
        break;
 80091e8:	e00e      	b.n	8009208 <LCD_SetGramScanWay+0x90>
    case U2D_R2L: //0X6
        MemoryAccessReg_Data = 0x28;
 80091ea:	2328      	movs	r3, #40	@ 0x28
 80091ec:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 80091ee:	2302      	movs	r3, #2
 80091f0:	81bb      	strh	r3, [r7, #12]
        break;
 80091f2:	e009      	b.n	8009208 <LCD_SetGramScanWay+0x90>
    case D2U_L2R: //0XA
        MemoryAccessReg_Data = 0x28;
 80091f4:	2328      	movs	r3, #40	@ 0x28
 80091f6:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 80091f8:	2362      	movs	r3, #98	@ 0x62
 80091fa:	81bb      	strh	r3, [r7, #12]
        break;
 80091fc:	e004      	b.n	8009208 <LCD_SetGramScanWay+0x90>
    case D2U_R2L: //0XE
        MemoryAccessReg_Data = 0x28;
 80091fe:	2328      	movs	r3, #40	@ 0x28
 8009200:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 8009202:	2342      	movs	r3, #66	@ 0x42
 8009204:	81bb      	strh	r3, [r7, #12]
        break;
 8009206:	bf00      	nop
    }

    //Get the screen scan direction
    sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8009208:	4a1b      	ldr	r2, [pc, #108]	@ (8009278 <LCD_SetGramScanWay+0x100>)
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	7113      	strb	r3, [r2, #4]

    //Get GRAM and LCD width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d008      	beq.n	8009226 <LCD_SetGramScanWay+0xae>
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d005      	beq.n	8009226 <LCD_SetGramScanWay+0xae>
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d002      	beq.n	8009226 <LCD_SetGramScanWay+0xae>
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	2b03      	cmp	r3, #3
 8009224:	d108      	bne.n	8009238 <LCD_SetGramScanWay+0xc0>
        sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8009226:	4b14      	ldr	r3, [pc, #80]	@ (8009278 <LCD_SetGramScanWay+0x100>)
 8009228:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800922c:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;
 800922e:	4b12      	ldr	r3, [pc, #72]	@ (8009278 <LCD_SetGramScanWay+0x100>)
 8009230:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009234:	805a      	strh	r2, [r3, #2]
 8009236:	e007      	b.n	8009248 <LCD_SetGramScanWay+0xd0>
    } else {
        sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 8009238:	4b0f      	ldr	r3, [pc, #60]	@ (8009278 <LCD_SetGramScanWay+0x100>)
 800923a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800923e:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;
 8009240:	4b0d      	ldr	r3, [pc, #52]	@ (8009278 <LCD_SetGramScanWay+0x100>)
 8009242:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009246:	805a      	strh	r2, [r3, #2]
    }

    // Set the read / write scan direction of the frame memory
    LCD_WriteReg(0xB6);
 8009248:	20b6      	movs	r0, #182	@ 0xb6
 800924a:	f7ff fe0d 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(0X00);
 800924e:	2000      	movs	r0, #0
 8009250:	f7ff fe2c 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(DisFunReg_Data);
 8009254:	89bb      	ldrh	r3, [r7, #12]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff fe27 	bl	8008eac <LCD_WriteData>

    LCD_WriteReg(0x36);
 800925e:	2036      	movs	r0, #54	@ 0x36
 8009260:	f7ff fe02 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(MemoryAccessReg_Data);
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff fe1f 	bl	8008eac <LCD_WriteData>
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20002110 	.word	0x20002110

0800927c <LCD_Init>:
/********************************************************************************
function:
	initialization
********************************************************************************/
void LCD_Init(LCD_SCAN_DIR LCD_ScanDir, uint16_t LCD_BLval)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	460a      	mov	r2, r1
 8009286:	71fb      	strb	r3, [r7, #7]
 8009288:	4613      	mov	r3, r2
 800928a:	80bb      	strh	r3, [r7, #4]
    //Hardware reset
    LCD_Reset();
 800928c:	f7ff fdba 	bl	8008e04 <LCD_Reset>

	if(LCD_BLval > 65535)
		LCD_BLval = 65535;
	LCD_SetBackLight(LCD_BLval);
 8009290:	88bb      	ldrh	r3, [r7, #4]
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff fdda 	bl	8008e4c <LCD_SetBackLight>
	
    //Set the initialization register
    LCD_InitReg();
 8009298:	f7ff fe64 	bl	8008f64 <LCD_InitReg>

    //Set the display scan and color transfer modes
    LCD_SetGramScanWay( LCD_ScanDir);
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff ff6a 	bl	8009178 <LCD_SetGramScanWay>
    Driver_Delay_ms(200);
 80092a4:	20c8      	movs	r0, #200	@ 0xc8
 80092a6:	f7ff f8b1 	bl	800840c <Driver_Delay_ms>

    //sleep out
    LCD_WriteReg(0x11);
 80092aa:	2011      	movs	r0, #17
 80092ac:	f7ff fddc 	bl	8008e68 <LCD_WriteReg>
    Driver_Delay_ms(120);
 80092b0:	2078      	movs	r0, #120	@ 0x78
 80092b2:	f7ff f8ab 	bl	800840c <Driver_Delay_ms>

    //Turn on the LCD display
    LCD_WriteReg(0x29);
 80092b6:	2029      	movs	r0, #41	@ 0x29
 80092b8:	f7ff fdd6 	bl	8008e68 <LCD_WriteReg>
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <LCD_SetWindow>:
	Ystart  :   Y direction Start coordinates
	Xend    :   X direction end coordinates
	Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindow(POINT Xstart, POINT Ystart,	POINT Xend, POINT Yend)
{
 80092c4:	b590      	push	{r4, r7, lr}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4604      	mov	r4, r0
 80092cc:	4608      	mov	r0, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	461a      	mov	r2, r3
 80092d2:	4623      	mov	r3, r4
 80092d4:	80fb      	strh	r3, [r7, #6]
 80092d6:	4603      	mov	r3, r0
 80092d8:	80bb      	strh	r3, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	807b      	strh	r3, [r7, #2]
 80092de:	4613      	mov	r3, r2
 80092e0:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_WriteReg(0x2A);
 80092e2:	202a      	movs	r0, #42	@ 0x2a
 80092e4:	f7ff fdc0 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(Xstart >> 8);	 				//Set the horizontal starting point to the high octet
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	0a1b      	lsrs	r3, r3, #8
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff fddb 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(Xstart & 0xff);	 				//Set the horizontal starting point to the low octet
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fdd6 	bl	8008eac <LCD_WriteData>
    LCD_WriteData((Xend - 1) >> 8);	//Set the horizontal end to the high octet
 8009300:	887b      	ldrh	r3, [r7, #2]
 8009302:	3b01      	subs	r3, #1
 8009304:	121b      	asrs	r3, r3, #8
 8009306:	b2db      	uxtb	r3, r3
 8009308:	4618      	mov	r0, r3
 800930a:	f7ff fdcf 	bl	8008eac <LCD_WriteData>
    LCD_WriteData((Xend - 1) & 0xff);	//Set the horizontal end to the low octet
 800930e:	887b      	ldrh	r3, [r7, #2]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b2db      	uxtb	r3, r3
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fdc8 	bl	8008eac <LCD_WriteData>

    //set the Y coordinates
    LCD_WriteReg(0x2B);
 800931c:	202b      	movs	r0, #43	@ 0x2b
 800931e:	f7ff fda3 	bl	8008e68 <LCD_WriteReg>
    LCD_WriteData(Ystart >> 8);
 8009322:	88bb      	ldrh	r3, [r7, #4]
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	b29b      	uxth	r3, r3
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fdbe 	bl	8008eac <LCD_WriteData>
    LCD_WriteData(Ystart & 0xff );
 8009330:	88bb      	ldrh	r3, [r7, #4]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff fdb9 	bl	8008eac <LCD_WriteData>
    LCD_WriteData((Yend - 1) >> 8);
 800933a:	883b      	ldrh	r3, [r7, #0]
 800933c:	3b01      	subs	r3, #1
 800933e:	121b      	asrs	r3, r3, #8
 8009340:	b2db      	uxtb	r3, r3
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff fdb2 	bl	8008eac <LCD_WriteData>
    LCD_WriteData((Yend - 1) & 0xff);
 8009348:	883b      	ldrh	r3, [r7, #0]
 800934a:	b2db      	uxtb	r3, r3
 800934c:	3b01      	subs	r3, #1
 800934e:	b2db      	uxtb	r3, r3
 8009350:	4618      	mov	r0, r3
 8009352:	f7ff fdab 	bl	8008eac <LCD_WriteData>
    LCD_WriteReg(0x2C);
 8009356:	202c      	movs	r0, #44	@ 0x2c
 8009358:	f7ff fd86 	bl	8008e68 <LCD_WriteReg>
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	bd90      	pop	{r4, r7, pc}

08009364 <LCD_SetCursor>:
parameter:
	xStart :   X direction Start coordinates
	xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor(POINT Xpoint, POINT Ypoint)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	460a      	mov	r2, r1
 800936e:	80fb      	strh	r3, [r7, #6]
 8009370:	4613      	mov	r3, r2
 8009372:	80bb      	strh	r3, [r7, #4]
    LCD_SetWindow(Xpoint, Ypoint, Xpoint, Ypoint);
 8009374:	88bb      	ldrh	r3, [r7, #4]
 8009376:	88fa      	ldrh	r2, [r7, #6]
 8009378:	88b9      	ldrh	r1, [r7, #4]
 800937a:	88f8      	ldrh	r0, [r7, #6]
 800937c:	f7ff ffa2 	bl	80092c4 <LCD_SetWindow>
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <LCD_SetColor>:
parameter:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void LCD_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor(COLOR Color , POINT Xpoint, POINT Ypoint)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	80fb      	strh	r3, [r7, #6]
 8009392:	460b      	mov	r3, r1
 8009394:	80bb      	strh	r3, [r7, #4]
 8009396:	4613      	mov	r3, r2
 8009398:	807b      	strh	r3, [r7, #2]
    LCD_Write_AllData(Color , (uint32_t)Xpoint * (uint32_t)Ypoint);
 800939a:	88bb      	ldrh	r3, [r7, #4]
 800939c:	887a      	ldrh	r2, [r7, #2]
 800939e:	fb03 f202 	mul.w	r2, r3, r2
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff fda8 	bl	8008efc <LCD_Write_AllData>
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <LCD_SetPointlColor>:
	Xpoint :   The x coordinate of the point
	Ypoint :   The y coordinate of the point
	Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor( POINT Xpoint, POINT Ypoint, COLOR Color)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	80fb      	strh	r3, [r7, #6]
 80093be:	460b      	mov	r3, r1
 80093c0:	80bb      	strh	r3, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	807b      	strh	r3, [r7, #2]
    if ((Xpoint <= sLCD_DIS.LCD_Dis_Column) && (Ypoint <= sLCD_DIS.LCD_Dis_Page)) {
 80093c6:	4b0d      	ldr	r3, [pc, #52]	@ (80093fc <LCD_SetPointlColor+0x48>)
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	88fa      	ldrh	r2, [r7, #6]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d810      	bhi.n	80093f2 <LCD_SetPointlColor+0x3e>
 80093d0:	4b0a      	ldr	r3, [pc, #40]	@ (80093fc <LCD_SetPointlColor+0x48>)
 80093d2:	885b      	ldrh	r3, [r3, #2]
 80093d4:	88ba      	ldrh	r2, [r7, #4]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d80b      	bhi.n	80093f2 <LCD_SetPointlColor+0x3e>
        LCD_SetCursor (Xpoint, Ypoint);
 80093da:	88ba      	ldrh	r2, [r7, #4]
 80093dc:	88fb      	ldrh	r3, [r7, #6]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff ffbf 	bl	8009364 <LCD_SetCursor>
        LCD_SetColor(Color, 1, 1);
 80093e6:	887b      	ldrh	r3, [r7, #2]
 80093e8:	2201      	movs	r2, #1
 80093ea:	2101      	movs	r1, #1
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff ffcb 	bl	8009388 <LCD_SetColor>
    }
}
 80093f2:	bf00      	nop
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20002110 	.word	0x20002110

08009400 <LCD_SetArealColor>:
	Xend   :   End point coordinates
	Yend   :   End point coordinates
	Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR Color)
{
 8009400:	b590      	push	{r4, r7, lr}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	461a      	mov	r2, r3
 800940e:	4623      	mov	r3, r4
 8009410:	80fb      	strh	r3, [r7, #6]
 8009412:	4603      	mov	r3, r0
 8009414:	80bb      	strh	r3, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	807b      	strh	r3, [r7, #2]
 800941a:	4613      	mov	r3, r2
 800941c:	803b      	strh	r3, [r7, #0]
    if((Xend > Xstart) && (Yend > Ystart)) {
 800941e:	887a      	ldrh	r2, [r7, #2]
 8009420:	88fb      	ldrh	r3, [r7, #6]
 8009422:	429a      	cmp	r2, r3
 8009424:	d915      	bls.n	8009452 <LCD_SetArealColor+0x52>
 8009426:	883a      	ldrh	r2, [r7, #0]
 8009428:	88bb      	ldrh	r3, [r7, #4]
 800942a:	429a      	cmp	r2, r3
 800942c:	d911      	bls.n	8009452 <LCD_SetArealColor+0x52>
        LCD_SetWindow(Xstart , Ystart , Xend , Yend  );
 800942e:	883b      	ldrh	r3, [r7, #0]
 8009430:	887a      	ldrh	r2, [r7, #2]
 8009432:	88b9      	ldrh	r1, [r7, #4]
 8009434:	88f8      	ldrh	r0, [r7, #6]
 8009436:	f7ff ff45 	bl	80092c4 <LCD_SetWindow>
        LCD_SetColor ( Color , Xend - Xstart, Yend - Ystart);
 800943a:	887a      	ldrh	r2, [r7, #2]
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	b299      	uxth	r1, r3
 8009442:	883a      	ldrh	r2, [r7, #0]
 8009444:	88bb      	ldrh	r3, [r7, #4]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	b29a      	uxth	r2, r3
 800944a:	8b3b      	ldrh	r3, [r7, #24]
 800944c:	4618      	mov	r0, r3
 800944e:	f7ff ff9b 	bl	8009388 <LCD_SetColor>
    }
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	bd90      	pop	{r4, r7, pc}
	...

0800945c <LCD_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_Clear(COLOR  Color)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af02      	add	r7, sp, #8
 8009462:	4603      	mov	r3, r0
 8009464:	80fb      	strh	r3, [r7, #6]
    LCD_SetArealColor(0, 0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page , Color);
 8009466:	4b07      	ldr	r3, [pc, #28]	@ (8009484 <LCD_Clear+0x28>)
 8009468:	881a      	ldrh	r2, [r3, #0]
 800946a:	4b06      	ldr	r3, [pc, #24]	@ (8009484 <LCD_Clear+0x28>)
 800946c:	8859      	ldrh	r1, [r3, #2]
 800946e:	88fb      	ldrh	r3, [r7, #6]
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	460b      	mov	r3, r1
 8009474:	2100      	movs	r1, #0
 8009476:	2000      	movs	r0, #0
 8009478:	f7ff ffc2 	bl	8009400 <LCD_SetArealColor>
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20002110 	.word	0x20002110

08009488 <GUI_Swop>:
extern LCD_DIS sLCD_DIS;
/******************************************************************************
function:	Coordinate conversion
******************************************************************************/
void GUI_Swop(POINT Point1, POINT Point2)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	460a      	mov	r2, r1
 8009492:	80fb      	strh	r3, [r7, #6]
 8009494:	4613      	mov	r3, r2
 8009496:	80bb      	strh	r3, [r7, #4]
    POINT Temp;
    Temp = Point1;
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	81fb      	strh	r3, [r7, #14]
    Point1 = Point2;
 800949c:	88bb      	ldrh	r3, [r7, #4]
 800949e:	80fb      	strh	r3, [r7, #6]
    Point2 = Temp;
 80094a0:	89fb      	ldrh	r3, [r7, #14]
 80094a2:	80bb      	strh	r3, [r7, #4]
}
 80094a4:	bf00      	nop
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <GUI_DrawPoint>:
	Color		:   Set color
	Dot_Pixel	:	point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 80094b0:	b590      	push	{r4, r7, lr}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	4611      	mov	r1, r2
 80094bc:	461a      	mov	r2, r3
 80094be:	4623      	mov	r3, r4
 80094c0:	80fb      	strh	r3, [r7, #6]
 80094c2:	4603      	mov	r3, r0
 80094c4:	80bb      	strh	r3, [r7, #4]
 80094c6:	460b      	mov	r3, r1
 80094c8:	807b      	strh	r3, [r7, #2]
 80094ca:	4613      	mov	r3, r2
 80094cc:	707b      	strb	r3, [r7, #1]
    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 80094ce:	4b34      	ldr	r3, [pc, #208]	@ (80095a0 <GUI_DrawPoint+0xf0>)
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	88fa      	ldrh	r2, [r7, #6]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d804      	bhi.n	80094e2 <GUI_DrawPoint+0x32>
 80094d8:	4b31      	ldr	r3, [pc, #196]	@ (80095a0 <GUI_DrawPoint+0xf0>)
 80094da:	885b      	ldrh	r3, [r3, #2]
 80094dc:	88ba      	ldrh	r2, [r7, #4]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d903      	bls.n	80094ea <GUI_DrawPoint+0x3a>
        DEBUG("GUI_DrawPoint Input exceeds the normal display range\r\n");
 80094e2:	4830      	ldr	r0, [pc, #192]	@ (80095a4 <GUI_DrawPoint+0xf4>)
 80094e4:	f001 ffba 	bl	800b45c <puts>
        return;
 80094e8:	e056      	b.n	8009598 <GUI_DrawPoint+0xe8>
    }

    uint16_t XDir_Num , YDir_Num;
    if(DOT_STYLE == DOT_STYLE_DFT) {
 80094ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d12c      	bne.n	800954c <GUI_DrawPoint+0x9c>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80094f2:	2300      	movs	r3, #0
 80094f4:	81fb      	strh	r3, [r7, #14]
 80094f6:	e022      	b.n	800953e <GUI_DrawPoint+0x8e>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80094f8:	2300      	movs	r3, #0
 80094fa:	81bb      	strh	r3, [r7, #12]
 80094fc:	e016      	b.n	800952c <GUI_DrawPoint+0x7c>
                LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80094fe:	88fa      	ldrh	r2, [r7, #6]
 8009500:	89fb      	ldrh	r3, [r7, #14]
 8009502:	4413      	add	r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	787b      	ldrb	r3, [r7, #1]
 8009508:	b29b      	uxth	r3, r3
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	b298      	uxth	r0, r3
 800950e:	88ba      	ldrh	r2, [r7, #4]
 8009510:	89bb      	ldrh	r3, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	b29a      	uxth	r2, r3
 8009516:	787b      	ldrb	r3, [r7, #1]
 8009518:	b29b      	uxth	r3, r3
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	b29b      	uxth	r3, r3
 800951e:	887a      	ldrh	r2, [r7, #2]
 8009520:	4619      	mov	r1, r3
 8009522:	f7ff ff47 	bl	80093b4 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8009526:	89bb      	ldrh	r3, [r7, #12]
 8009528:	3301      	adds	r3, #1
 800952a:	81bb      	strh	r3, [r7, #12]
 800952c:	89ba      	ldrh	r2, [r7, #12]
 800952e:	787b      	ldrb	r3, [r7, #1]
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	3b01      	subs	r3, #1
 8009534:	429a      	cmp	r2, r3
 8009536:	dbe2      	blt.n	80094fe <GUI_DrawPoint+0x4e>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8009538:	89fb      	ldrh	r3, [r7, #14]
 800953a:	3301      	adds	r3, #1
 800953c:	81fb      	strh	r3, [r7, #14]
 800953e:	89fa      	ldrh	r2, [r7, #14]
 8009540:	787b      	ldrb	r3, [r7, #1]
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	3b01      	subs	r3, #1
 8009546:	429a      	cmp	r2, r3
 8009548:	dbd6      	blt.n	80094f8 <GUI_DrawPoint+0x48>
 800954a:	e025      	b.n	8009598 <GUI_DrawPoint+0xe8>
            }
        }
    } else {
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800954c:	2300      	movs	r3, #0
 800954e:	81fb      	strh	r3, [r7, #14]
 8009550:	e01d      	b.n	800958e <GUI_DrawPoint+0xde>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8009552:	2300      	movs	r3, #0
 8009554:	81bb      	strh	r3, [r7, #12]
 8009556:	e012      	b.n	800957e <GUI_DrawPoint+0xce>
                LCD_SetPointlColor(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8009558:	88fa      	ldrh	r2, [r7, #6]
 800955a:	89fb      	ldrh	r3, [r7, #14]
 800955c:	4413      	add	r3, r2
 800955e:	b29b      	uxth	r3, r3
 8009560:	3b01      	subs	r3, #1
 8009562:	b298      	uxth	r0, r3
 8009564:	88ba      	ldrh	r2, [r7, #4]
 8009566:	89bb      	ldrh	r3, [r7, #12]
 8009568:	4413      	add	r3, r2
 800956a:	b29b      	uxth	r3, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	b29b      	uxth	r3, r3
 8009570:	887a      	ldrh	r2, [r7, #2]
 8009572:	4619      	mov	r1, r3
 8009574:	f7ff ff1e 	bl	80093b4 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8009578:	89bb      	ldrh	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	81bb      	strh	r3, [r7, #12]
 800957e:	787b      	ldrb	r3, [r7, #1]
 8009580:	b29b      	uxth	r3, r3
 8009582:	89ba      	ldrh	r2, [r7, #12]
 8009584:	429a      	cmp	r2, r3
 8009586:	d3e7      	bcc.n	8009558 <GUI_DrawPoint+0xa8>
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8009588:	89fb      	ldrh	r3, [r7, #14]
 800958a:	3301      	adds	r3, #1
 800958c:	81fb      	strh	r3, [r7, #14]
 800958e:	787b      	ldrb	r3, [r7, #1]
 8009590:	b29b      	uxth	r3, r3
 8009592:	89fa      	ldrh	r2, [r7, #14]
 8009594:	429a      	cmp	r2, r3
 8009596:	d3dc      	bcc.n	8009552 <GUI_DrawPoint+0xa2>
            }
        }
    }
}
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	bd90      	pop	{r4, r7, pc}
 800959e:	bf00      	nop
 80095a0:	20002110 	.word	0x20002110
 80095a4:	0800c260 	.word	0x0800c260

080095a8 <GUI_DrawLine>:
	Yend   ：End point y coordinate
	Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 80095a8:	b590      	push	{r4, r7, lr}
 80095aa:	b08d      	sub	sp, #52	@ 0x34
 80095ac:	af02      	add	r7, sp, #8
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	461a      	mov	r2, r3
 80095b6:	4623      	mov	r3, r4
 80095b8:	80fb      	strh	r3, [r7, #6]
 80095ba:	4603      	mov	r3, r0
 80095bc:	80bb      	strh	r3, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	807b      	strh	r3, [r7, #2]
 80095c2:	4613      	mov	r3, r2
 80095c4:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80095c6:	4b58      	ldr	r3, [pc, #352]	@ (8009728 <GUI_DrawLine+0x180>)
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	88fa      	ldrh	r2, [r7, #6]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d80e      	bhi.n	80095ee <GUI_DrawLine+0x46>
 80095d0:	4b55      	ldr	r3, [pc, #340]	@ (8009728 <GUI_DrawLine+0x180>)
 80095d2:	885b      	ldrh	r3, [r3, #2]
 80095d4:	88ba      	ldrh	r2, [r7, #4]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d809      	bhi.n	80095ee <GUI_DrawLine+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80095da:	4b53      	ldr	r3, [pc, #332]	@ (8009728 <GUI_DrawLine+0x180>)
 80095dc:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80095de:	887a      	ldrh	r2, [r7, #2]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d804      	bhi.n	80095ee <GUI_DrawLine+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80095e4:	4b50      	ldr	r3, [pc, #320]	@ (8009728 <GUI_DrawLine+0x180>)
 80095e6:	885b      	ldrh	r3, [r3, #2]
 80095e8:	883a      	ldrh	r2, [r7, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d903      	bls.n	80095f6 <GUI_DrawLine+0x4e>
        DEBUG("GUI_DrawLine Input exceeds the normal display range\r\n");
 80095ee:	484f      	ldr	r0, [pc, #316]	@ (800972c <GUI_DrawLine+0x184>)
 80095f0:	f001 ff34 	bl	800b45c <puts>
        return;
 80095f4:	e094      	b.n	8009720 <GUI_DrawLine+0x178>
    }

    if(Xstart > Xend)
 80095f6:	88fa      	ldrh	r2, [r7, #6]
 80095f8:	887b      	ldrh	r3, [r7, #2]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d905      	bls.n	800960a <GUI_DrawLine+0x62>
        GUI_Swop(Xstart, Xend);
 80095fe:	887a      	ldrh	r2, [r7, #2]
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	4611      	mov	r1, r2
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff ff3f 	bl	8009488 <GUI_Swop>
    if(Ystart > Yend)
 800960a:	88ba      	ldrh	r2, [r7, #4]
 800960c:	883b      	ldrh	r3, [r7, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d905      	bls.n	800961e <GUI_DrawLine+0x76>
        GUI_Swop(Ystart, Yend);
 8009612:	883a      	ldrh	r2, [r7, #0]
 8009614:	88bb      	ldrh	r3, [r7, #4]
 8009616:	4611      	mov	r1, r2
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff ff35 	bl	8009488 <GUI_Swop>

    POINT Xpoint = Xstart;
 800961e:	88fb      	ldrh	r3, [r7, #6]
 8009620:	84fb      	strh	r3, [r7, #38]	@ 0x26
    POINT Ypoint = Ystart;
 8009622:	88bb      	ldrh	r3, [r7, #4]
 8009624:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8009626:	887a      	ldrh	r2, [r7, #2]
 8009628:	88fb      	ldrh	r3, [r7, #6]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	bfb8      	it	lt
 8009630:	425b      	neglt	r3, r3
 8009632:	61bb      	str	r3, [r7, #24]
    int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8009634:	883a      	ldrh	r2, [r7, #0]
 8009636:	88bb      	ldrh	r3, [r7, #4]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	bfb8      	it	lt
 800963e:	425b      	neglt	r3, r3
 8009640:	425b      	negs	r3, r3
 8009642:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int32_t XAddway = Xstart < Xend ? 1 : -1;
 8009644:	88fa      	ldrh	r2, [r7, #6]
 8009646:	887b      	ldrh	r3, [r7, #2]
 8009648:	429a      	cmp	r2, r3
 800964a:	d201      	bcs.n	8009650 <GUI_DrawLine+0xa8>
 800964c:	2301      	movs	r3, #1
 800964e:	e001      	b.n	8009654 <GUI_DrawLine+0xac>
 8009650:	f04f 33ff 	mov.w	r3, #4294967295
 8009654:	613b      	str	r3, [r7, #16]
    int32_t YAddway = Ystart < Yend ? 1 : -1;
 8009656:	88ba      	ldrh	r2, [r7, #4]
 8009658:	883b      	ldrh	r3, [r7, #0]
 800965a:	429a      	cmp	r2, r3
 800965c:	d201      	bcs.n	8009662 <GUI_DrawLine+0xba>
 800965e:	2301      	movs	r3, #1
 8009660:	e001      	b.n	8009666 <GUI_DrawLine+0xbe>
 8009662:	f04f 33ff 	mov.w	r3, #4294967295
 8009666:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int32_t Esp = dx + dy;
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	4413      	add	r3, r2
 800966e:	623b      	str	r3, [r7, #32]
    int8_t Line_Style_Temp = 0;
 8009670:	2300      	movs	r3, #0
 8009672:	77fb      	strb	r3, [r7, #31]

    for(;;) {
        Line_Style_Temp++;
 8009674:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009678:	b2db      	uxtb	r3, r3
 800967a:	3301      	adds	r3, #1
 800967c:	b2db      	uxtb	r3, r3
 800967e:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if(Line_Style == LINE_DOTTED && Line_Style_Temp % 3 == 0) {
 8009680:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8009684:	2b01      	cmp	r3, #1
 8009686:	d11a      	bne.n	80096be <GUI_DrawLine+0x116>
 8009688:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800968c:	4b28      	ldr	r3, [pc, #160]	@ (8009730 <GUI_DrawLine+0x188>)
 800968e:	fb83 3102 	smull	r3, r1, r3, r2
 8009692:	17d3      	asrs	r3, r2, #31
 8009694:	1ac9      	subs	r1, r1, r3
 8009696:	460b      	mov	r3, r1
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	440b      	add	r3, r1
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	b25b      	sxtb	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10c      	bne.n	80096be <GUI_DrawLine+0x116>
            //DEBUG("LINE_DOTTED\r\n");
            GUI_DrawPoint(Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 80096a4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80096a8:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80096aa:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80096ac:	2201      	movs	r2, #1
 80096ae:	9200      	str	r2, [sp, #0]
 80096b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096b4:	f7ff fefc 	bl	80094b0 <GUI_DrawPoint>
            Line_Style_Temp = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e008      	b.n	80096d0 <GUI_DrawLine+0x128>
        } else {
            GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 80096be:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80096c2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80096c4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80096c6:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80096c8:	2401      	movs	r4, #1
 80096ca:	9400      	str	r4, [sp, #0]
 80096cc:	f7ff fef0 	bl	80094b0 <GUI_DrawPoint>
        }
        if(2 * Esp >= dy) {
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	dc0c      	bgt.n	80096f4 <GUI_DrawLine+0x14c>
            if(Xpoint == Xend) break;
 80096da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80096dc:	887b      	ldrh	r3, [r7, #2]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d01b      	beq.n	800971a <GUI_DrawLine+0x172>
            Esp += dy;
 80096e2:	6a3a      	ldr	r2, [r7, #32]
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	4413      	add	r3, r2
 80096e8:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80096f0:	4413      	add	r3, r2
 80096f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if(2 * Esp <= dx) {
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	dbba      	blt.n	8009674 <GUI_DrawLine+0xcc>
            if(Ypoint == Yend) break;
 80096fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009700:	883b      	ldrh	r3, [r7, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d00b      	beq.n	800971e <GUI_DrawLine+0x176>
            Esp += dx;
 8009706:	6a3a      	ldr	r2, [r7, #32]
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	4413      	add	r3, r2
 800970c:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	b29a      	uxth	r2, r3
 8009712:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009714:	4413      	add	r3, r2
 8009716:	84bb      	strh	r3, [r7, #36]	@ 0x24
        Line_Style_Temp++;
 8009718:	e7ac      	b.n	8009674 <GUI_DrawLine+0xcc>
            if(Xpoint == Xend) break;
 800971a:	bf00      	nop
 800971c:	e000      	b.n	8009720 <GUI_DrawLine+0x178>
            if(Ypoint == Yend) break;
 800971e:	bf00      	nop
        }
    }
}
 8009720:	372c      	adds	r7, #44	@ 0x2c
 8009722:	46bd      	mov	sp, r7
 8009724:	bd90      	pop	{r4, r7, pc}
 8009726:	bf00      	nop
 8009728:	20002110 	.word	0x20002110
 800972c:	0800c2a0 	.word	0x0800c2a0
 8009730:	55555556 	.word	0x55555556

08009734 <GUI_DrawRectangle>:
	Color  ：The color of the Rectangular segment
	Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel)
{
 8009734:	b590      	push	{r4, r7, lr}
 8009736:	b087      	sub	sp, #28
 8009738:	af04      	add	r7, sp, #16
 800973a:	4604      	mov	r4, r0
 800973c:	4608      	mov	r0, r1
 800973e:	4611      	mov	r1, r2
 8009740:	461a      	mov	r2, r3
 8009742:	4623      	mov	r3, r4
 8009744:	80fb      	strh	r3, [r7, #6]
 8009746:	4603      	mov	r3, r0
 8009748:	80bb      	strh	r3, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	807b      	strh	r3, [r7, #2]
 800974e:	4613      	mov	r3, r2
 8009750:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8009752:	4b3a      	ldr	r3, [pc, #232]	@ (800983c <GUI_DrawRectangle+0x108>)
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	88fa      	ldrh	r2, [r7, #6]
 8009758:	429a      	cmp	r2, r3
 800975a:	d80e      	bhi.n	800977a <GUI_DrawRectangle+0x46>
 800975c:	4b37      	ldr	r3, [pc, #220]	@ (800983c <GUI_DrawRectangle+0x108>)
 800975e:	885b      	ldrh	r3, [r3, #2]
 8009760:	88ba      	ldrh	r2, [r7, #4]
 8009762:	429a      	cmp	r2, r3
 8009764:	d809      	bhi.n	800977a <GUI_DrawRectangle+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8009766:	4b35      	ldr	r3, [pc, #212]	@ (800983c <GUI_DrawRectangle+0x108>)
 8009768:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800976a:	887a      	ldrh	r2, [r7, #2]
 800976c:	429a      	cmp	r2, r3
 800976e:	d804      	bhi.n	800977a <GUI_DrawRectangle+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8009770:	4b32      	ldr	r3, [pc, #200]	@ (800983c <GUI_DrawRectangle+0x108>)
 8009772:	885b      	ldrh	r3, [r3, #2]
 8009774:	883a      	ldrh	r2, [r7, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d903      	bls.n	8009782 <GUI_DrawRectangle+0x4e>
        DEBUG("Input exceeds the normal display range\r\n");
 800977a:	4831      	ldr	r0, [pc, #196]	@ (8009840 <GUI_DrawRectangle+0x10c>)
 800977c:	f001 fe6e 	bl	800b45c <puts>
        return;
 8009780:	e058      	b.n	8009834 <GUI_DrawRectangle+0x100>
    }

    if(Xstart > Xend)
 8009782:	88fa      	ldrh	r2, [r7, #6]
 8009784:	887b      	ldrh	r3, [r7, #2]
 8009786:	429a      	cmp	r2, r3
 8009788:	d905      	bls.n	8009796 <GUI_DrawRectangle+0x62>
        GUI_Swop(Xstart, Xend);
 800978a:	887a      	ldrh	r2, [r7, #2]
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fe79 	bl	8009488 <GUI_Swop>
    if(Ystart > Yend)
 8009796:	88ba      	ldrh	r2, [r7, #4]
 8009798:	883b      	ldrh	r3, [r7, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d905      	bls.n	80097aa <GUI_DrawRectangle+0x76>
        GUI_Swop(Ystart, Yend);
 800979e:	883a      	ldrh	r2, [r7, #0]
 80097a0:	88bb      	ldrh	r3, [r7, #4]
 80097a2:	4611      	mov	r1, r2
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff fe6f 	bl	8009488 <GUI_Swop>

    
    if(Filled ) {
 80097aa:	7f3b      	ldrb	r3, [r7, #28]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d009      	beq.n	80097c4 <GUI_DrawRectangle+0x90>
		POINT Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
        }
	#elif HIGH_Speed_Show
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 80097b0:	883c      	ldrh	r4, [r7, #0]
 80097b2:	887a      	ldrh	r2, [r7, #2]
 80097b4:	88b9      	ldrh	r1, [r7, #4]
 80097b6:	88f8      	ldrh	r0, [r7, #6]
 80097b8:	8b3b      	ldrh	r3, [r7, #24]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	4623      	mov	r3, r4
 80097be:	f7ff fe1f 	bl	8009400 <LCD_SetArealColor>
 80097c2:	e037      	b.n	8009834 <GUI_DrawRectangle+0x100>
	#endif
    } else {
        GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 80097c4:	88bc      	ldrh	r4, [r7, #4]
 80097c6:	887a      	ldrh	r2, [r7, #2]
 80097c8:	88b9      	ldrh	r1, [r7, #4]
 80097ca:	88f8      	ldrh	r0, [r7, #6]
 80097cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097d0:	9302      	str	r3, [sp, #8]
 80097d2:	2300      	movs	r3, #0
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	8b3b      	ldrh	r3, [r7, #24]
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	4623      	mov	r3, r4
 80097dc:	f7ff fee4 	bl	80095a8 <GUI_DrawLine>
        GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 80097e0:	883c      	ldrh	r4, [r7, #0]
 80097e2:	88fa      	ldrh	r2, [r7, #6]
 80097e4:	88b9      	ldrh	r1, [r7, #4]
 80097e6:	88f8      	ldrh	r0, [r7, #6]
 80097e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097ec:	9302      	str	r3, [sp, #8]
 80097ee:	2300      	movs	r3, #0
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	8b3b      	ldrh	r3, [r7, #24]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	4623      	mov	r3, r4
 80097f8:	f7ff fed6 	bl	80095a8 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 80097fc:	88bc      	ldrh	r4, [r7, #4]
 80097fe:	887a      	ldrh	r2, [r7, #2]
 8009800:	8839      	ldrh	r1, [r7, #0]
 8009802:	8878      	ldrh	r0, [r7, #2]
 8009804:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009808:	9302      	str	r3, [sp, #8]
 800980a:	2300      	movs	r3, #0
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	8b3b      	ldrh	r3, [r7, #24]
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	4623      	mov	r3, r4
 8009814:	f7ff fec8 	bl	80095a8 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8009818:	883c      	ldrh	r4, [r7, #0]
 800981a:	88fa      	ldrh	r2, [r7, #6]
 800981c:	8839      	ldrh	r1, [r7, #0]
 800981e:	8878      	ldrh	r0, [r7, #2]
 8009820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009824:	9302      	str	r3, [sp, #8]
 8009826:	2300      	movs	r3, #0
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	8b3b      	ldrh	r3, [r7, #24]
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	4623      	mov	r3, r4
 8009830:	f7ff feba 	bl	80095a8 <GUI_DrawLine>
    }
}
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	bd90      	pop	{r4, r7, pc}
 800983a:	bf00      	nop
 800983c:	20002110 	.word	0x20002110
 8009840:	0800c2e0 	.word	0x0800c2e0

08009844 <GUI_DisChar>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b08a      	sub	sp, #40	@ 0x28
 8009848:	af02      	add	r7, sp, #8
 800984a:	607b      	str	r3, [r7, #4]
 800984c:	4603      	mov	r3, r0
 800984e:	81fb      	strh	r3, [r7, #14]
 8009850:	460b      	mov	r3, r1
 8009852:	81bb      	strh	r3, [r7, #12]
 8009854:	4613      	mov	r3, r2
 8009856:	72fb      	strb	r3, [r7, #11]
    POINT Page, Column;

    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8009858:	4b50      	ldr	r3, [pc, #320]	@ (800999c <GUI_DisChar+0x158>)
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	89fa      	ldrh	r2, [r7, #14]
 800985e:	429a      	cmp	r2, r3
 8009860:	d804      	bhi.n	800986c <GUI_DisChar+0x28>
 8009862:	4b4e      	ldr	r3, [pc, #312]	@ (800999c <GUI_DisChar+0x158>)
 8009864:	885b      	ldrh	r3, [r3, #2]
 8009866:	89ba      	ldrh	r2, [r7, #12]
 8009868:	429a      	cmp	r2, r3
 800986a:	d903      	bls.n	8009874 <GUI_DisChar+0x30>
        DEBUG("GUI_DisChar Input exceeds the normal display range\r\n");
 800986c:	484c      	ldr	r0, [pc, #304]	@ (80099a0 <GUI_DisChar+0x15c>)
 800986e:	f001 fdf5 	bl	800b45c <puts>
        return;
 8009872:	e08f      	b.n	8009994 <GUI_DisChar+0x150>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8009874:	7afb      	ldrb	r3, [r7, #11]
 8009876:	3b20      	subs	r3, #32
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	88d2      	ldrh	r2, [r2, #6]
 800987c:	fb02 f303 	mul.w	r3, r2, r3
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	8892      	ldrh	r2, [r2, #4]
 8009884:	08d2      	lsrs	r2, r2, #3
 8009886:	b292      	uxth	r2, r2
 8009888:	4611      	mov	r1, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	8892      	ldrh	r2, [r2, #4]
 800988e:	f002 0207 	and.w	r2, r2, #7
 8009892:	b292      	uxth	r2, r2
 8009894:	2a00      	cmp	r2, #0
 8009896:	bf14      	ite	ne
 8009898:	2201      	movne	r2, #1
 800989a:	2200      	moveq	r2, #0
 800989c:	b2d2      	uxtb	r2, r2
 800989e:	440a      	add	r2, r1
 80098a0:	fb02 f303 	mul.w	r3, r2, r3
 80098a4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	4413      	add	r3, r2
 80098ae:	61bb      	str	r3, [r7, #24]

    for(Page = 0; Page < Font->Height; Page ++ ) {
 80098b0:	2300      	movs	r3, #0
 80098b2:	83fb      	strh	r3, [r7, #30]
 80098b4:	e069      	b.n	800998a <GUI_DisChar+0x146>
        for(Column = 0; Column < Font->Width; Column ++ ) {
 80098b6:	2300      	movs	r3, #0
 80098b8:	83bb      	strh	r3, [r7, #28]
 80098ba:	e054      	b.n	8009966 <GUI_DisChar+0x122>

            //To determine whether the font background color and screen background color is consistent
            if(FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80098bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80098be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d11a      	bne.n	80098fc <GUI_DisChar+0xb8>
                if(*ptr & (0x80 >> (Column % 8)))
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	4619      	mov	r1, r3
 80098cc:	8bbb      	ldrh	r3, [r7, #28]
 80098ce:	f003 0307 	and.w	r3, r3, #7
 80098d2:	2280      	movs	r2, #128	@ 0x80
 80098d4:	fa42 f303 	asr.w	r3, r2, r3
 80098d8:	400b      	ands	r3, r1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d037      	beq.n	800994e <GUI_DisChar+0x10a>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 80098de:	89fa      	ldrh	r2, [r7, #14]
 80098e0:	8bbb      	ldrh	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	b298      	uxth	r0, r3
 80098e6:	89ba      	ldrh	r2, [r7, #12]
 80098e8:	8bfb      	ldrh	r3, [r7, #30]
 80098ea:	4413      	add	r3, r2
 80098ec:	b299      	uxth	r1, r3
 80098ee:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80098f0:	2301      	movs	r3, #1
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	2301      	movs	r3, #1
 80098f6:	f7ff fddb 	bl	80094b0 <GUI_DrawPoint>
 80098fa:	e028      	b.n	800994e <GUI_DisChar+0x10a>
            } else {
                if(*ptr & (0x80 >> (Column % 8))) {
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	4619      	mov	r1, r3
 8009902:	8bbb      	ldrh	r3, [r7, #28]
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	2280      	movs	r2, #128	@ 0x80
 800990a:	fa42 f303 	asr.w	r3, r2, r3
 800990e:	400b      	ands	r3, r1
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00e      	beq.n	8009932 <GUI_DisChar+0xee>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8009914:	89fa      	ldrh	r2, [r7, #14]
 8009916:	8bbb      	ldrh	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	b298      	uxth	r0, r3
 800991c:	89ba      	ldrh	r2, [r7, #12]
 800991e:	8bfb      	ldrh	r3, [r7, #30]
 8009920:	4413      	add	r3, r2
 8009922:	b299      	uxth	r1, r3
 8009924:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009926:	2301      	movs	r3, #1
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	2301      	movs	r3, #1
 800992c:	f7ff fdc0 	bl	80094b0 <GUI_DrawPoint>
 8009930:	e00d      	b.n	800994e <GUI_DisChar+0x10a>
                } else {
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8009932:	89fa      	ldrh	r2, [r7, #14]
 8009934:	8bbb      	ldrh	r3, [r7, #28]
 8009936:	4413      	add	r3, r2
 8009938:	b298      	uxth	r0, r3
 800993a:	89ba      	ldrh	r2, [r7, #12]
 800993c:	8bfb      	ldrh	r3, [r7, #30]
 800993e:	4413      	add	r3, r2
 8009940:	b299      	uxth	r1, r3
 8009942:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009944:	2301      	movs	r3, #1
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	2301      	movs	r3, #1
 800994a:	f7ff fdb1 	bl	80094b0 <GUI_DrawPoint>
                }
            }
            //One pixel is 8 bits
            if(Column % 8 == 7)
 800994e:	8bbb      	ldrh	r3, [r7, #28]
 8009950:	f003 0307 	and.w	r3, r3, #7
 8009954:	b29b      	uxth	r3, r3
 8009956:	2b07      	cmp	r3, #7
 8009958:	d102      	bne.n	8009960 <GUI_DisChar+0x11c>
                ptr++;
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	3301      	adds	r3, #1
 800995e:	61bb      	str	r3, [r7, #24]
        for(Column = 0; Column < Font->Width; Column ++ ) {
 8009960:	8bbb      	ldrh	r3, [r7, #28]
 8009962:	3301      	adds	r3, #1
 8009964:	83bb      	strh	r3, [r7, #28]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	889b      	ldrh	r3, [r3, #4]
 800996a:	8bba      	ldrh	r2, [r7, #28]
 800996c:	429a      	cmp	r2, r3
 800996e:	d3a5      	bcc.n	80098bc <GUI_DisChar+0x78>
        }/* Write a line */
        if(Font->Width % 8 != 0)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	889b      	ldrh	r3, [r3, #4]
 8009974:	f003 0307 	and.w	r3, r3, #7
 8009978:	b29b      	uxth	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <GUI_DisChar+0x140>
            ptr++;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	3301      	adds	r3, #1
 8009982:	61bb      	str	r3, [r7, #24]
    for(Page = 0; Page < Font->Height; Page ++ ) {
 8009984:	8bfb      	ldrh	r3, [r7, #30]
 8009986:	3301      	adds	r3, #1
 8009988:	83fb      	strh	r3, [r7, #30]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	88db      	ldrh	r3, [r3, #6]
 800998e:	8bfa      	ldrh	r2, [r7, #30]
 8009990:	429a      	cmp	r2, r3
 8009992:	d390      	bcc.n	80098b6 <GUI_DisChar+0x72>
    }/* Write all */
}
 8009994:	3720      	adds	r7, #32
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20002110 	.word	0x20002110
 80099a0:	0800c350 	.word	0x0800c350

080099a4 <GUI_DisString_EN>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	60ba      	str	r2, [r7, #8]
 80099ac:	607b      	str	r3, [r7, #4]
 80099ae:	4603      	mov	r3, r0
 80099b0:	81fb      	strh	r3, [r7, #14]
 80099b2:	460b      	mov	r3, r1
 80099b4:	81bb      	strh	r3, [r7, #12]
    POINT Xpoint = Xstart;
 80099b6:	89fb      	ldrh	r3, [r7, #14]
 80099b8:	82fb      	strh	r3, [r7, #22]
    POINT Ypoint = Ystart;
 80099ba:	89bb      	ldrh	r3, [r7, #12]
 80099bc:	82bb      	strh	r3, [r7, #20]

    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page) {
 80099be:	4b21      	ldr	r3, [pc, #132]	@ (8009a44 <GUI_DisString_EN+0xa0>)
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	89fa      	ldrh	r2, [r7, #14]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d804      	bhi.n	80099d2 <GUI_DisString_EN+0x2e>
 80099c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a44 <GUI_DisString_EN+0xa0>)
 80099ca:	885b      	ldrh	r3, [r3, #2]
 80099cc:	89ba      	ldrh	r2, [r7, #12]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d931      	bls.n	8009a36 <GUI_DisString_EN+0x92>
        DEBUG("GUI_DisString_EN Input exceeds the normal display range\r\n");
 80099d2:	481d      	ldr	r0, [pc, #116]	@ (8009a48 <GUI_DisString_EN+0xa4>)
 80099d4:	f001 fd42 	bl	800b45c <puts>
        return;
 80099d8:	e031      	b.n	8009a3e <GUI_DisString_EN+0x9a>
    }

    while(* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
        if((Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ) {
 80099da:	8afb      	ldrh	r3, [r7, #22]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	8892      	ldrh	r2, [r2, #4]
 80099e0:	4413      	add	r3, r2
 80099e2:	4a18      	ldr	r2, [pc, #96]	@ (8009a44 <GUI_DisString_EN+0xa0>)
 80099e4:	8812      	ldrh	r2, [r2, #0]
 80099e6:	4293      	cmp	r3, r2
 80099e8:	dd06      	ble.n	80099f8 <GUI_DisString_EN+0x54>
            Xpoint = Xstart;
 80099ea:	89fb      	ldrh	r3, [r7, #14]
 80099ec:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	88da      	ldrh	r2, [r3, #6]
 80099f2:	8abb      	ldrh	r3, [r7, #20]
 80099f4:	4413      	add	r3, r2
 80099f6:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if((Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ) {
 80099f8:	8abb      	ldrh	r3, [r7, #20]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	88d2      	ldrh	r2, [r2, #6]
 80099fe:	4413      	add	r3, r2
 8009a00:	4a10      	ldr	r2, [pc, #64]	@ (8009a44 <GUI_DisString_EN+0xa0>)
 8009a02:	8852      	ldrh	r2, [r2, #2]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	dd03      	ble.n	8009a10 <GUI_DisString_EN+0x6c>
            Xpoint = Xstart;
 8009a08:	89fb      	ldrh	r3, [r7, #14]
 8009a0a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8009a0c:	89bb      	ldrh	r3, [r7, #12]
 8009a0e:	82bb      	strh	r3, [r7, #20]
        }
        GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	781a      	ldrb	r2, [r3, #0]
 8009a14:	8ab9      	ldrh	r1, [r7, #20]
 8009a16:	8af8      	ldrh	r0, [r7, #22]
 8009a18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	8c3b      	ldrh	r3, [r7, #32]
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f7ff ff0f 	bl	8009844 <GUI_DisChar>

        //The next character of the address
        pString ++;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	889a      	ldrh	r2, [r3, #4]
 8009a30:	8afb      	ldrh	r3, [r7, #22]
 8009a32:	4413      	add	r3, r2
 8009a34:	82fb      	strh	r3, [r7, #22]
    while(* pString != '\0') {
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1cd      	bne.n	80099da <GUI_DisString_EN+0x36>
    }
}
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20002110 	.word	0x20002110
 8009a48:	0800c38c 	.word	0x0800c38c

08009a4c <GUI_DisFloatNum>:
}


void GUI_DisFloatNum(POINT Xpoint, POINT Ypoint, float Nummber,
                sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b094      	sub	sp, #80	@ 0x50
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	ed87 0a04 	vstr	s0, [r7, #16]
 8009a56:	60fa      	str	r2, [r7, #12]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	82fb      	strh	r3, [r7, #22]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	82bb      	strh	r3, [r7, #20]
 8009a62:	4613      	mov	r3, r2
 8009a64:	817b      	strh	r3, [r7, #10]
    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8009a66:	4b7f      	ldr	r3, [pc, #508]	@ (8009c64 <GUI_DisFloatNum+0x218>)
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	8afa      	ldrh	r2, [r7, #22]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d804      	bhi.n	8009a7a <GUI_DisFloatNum+0x2e>
 8009a70:	4b7c      	ldr	r3, [pc, #496]	@ (8009c64 <GUI_DisFloatNum+0x218>)
 8009a72:	885b      	ldrh	r3, [r3, #2]
 8009a74:	8aba      	ldrh	r2, [r7, #20]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d903      	bls.n	8009a82 <GUI_DisFloatNum+0x36>
        DEBUG("GUI_DisNum Input exceeds the normal display range\r\n");
 8009a7a:	487b      	ldr	r0, [pc, #492]	@ (8009c68 <GUI_DisFloatNum+0x21c>)
 8009a7c:	f001 fcee 	bl	800b45c <puts>
 8009a80:	e0ed      	b.n	8009c5e <GUI_DisFloatNum+0x212>
        return;
    }

    // Проверяем, является ли число отрицательным
    uint8_t isNegative = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (Nummber < 0) {
 8009a88:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a94:	d508      	bpl.n	8009aa8 <GUI_DisFloatNum+0x5c>
        isNegative = 1;
 8009a96:	2301      	movs	r3, #1
 8009a98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        Nummber = -Nummber;
 8009a9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009aa0:	eef1 7a67 	vneg.f32	s15, s15
 8009aa4:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    // Разделяем число на целую и дробную части
    uint8_t integerPart = (int)Nummber;
 8009aa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ab0:	edc7 7a01 	vstr	s15, [r7, #4]
 8009ab4:	793b      	ldrb	r3, [r7, #4]
 8009ab6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    float fractionalPart = Nummber - integerPart;
 8009aba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009abe:	ee07 3a90 	vmov	s15, r3
 8009ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ac6:	ed97 7a04 	vldr	s14, [r7, #16]
 8009aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ace:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Извлекаем сотые доли (округляем до двух знаков)
    uint8_t hundredths = (int)(fractionalPart * 100 + 0.5f); // +0.5 для округления
 8009ad2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8009ad6:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8009c6c <GUI_DisFloatNum+0x220>
 8009ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ade:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009aea:	edc7 7a01 	vstr	s15, [r7, #4]
 8009aee:	793b      	ldrb	r3, [r7, #4]
 8009af0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Обрабатываем целую часть (разбиваем на цифры)
    uint8_t intDigits[10] = {0}; // Максимум 10 цифр для int
 8009af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	605a      	str	r2, [r3, #4]
 8009afe:	811a      	strh	r2, [r3, #8]
    uint8_t Str_Array[10] = {0};
 8009b00:	f107 0318 	add.w	r3, r7, #24
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	605a      	str	r2, [r3, #4]
 8009b0a:	811a      	strh	r2, [r3, #8]
    uint8_t *pStr = Str_Array;
 8009b0c:	f107 0318 	add.w	r3, r7, #24
 8009b10:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t intLen = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    // Если целая часть = 0, то всё равно записываем 0
    if (integerPart == 0) {
 8009b18:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d12d      	bne.n	8009b7c <GUI_DisFloatNum+0x130>
        intDigits[intLen++] = 0;
 8009b20:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 8009b2a:	3340      	adds	r3, #64	@ 0x40
 8009b2c:	f107 0208 	add.w	r2, r7, #8
 8009b30:	4413      	add	r3, r2
 8009b32:	2200      	movs	r2, #0
 8009b34:	f803 2c24 	strb.w	r2, [r3, #-36]
 8009b38:	e028      	b.n	8009b8c <GUI_DisFloatNum+0x140>
    } else {
        while (integerPart > 0 && intLen < 10) {
            intDigits[intLen++] = integerPart % 10;
 8009b3a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 8009b44:	4618      	mov	r0, r3
 8009b46:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009b4a:	4b49      	ldr	r3, [pc, #292]	@ (8009c70 <GUI_DisFloatNum+0x224>)
 8009b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8009b50:	08d9      	lsrs	r1, r3, #3
 8009b52:	460b      	mov	r3, r1
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	440b      	add	r3, r1
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	f100 0340 	add.w	r3, r0, #64	@ 0x40
 8009b62:	f107 0108 	add.w	r1, r7, #8
 8009b66:	440b      	add	r3, r1
 8009b68:	f803 2c24 	strb.w	r2, [r3, #-36]
            integerPart /= 10;
 8009b6c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009b70:	4a3f      	ldr	r2, [pc, #252]	@ (8009c70 <GUI_DisFloatNum+0x224>)
 8009b72:	fba2 2303 	umull	r2, r3, r2, r3
 8009b76:	08db      	lsrs	r3, r3, #3
 8009b78:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        while (integerPart > 0 && intLen < 10) {
 8009b7c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <GUI_DisFloatNum+0x140>
 8009b84:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009b88:	2b09      	cmp	r3, #9
 8009b8a:	d9d6      	bls.n	8009b3a <GUI_DisFloatNum+0xee>
        }
    }

    // Записываем цифры целой части в обратном порядке
    size_t pos = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (isNegative) {
 8009b90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d009      	beq.n	8009bac <GUI_DisFloatNum+0x160>
    	Str_Array[pos++] = '-'; // Можно заменить на 255 или другое значение, если нужны только цифры
 8009b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b9a:	1c5a      	adds	r2, r3, #1
 8009b9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009b9e:	3340      	adds	r3, #64	@ 0x40
 8009ba0:	f107 0208 	add.w	r2, r7, #8
 8009ba4:	4413      	add	r3, r2
 8009ba6:	222d      	movs	r2, #45	@ 0x2d
 8009ba8:	f803 2c30 	strb.w	r2, [r3, #-48]
    }

    for (int i = intLen - 1; i >= 0; i--) {
 8009bac:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bb4:	e012      	b.n	8009bdc <GUI_DisFloatNum+0x190>
    	Str_Array[pos++] = intDigits[i] + '0';
 8009bb6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8009bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bbc:	4413      	add	r3, r2
 8009bbe:	781a      	ldrb	r2, [r3, #0]
 8009bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bc2:	1c59      	adds	r1, r3, #1
 8009bc4:	6439      	str	r1, [r7, #64]	@ 0x40
 8009bc6:	3230      	adds	r2, #48	@ 0x30
 8009bc8:	b2d2      	uxtb	r2, r2
 8009bca:	3340      	adds	r3, #64	@ 0x40
 8009bcc:	f107 0108 	add.w	r1, r7, #8
 8009bd0:	440b      	add	r3, r1
 8009bd2:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (int i = intLen - 1; i >= 0; i--) {
 8009bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	dae9      	bge.n	8009bb6 <GUI_DisFloatNum+0x16a>
    }

    // Добавляем запятую
    Str_Array[pos++] = ','; // ASCII-код ',' = 44
 8009be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	643a      	str	r2, [r7, #64]	@ 0x40
 8009be8:	3340      	adds	r3, #64	@ 0x40
 8009bea:	f107 0208 	add.w	r2, r7, #8
 8009bee:	4413      	add	r3, r2
 8009bf0:	222c      	movs	r2, #44	@ 0x2c
 8009bf2:	f803 2c30 	strb.w	r2, [r3, #-48]

    // Добавляем сотые доли (две цифры)
    Str_Array[pos++] = hundredths / 10 + '0';  // Десятые
 8009bf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8009c70 <GUI_DisFloatNum+0x224>)
 8009bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009c00:	08db      	lsrs	r3, r3, #3
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c06:	1c59      	adds	r1, r3, #1
 8009c08:	6439      	str	r1, [r7, #64]	@ 0x40
 8009c0a:	3230      	adds	r2, #48	@ 0x30
 8009c0c:	b2d2      	uxtb	r2, r2
 8009c0e:	3340      	adds	r3, #64	@ 0x40
 8009c10:	f107 0108 	add.w	r1, r7, #8
 8009c14:	440b      	add	r3, r1
 8009c16:	f803 2c30 	strb.w	r2, [r3, #-48]
    Str_Array[pos++] = hundredths % 10 + '0';  // Сотые
 8009c1a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009c1e:	4b14      	ldr	r3, [pc, #80]	@ (8009c70 <GUI_DisFloatNum+0x224>)
 8009c20:	fba3 1302 	umull	r1, r3, r3, r2
 8009c24:	08d9      	lsrs	r1, r3, #3
 8009c26:	460b      	mov	r3, r1
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	440b      	add	r3, r1
 8009c2c:	005b      	lsls	r3, r3, #1
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c34:	1c59      	adds	r1, r3, #1
 8009c36:	6439      	str	r1, [r7, #64]	@ 0x40
 8009c38:	3230      	adds	r2, #48	@ 0x30
 8009c3a:	b2d2      	uxtb	r2, r2
 8009c3c:	3340      	adds	r3, #64	@ 0x40
 8009c3e:	f107 0108 	add.w	r1, r7, #8
 8009c42:	440b      	add	r3, r1
 8009c44:	f803 2c30 	strb.w	r2, [r3, #-48]

    //show
    GUI_DisString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground );
 8009c48:	8ab9      	ldrh	r1, [r7, #20]
 8009c4a:	8af8      	ldrh	r0, [r7, #22]
 8009c4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	897b      	ldrh	r3, [r7, #10]
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c5a:	f7ff fea3 	bl	80099a4 <GUI_DisString_EN>
}
 8009c5e:	3748      	adds	r7, #72	@ 0x48
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	20002110 	.word	0x20002110
 8009c68:	0800c3d0 	.word	0x0800c3d0
 8009c6c:	42c80000 	.word	0x42c80000
 8009c70:	cccccccd 	.word	0xcccccccd

08009c74 <GUI_GetFontSize>:
    }
}

// подбор размера шрифта
sFONT *GUI_GetFontSize(POINT Dx, POINT Dy)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	460a      	mov	r2, r1
 8009c7e:	80fb      	strh	r3, [r7, #6]
 8009c80:	4613      	mov	r3, r2
 8009c82:	80bb      	strh	r3, [r7, #4]
    sFONT *Font;
    if (Dx > Font24.Width && Dy > Font24.Height) {
 8009c84:	4b38      	ldr	r3, [pc, #224]	@ (8009d68 <GUI_GetFontSize+0xf4>)
 8009c86:	889b      	ldrh	r3, [r3, #4]
 8009c88:	88fa      	ldrh	r2, [r7, #6]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d907      	bls.n	8009c9e <GUI_GetFontSize+0x2a>
 8009c8e:	4b36      	ldr	r3, [pc, #216]	@ (8009d68 <GUI_GetFontSize+0xf4>)
 8009c90:	88db      	ldrh	r3, [r3, #6]
 8009c92:	88ba      	ldrh	r2, [r7, #4]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d902      	bls.n	8009c9e <GUI_GetFontSize+0x2a>
        Font = &Font24;
 8009c98:	4b33      	ldr	r3, [pc, #204]	@ (8009d68 <GUI_GetFontSize+0xf4>)
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	e05e      	b.n	8009d5c <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font20.Width && Dx < Font24.Width) &&
 8009c9e:	4b33      	ldr	r3, [pc, #204]	@ (8009d6c <GUI_GetFontSize+0xf8>)
 8009ca0:	889b      	ldrh	r3, [r3, #4]
 8009ca2:	88fa      	ldrh	r2, [r7, #6]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d911      	bls.n	8009ccc <GUI_GetFontSize+0x58>
 8009ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8009d68 <GUI_GetFontSize+0xf4>)
 8009caa:	889b      	ldrh	r3, [r3, #4]
 8009cac:	88fa      	ldrh	r2, [r7, #6]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d20c      	bcs.n	8009ccc <GUI_GetFontSize+0x58>
               (Dy > Font20.Height && Dy < Font24.Height)) {
 8009cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8009d6c <GUI_GetFontSize+0xf8>)
 8009cb4:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font20.Width && Dx < Font24.Width) &&
 8009cb6:	88ba      	ldrh	r2, [r7, #4]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d907      	bls.n	8009ccc <GUI_GetFontSize+0x58>
               (Dy > Font20.Height && Dy < Font24.Height)) {
 8009cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8009d68 <GUI_GetFontSize+0xf4>)
 8009cbe:	88db      	ldrh	r3, [r3, #6]
 8009cc0:	88ba      	ldrh	r2, [r7, #4]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d202      	bcs.n	8009ccc <GUI_GetFontSize+0x58>
        Font = &Font20;
 8009cc6:	4b29      	ldr	r3, [pc, #164]	@ (8009d6c <GUI_GetFontSize+0xf8>)
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	e047      	b.n	8009d5c <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font16.Width && Dx < Font20.Width) &&
 8009ccc:	4b28      	ldr	r3, [pc, #160]	@ (8009d70 <GUI_GetFontSize+0xfc>)
 8009cce:	889b      	ldrh	r3, [r3, #4]
 8009cd0:	88fa      	ldrh	r2, [r7, #6]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d911      	bls.n	8009cfa <GUI_GetFontSize+0x86>
 8009cd6:	4b25      	ldr	r3, [pc, #148]	@ (8009d6c <GUI_GetFontSize+0xf8>)
 8009cd8:	889b      	ldrh	r3, [r3, #4]
 8009cda:	88fa      	ldrh	r2, [r7, #6]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d20c      	bcs.n	8009cfa <GUI_GetFontSize+0x86>
               (Dy > Font16.Height && Dy < Font20.Height)) {
 8009ce0:	4b23      	ldr	r3, [pc, #140]	@ (8009d70 <GUI_GetFontSize+0xfc>)
 8009ce2:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font16.Width && Dx < Font20.Width) &&
 8009ce4:	88ba      	ldrh	r2, [r7, #4]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d907      	bls.n	8009cfa <GUI_GetFontSize+0x86>
               (Dy > Font16.Height && Dy < Font20.Height)) {
 8009cea:	4b20      	ldr	r3, [pc, #128]	@ (8009d6c <GUI_GetFontSize+0xf8>)
 8009cec:	88db      	ldrh	r3, [r3, #6]
 8009cee:	88ba      	ldrh	r2, [r7, #4]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d202      	bcs.n	8009cfa <GUI_GetFontSize+0x86>
        Font = &Font16;
 8009cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8009d70 <GUI_GetFontSize+0xfc>)
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	e030      	b.n	8009d5c <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font12.Width && Dx < Font16.Width) &&
 8009cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8009d74 <GUI_GetFontSize+0x100>)
 8009cfc:	889b      	ldrh	r3, [r3, #4]
 8009cfe:	88fa      	ldrh	r2, [r7, #6]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d911      	bls.n	8009d28 <GUI_GetFontSize+0xb4>
 8009d04:	4b1a      	ldr	r3, [pc, #104]	@ (8009d70 <GUI_GetFontSize+0xfc>)
 8009d06:	889b      	ldrh	r3, [r3, #4]
 8009d08:	88fa      	ldrh	r2, [r7, #6]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d20c      	bcs.n	8009d28 <GUI_GetFontSize+0xb4>
               (Dy > Font12.Height && Dy < Font16.Height)) {
 8009d0e:	4b19      	ldr	r3, [pc, #100]	@ (8009d74 <GUI_GetFontSize+0x100>)
 8009d10:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font12.Width && Dx < Font16.Width) &&
 8009d12:	88ba      	ldrh	r2, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d907      	bls.n	8009d28 <GUI_GetFontSize+0xb4>
               (Dy > Font12.Height && Dy < Font16.Height)) {
 8009d18:	4b15      	ldr	r3, [pc, #84]	@ (8009d70 <GUI_GetFontSize+0xfc>)
 8009d1a:	88db      	ldrh	r3, [r3, #6]
 8009d1c:	88ba      	ldrh	r2, [r7, #4]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d202      	bcs.n	8009d28 <GUI_GetFontSize+0xb4>
        Font = &Font12;
 8009d22:	4b14      	ldr	r3, [pc, #80]	@ (8009d74 <GUI_GetFontSize+0x100>)
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	e019      	b.n	8009d5c <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font8.Width && Dx < Font12.Width) &&
 8009d28:	4b13      	ldr	r3, [pc, #76]	@ (8009d78 <GUI_GetFontSize+0x104>)
 8009d2a:	889b      	ldrh	r3, [r3, #4]
 8009d2c:	88fa      	ldrh	r2, [r7, #6]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d911      	bls.n	8009d56 <GUI_GetFontSize+0xe2>
 8009d32:	4b10      	ldr	r3, [pc, #64]	@ (8009d74 <GUI_GetFontSize+0x100>)
 8009d34:	889b      	ldrh	r3, [r3, #4]
 8009d36:	88fa      	ldrh	r2, [r7, #6]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d20c      	bcs.n	8009d56 <GUI_GetFontSize+0xe2>
               (Dy > Font8.Height && Dy < Font12.Height)) {
 8009d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009d78 <GUI_GetFontSize+0x104>)
 8009d3e:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font8.Width && Dx < Font12.Width) &&
 8009d40:	88ba      	ldrh	r2, [r7, #4]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d907      	bls.n	8009d56 <GUI_GetFontSize+0xe2>
               (Dy > Font8.Height && Dy < Font12.Height)) {
 8009d46:	4b0b      	ldr	r3, [pc, #44]	@ (8009d74 <GUI_GetFontSize+0x100>)
 8009d48:	88db      	ldrh	r3, [r3, #6]
 8009d4a:	88ba      	ldrh	r2, [r7, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d202      	bcs.n	8009d56 <GUI_GetFontSize+0xe2>
        Font = &Font8;
 8009d50:	4b09      	ldr	r3, [pc, #36]	@ (8009d78 <GUI_GetFontSize+0x104>)
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e002      	b.n	8009d5c <GUI_GetFontSize+0xe8>
    } else {
        DEBUG("Please change the display area size, or add a larger font to modify\r\n");
 8009d56:	4809      	ldr	r0, [pc, #36]	@ (8009d7c <GUI_GetFontSize+0x108>)
 8009d58:	f001 fb80 	bl	800b45c <puts>
    }
    return Font;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000114 	.word	0x20000114
 8009d6c:	2000010c 	.word	0x2000010c
 8009d70:	20000104 	.word	0x20000104
 8009d74:	200000fc 	.word	0x200000fc
 8009d78:	2000011c 	.word	0x2000011c
 8009d7c:	0800c42c 	.word	0x0800c42c

08009d80 <GUI_Showtime>:
		Color  :   Set show color
  note:
******************************************************************************/
void GUI_Showtime(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  DEV_TIME *pTime, COLOR Color)
{
 8009d80:	b590      	push	{r4, r7, lr}
 8009d82:	b08b      	sub	sp, #44	@ 0x2c
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	4623      	mov	r3, r4
 8009d90:	80fb      	strh	r3, [r7, #6]
 8009d92:	4603      	mov	r3, r0
 8009d94:	80bb      	strh	r3, [r7, #4]
 8009d96:	460b      	mov	r3, r1
 8009d98:	807b      	strh	r3, [r7, #2]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	803b      	strh	r3, [r7, #0]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8009d9e:	4a6b      	ldr	r2, [pc, #428]	@ (8009f4c <GUI_Showtime+0x1cc>)
 8009da0:	f107 030c 	add.w	r3, r7, #12
 8009da4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009da6:	c303      	stmia	r3!, {r0, r1}
 8009da8:	801a      	strh	r2, [r3, #0]
    sFONT *Font;

    //According to the display area adaptive font size
    POINT Dx = (Xend - Xstart) / 7;//Determine the spacing between characters
 8009daa:	887a      	ldrh	r2, [r7, #2]
 8009dac:	88fb      	ldrh	r3, [r7, #6]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	4a67      	ldr	r2, [pc, #412]	@ (8009f50 <GUI_Showtime+0x1d0>)
 8009db2:	fb82 1203 	smull	r1, r2, r2, r3
 8009db6:	441a      	add	r2, r3
 8009db8:	1092      	asrs	r2, r2, #2
 8009dba:	17db      	asrs	r3, r3, #31
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	83fb      	strh	r3, [r7, #30]
    POINT Dy = Yend - Ystart;      //determine the font size
 8009dc0:	883a      	ldrh	r2, [r7, #0]
 8009dc2:	88bb      	ldrh	r3, [r7, #4]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	83bb      	strh	r3, [r7, #28]
    Yend -= 5; // убрал немного расстояние отрисовки белого фона снизу
 8009dc8:	883b      	ldrh	r3, [r7, #0]
 8009dca:	3b05      	subs	r3, #5
 8009dcc:	803b      	strh	r3, [r7, #0]
    Font = GUI_GetFontSize(Dx, Dy);
 8009dce:	8bba      	ldrh	r2, [r7, #28]
 8009dd0:	8bfb      	ldrh	r3, [r7, #30]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7ff ff4d 	bl	8009c74 <GUI_GetFontSize>
 8009dda:	61b8      	str	r0, [r7, #24]
	
	if ((pTime->Sec % 10) < 10 && (pTime->Sec % 10) > 0) {
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dde:	799a      	ldrb	r2, [r3, #6]
 8009de0:	4b5c      	ldr	r3, [pc, #368]	@ (8009f54 <GUI_Showtime+0x1d4>)
 8009de2:	fba3 1302 	umull	r1, r3, r3, r2
 8009de6:	08d9      	lsrs	r1, r3, #3
 8009de8:	460b      	mov	r3, r1
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	440b      	add	r3, r1
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d011      	beq.n	8009e1c <GUI_Showtime+0x9c>
		LCD_SetArealColor(Xstart + Dx * 6, Ystart, Xend, Yend, WHITE);// xx:xx:x0
 8009df8:	8bfb      	ldrh	r3, [r7, #30]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	0052      	lsls	r2, r2, #1
 8009dfe:	4413      	add	r3, r2
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	88fb      	ldrh	r3, [r7, #6]
 8009e06:	4413      	add	r3, r2
 8009e08:	b298      	uxth	r0, r3
 8009e0a:	883b      	ldrh	r3, [r7, #0]
 8009e0c:	887a      	ldrh	r2, [r7, #2]
 8009e0e:	88b9      	ldrh	r1, [r7, #4]
 8009e10:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009e14:	9400      	str	r4, [sp, #0]
 8009e16:	f7ff faf3 	bl	8009400 <LCD_SetArealColor>
 8009e1a:	e0af      	b.n	8009f7c <GUI_Showtime+0x1fc>
	} else {
		if ((pTime->Sec / 10) < 6 && (pTime->Sec / 10) > 0) {
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	799b      	ldrb	r3, [r3, #6]
 8009e20:	2b3b      	cmp	r3, #59	@ 0x3b
 8009e22:	d814      	bhi.n	8009e4e <GUI_Showtime+0xce>
 8009e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e26:	799b      	ldrb	r3, [r3, #6]
 8009e28:	2b09      	cmp	r3, #9
 8009e2a:	d910      	bls.n	8009e4e <GUI_Showtime+0xce>
			LCD_SetArealColor(Xstart + Dx * 5, Ystart, Xend, Yend, WHITE);// xx:xx:00
 8009e2c:	8bfb      	ldrh	r3, [r7, #30]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	0092      	lsls	r2, r2, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	88fb      	ldrh	r3, [r7, #6]
 8009e38:	4413      	add	r3, r2
 8009e3a:	b298      	uxth	r0, r3
 8009e3c:	883b      	ldrh	r3, [r7, #0]
 8009e3e:	887a      	ldrh	r2, [r7, #2]
 8009e40:	88b9      	ldrh	r1, [r7, #4]
 8009e42:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009e46:	9400      	str	r4, [sp, #0]
 8009e48:	f7ff fada 	bl	8009400 <LCD_SetArealColor>
 8009e4c:	e096      	b.n	8009f7c <GUI_Showtime+0x1fc>
		} else {//sec = 60
			pTime->Min = pTime->Min + 1;
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e50:	795b      	ldrb	r3, [r3, #5]
 8009e52:	3301      	adds	r3, #1
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	715a      	strb	r2, [r3, #5]
			pTime->Sec = 0;
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	719a      	strb	r2, [r3, #6]
			if ((pTime->Min % 10) < 10 && (pTime->Min % 10) > 0) {
 8009e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e62:	795a      	ldrb	r2, [r3, #5]
 8009e64:	4b3b      	ldr	r3, [pc, #236]	@ (8009f54 <GUI_Showtime+0x1d4>)
 8009e66:	fba3 1302 	umull	r1, r3, r3, r2
 8009e6a:	08d9      	lsrs	r1, r3, #3
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	440b      	add	r3, r1
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d015      	beq.n	8009ea8 <GUI_Showtime+0x128>
				LCD_SetArealColor(Xstart + Dx * 3 + Dx / 2, Ystart, Xend, Yend, WHITE);// xx:x0:00
 8009e7c:	8bfb      	ldrh	r3, [r7, #30]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	0052      	lsls	r2, r2, #1
 8009e82:	4413      	add	r3, r2
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	4413      	add	r3, r2
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	8bfb      	ldrh	r3, [r7, #30]
 8009e8e:	085b      	lsrs	r3, r3, #1
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	4413      	add	r3, r2
 8009e94:	b298      	uxth	r0, r3
 8009e96:	883b      	ldrh	r3, [r7, #0]
 8009e98:	887a      	ldrh	r2, [r7, #2]
 8009e9a:	88b9      	ldrh	r1, [r7, #4]
 8009e9c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009ea0:	9400      	str	r4, [sp, #0]
 8009ea2:	f7ff faad 	bl	8009400 <LCD_SetArealColor>
 8009ea6:	e069      	b.n	8009f7c <GUI_Showtime+0x1fc>
			} else {
				if ((pTime->Min / 10) < 6 && (pTime->Min / 10) > 0) {
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	795b      	ldrb	r3, [r3, #5]
 8009eac:	2b3b      	cmp	r3, #59	@ 0x3b
 8009eae:	d817      	bhi.n	8009ee0 <GUI_Showtime+0x160>
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	795b      	ldrb	r3, [r3, #5]
 8009eb4:	2b09      	cmp	r3, #9
 8009eb6:	d913      	bls.n	8009ee0 <GUI_Showtime+0x160>
					LCD_SetArealColor(Xstart + Dx * 2 + Dx / 2, Ystart, Xend, Yend, WHITE);// xx:00:00
 8009eb8:	8bfb      	ldrh	r3, [r7, #30]
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	8bfb      	ldrh	r3, [r7, #30]
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	4413      	add	r3, r2
 8009ecc:	b298      	uxth	r0, r3
 8009ece:	883b      	ldrh	r3, [r7, #0]
 8009ed0:	887a      	ldrh	r2, [r7, #2]
 8009ed2:	88b9      	ldrh	r1, [r7, #4]
 8009ed4:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009ed8:	9400      	str	r4, [sp, #0]
 8009eda:	f7ff fa91 	bl	8009400 <LCD_SetArealColor>
 8009ede:	e04d      	b.n	8009f7c <GUI_Showtime+0x1fc>
				} else {//min = 60
					pTime->Hour =  pTime->Hour + 1;
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee2:	791b      	ldrb	r3, [r3, #4]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	711a      	strb	r2, [r3, #4]
					pTime->Min = 0;
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	2200      	movs	r2, #0
 8009ef0:	715a      	strb	r2, [r3, #5]
					if ((pTime->Hour % 10) < 4 && (pTime->Hour % 10) > 0 && pTime->Hour < 24) {// x0:00:00
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	791a      	ldrb	r2, [r3, #4]
 8009ef6:	4b17      	ldr	r3, [pc, #92]	@ (8009f54 <GUI_Showtime+0x1d4>)
 8009ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8009efc:	08d9      	lsrs	r1, r3, #3
 8009efe:	460b      	mov	r3, r1
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	440b      	add	r3, r1
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b03      	cmp	r3, #3
 8009f0c:	d824      	bhi.n	8009f58 <GUI_Showtime+0x1d8>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	791a      	ldrb	r2, [r3, #4]
 8009f12:	4b10      	ldr	r3, [pc, #64]	@ (8009f54 <GUI_Showtime+0x1d4>)
 8009f14:	fba3 1302 	umull	r1, r3, r3, r2
 8009f18:	08d9      	lsrs	r1, r3, #3
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d016      	beq.n	8009f58 <GUI_Showtime+0x1d8>
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2c:	791b      	ldrb	r3, [r3, #4]
 8009f2e:	2b17      	cmp	r3, #23
 8009f30:	d812      	bhi.n	8009f58 <GUI_Showtime+0x1d8>
						LCD_SetArealColor(Xstart + Dx, Ystart, Xend, Yend, WHITE);
 8009f32:	88fa      	ldrh	r2, [r7, #6]
 8009f34:	8bfb      	ldrh	r3, [r7, #30]
 8009f36:	4413      	add	r3, r2
 8009f38:	b298      	uxth	r0, r3
 8009f3a:	883b      	ldrh	r3, [r7, #0]
 8009f3c:	887a      	ldrh	r2, [r7, #2]
 8009f3e:	88b9      	ldrh	r1, [r7, #4]
 8009f40:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009f44:	9400      	str	r4, [sp, #0]
 8009f46:	f7ff fa5b 	bl	8009400 <LCD_SetArealColor>
 8009f4a:	e017      	b.n	8009f7c <GUI_Showtime+0x1fc>
 8009f4c:	0800c47c 	.word	0x0800c47c
 8009f50:	92492493 	.word	0x92492493
 8009f54:	cccccccd 	.word	0xcccccccd
					} else {
						pTime->Hour = 0;
 8009f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	711a      	strb	r2, [r3, #4]
						pTime->Min = 0;
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f60:	2200      	movs	r2, #0
 8009f62:	715a      	strb	r2, [r3, #5]
						pTime->Sec = 0;
 8009f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f66:	2200      	movs	r2, #0
 8009f68:	719a      	strb	r2, [r3, #6]
						LCD_SetArealColor(Xstart, Ystart, Xend, Yend, WHITE);// 00:00:00
 8009f6a:	883b      	ldrh	r3, [r7, #0]
 8009f6c:	887a      	ldrh	r2, [r7, #2]
 8009f6e:	88b9      	ldrh	r1, [r7, #4]
 8009f70:	88f8      	ldrh	r0, [r7, #6]
 8009f72:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009f76:	9400      	str	r4, [sp, #0]
 8009f78:	f7ff fa42 	bl	8009400 <LCD_SetArealColor>
			}
		}
	}
    
    //Write data into the cache
    GUI_DisChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, FONT_BACKGROUND, Color);
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7e:	791b      	ldrb	r3, [r3, #4]
 8009f80:	4a74      	ldr	r2, [pc, #464]	@ (800a154 <GUI_Showtime+0x3d4>)
 8009f82:	fba2 2303 	umull	r2, r3, r2, r3
 8009f86:	08db      	lsrs	r3, r3, #3
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	3320      	adds	r3, #32
 8009f8c:	443b      	add	r3, r7
 8009f8e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8009f92:	88b9      	ldrh	r1, [r7, #4]
 8009f94:	88f8      	ldrh	r0, [r7, #6]
 8009f96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	f7ff fc4f 	bl	8009844 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, FONT_BACKGROUND, Color);
 8009fa6:	88fa      	ldrh	r2, [r7, #6]
 8009fa8:	8bfb      	ldrh	r3, [r7, #30]
 8009faa:	4413      	add	r3, r2
 8009fac:	b298      	uxth	r0, r3
 8009fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb0:	791a      	ldrb	r2, [r3, #4]
 8009fb2:	4b68      	ldr	r3, [pc, #416]	@ (800a154 <GUI_Showtime+0x3d4>)
 8009fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8009fb8:	08d9      	lsrs	r1, r3, #3
 8009fba:	460b      	mov	r3, r1
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	3320      	adds	r3, #32
 8009fc8:	443b      	add	r3, r7
 8009fca:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8009fce:	88b9      	ldrh	r1, [r7, #4]
 8009fd0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	f7ff fc32 	bl	8009844 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, FONT_BACKGROUND, Color);
 8009fe0:	88fa      	ldrh	r2, [r7, #6]
 8009fe2:	8bfb      	ldrh	r3, [r7, #30]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	8bfb      	ldrh	r3, [r7, #30]
 8009fea:	089b      	lsrs	r3, r3, #2
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	4413      	add	r3, r2
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	8bfb      	ldrh	r3, [r7, #30]
 8009ff4:	085b      	lsrs	r3, r3, #1
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	b298      	uxth	r0, r3
 8009ffc:	88b9      	ldrh	r1, [r7, #4]
 8009ffe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	223a      	movs	r2, #58	@ 0x3a
 800a00c:	f7ff fc1a 	bl	8009844 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, FONT_BACKGROUND, Color);
 800a010:	8bfb      	ldrh	r3, [r7, #30]
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	b29a      	uxth	r2, r3
 800a016:	88fb      	ldrh	r3, [r7, #6]
 800a018:	4413      	add	r3, r2
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	8bfb      	ldrh	r3, [r7, #30]
 800a01e:	085b      	lsrs	r3, r3, #1
 800a020:	b29b      	uxth	r3, r3
 800a022:	4413      	add	r3, r2
 800a024:	b298      	uxth	r0, r3
 800a026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a028:	795b      	ldrb	r3, [r3, #5]
 800a02a:	4a4a      	ldr	r2, [pc, #296]	@ (800a154 <GUI_Showtime+0x3d4>)
 800a02c:	fba2 2303 	umull	r2, r3, r2, r3
 800a030:	08db      	lsrs	r3, r3, #3
 800a032:	b2db      	uxtb	r3, r3
 800a034:	3320      	adds	r3, #32
 800a036:	443b      	add	r3, r7
 800a038:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a03c:	88b9      	ldrh	r1, [r7, #4]
 800a03e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	f7ff fbfb 	bl	8009844 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, FONT_BACKGROUND, Color);
 800a04e:	8bfb      	ldrh	r3, [r7, #30]
 800a050:	461a      	mov	r2, r3
 800a052:	0052      	lsls	r2, r2, #1
 800a054:	4413      	add	r3, r2
 800a056:	b29a      	uxth	r2, r3
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	4413      	add	r3, r2
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	8bfb      	ldrh	r3, [r7, #30]
 800a060:	085b      	lsrs	r3, r3, #1
 800a062:	b29b      	uxth	r3, r3
 800a064:	4413      	add	r3, r2
 800a066:	b298      	uxth	r0, r3
 800a068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06a:	795a      	ldrb	r2, [r3, #5]
 800a06c:	4b39      	ldr	r3, [pc, #228]	@ (800a154 <GUI_Showtime+0x3d4>)
 800a06e:	fba3 1302 	umull	r1, r3, r3, r2
 800a072:	08d9      	lsrs	r1, r3, #3
 800a074:	460b      	mov	r3, r1
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	3320      	adds	r3, #32
 800a082:	443b      	add	r3, r7
 800a084:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a088:	88b9      	ldrh	r1, [r7, #4]
 800a08a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	f7ff fbd5 	bl	8009844 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, FONT_BACKGROUND, Color);
 800a09a:	8bfb      	ldrh	r3, [r7, #30]
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	8bfb      	ldrh	r3, [r7, #30]
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	4413      	add	r3, r2
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	8bfb      	ldrh	r3, [r7, #30]
 800a0b2:	089b      	lsrs	r3, r3, #2
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	b298      	uxth	r0, r3
 800a0ba:	88b9      	ldrh	r1, [r7, #4]
 800a0bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	223a      	movs	r2, #58	@ 0x3a
 800a0ca:	f7ff fbbb 	bl	8009844 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, FONT_BACKGROUND, Color);
 800a0ce:	8bfb      	ldrh	r3, [r7, #30]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	0092      	lsls	r2, r2, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	88fb      	ldrh	r3, [r7, #6]
 800a0da:	4413      	add	r3, r2
 800a0dc:	b298      	uxth	r0, r3
 800a0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e0:	799b      	ldrb	r3, [r3, #6]
 800a0e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a154 <GUI_Showtime+0x3d4>)
 800a0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e8:	08db      	lsrs	r3, r3, #3
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	3320      	adds	r3, #32
 800a0ee:	443b      	add	r3, r7
 800a0f0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a0f4:	88b9      	ldrh	r1, [r7, #4]
 800a0f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a0f8:	9301      	str	r3, [sp, #4]
 800a0fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	f7ff fb9f 	bl	8009844 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, FONT_BACKGROUND, Color);
 800a106:	8bfb      	ldrh	r3, [r7, #30]
 800a108:	461a      	mov	r2, r3
 800a10a:	0052      	lsls	r2, r2, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	b29a      	uxth	r2, r3
 800a112:	88fb      	ldrh	r3, [r7, #6]
 800a114:	4413      	add	r3, r2
 800a116:	b298      	uxth	r0, r3
 800a118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11a:	799a      	ldrb	r2, [r3, #6]
 800a11c:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <GUI_Showtime+0x3d4>)
 800a11e:	fba3 1302 	umull	r1, r3, r3, r2
 800a122:	08d9      	lsrs	r1, r3, #3
 800a124:	460b      	mov	r3, r1
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	440b      	add	r3, r1
 800a12a:	005b      	lsls	r3, r3, #1
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	3320      	adds	r3, #32
 800a132:	443b      	add	r3, r7
 800a134:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a138:	88b9      	ldrh	r1, [r7, #4]
 800a13a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	f7ff fb7d 	bl	8009844 <GUI_DisChar>
}
 800a14a:	bf00      	nop
 800a14c:	3724      	adds	r7, #36	@ 0x24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd90      	pop	{r4, r7, pc}
 800a152:	bf00      	nop
 800a154:	cccccccd 	.word	0xcccccccd

0800a158 <TP_Read_ADC>:
parameter:
	Channel_Cmd :	0x90: Read channel Y +, select the ADC resolution is 12 bits, set to differential mode
					0xd0: Read channel x +, select the ADC resolution is 12 bits, set to differential mode
*******************************************************************************/
static uint16_t TP_Read_ADC(uint8_t CMD)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	71fb      	strb	r3, [r7, #7]
    uint16_t Data = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	81fb      	strh	r3, [r7, #14]

    //A cycle of at least 400ns.
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800a166:	4b1a      	ldr	r3, [pc, #104]	@ (800a1d0 <TP_Read_ADC+0x78>)
 800a168:	2228      	movs	r2, #40	@ 0x28
 800a16a:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800a16c:	4818      	ldr	r0, [pc, #96]	@ (800a1d0 <TP_Read_ADC+0x78>)
 800a16e:	f7f9 f8c7 	bl	8003300 <HAL_SPI_Init>

	TP_CS_0;
 800a172:	2200      	movs	r2, #0
 800a174:	2180      	movs	r1, #128	@ 0x80
 800a176:	4817      	ldr	r0, [pc, #92]	@ (800a1d4 <TP_Read_ADC+0x7c>)
 800a178:	f7f7 f9fe 	bl	8001578 <HAL_GPIO_WritePin>

	SPI4W_Write_Byte(CMD);
 800a17c:	79fb      	ldrb	r3, [r7, #7]
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe f8fc 	bl	800837c <SPI4W_Write_Byte>
	Driver_Delay_us(200);
 800a184:	20c8      	movs	r0, #200	@ 0xc8
 800a186:	f7fe f94c 	bl	8008422 <Driver_Delay_us>
	
	Data = SPI4W_Read_Byte(0XFF);
 800a18a:	20ff      	movs	r0, #255	@ 0xff
 800a18c:	f7fe f930 	bl	80083f0 <SPI4W_Read_Byte>
 800a190:	4603      	mov	r3, r0
 800a192:	81fb      	strh	r3, [r7, #14]
	Data <<= 8;//7bit
 800a194:	89fb      	ldrh	r3, [r7, #14]
 800a196:	021b      	lsls	r3, r3, #8
 800a198:	81fb      	strh	r3, [r7, #14]
	Data |= SPI4W_Read_Byte(0XFF);
 800a19a:	20ff      	movs	r0, #255	@ 0xff
 800a19c:	f7fe f928 	bl	80083f0 <SPI4W_Read_Byte>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	89fb      	ldrh	r3, [r7, #14]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	81fb      	strh	r3, [r7, #14]
	Data >>= 3;//5bit
 800a1aa:	89fb      	ldrh	r3, [r7, #14]
 800a1ac:	08db      	lsrs	r3, r3, #3
 800a1ae:	81fb      	strh	r3, [r7, #14]
	TP_CS_1;
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	2180      	movs	r1, #128	@ 0x80
 800a1b4:	4807      	ldr	r0, [pc, #28]	@ (800a1d4 <TP_Read_ADC+0x7c>)
 800a1b6:	f7f7 f9df 	bl	8001578 <HAL_GPIO_WritePin>
	
	//LCD SPI speed = 18 MHz
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800a1ba:	4b05      	ldr	r3, [pc, #20]	@ (800a1d0 <TP_Read_ADC+0x78>)
 800a1bc:	2208      	movs	r2, #8
 800a1be:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800a1c0:	4803      	ldr	r0, [pc, #12]	@ (800a1d0 <TP_Read_ADC+0x78>)
 800a1c2:	f7f9 f89d 	bl	8003300 <HAL_SPI_Init>

    return Data;
 800a1c6:	89fb      	ldrh	r3, [r7, #14]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	2000019c 	.word	0x2000019c
 800a1d4:	40020400 	.word	0x40020400

0800a1d8 <TP_Read_ADC_Average>:
					0xd0 :Read channel x +
*******************************************************************************/
#define READ_TIMES  5	//Number of readings
#define LOST_NUM    1	//Discard value
static uint16_t TP_Read_ADC_Average(uint8_t Channel_Cmd)
{
 800a1d8:	b590      	push	{r4, r7, lr}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	71fb      	strb	r3, [r7, #7]
    uint8_t i, j;
    uint16_t Read_Buff[READ_TIMES];
    uint16_t Read_Sum = 0, Read_Temp = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	82bb      	strh	r3, [r7, #20]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	827b      	strh	r3, [r7, #18]

    //Read and save multiple samples
    for(i = 0; i < READ_TIMES; i++){
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	75fb      	strb	r3, [r7, #23]
 800a1ee:	e011      	b.n	800a214 <TP_Read_ADC_Average+0x3c>
		Read_Buff[i] = TP_Read_ADC(Channel_Cmd);
 800a1f0:	7dfc      	ldrb	r4, [r7, #23]
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff ffaf 	bl	800a158 <TP_Read_ADC>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	0063      	lsls	r3, r4, #1
 800a200:	3318      	adds	r3, #24
 800a202:	443b      	add	r3, r7
 800a204:	f823 2c10 	strh.w	r2, [r3, #-16]
		Driver_Delay_us(200);
 800a208:	20c8      	movs	r0, #200	@ 0xc8
 800a20a:	f7fe f90a 	bl	8008422 <Driver_Delay_us>
    for(i = 0; i < READ_TIMES; i++){
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
 800a210:	3301      	adds	r3, #1
 800a212:	75fb      	strb	r3, [r7, #23]
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	2b04      	cmp	r3, #4
 800a218:	d9ea      	bls.n	800a1f0 <TP_Read_ADC_Average+0x18>
	}
	
    //Sort from small to large
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 800a21a:	2300      	movs	r3, #0
 800a21c:	75fb      	strb	r3, [r7, #23]
 800a21e:	e035      	b.n	800a28c <TP_Read_ADC_Average+0xb4>
        for (j = i + 1; j < READ_TIMES; j ++) {
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	3301      	adds	r3, #1
 800a224:	75bb      	strb	r3, [r7, #22]
 800a226:	e02b      	b.n	800a280 <TP_Read_ADC_Average+0xa8>
            if (Read_Buff[i] > Read_Buff[j]) {
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	3318      	adds	r3, #24
 800a22e:	443b      	add	r3, r7
 800a230:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800a234:	7dbb      	ldrb	r3, [r7, #22]
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	3318      	adds	r3, #24
 800a23a:	443b      	add	r3, r7
 800a23c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800a240:	429a      	cmp	r2, r3
 800a242:	d91a      	bls.n	800a27a <TP_Read_ADC_Average+0xa2>
                Read_Temp = Read_Buff[i];
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	005b      	lsls	r3, r3, #1
 800a248:	3318      	adds	r3, #24
 800a24a:	443b      	add	r3, r7
 800a24c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800a250:	827b      	strh	r3, [r7, #18]
                Read_Buff[i] = Read_Buff[j];
 800a252:	7dbb      	ldrb	r3, [r7, #22]
 800a254:	7dfa      	ldrb	r2, [r7, #23]
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	3318      	adds	r3, #24
 800a25a:	443b      	add	r3, r7
 800a25c:	f833 1c10 	ldrh.w	r1, [r3, #-16]
 800a260:	0053      	lsls	r3, r2, #1
 800a262:	3318      	adds	r3, #24
 800a264:	443b      	add	r3, r7
 800a266:	460a      	mov	r2, r1
 800a268:	f823 2c10 	strh.w	r2, [r3, #-16]
                Read_Buff[j] = Read_Temp;
 800a26c:	7dbb      	ldrb	r3, [r7, #22]
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	3318      	adds	r3, #24
 800a272:	443b      	add	r3, r7
 800a274:	8a7a      	ldrh	r2, [r7, #18]
 800a276:	f823 2c10 	strh.w	r2, [r3, #-16]
        for (j = i + 1; j < READ_TIMES; j ++) {
 800a27a:	7dbb      	ldrb	r3, [r7, #22]
 800a27c:	3301      	adds	r3, #1
 800a27e:	75bb      	strb	r3, [r7, #22]
 800a280:	7dbb      	ldrb	r3, [r7, #22]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d9d0      	bls.n	800a228 <TP_Read_ADC_Average+0x50>
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 800a286:	7dfb      	ldrb	r3, [r7, #23]
 800a288:	3301      	adds	r3, #1
 800a28a:	75fb      	strb	r3, [r7, #23]
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d9c6      	bls.n	800a220 <TP_Read_ADC_Average+0x48>
            }
        }
    }

    //Exclude the largest and the smallest
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 800a292:	2301      	movs	r3, #1
 800a294:	75fb      	strb	r3, [r7, #23]
 800a296:	e00b      	b.n	800a2b0 <TP_Read_ADC_Average+0xd8>
        Read_Sum += Read_Buff[i];
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	3318      	adds	r3, #24
 800a29e:	443b      	add	r3, r7
 800a2a0:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800a2a4:	8abb      	ldrh	r3, [r7, #20]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	82bb      	strh	r3, [r7, #20]
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	75fb      	strb	r3, [r7, #23]
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d9f0      	bls.n	800a298 <TP_Read_ADC_Average+0xc0>

    //Averaging
    Read_Temp = Read_Sum / (READ_TIMES - 2 * LOST_NUM);
 800a2b6:	8abb      	ldrh	r3, [r7, #20]
 800a2b8:	4a04      	ldr	r2, [pc, #16]	@ (800a2cc <TP_Read_ADC_Average+0xf4>)
 800a2ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a2be:	085b      	lsrs	r3, r3, #1
 800a2c0:	827b      	strh	r3, [r7, #18]

    return Read_Temp;
 800a2c2:	8a7b      	ldrh	r3, [r7, #18]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	371c      	adds	r7, #28
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd90      	pop	{r4, r7, pc}
 800a2cc:	aaaaaaab 	.word	0xaaaaaaab

0800a2d0 <TP_Read_ADC_XY>:
parameter:
	Channel_Cmd :	0x90 :Read channel Y +
					0xd0 :Read channel x +
*******************************************************************************/
static void TP_Read_ADC_XY(uint16_t *pXCh_Adc, uint16_t  *pYCh_Adc )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
    *pXCh_Adc = TP_Read_ADC_Average(0xD0);
 800a2da:	20d0      	movs	r0, #208	@ 0xd0
 800a2dc:	f7ff ff7c 	bl	800a1d8 <TP_Read_ADC_Average>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	801a      	strh	r2, [r3, #0]
    *pYCh_Adc = TP_Read_ADC_Average(0x90);
 800a2e8:	2090      	movs	r0, #144	@ 0x90
 800a2ea:	f7ff ff75 	bl	800a1d8 <TP_Read_ADC_Average>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	801a      	strh	r2, [r3, #0]
}
 800a2f6:	bf00      	nop
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <TP_Read_TwiceADC>:
	Channel_Cmd :	pYCh_Adc = 0x90 :Read channel Y +
					pXCh_Adc = 0xd0 :Read channel x +
*******************************************************************************/
#define ERR_RANGE 50	//tolerance scope
static bool TP_Read_TwiceADC(uint16_t *pXCh_Adc, uint16_t  *pYCh_Adc )
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
    uint16_t XCh_Adc1, YCh_Adc1, XCh_Adc2, YCh_Adc2;

    //Read the ADC values Read the ADC values twice
    TP_Read_ADC_XY(&XCh_Adc1, &YCh_Adc1);
 800a308:	f107 020c 	add.w	r2, r7, #12
 800a30c:	f107 030e 	add.w	r3, r7, #14
 800a310:	4611      	mov	r1, r2
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff ffdc 	bl	800a2d0 <TP_Read_ADC_XY>
//	Driver_Delay_us(10);
    TP_Read_ADC_XY(&XCh_Adc2, &YCh_Adc2);
 800a318:	f107 0208 	add.w	r2, r7, #8
 800a31c:	f107 030a 	add.w	r3, r7, #10
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f7ff ffd4 	bl	800a2d0 <TP_Read_ADC_XY>
//	Driver_Delay_us(10);
	
    //The ADC error used twice is greater than ERR_RANGE to take the average
    if( ((XCh_Adc2 <= XCh_Adc1 && XCh_Adc1 < XCh_Adc2 + ERR_RANGE) ||
 800a328:	897a      	ldrh	r2, [r7, #10]
 800a32a:	89fb      	ldrh	r3, [r7, #14]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d804      	bhi.n	800a33a <TP_Read_TwiceADC+0x3c>
 800a330:	897b      	ldrh	r3, [r7, #10]
 800a332:	3331      	adds	r3, #49	@ 0x31
 800a334:	89fa      	ldrh	r2, [r7, #14]
 800a336:	4293      	cmp	r3, r2
 800a338:	da08      	bge.n	800a34c <TP_Read_TwiceADC+0x4e>
         (XCh_Adc1 <= XCh_Adc2 && XCh_Adc2 < XCh_Adc1 + ERR_RANGE))
 800a33a:	89fa      	ldrh	r2, [r7, #14]
 800a33c:	897b      	ldrh	r3, [r7, #10]
    if( ((XCh_Adc2 <= XCh_Adc1 && XCh_Adc1 < XCh_Adc2 + ERR_RANGE) ||
 800a33e:	429a      	cmp	r2, r3
 800a340:	d82c      	bhi.n	800a39c <TP_Read_TwiceADC+0x9e>
         (XCh_Adc1 <= XCh_Adc2 && XCh_Adc2 < XCh_Adc1 + ERR_RANGE))
 800a342:	89fb      	ldrh	r3, [r7, #14]
 800a344:	3331      	adds	r3, #49	@ 0x31
 800a346:	897a      	ldrh	r2, [r7, #10]
 800a348:	4293      	cmp	r3, r2
 800a34a:	db27      	blt.n	800a39c <TP_Read_TwiceADC+0x9e>
        && ((YCh_Adc2 <= YCh_Adc1 && YCh_Adc1 < YCh_Adc2 + ERR_RANGE) ||
 800a34c:	893a      	ldrh	r2, [r7, #8]
 800a34e:	89bb      	ldrh	r3, [r7, #12]
 800a350:	429a      	cmp	r2, r3
 800a352:	d804      	bhi.n	800a35e <TP_Read_TwiceADC+0x60>
 800a354:	893b      	ldrh	r3, [r7, #8]
 800a356:	3331      	adds	r3, #49	@ 0x31
 800a358:	89ba      	ldrh	r2, [r7, #12]
 800a35a:	4293      	cmp	r3, r2
 800a35c:	da08      	bge.n	800a370 <TP_Read_TwiceADC+0x72>
            (YCh_Adc1 <= YCh_Adc2 && YCh_Adc2 < YCh_Adc1 + ERR_RANGE))) {
 800a35e:	89ba      	ldrh	r2, [r7, #12]
 800a360:	893b      	ldrh	r3, [r7, #8]
        && ((YCh_Adc2 <= YCh_Adc1 && YCh_Adc1 < YCh_Adc2 + ERR_RANGE) ||
 800a362:	429a      	cmp	r2, r3
 800a364:	d81a      	bhi.n	800a39c <TP_Read_TwiceADC+0x9e>
            (YCh_Adc1 <= YCh_Adc2 && YCh_Adc2 < YCh_Adc1 + ERR_RANGE))) {
 800a366:	89bb      	ldrh	r3, [r7, #12]
 800a368:	3331      	adds	r3, #49	@ 0x31
 800a36a:	893a      	ldrh	r2, [r7, #8]
 800a36c:	4293      	cmp	r3, r2
 800a36e:	db15      	blt.n	800a39c <TP_Read_TwiceADC+0x9e>
        *pXCh_Adc = (XCh_Adc1 + XCh_Adc2) / 2;
 800a370:	89fb      	ldrh	r3, [r7, #14]
 800a372:	461a      	mov	r2, r3
 800a374:	897b      	ldrh	r3, [r7, #10]
 800a376:	4413      	add	r3, r2
 800a378:	0fda      	lsrs	r2, r3, #31
 800a37a:	4413      	add	r3, r2
 800a37c:	105b      	asrs	r3, r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	801a      	strh	r2, [r3, #0]
        *pYCh_Adc = (YCh_Adc1 + YCh_Adc2) / 2;
 800a384:	89bb      	ldrh	r3, [r7, #12]
 800a386:	461a      	mov	r2, r3
 800a388:	893b      	ldrh	r3, [r7, #8]
 800a38a:	4413      	add	r3, r2
 800a38c:	0fda      	lsrs	r2, r3, #31
 800a38e:	4413      	add	r3, r2
 800a390:	105b      	asrs	r3, r3, #1
 800a392:	b29a      	uxth	r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	801a      	strh	r2, [r3, #0]
        return true;
 800a398:	2301      	movs	r3, #1
 800a39a:	e000      	b.n	800a39e <TP_Read_TwiceADC+0xa0>
    }

    //The ADC error used twice is less than ERR_RANGE returns failed
    return false;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <TP_Scan>:
		chCoordType:
					1 : calibration
					0 : relative position
*******************************************************************************/
static uint8_t TP_Scan(uint8_t chCoordType)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	71fb      	strb	r3, [r7, #7]
    //In X, Y coordinate measurement, IRQ is disabled and output is low
    if (!GET_TP_IRQ) {//Press the button to press
 800a3b2:	2108      	movs	r1, #8
 800a3b4:	48a9      	ldr	r0, [pc, #676]	@ (800a65c <TP_Scan+0x2b4>)
 800a3b6:	f7f7 f8c7 	bl	8001548 <HAL_GPIO_ReadPin>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f040 8128 	bne.w	800a612 <TP_Scan+0x26a>
        //Read the physical coordinates
        if (chCoordType) {
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d004      	beq.n	800a3d2 <TP_Scan+0x2a>
            TP_Read_TwiceADC(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint);
 800a3c8:	49a5      	ldr	r1, [pc, #660]	@ (800a660 <TP_Scan+0x2b8>)
 800a3ca:	48a6      	ldr	r0, [pc, #664]	@ (800a664 <TP_Scan+0x2bc>)
 800a3cc:	f7ff ff97 	bl	800a2fe <TP_Read_TwiceADC>
 800a3d0:	e10e      	b.n	800a5f0 <TP_Scan+0x248>
            //Read the screen coordinates
        } else if (TP_Read_TwiceADC(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint)) {
 800a3d2:	49a3      	ldr	r1, [pc, #652]	@ (800a660 <TP_Scan+0x2b8>)
 800a3d4:	48a3      	ldr	r0, [pc, #652]	@ (800a664 <TP_Scan+0x2bc>)
 800a3d6:	f7ff ff92 	bl	800a2fe <TP_Read_TwiceADC>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 8107 	beq.w	800a5f0 <TP_Scan+0x248>
//			DEBUG("(Xad,Yad) = %d,%d\r\n",sTP_DEV.Xpoint,sTP_DEV.Ypoint);
            if(sTP_DEV.TP_Scan_Dir == R2L_D2U) {		//Converts the result to screen coordinates
 800a3e2:	4ba1      	ldr	r3, [pc, #644]	@ (800a668 <TP_Scan+0x2c0>)
 800a3e4:	7e1b      	ldrb	r3, [r3, #24]
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	d136      	bne.n	800a458 <TP_Scan+0xb0>
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Xpoint +
 800a3ea:	4b9f      	ldr	r3, [pc, #636]	@ (800a668 <TP_Scan+0x2c0>)
 800a3ec:	ed93 7a04 	vldr	s14, [r3, #16]
 800a3f0:	4b9d      	ldr	r3, [pc, #628]	@ (800a668 <TP_Scan+0x2c0>)
 800a3f2:	889b      	ldrh	r3, [r3, #4]
 800a3f4:	ee07 3a90 	vmov	s15, r3
 800a3f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3fc:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a400:	4b99      	ldr	r3, [pc, #612]	@ (800a668 <TP_Scan+0x2c0>)
 800a402:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Xpoint +
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a40e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a416:	ee17 3a90 	vmov	r3, s15
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	4b93      	ldr	r3, [pc, #588]	@ (800a66c <TP_Scan+0x2c4>)
 800a41e:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Ypoint +
 800a420:	4b91      	ldr	r3, [pc, #580]	@ (800a668 <TP_Scan+0x2c0>)
 800a422:	ed93 7a05 	vldr	s14, [r3, #20]
 800a426:	4b90      	ldr	r3, [pc, #576]	@ (800a668 <TP_Scan+0x2c0>)
 800a428:	88db      	ldrh	r3, [r3, #6]
 800a42a:	ee07 3a90 	vmov	s15, r3
 800a42e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a432:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a436:	4b8c      	ldr	r3, [pc, #560]	@ (800a668 <TP_Scan+0x2c0>)
 800a438:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Ypoint +
 800a43c:	ee07 3a90 	vmov	s15, r3
 800a440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a444:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a44c:	ee17 3a90 	vmov	r3, s15
 800a450:	b29a      	uxth	r2, r3
 800a452:	4b86      	ldr	r3, [pc, #536]	@ (800a66c <TP_Scan+0x2c4>)
 800a454:	805a      	strh	r2, [r3, #2]
 800a456:	e0cb      	b.n	800a5f0 <TP_Scan+0x248>
            } else if(sTP_DEV.TP_Scan_Dir == L2R_U2D) {
 800a458:	4b83      	ldr	r3, [pc, #524]	@ (800a668 <TP_Scan+0x2c0>)
 800a45a:	7e1b      	ldrb	r3, [r3, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d146      	bne.n	800a4ee <TP_Scan+0x146>
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a460:	4b83      	ldr	r3, [pc, #524]	@ (800a670 <TP_Scan+0x2c8>)
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fXfac * sTP_DEV.Xpoint -
 800a46c:	4b7e      	ldr	r3, [pc, #504]	@ (800a668 <TP_Scan+0x2c0>)
 800a46e:	edd3 6a04 	vldr	s13, [r3, #16]
 800a472:	4b7d      	ldr	r3, [pc, #500]	@ (800a668 <TP_Scan+0x2c0>)
 800a474:	889b      	ldrh	r3, [r3, #4]
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a47e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a482:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a486:	4b78      	ldr	r3, [pc, #480]	@ (800a668 <TP_Scan+0x2c0>)
 800a488:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                                  sTP_DEV.fXfac * sTP_DEV.Xpoint -
 800a48c:	ee07 3a90 	vmov	s15, r3
 800a490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a494:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a49c:	ee17 3a90 	vmov	r3, s15
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	4b72      	ldr	r3, [pc, #456]	@ (800a66c <TP_Scan+0x2c4>)
 800a4a4:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a4a6:	4b72      	ldr	r3, [pc, #456]	@ (800a670 <TP_Scan+0x2c8>)
 800a4a8:	885b      	ldrh	r3, [r3, #2]
 800a4aa:	ee07 3a90 	vmov	s15, r3
 800a4ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fYfac * sTP_DEV.Ypoint -
 800a4b2:	4b6d      	ldr	r3, [pc, #436]	@ (800a668 <TP_Scan+0x2c0>)
 800a4b4:	edd3 6a05 	vldr	s13, [r3, #20]
 800a4b8:	4b6b      	ldr	r3, [pc, #428]	@ (800a668 <TP_Scan+0x2c0>)
 800a4ba:	88db      	ldrh	r3, [r3, #6]
 800a4bc:	ee07 3a90 	vmov	s15, r3
 800a4c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a4c8:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a4cc:	4b66      	ldr	r3, [pc, #408]	@ (800a668 <TP_Scan+0x2c0>)
 800a4ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                                  sTP_DEV.fYfac * sTP_DEV.Ypoint -
 800a4d2:	ee07 3a90 	vmov	s15, r3
 800a4d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4da:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a4de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4e2:	ee17 3a90 	vmov	r3, s15
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	4b60      	ldr	r3, [pc, #384]	@ (800a66c <TP_Scan+0x2c4>)
 800a4ea:	805a      	strh	r2, [r3, #2]
 800a4ec:	e080      	b.n	800a5f0 <TP_Scan+0x248>
            } else if(sTP_DEV.TP_Scan_Dir == U2D_R2L) {
 800a4ee:	4b5e      	ldr	r3, [pc, #376]	@ (800a668 <TP_Scan+0x2c0>)
 800a4f0:	7e1b      	ldrb	r3, [r3, #24]
 800a4f2:	2b05      	cmp	r3, #5
 800a4f4:	d136      	bne.n	800a564 <TP_Scan+0x1bc>
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Ypoint +
 800a4f6:	4b5c      	ldr	r3, [pc, #368]	@ (800a668 <TP_Scan+0x2c0>)
 800a4f8:	ed93 7a04 	vldr	s14, [r3, #16]
 800a4fc:	4b5a      	ldr	r3, [pc, #360]	@ (800a668 <TP_Scan+0x2c0>)
 800a4fe:	88db      	ldrh	r3, [r3, #6]
 800a500:	ee07 3a90 	vmov	s15, r3
 800a504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a508:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a50c:	4b56      	ldr	r3, [pc, #344]	@ (800a668 <TP_Scan+0x2c0>)
 800a50e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Ypoint +
 800a512:	ee07 3a90 	vmov	s15, r3
 800a516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a51a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a51e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a522:	ee17 3a90 	vmov	r3, s15
 800a526:	b29a      	uxth	r2, r3
 800a528:	4b50      	ldr	r3, [pc, #320]	@ (800a66c <TP_Scan+0x2c4>)
 800a52a:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Xpoint +
 800a52c:	4b4e      	ldr	r3, [pc, #312]	@ (800a668 <TP_Scan+0x2c0>)
 800a52e:	ed93 7a05 	vldr	s14, [r3, #20]
 800a532:	4b4d      	ldr	r3, [pc, #308]	@ (800a668 <TP_Scan+0x2c0>)
 800a534:	889b      	ldrh	r3, [r3, #4]
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a53e:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a542:	4b49      	ldr	r3, [pc, #292]	@ (800a668 <TP_Scan+0x2c0>)
 800a544:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Xpoint +
 800a548:	ee07 3a90 	vmov	s15, r3
 800a54c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a550:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a558:	ee17 3a90 	vmov	r3, s15
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	4b43      	ldr	r3, [pc, #268]	@ (800a66c <TP_Scan+0x2c4>)
 800a560:	805a      	strh	r2, [r3, #2]
 800a562:	e045      	b.n	800a5f0 <TP_Scan+0x248>
            } else {
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a564:	4b42      	ldr	r3, [pc, #264]	@ (800a670 <TP_Scan+0x2c8>)
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	ee07 3a90 	vmov	s15, r3
 800a56c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fXfac * sTP_DEV.Ypoint -
 800a570:	4b3d      	ldr	r3, [pc, #244]	@ (800a668 <TP_Scan+0x2c0>)
 800a572:	edd3 6a04 	vldr	s13, [r3, #16]
 800a576:	4b3c      	ldr	r3, [pc, #240]	@ (800a668 <TP_Scan+0x2c0>)
 800a578:	88db      	ldrh	r3, [r3, #6]
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a582:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a586:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a58a:	4b37      	ldr	r3, [pc, #220]	@ (800a668 <TP_Scan+0x2c0>)
 800a58c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                                  sTP_DEV.fXfac * sTP_DEV.Ypoint -
 800a590:	ee07 3a90 	vmov	s15, r3
 800a594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a598:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a59c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5a0:	ee17 3a90 	vmov	r3, s15
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	4b31      	ldr	r3, [pc, #196]	@ (800a66c <TP_Scan+0x2c4>)
 800a5a8:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a5aa:	4b31      	ldr	r3, [pc, #196]	@ (800a670 <TP_Scan+0x2c8>)
 800a5ac:	885b      	ldrh	r3, [r3, #2]
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fYfac * sTP_DEV.Xpoint -
 800a5b6:	4b2c      	ldr	r3, [pc, #176]	@ (800a668 <TP_Scan+0x2c0>)
 800a5b8:	edd3 6a05 	vldr	s13, [r3, #20]
 800a5bc:	4b2a      	ldr	r3, [pc, #168]	@ (800a668 <TP_Scan+0x2c0>)
 800a5be:	889b      	ldrh	r3, [r3, #4]
 800a5c0:	ee07 3a90 	vmov	s15, r3
 800a5c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a5cc:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a5d0:	4b25      	ldr	r3, [pc, #148]	@ (800a668 <TP_Scan+0x2c0>)
 800a5d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                                  sTP_DEV.fYfac * sTP_DEV.Xpoint -
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5de:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a5e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e6:	ee17 3a90 	vmov	r3, s15
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	4b1f      	ldr	r3, [pc, #124]	@ (800a66c <TP_Scan+0x2c4>)
 800a5ee:	805a      	strh	r2, [r3, #2]
            }
//			DEBUG("( x , y ) = %d,%d\r\n",sTP_Draw.Xpoint,sTP_Draw.Ypoint);
        }
        if (0 == (sTP_DEV.chStatus & TP_PRESS_DOWN)) {	//Not being pressed
 800a5f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a668 <TP_Scan+0x2c0>)
 800a5f2:	7a1b      	ldrb	r3, [r3, #8]
 800a5f4:	b25b      	sxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	db26      	blt.n	800a648 <TP_Scan+0x2a0>
            sTP_DEV.chStatus = TP_PRESS_DOWN | TP_PRESSED;
 800a5fa:	4b1b      	ldr	r3, [pc, #108]	@ (800a668 <TP_Scan+0x2c0>)
 800a5fc:	22c0      	movs	r2, #192	@ 0xc0
 800a5fe:	721a      	strb	r2, [r3, #8]
            sTP_DEV.Xpoint0 = sTP_DEV.Xpoint;
 800a600:	4b19      	ldr	r3, [pc, #100]	@ (800a668 <TP_Scan+0x2c0>)
 800a602:	889a      	ldrh	r2, [r3, #4]
 800a604:	4b18      	ldr	r3, [pc, #96]	@ (800a668 <TP_Scan+0x2c0>)
 800a606:	801a      	strh	r2, [r3, #0]
            sTP_DEV.Ypoint0 = sTP_DEV.Ypoint;
 800a608:	4b17      	ldr	r3, [pc, #92]	@ (800a668 <TP_Scan+0x2c0>)
 800a60a:	88da      	ldrh	r2, [r3, #6]
 800a60c:	4b16      	ldr	r3, [pc, #88]	@ (800a668 <TP_Scan+0x2c0>)
 800a60e:	805a      	strh	r2, [r3, #2]
 800a610:	e01a      	b.n	800a648 <TP_Scan+0x2a0>
        }
    } else {
        if (sTP_DEV.chStatus & TP_PRESS_DOWN) {	//0x80
 800a612:	4b15      	ldr	r3, [pc, #84]	@ (800a668 <TP_Scan+0x2c0>)
 800a614:	7a1b      	ldrb	r3, [r3, #8]
 800a616:	b25b      	sxtb	r3, r3
 800a618:	2b00      	cmp	r3, #0
 800a61a:	da07      	bge.n	800a62c <TP_Scan+0x284>
            sTP_DEV.chStatus &= ~(1 << 7);		//0x00
 800a61c:	4b12      	ldr	r3, [pc, #72]	@ (800a668 <TP_Scan+0x2c0>)
 800a61e:	7a1b      	ldrb	r3, [r3, #8]
 800a620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a624:	b2da      	uxtb	r2, r3
 800a626:	4b10      	ldr	r3, [pc, #64]	@ (800a668 <TP_Scan+0x2c0>)
 800a628:	721a      	strb	r2, [r3, #8]
 800a62a:	e00d      	b.n	800a648 <TP_Scan+0x2a0>
        } else {
            sTP_DEV.Xpoint0 = 0;
 800a62c:	4b0e      	ldr	r3, [pc, #56]	@ (800a668 <TP_Scan+0x2c0>)
 800a62e:	2200      	movs	r2, #0
 800a630:	801a      	strh	r2, [r3, #0]
            sTP_DEV.Ypoint0 = 0;
 800a632:	4b0d      	ldr	r3, [pc, #52]	@ (800a668 <TP_Scan+0x2c0>)
 800a634:	2200      	movs	r2, #0
 800a636:	805a      	strh	r2, [r3, #2]
            sTP_DEV.Xpoint = 0xffff;
 800a638:	4b0b      	ldr	r3, [pc, #44]	@ (800a668 <TP_Scan+0x2c0>)
 800a63a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a63e:	809a      	strh	r2, [r3, #4]
            sTP_DEV.Ypoint = 0xffff;
 800a640:	4b09      	ldr	r3, [pc, #36]	@ (800a668 <TP_Scan+0x2c0>)
 800a642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a646:	80da      	strh	r2, [r3, #6]
        }
    }

    return (sTP_DEV.chStatus & TP_PRESS_DOWN);
 800a648:	4b07      	ldr	r3, [pc, #28]	@ (800a668 <TP_Scan+0x2c0>)
 800a64a:	7a1b      	ldrb	r3, [r3, #8]
 800a64c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a650:	b2db      	uxtb	r3, r3
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	40020400 	.word	0x40020400
 800a660:	20002122 	.word	0x20002122
 800a664:	20002120 	.word	0x20002120
 800a668:	2000211c 	.word	0x2000211c
 800a66c:	20002138 	.word	0x20002138
 800a670:	20002110 	.word	0x20002110

0800a674 <TP_GetAdFac>:
/*******************************************************************************
function:
		Use the default calibration factor
*******************************************************************************/
void TP_GetAdFac(void)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af02      	add	r7, sp, #8
    if(	sTP_DEV.TP_Scan_Dir == D2U_L2R ) { //SCAN_DIR_DFT = D2U_L2R
 800a67a:	4b2f      	ldr	r3, [pc, #188]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a67c:	7e1b      	ldrb	r3, [r3, #24]
 800a67e:	2b06      	cmp	r3, #6
 800a680:	d10e      	bne.n	800a6a0 <TP_GetAdFac+0x2c>
        sTP_DEV.fXfac = -0.132443F ;
 800a682:	4b2d      	ldr	r3, [pc, #180]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a684:	4a2d      	ldr	r2, [pc, #180]	@ (800a73c <TP_GetAdFac+0xc8>)
 800a686:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.089997F ;
 800a688:	4b2b      	ldr	r3, [pc, #172]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a68a:	4a2d      	ldr	r2, [pc, #180]	@ (800a740 <TP_GetAdFac+0xcc>)
 800a68c:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 516L ;
 800a68e:	4b2a      	ldr	r3, [pc, #168]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a690:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a694:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -22L ;
 800a696:	4b28      	ldr	r3, [pc, #160]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a698:	f64f 72ea 	movw	r2, #65514	@ 0xffea
 800a69c:	819a      	strh	r2, [r3, #12]
        LCD_Clear(LCD_BACKGROUND);
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
						calibration in this direction",
                         &Font16, FONT_BACKGROUND, RED);
    }
}
 800a69e:	e048      	b.n	800a732 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == L2R_U2D ) {
 800a6a0:	4b25      	ldr	r3, [pc, #148]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6a2:	7e1b      	ldrb	r3, [r3, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10e      	bne.n	800a6c6 <TP_GetAdFac+0x52>
        sTP_DEV.fXfac = 0.089697F ;
 800a6a8:	4b23      	ldr	r3, [pc, #140]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6aa:	4a26      	ldr	r2, [pc, #152]	@ (800a744 <TP_GetAdFac+0xd0>)
 800a6ac:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.134792F ;
 800a6ae:	4b22      	ldr	r3, [pc, #136]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6b0:	4a25      	ldr	r2, [pc, #148]	@ (800a748 <TP_GetAdFac+0xd4>)
 800a6b2:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -21L ;
 800a6b4:	4b20      	ldr	r3, [pc, #128]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6b6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800a6ba:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -39L ;
 800a6bc:	4b1e      	ldr	r3, [pc, #120]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6be:	f64f 72d9 	movw	r2, #65497	@ 0xffd9
 800a6c2:	819a      	strh	r2, [r3, #12]
}
 800a6c4:	e035      	b.n	800a732 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == R2L_D2U ) {
 800a6c6:	4b1c      	ldr	r3, [pc, #112]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6c8:	7e1b      	ldrb	r3, [r3, #24]
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d10e      	bne.n	800a6ec <TP_GetAdFac+0x78>
        sTP_DEV.fXfac = 0.089915F ;
 800a6ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6d0:	4a1e      	ldr	r2, [pc, #120]	@ (800a74c <TP_GetAdFac+0xd8>)
 800a6d2:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac =  0.133178F ;
 800a6d4:	4b18      	ldr	r3, [pc, #96]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a750 <TP_GetAdFac+0xdc>)
 800a6d8:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -22L ;
 800a6da:	4b17      	ldr	r3, [pc, #92]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6dc:	f64f 72ea 	movw	r2, #65514	@ 0xffea
 800a6e0:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -38L ;
 800a6e2:	4b15      	ldr	r3, [pc, #84]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6e4:	f64f 72da 	movw	r2, #65498	@ 0xffda
 800a6e8:	819a      	strh	r2, [r3, #12]
}
 800a6ea:	e022      	b.n	800a732 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == U2D_R2L ) {
 800a6ec:	4b12      	ldr	r3, [pc, #72]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6ee:	7e1b      	ldrb	r3, [r3, #24]
 800a6f0:	2b05      	cmp	r3, #5
 800a6f2:	d10e      	bne.n	800a712 <TP_GetAdFac+0x9e>
        sTP_DEV.fXfac = -0.132906F ;
 800a6f4:	4b10      	ldr	r3, [pc, #64]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6f6:	4a17      	ldr	r2, [pc, #92]	@ (800a754 <TP_GetAdFac+0xe0>)
 800a6f8:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.087964F ;
 800a6fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a6fc:	4a16      	ldr	r2, [pc, #88]	@ (800a758 <TP_GetAdFac+0xe4>)
 800a6fe:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 517L ;
 800a700:	4b0d      	ldr	r3, [pc, #52]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a702:	f240 2205 	movw	r2, #517	@ 0x205
 800a706:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -20L ;
 800a708:	4b0b      	ldr	r3, [pc, #44]	@ (800a738 <TP_GetAdFac+0xc4>)
 800a70a:	f64f 72ec 	movw	r2, #65516	@ 0xffec
 800a70e:	819a      	strh	r2, [r3, #12]
}
 800a710:	e00f      	b.n	800a732 <TP_GetAdFac+0xbe>
        LCD_Clear(LCD_BACKGROUND);
 800a712:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a716:	f7fe fea1 	bl	800945c <LCD_Clear>
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
 800a71a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	4b0d      	ldr	r3, [pc, #52]	@ (800a75c <TP_GetAdFac+0xe8>)
 800a728:	4a0d      	ldr	r2, [pc, #52]	@ (800a760 <TP_GetAdFac+0xec>)
 800a72a:	213c      	movs	r1, #60	@ 0x3c
 800a72c:	2000      	movs	r0, #0
 800a72e:	f7ff f939 	bl	80099a4 <GUI_DisString_EN>
}
 800a732:	bf00      	nop
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	2000211c 	.word	0x2000211c
 800a73c:	be079f23 	.word	0xbe079f23
 800a740:	3db85059 	.word	0x3db85059
 800a744:	3db7b310 	.word	0x3db7b310
 800a748:	3e0a06ea 	.word	0x3e0a06ea
 800a74c:	3db8255b 	.word	0x3db8255b
 800a750:	3e085fd0 	.word	0x3e085fd0
 800a754:	be081883 	.word	0xbe081883
 800a758:	3db42678 	.word	0x3db42678
 800a75c:	20000104 	.word	0x20000104
 800a760:	0800c80c 	.word	0x0800c80c

0800a764 <TP_MenuDialog>:

/*******************************************************************************
function:
		Paint menu options
*******************************************************************************/
void TP_MenuDialog(void) {
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af04      	add	r7, sp, #16
    //LCD_Clear(LCD_BACKGROUND);
    DEBUG("Menu return ...\r\n");
 800a76a:	485f      	ldr	r0, [pc, #380]	@ (800a8e8 <TP_MenuDialog+0x184>)
 800a76c:	f000 fe76 	bl	800b45c <puts>

    // Current show
	GUI_DrawRectangle(0, 20,
					  sLCD_DIS.LCD_Dis_Column/2, 220,
 800a770:	4b5e      	ldr	r3, [pc, #376]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a772:	881b      	ldrh	r3, [r3, #0]
	GUI_DrawRectangle(0, 20,
 800a774:	085b      	lsrs	r3, r3, #1
 800a776:	b29a      	uxth	r2, r3
 800a778:	2301      	movs	r3, #1
 800a77a:	9302      	str	r3, [sp, #8]
 800a77c:	2301      	movs	r3, #1
 800a77e:	9301      	str	r3, [sp, #4]
 800a780:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	23dc      	movs	r3, #220	@ 0xdc
 800a788:	2114      	movs	r1, #20
 800a78a:	2000      	movs	r0, #0
 800a78c:	f7fe ffd2 	bl	8009734 <GUI_DrawRectangle>
					  MAGENTA, DRAW_FULL, DOT_PIXEL_1X1);
	GUI_DisString_EN(10, 30, "Current:", &Font24, MAGENTA, BLACK);
 800a790:	2300      	movs	r3, #0
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a798:	9300      	str	r3, [sp, #0]
 800a79a:	4b55      	ldr	r3, [pc, #340]	@ (800a8f0 <TP_MenuDialog+0x18c>)
 800a79c:	4a55      	ldr	r2, [pc, #340]	@ (800a8f4 <TP_MenuDialog+0x190>)
 800a79e:	211e      	movs	r1, #30
 800a7a0:	200a      	movs	r0, #10
 800a7a2:	f7ff f8ff 	bl	80099a4 <GUI_DisString_EN>

	// Voltage show
	GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 20,
 800a7a6:	4b51      	ldr	r3, [pc, #324]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	085b      	lsrs	r3, r3, #1
 800a7ac:	b298      	uxth	r0, r3
 800a7ae:	4b4f      	ldr	r3, [pc, #316]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a7b0:	881a      	ldrh	r2, [r3, #0]
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	9302      	str	r3, [sp, #8]
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	23dc      	movs	r3, #220	@ 0xdc
 800a7c2:	2114      	movs	r1, #20
 800a7c4:	f7fe ffb6 	bl	8009734 <GUI_DrawRectangle>
					  sLCD_DIS.LCD_Dis_Column, 220,
					  GBLUE, DRAW_FULL, DOT_PIXEL_1X1);
	GUI_DisString_EN(250, 30, "Voltage:", &Font24, GBLUE, BLACK);
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	4b47      	ldr	r3, [pc, #284]	@ (800a8f0 <TP_MenuDialog+0x18c>)
 800a7d4:	4a48      	ldr	r2, [pc, #288]	@ (800a8f8 <TP_MenuDialog+0x194>)
 800a7d6:	211e      	movs	r1, #30
 800a7d8:	20fa      	movs	r0, #250	@ 0xfa
 800a7da:	f7ff f8e3 	bl	80099a4 <GUI_DisString_EN>

	// AC/DC Switch (BRRED/YELLOW)
	if (sELECTONIC_LOAD_PARAMETERS.currentType) {
 800a7de:	4b47      	ldr	r3, [pc, #284]	@ (800a8fc <TP_MenuDialog+0x198>)
 800a7e0:	785b      	ldrb	r3, [r3, #1]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d01f      	beq.n	800a826 <TP_MenuDialog+0xc2>
		GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 220,
 800a7e6:	4b41      	ldr	r3, [pc, #260]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a7e8:	881b      	ldrh	r3, [r3, #0]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	b298      	uxth	r0, r3
 800a7ee:	4b3f      	ldr	r3, [pc, #252]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a7f0:	881a      	ldrh	r2, [r3, #0]
 800a7f2:	4b3e      	ldr	r3, [pc, #248]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a7f4:	885b      	ldrh	r3, [r3, #2]
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	9102      	str	r1, [sp, #8]
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	9101      	str	r1, [sp, #4]
 800a7fe:	f64f 4107 	movw	r1, #64519	@ 0xfc07
 800a802:	9100      	str	r1, [sp, #0]
 800a804:	21dc      	movs	r1, #220	@ 0xdc
 800a806:	f7fe ff95 	bl	8009734 <GUI_DrawRectangle>
				sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page,
				BRRED, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(345, 260, "AC", &Font24, BRRED, BLACK);
 800a80a:	2300      	movs	r3, #0
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	4b36      	ldr	r3, [pc, #216]	@ (800a8f0 <TP_MenuDialog+0x18c>)
 800a816:	4a3a      	ldr	r2, [pc, #232]	@ (800a900 <TP_MenuDialog+0x19c>)
 800a818:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a81c:	f240 1059 	movw	r0, #345	@ 0x159
 800a820:	f7ff f8c0 	bl	80099a4 <GUI_DisString_EN>
 800a824:	e01e      	b.n	800a864 <TP_MenuDialog+0x100>
	} else {
		GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 220,
 800a826:	4b31      	ldr	r3, [pc, #196]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	085b      	lsrs	r3, r3, #1
 800a82c:	b298      	uxth	r0, r3
 800a82e:	4b2f      	ldr	r3, [pc, #188]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a830:	881a      	ldrh	r2, [r3, #0]
 800a832:	4b2e      	ldr	r3, [pc, #184]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a834:	885b      	ldrh	r3, [r3, #2]
 800a836:	2101      	movs	r1, #1
 800a838:	9102      	str	r1, [sp, #8]
 800a83a:	2101      	movs	r1, #1
 800a83c:	9101      	str	r1, [sp, #4]
 800a83e:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 800a842:	9100      	str	r1, [sp, #0]
 800a844:	21dc      	movs	r1, #220	@ 0xdc
 800a846:	f7fe ff75 	bl	8009734 <GUI_DrawRectangle>
				sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page,
				YELLOW, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(345, 260, "DC", &Font24, YELLOW, BLACK);
 800a84a:	2300      	movs	r3, #0
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	4b26      	ldr	r3, [pc, #152]	@ (800a8f0 <TP_MenuDialog+0x18c>)
 800a856:	4a2b      	ldr	r2, [pc, #172]	@ (800a904 <TP_MenuDialog+0x1a0>)
 800a858:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a85c:	f240 1059 	movw	r0, #345	@ 0x159
 800a860:	f7ff f8a0 	bl	80099a4 <GUI_DisString_EN>
	}

	// ON/OFF switch (GREEN/RED)
	if (sELECTONIC_LOAD_PARAMETERS.condition) {
 800a864:	4b25      	ldr	r3, [pc, #148]	@ (800a8fc <TP_MenuDialog+0x198>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01d      	beq.n	800a8a8 <TP_MenuDialog+0x144>
		GUI_DrawRectangle(0, 220,
			sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
 800a86c:	4b1f      	ldr	r3, [pc, #124]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a86e:	881b      	ldrh	r3, [r3, #0]
		GUI_DrawRectangle(0, 220,
 800a870:	085b      	lsrs	r3, r3, #1
 800a872:	b29a      	uxth	r2, r3
 800a874:	4b1d      	ldr	r3, [pc, #116]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a876:	885b      	ldrh	r3, [r3, #2]
 800a878:	2101      	movs	r1, #1
 800a87a:	9102      	str	r1, [sp, #8]
 800a87c:	2101      	movs	r1, #1
 800a87e:	9101      	str	r1, [sp, #4]
 800a880:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800a884:	9100      	str	r1, [sp, #0]
 800a886:	21dc      	movs	r1, #220	@ 0xdc
 800a888:	2000      	movs	r0, #0
 800a88a:	f7fe ff53 	bl	8009734 <GUI_DrawRectangle>
			GREEN, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(103, 260, "ON", &Font24, GREEN, BLACK);
 800a88e:	2300      	movs	r3, #0
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	4b15      	ldr	r3, [pc, #84]	@ (800a8f0 <TP_MenuDialog+0x18c>)
 800a89a:	4a1b      	ldr	r2, [pc, #108]	@ (800a908 <TP_MenuDialog+0x1a4>)
 800a89c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a8a0:	2067      	movs	r0, #103	@ 0x67
 800a8a2:	f7ff f87f 	bl	80099a4 <GUI_DisString_EN>
		GUI_DrawRectangle(0, 220,
		sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
		RED, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(95, 260, "OFF", &Font24, RED, BLACK);
	}
}
 800a8a6:	e01c      	b.n	800a8e2 <TP_MenuDialog+0x17e>
		sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
 800a8a8:	4b10      	ldr	r3, [pc, #64]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a8aa:	881b      	ldrh	r3, [r3, #0]
		GUI_DrawRectangle(0, 220,
 800a8ac:	085b      	lsrs	r3, r3, #1
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8ec <TP_MenuDialog+0x188>)
 800a8b2:	885b      	ldrh	r3, [r3, #2]
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	9102      	str	r1, [sp, #8]
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	9101      	str	r1, [sp, #4]
 800a8bc:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800a8c0:	9100      	str	r1, [sp, #0]
 800a8c2:	21dc      	movs	r1, #220	@ 0xdc
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f7fe ff35 	bl	8009734 <GUI_DrawRectangle>
		GUI_DisString_EN(95, 260, "OFF", &Font24, RED, BLACK);
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	4b06      	ldr	r3, [pc, #24]	@ (800a8f0 <TP_MenuDialog+0x18c>)
 800a8d6:	4a0d      	ldr	r2, [pc, #52]	@ (800a90c <TP_MenuDialog+0x1a8>)
 800a8d8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a8dc:	205f      	movs	r0, #95	@ 0x5f
 800a8de:	f7ff f861 	bl	80099a4 <GUI_DisString_EN>
}
 800a8e2:	bf00      	nop
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	0800c870 	.word	0x0800c870
 800a8ec:	20002110 	.word	0x20002110
 800a8f0:	20000114 	.word	0x20000114
 800a8f4:	0800c88c 	.word	0x0800c88c
 800a8f8:	0800c898 	.word	0x0800c898
 800a8fc:	20002140 	.word	0x20002140
 800a900:	0800c8a4 	.word	0x0800c8a4
 800a904:	0800c8a8 	.word	0x0800c8a8
 800a908:	0800c8ac 	.word	0x0800c8ac
 800a90c:	0800c8b0 	.word	0x0800c8b0

0800a910 <TP_IndicationsUnit>:

/*******************************************************************************
function:
		Paint numbers
*******************************************************************************/
void TP_IndicationsUnit(void) {
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af02      	add	r7, sp, #8
	GUI_DisFloatNum(280, 120, 131.5487, &Font24, GBLUE, BLACK);
 800a916:	2300      	movs	r3, #0
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a91e:	4a16      	ldr	r2, [pc, #88]	@ (800a978 <TP_IndicationsUnit+0x68>)
 800a920:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800a97c <TP_IndicationsUnit+0x6c>
 800a924:	2178      	movs	r1, #120	@ 0x78
 800a926:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800a92a:	f7ff f88f 	bl	8009a4c <GUI_DisFloatNum>
	GUI_DisString_EN(400, 120, "Volt", &Font24, GBLUE, BLACK);
 800a92e:	2300      	movs	r3, #0
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	4b0f      	ldr	r3, [pc, #60]	@ (800a978 <TP_IndicationsUnit+0x68>)
 800a93a:	4a11      	ldr	r2, [pc, #68]	@ (800a980 <TP_IndicationsUnit+0x70>)
 800a93c:	2178      	movs	r1, #120	@ 0x78
 800a93e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800a942:	f7ff f82f 	bl	80099a4 <GUI_DisString_EN>

	GUI_DisFloatNum(60, 120, 6.01647, &Font24, MAGENTA, BLACK);
 800a946:	2300      	movs	r3, #0
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a94e:	4a0a      	ldr	r2, [pc, #40]	@ (800a978 <TP_IndicationsUnit+0x68>)
 800a950:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800a984 <TP_IndicationsUnit+0x74>
 800a954:	2178      	movs	r1, #120	@ 0x78
 800a956:	203c      	movs	r0, #60	@ 0x3c
 800a958:	f7ff f878 	bl	8009a4c <GUI_DisFloatNum>
	GUI_DisString_EN(180, 120, "Amp", &Font24, MAGENTA, BLACK);
 800a95c:	2300      	movs	r3, #0
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	4b04      	ldr	r3, [pc, #16]	@ (800a978 <TP_IndicationsUnit+0x68>)
 800a968:	4a07      	ldr	r2, [pc, #28]	@ (800a988 <TP_IndicationsUnit+0x78>)
 800a96a:	2178      	movs	r1, #120	@ 0x78
 800a96c:	20b4      	movs	r0, #180	@ 0xb4
 800a96e:	f7ff f819 	bl	80099a4 <GUI_DisString_EN>
}
 800a972:	bf00      	nop
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	20000114 	.word	0x20000114
 800a97c:	43038c78 	.word	0x43038c78
 800a980:	0800c8b4 	.word	0x0800c8b4
 800a984:	40c086ec 	.word	0x40c086ec
 800a988:	0800c8bc 	.word	0x0800c8bc

0800a98c <TP_MenuTouch>:
/*******************************************************************************
function:
		Touch position on menu
*******************************************************************************/
void TP_MenuTouch(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
	sTP_Draw.Xpoint = 0;
 800a990:	4b37      	ldr	r3, [pc, #220]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800a992:	2200      	movs	r2, #0
 800a994:	801a      	strh	r2, [r3, #0]
	sTP_Draw.Ypoint = 0;
 800a996:	4b36      	ldr	r3, [pc, #216]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800a998:	2200      	movs	r2, #0
 800a99a:	805a      	strh	r2, [r3, #2]
    TP_Scan(0);
 800a99c:	2000      	movs	r0, #0
 800a99e:	f7ff fd03 	bl	800a3a8 <TP_Scan>
    if ((sTP_DEV.chStatus & TP_PRESS_DOWN) && (sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column && sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page)) {		//Press the button
 800a9a2:	4b34      	ldr	r3, [pc, #208]	@ (800aa74 <TP_MenuTouch+0xe8>)
 800a9a4:	7a1b      	ldrb	r3, [r3, #8]
 800a9a6:	b25b      	sxtb	r3, r3
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	da5e      	bge.n	800aa6a <TP_MenuTouch+0xde>
 800a9ac:	4b30      	ldr	r3, [pc, #192]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800a9ae:	881a      	ldrh	r2, [r3, #0]
 800a9b0:	4b31      	ldr	r3, [pc, #196]	@ (800aa78 <TP_MenuTouch+0xec>)
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d258      	bcs.n	800aa6a <TP_MenuTouch+0xde>
 800a9b8:	4b2d      	ldr	r3, [pc, #180]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800a9ba:	885a      	ldrh	r2, [r3, #2]
 800a9bc:	4b2e      	ldr	r3, [pc, #184]	@ (800aa78 <TP_MenuTouch+0xec>)
 800a9be:	885b      	ldrh	r3, [r3, #2]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d252      	bcs.n	800aa6a <TP_MenuTouch+0xde>
		// ON/OFF Switch
		if (sTP_Draw.Xpoint > 0 &&
 800a9c4:	4b2a      	ldr	r3, [pc, #168]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d025      	beq.n	800aa18 <TP_MenuTouch+0x8c>
				sTP_Draw.Xpoint < (sLCD_DIS.LCD_Dis_Column/2 - 1) &&
 800a9cc:	4b28      	ldr	r3, [pc, #160]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800a9ce:	881b      	ldrh	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4b29      	ldr	r3, [pc, #164]	@ (800aa78 <TP_MenuTouch+0xec>)
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	085b      	lsrs	r3, r3, #1
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	3b01      	subs	r3, #1
		if (sTP_Draw.Xpoint > 0 &&
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	da1b      	bge.n	800aa18 <TP_MenuTouch+0x8c>
				sTP_Draw.Ypoint > 220 &&
 800a9e0:	4b23      	ldr	r3, [pc, #140]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800a9e2:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Xpoint < (sLCD_DIS.LCD_Dis_Column/2 - 1) &&
 800a9e4:	2bdc      	cmp	r3, #220	@ 0xdc
 800a9e6:	d917      	bls.n	800aa18 <TP_MenuTouch+0x8c>
				sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page) {
 800a9e8:	4b21      	ldr	r3, [pc, #132]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800a9ea:	885a      	ldrh	r2, [r3, #2]
 800a9ec:	4b22      	ldr	r3, [pc, #136]	@ (800aa78 <TP_MenuTouch+0xec>)
 800a9ee:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Ypoint > 220 &&
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d211      	bcs.n	800aa18 <TP_MenuTouch+0x8c>
			sELECTONIC_LOAD_PARAMETERS.condition = !sELECTONIC_LOAD_PARAMETERS.condition;
 800a9f4:	4b21      	ldr	r3, [pc, #132]	@ (800aa7c <TP_MenuTouch+0xf0>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	bf14      	ite	ne
 800a9fc:	2301      	movne	r3, #1
 800a9fe:	2300      	moveq	r3, #0
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	f083 0301 	eor.w	r3, r3, #1
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0301 	and.w	r3, r3, #1
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	4b1b      	ldr	r3, [pc, #108]	@ (800aa7c <TP_MenuTouch+0xf0>)
 800aa10:	701a      	strb	r2, [r3, #0]
			TP_MenuDialog();
 800aa12:	f7ff fea7 	bl	800a764 <TP_MenuDialog>
			TP_MenuDialog();
		} else {
			//TP_MenuDialog(); // можно использовать как костыль
		}
    }
}
 800aa16:	e028      	b.n	800aa6a <TP_MenuTouch+0xde>
		} else if(sTP_Draw.Xpoint > sLCD_DIS.LCD_Dis_Column/2 &&
 800aa18:	4b15      	ldr	r3, [pc, #84]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800aa1a:	881a      	ldrh	r2, [r3, #0]
 800aa1c:	4b16      	ldr	r3, [pc, #88]	@ (800aa78 <TP_MenuTouch+0xec>)
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	085b      	lsrs	r3, r3, #1
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d920      	bls.n	800aa6a <TP_MenuTouch+0xde>
				sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column &&
 800aa28:	4b11      	ldr	r3, [pc, #68]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800aa2a:	881a      	ldrh	r2, [r3, #0]
 800aa2c:	4b12      	ldr	r3, [pc, #72]	@ (800aa78 <TP_MenuTouch+0xec>)
 800aa2e:	881b      	ldrh	r3, [r3, #0]
		} else if(sTP_Draw.Xpoint > sLCD_DIS.LCD_Dis_Column/2 &&
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d21a      	bcs.n	800aa6a <TP_MenuTouch+0xde>
				sTP_Draw.Ypoint > 220 &&
 800aa34:	4b0e      	ldr	r3, [pc, #56]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800aa36:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column &&
 800aa38:	2bdc      	cmp	r3, #220	@ 0xdc
 800aa3a:	d916      	bls.n	800aa6a <TP_MenuTouch+0xde>
				sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page) {
 800aa3c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa70 <TP_MenuTouch+0xe4>)
 800aa3e:	885a      	ldrh	r2, [r3, #2]
 800aa40:	4b0d      	ldr	r3, [pc, #52]	@ (800aa78 <TP_MenuTouch+0xec>)
 800aa42:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Ypoint > 220 &&
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d210      	bcs.n	800aa6a <TP_MenuTouch+0xde>
			sELECTONIC_LOAD_PARAMETERS.currentType = !sELECTONIC_LOAD_PARAMETERS.currentType;
 800aa48:	4b0c      	ldr	r3, [pc, #48]	@ (800aa7c <TP_MenuTouch+0xf0>)
 800aa4a:	785b      	ldrb	r3, [r3, #1]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bf14      	ite	ne
 800aa50:	2301      	movne	r3, #1
 800aa52:	2300      	moveq	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	f083 0301 	eor.w	r3, r3, #1
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	4b06      	ldr	r3, [pc, #24]	@ (800aa7c <TP_MenuTouch+0xf0>)
 800aa64:	705a      	strb	r2, [r3, #1]
			TP_MenuDialog();
 800aa66:	f7ff fe7d 	bl	800a764 <TP_MenuDialog>
}
 800aa6a:	bf00      	nop
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20002138 	.word	0x20002138
 800aa74:	2000211c 	.word	0x2000211c
 800aa78:	20002110 	.word	0x20002110
 800aa7c:	20002140 	.word	0x20002140

0800aa80 <TP_Init>:
/*******************************************************************************
function:
		Touch pad initialization
*******************************************************************************/
void TP_Init( LCD_SCAN_DIR Lcd_ScanDir )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	71fb      	strb	r3, [r7, #7]
    TP_CS_1;
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	2180      	movs	r1, #128	@ 0x80
 800aa8e:	4807      	ldr	r0, [pc, #28]	@ (800aaac <TP_Init+0x2c>)
 800aa90:	f7f6 fd72 	bl	8001578 <HAL_GPIO_WritePin>

    sTP_DEV.TP_Scan_Dir = Lcd_ScanDir;
 800aa94:	4a06      	ldr	r2, [pc, #24]	@ (800aab0 <TP_Init+0x30>)
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	7613      	strb	r3, [r2, #24]

    TP_Read_ADC_XY(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint);
 800aa9a:	4906      	ldr	r1, [pc, #24]	@ (800aab4 <TP_Init+0x34>)
 800aa9c:	4806      	ldr	r0, [pc, #24]	@ (800aab8 <TP_Init+0x38>)
 800aa9e:	f7ff fc17 	bl	800a2d0 <TP_Read_ADC_XY>
}
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	40020400 	.word	0x40020400
 800aab0:	2000211c 	.word	0x2000211c
 800aab4:	20002122 	.word	0x20002122
 800aab8:	20002120 	.word	0x20002120

0800aabc <LOAD_Init>:

void LOAD_Init(void)
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
    sELECTONIC_LOAD_PARAMETERS.condition = 1;
 800aac0:	4b09      	ldr	r3, [pc, #36]	@ (800aae8 <LOAD_Init+0x2c>)
 800aac2:	2201      	movs	r2, #1
 800aac4:	701a      	strb	r2, [r3, #0]

    sELECTONIC_LOAD_PARAMETERS.currentType = 1;
 800aac6:	4b08      	ldr	r3, [pc, #32]	@ (800aae8 <LOAD_Init+0x2c>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	705a      	strb	r2, [r3, #1]

    sELECTONIC_LOAD_PARAMETERS.currentValue = 0;
 800aacc:	4b06      	ldr	r3, [pc, #24]	@ (800aae8 <LOAD_Init+0x2c>)
 800aace:	f04f 0200 	mov.w	r2, #0
 800aad2:	605a      	str	r2, [r3, #4]

    sELECTONIC_LOAD_PARAMETERS.voltageValue = 0;
 800aad4:	4b04      	ldr	r3, [pc, #16]	@ (800aae8 <LOAD_Init+0x2c>)
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	609a      	str	r2, [r3, #8]
}
 800aadc:	bf00      	nop
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	20002140 	.word	0x20002140

0800aaec <SD_SPI_ReadWriteByte>:
unsigned char  SD_Type=0;  //version of the sd card

//data: data to be written to sd card.
//return: data read from sd card.
unsigned char SD_SPI_ReadWriteByte(unsigned char CMD)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	71fb      	strb	r3, [r7, #7]
	return SPI4W_Write_Byte(CMD);
 800aaf6:	79fb      	ldrb	r3, [r7, #7]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fd fc3f 	bl	800837c <SPI4W_Write_Byte>
 800aafe:	4603      	mov	r3, r0
//	return SPI_Read_Byte();
}	  
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <SD_SPI_SpeedLow>:

//set spi in low speed mode.
void SD_SPI_SpeedLow(void)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	af00      	add	r7, sp, #0
//	SPI1->CR1&=0XFFC7; 
//	SPI1->CR1|=SPI_BaudRatePrescaler_256;
//	SPI_Cmd(SPI1,ENABLE); 
}
 800ab0c:	bf00      	nop
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <SD_SPI_SpeedHigh>:


//set spi in high speed mode.
void SD_SPI_SpeedHigh(void)
{
 800ab16:	b480      	push	{r7}
 800ab18:	af00      	add	r7, sp, #0
//	SPI1->CR1&=0XFFC7; 
//	SPI1->CR1|=SPI_BaudRatePrescaler_32;
//	SPI_Cmd(SPI1,ENABLE); 
}
 800ab1a:	bf00      	nop
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <SD_DisSelect>:


//released spi bus
void SD_DisSelect(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
	SD_CS_1;
 800ab28:	2201      	movs	r2, #1
 800ab2a:	2110      	movs	r1, #16
 800ab2c:	4803      	ldr	r0, [pc, #12]	@ (800ab3c <SD_DisSelect+0x18>)
 800ab2e:	f7f6 fd23 	bl	8001578 <HAL_GPIO_WritePin>
 	SD_SPI_ReadWriteByte(0xff);//providing extra 8 clocks  
 800ab32:	20ff      	movs	r0, #255	@ 0xff
 800ab34:	f7ff ffda 	bl	800aaec <SD_SPI_ReadWriteByte>
}
 800ab38:	bf00      	nop
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	40020400 	.word	0x40020400

0800ab40 <SD_Select>:

//pick sd card and waiting until until it's ready
//return: 0: succed 1: failure
unsigned char SD_Select(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
	SD_CS_0;
 800ab44:	2200      	movs	r2, #0
 800ab46:	2110      	movs	r1, #16
 800ab48:	4807      	ldr	r0, [pc, #28]	@ (800ab68 <SD_Select+0x28>)
 800ab4a:	f7f6 fd15 	bl	8001578 <HAL_GPIO_WritePin>
	if(SD_WaitReady()==0)return 0; 
 800ab4e:	f000 f80d 	bl	800ab6c <SD_WaitReady>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <SD_Select+0x1c>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	e002      	b.n	800ab62 <SD_Select+0x22>
	SD_DisSelect();
 800ab5c:	f7ff ffe2 	bl	800ab24 <SD_DisSelect>
	return 1;
 800ab60:	2301      	movs	r3, #1
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	40020400 	.word	0x40020400

0800ab6c <SD_WaitReady>:

//waiting for sd card until it's ready
unsigned char SD_WaitReady(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
	unsigned int t=0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	607b      	str	r3, [r7, #4]
	do{
		if(SD_SPI_ReadWriteByte(0XFF) == 0XFF)
 800ab76:	20ff      	movs	r0, #255	@ 0xff
 800ab78:	f7ff ffb8 	bl	800aaec <SD_SPI_ReadWriteByte>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2bff      	cmp	r3, #255	@ 0xff
 800ab80:	d101      	bne.n	800ab86 <SD_WaitReady+0x1a>
			return 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e008      	b.n	800ab98 <SD_WaitReady+0x2c>
		t++;		  	
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	607b      	str	r3, [r7, #4]
	}while(t<0XFFFFFF);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d3ef      	bcc.n	800ab76 <SD_WaitReady+0xa>
	return 1;
 800ab96:	2301      	movs	r3, #1
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <SD_GetResponse>:
//waiting for response from sd card.
//Response: expect from sd card.
//return: succeed for 0, fail for other else 
//return: 0 for success, other for failure.   
unsigned char SD_GetResponse(unsigned char Response)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	71fb      	strb	r3, [r7, #7]
	unsigned short Count=0xFFFF;	   						  
 800abaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800abae:	81fb      	strh	r3, [r7, #14]
	while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)
 800abb0:	e002      	b.n	800abb8 <SD_GetResponse+0x18>
		Count--; 	  
 800abb2:	89fb      	ldrh	r3, [r7, #14]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	81fb      	strh	r3, [r7, #14]
	while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)
 800abb8:	20ff      	movs	r0, #255	@ 0xff
 800abba:	f7ff ff97 	bl	800aaec <SD_SPI_ReadWriteByte>
 800abbe:	4603      	mov	r3, r0
 800abc0:	461a      	mov	r2, r3
 800abc2:	79fb      	ldrb	r3, [r7, #7]
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d002      	beq.n	800abce <SD_GetResponse+0x2e>
 800abc8:	89fb      	ldrh	r3, [r7, #14]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1f1      	bne.n	800abb2 <SD_GetResponse+0x12>
	if (Count==0)
 800abce:	89fb      	ldrh	r3, [r7, #14]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d101      	bne.n	800abd8 <SD_GetResponse+0x38>
		return MSD_RESPONSE_FAILURE;  
 800abd4:	23ff      	movs	r3, #255	@ 0xff
 800abd6:	e000      	b.n	800abda <SD_GetResponse+0x3a>
	else 
		return MSD_RESPONSE_NO_ERROR;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <SD_RecvData>:
//read a buffer from sd card.
//*buf: pointer to a buffer.
//len: length of the buffer.
//return: 0 for success, other for failure.   
unsigned char SD_RecvData(unsigned char *buf,unsigned short len)
{			  	  
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b082      	sub	sp, #8
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	807b      	strh	r3, [r7, #2]
	if(SD_GetResponse(0xFE))
 800abee:	20fe      	movs	r0, #254	@ 0xfe
 800abf0:	f7ff ffd6 	bl	800aba0 <SD_GetResponse>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00b      	beq.n	800ac12 <SD_RecvData+0x30>
		return 1;//waiting for start command send back from sd card.
 800abfa:	2301      	movs	r3, #1
 800abfc:	e015      	b.n	800ac2a <SD_RecvData+0x48>
    while(len--){//receiving data...
        *buf = SD_SPI_ReadWriteByte(0xFF);
 800abfe:	20ff      	movs	r0, #255	@ 0xff
 800ac00:	f7ff ff74 	bl	800aaec <SD_SPI_ReadWriteByte>
 800ac04:	4603      	mov	r3, r0
 800ac06:	461a      	mov	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	701a      	strb	r2, [r3, #0]
        buf++;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	607b      	str	r3, [r7, #4]
    while(len--){//receiving data...
 800ac12:	887b      	ldrh	r3, [r7, #2]
 800ac14:	1e5a      	subs	r2, r3, #1
 800ac16:	807a      	strh	r2, [r7, #2]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1f0      	bne.n	800abfe <SD_RecvData+0x1c>
    }

    //send 2 dummy write (dummy CRC)
    SD_SPI_ReadWriteByte(0xFF);
 800ac1c:	20ff      	movs	r0, #255	@ 0xff
 800ac1e:	f7ff ff65 	bl	800aaec <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(0xFF);									  					    
 800ac22:	20ff      	movs	r0, #255	@ 0xff
 800ac24:	f7ff ff62 	bl	800aaec <SD_SPI_ReadWriteByte>
    return 0;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <SD_SendBlock>:
//write a buffer containing 512 bytes to sd card.
//buf: data buffer
//cmd: command
//return: 0 for success, other for failure.   
unsigned char SD_SendBlock(unsigned char*buf,unsigned char cmd)
{	
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	70fb      	strb	r3, [r7, #3]
	unsigned short t;		  	  
	if(SD_WaitReady())return 1;
 800ac3e:	f7ff ff95 	bl	800ab6c <SD_WaitReady>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <SD_SendBlock+0x1a>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e02a      	b.n	800aca2 <SD_SendBlock+0x70>
	SD_SPI_ReadWriteByte(cmd);
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7ff ff4c 	bl	800aaec <SD_SPI_ReadWriteByte>
	if(cmd!=0XFD){
 800ac54:	78fb      	ldrb	r3, [r7, #3]
 800ac56:	2bfd      	cmp	r3, #253	@ 0xfd
 800ac58:	d022      	beq.n	800aca0 <SD_SendBlock+0x6e>
		for(t=0;t<512;t++)
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	81fb      	strh	r3, [r7, #14]
 800ac5e:	e009      	b.n	800ac74 <SD_SendBlock+0x42>
			SD_SPI_ReadWriteByte(buf[t]);
 800ac60:	89fb      	ldrh	r3, [r7, #14]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	4413      	add	r3, r2
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7ff ff3f 	bl	800aaec <SD_SPI_ReadWriteByte>
		for(t=0;t<512;t++)
 800ac6e:	89fb      	ldrh	r3, [r7, #14]
 800ac70:	3301      	adds	r3, #1
 800ac72:	81fb      	strh	r3, [r7, #14]
 800ac74:	89fb      	ldrh	r3, [r7, #14]
 800ac76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac7a:	d3f1      	bcc.n	800ac60 <SD_SendBlock+0x2e>
	    SD_SPI_ReadWriteByte(0xFF);//ignoring CRC
 800ac7c:	20ff      	movs	r0, #255	@ 0xff
 800ac7e:	f7ff ff35 	bl	800aaec <SD_SPI_ReadWriteByte>
	    SD_SPI_ReadWriteByte(0xFF);
 800ac82:	20ff      	movs	r0, #255	@ 0xff
 800ac84:	f7ff ff32 	bl	800aaec <SD_SPI_ReadWriteByte>
		t = SD_SPI_ReadWriteByte(0xFF);
 800ac88:	20ff      	movs	r0, #255	@ 0xff
 800ac8a:	f7ff ff2f 	bl	800aaec <SD_SPI_ReadWriteByte>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	81fb      	strh	r3, [r7, #14]
		if((t&0x1F)!=0x05)
 800ac92:	89fb      	ldrh	r3, [r7, #14]
 800ac94:	f003 031f 	and.w	r3, r3, #31
 800ac98:	2b05      	cmp	r3, #5
 800ac9a:	d001      	beq.n	800aca0 <SD_SendBlock+0x6e>
			return 2;								  					    
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	e000      	b.n	800aca2 <SD_SendBlock+0x70>
	}						 									  					    
    return 0;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <SD_SendCmd>:
//cmd��command
//arg: parameter
//crc: crc
//return: response sent back from sd card.
unsigned char SD_SendCmd(unsigned char cmd, unsigned int arg, unsigned char crc)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	4603      	mov	r3, r0
 800acb2:	6039      	str	r1, [r7, #0]
 800acb4:	71fb      	strb	r3, [r7, #7]
 800acb6:	4613      	mov	r3, r2
 800acb8:	71bb      	strb	r3, [r7, #6]
    unsigned char r1;	
	unsigned char Retry=0; 
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]
	SD_DisSelect();
 800acbe:	f7ff ff31 	bl	800ab24 <SD_DisSelect>
	if(SD_Select())return 0XFF;
 800acc2:	f7ff ff3d 	bl	800ab40 <SD_Select>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <SD_SendCmd+0x26>
 800accc:	23ff      	movs	r3, #255	@ 0xff
 800acce:	e038      	b.n	800ad42 <SD_SendCmd+0x98>

    SD_SPI_ReadWriteByte(cmd | 0x40);
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	4618      	mov	r0, r3
 800acda:	f7ff ff07 	bl	800aaec <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 24);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	0e1b      	lsrs	r3, r3, #24
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff ff01 	bl	800aaec <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 16);
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	0c1b      	lsrs	r3, r3, #16
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7ff fefb 	bl	800aaec <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 8);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	0a1b      	lsrs	r3, r3, #8
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff fef5 	bl	800aaec <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg);	  
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fef0 	bl	800aaec <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(crc); 
 800ad0c:	79bb      	ldrb	r3, [r7, #6]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff feec 	bl	800aaec <SD_SPI_ReadWriteByte>
	if(cmd == CMD12)SD_SPI_ReadWriteByte(0xff); //Skip a stuff byte when stop reading
 800ad14:	79fb      	ldrb	r3, [r7, #7]
 800ad16:	2b0c      	cmp	r3, #12
 800ad18:	d102      	bne.n	800ad20 <SD_SendCmd+0x76>
 800ad1a:	20ff      	movs	r0, #255	@ 0xff
 800ad1c:	f7ff fee6 	bl	800aaec <SD_SPI_ReadWriteByte>
	Retry = 0X1F;
 800ad20:	231f      	movs	r3, #31
 800ad22:	73fb      	strb	r3, [r7, #15]
	do{
		r1 = SD_SPI_ReadWriteByte(0xFF);
 800ad24:	20ff      	movs	r0, #255	@ 0xff
 800ad26:	f7ff fee1 	bl	800aaec <SD_SPI_ReadWriteByte>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	73bb      	strb	r3, [r7, #14]
	}while((r1&0X80) && Retry--);	 
 800ad2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	da04      	bge.n	800ad40 <SD_SendCmd+0x96>
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	1e5a      	subs	r2, r3, #1
 800ad3a:	73fa      	strb	r2, [r7, #15]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1f1      	bne.n	800ad24 <SD_SendCmd+0x7a>

    return r1;
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <SD_Initialize>:
    return Capacity;
}

//initialize sd card 
unsigned char SD_Initialize(void)
{
 800ad4c:	b590      	push	{r4, r7, lr}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
    unsigned char r1;      
    unsigned short retry;  
    unsigned char buf[4];  
	unsigned short i;
    
    SD_CS_1;
 800ad52:	2201      	movs	r2, #1
 800ad54:	2110      	movs	r1, #16
 800ad56:	487a      	ldr	r0, [pc, #488]	@ (800af40 <SD_Initialize+0x1f4>)
 800ad58:	f7f6 fc0e 	bl	8001578 <HAL_GPIO_WritePin>
 	SD_SPI_SpeedLow();	
 800ad5c:	f7ff fed4 	bl	800ab08 <SD_SPI_SpeedLow>
 	for(i=0;i<10;i++)SD_SPI_ReadWriteByte(0XFF);
 800ad60:	2300      	movs	r3, #0
 800ad62:	817b      	strh	r3, [r7, #10]
 800ad64:	e005      	b.n	800ad72 <SD_Initialize+0x26>
 800ad66:	20ff      	movs	r0, #255	@ 0xff
 800ad68:	f7ff fec0 	bl	800aaec <SD_SPI_ReadWriteByte>
 800ad6c:	897b      	ldrh	r3, [r7, #10]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	817b      	strh	r3, [r7, #10]
 800ad72:	897b      	ldrh	r3, [r7, #10]
 800ad74:	2b09      	cmp	r3, #9
 800ad76:	d9f6      	bls.n	800ad66 <SD_Initialize+0x1a>
	retry=20;
 800ad78:	2314      	movs	r3, #20
 800ad7a:	81bb      	strh	r3, [r7, #12]
	do
	{
		r1=SD_SendCmd(CMD0,0,0x95);//enter to idle state
 800ad7c:	2295      	movs	r2, #149	@ 0x95
 800ad7e:	2100      	movs	r1, #0
 800ad80:	2000      	movs	r0, #0
 800ad82:	f7ff ff92 	bl	800acaa <SD_SendCmd>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73fb      	strb	r3, [r7, #15]
	}while((r1!=0X01) && retry--);
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d004      	beq.n	800ad9a <SD_Initialize+0x4e>
 800ad90:	89bb      	ldrh	r3, [r7, #12]
 800ad92:	1e5a      	subs	r2, r3, #1
 800ad94:	81ba      	strh	r2, [r7, #12]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1f0      	bne.n	800ad7c <SD_Initialize+0x30>
 	SD_Type=0;
 800ad9a:	4b6a      	ldr	r3, [pc, #424]	@ (800af44 <SD_Initialize+0x1f8>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	701a      	strb	r2, [r3, #0]
    
	if(r1==0X01)
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	f040 80b7 	bne.w	800af16 <SD_Initialize+0x1ca>
	{
		if(SD_SendCmd(CMD8,0x1AA,0x87)==1)//SD V2.0
 800ada8:	2287      	movs	r2, #135	@ 0x87
 800adaa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800adae:	2008      	movs	r0, #8
 800adb0:	f7ff ff7b 	bl	800acaa <SD_SendCmd>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d15f      	bne.n	800ae7a <SD_Initialize+0x12e>
		{
			for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);	//Get trailing return value of R7 resp
 800adba:	2300      	movs	r3, #0
 800adbc:	817b      	strh	r3, [r7, #10]
 800adbe:	e00d      	b.n	800addc <SD_Initialize+0x90>
 800adc0:	897c      	ldrh	r4, [r7, #10]
 800adc2:	20ff      	movs	r0, #255	@ 0xff
 800adc4:	f7ff fe92 	bl	800aaec <SD_SPI_ReadWriteByte>
 800adc8:	4603      	mov	r3, r0
 800adca:	461a      	mov	r2, r3
 800adcc:	f104 0310 	add.w	r3, r4, #16
 800add0:	443b      	add	r3, r7
 800add2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800add6:	897b      	ldrh	r3, [r7, #10]
 800add8:	3301      	adds	r3, #1
 800adda:	817b      	strh	r3, [r7, #10]
 800addc:	897b      	ldrh	r3, [r7, #10]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d9ee      	bls.n	800adc0 <SD_Initialize+0x74>
			if(buf[2]==0X01&&buf[3]==0XAA)//is it support of 2.7~3.6V 
 800ade2:	79bb      	ldrb	r3, [r7, #6]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	f040 8096 	bne.w	800af16 <SD_Initialize+0x1ca>
 800adea:	79fb      	ldrb	r3, [r7, #7]
 800adec:	2baa      	cmp	r3, #170	@ 0xaa
 800adee:	f040 8092 	bne.w	800af16 <SD_Initialize+0x1ca>
			{
				retry=0XFFFE;
 800adf2:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800adf6:	81bb      	strh	r3, [r7, #12]
				do
				{
					SD_SendCmd(CMD55,0,0X01);	
 800adf8:	2201      	movs	r2, #1
 800adfa:	2100      	movs	r1, #0
 800adfc:	2037      	movs	r0, #55	@ 0x37
 800adfe:	f7ff ff54 	bl	800acaa <SD_SendCmd>
					r1=SD_SendCmd(CMD41,0x40000000,0X01);
 800ae02:	2201      	movs	r2, #1
 800ae04:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ae08:	2029      	movs	r0, #41	@ 0x29
 800ae0a:	f7ff ff4e 	bl	800acaa <SD_SendCmd>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <SD_Initialize+0xd6>
 800ae18:	89bb      	ldrh	r3, [r7, #12]
 800ae1a:	1e5a      	subs	r2, r3, #1
 800ae1c:	81ba      	strh	r2, [r7, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1ea      	bne.n	800adf8 <SD_Initialize+0xac>
				if(retry&&SD_SendCmd(CMD58,0,0X01)==0) //start to identify the SD2.0 version of sd card.
 800ae22:	89bb      	ldrh	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d076      	beq.n	800af16 <SD_Initialize+0x1ca>
 800ae28:	2201      	movs	r2, #1
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	203a      	movs	r0, #58	@ 0x3a
 800ae2e:	f7ff ff3c 	bl	800acaa <SD_SendCmd>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d16e      	bne.n	800af16 <SD_Initialize+0x1ca>
				{
					for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);//get OCR
 800ae38:	2300      	movs	r3, #0
 800ae3a:	817b      	strh	r3, [r7, #10]
 800ae3c:	e00d      	b.n	800ae5a <SD_Initialize+0x10e>
 800ae3e:	897c      	ldrh	r4, [r7, #10]
 800ae40:	20ff      	movs	r0, #255	@ 0xff
 800ae42:	f7ff fe53 	bl	800aaec <SD_SPI_ReadWriteByte>
 800ae46:	4603      	mov	r3, r0
 800ae48:	461a      	mov	r2, r3
 800ae4a:	f104 0310 	add.w	r3, r4, #16
 800ae4e:	443b      	add	r3, r7
 800ae50:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800ae54:	897b      	ldrh	r3, [r7, #10]
 800ae56:	3301      	adds	r3, #1
 800ae58:	817b      	strh	r3, [r7, #10]
 800ae5a:	897b      	ldrh	r3, [r7, #10]
 800ae5c:	2b03      	cmp	r3, #3
 800ae5e:	d9ee      	bls.n	800ae3e <SD_Initialize+0xf2>
					if(buf[0]&0x40)SD_Type=SD_TYPE_V2HC;    //check CCS
 800ae60:	793b      	ldrb	r3, [r7, #4]
 800ae62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d003      	beq.n	800ae72 <SD_Initialize+0x126>
 800ae6a:	4b36      	ldr	r3, [pc, #216]	@ (800af44 <SD_Initialize+0x1f8>)
 800ae6c:	2206      	movs	r2, #6
 800ae6e:	701a      	strb	r2, [r3, #0]
 800ae70:	e051      	b.n	800af16 <SD_Initialize+0x1ca>
					else SD_Type=SD_TYPE_V2;   
 800ae72:	4b34      	ldr	r3, [pc, #208]	@ (800af44 <SD_Initialize+0x1f8>)
 800ae74:	2204      	movs	r2, #4
 800ae76:	701a      	strb	r2, [r3, #0]
 800ae78:	e04d      	b.n	800af16 <SD_Initialize+0x1ca>
				}
			}
		}else//SD V1.x/ MMC	V3
		{
			SD_SendCmd(CMD55,0,0X01);		
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	2037      	movs	r0, #55	@ 0x37
 800ae80:	f7ff ff13 	bl	800acaa <SD_SendCmd>
			r1=SD_SendCmd(CMD41,0,0X01);	
 800ae84:	2201      	movs	r2, #1
 800ae86:	2100      	movs	r1, #0
 800ae88:	2029      	movs	r0, #41	@ 0x29
 800ae8a:	f7ff ff0e 	bl	800acaa <SD_SendCmd>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	73fb      	strb	r3, [r7, #15]
			if(r1<=1)
 800ae92:	7bfb      	ldrb	r3, [r7, #15]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d81a      	bhi.n	800aece <SD_Initialize+0x182>
			{		
				SD_Type=SD_TYPE_V1;
 800ae98:	4b2a      	ldr	r3, [pc, #168]	@ (800af44 <SD_Initialize+0x1f8>)
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	701a      	strb	r2, [r3, #0]
				retry=0XFFFE;
 800ae9e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800aea2:	81bb      	strh	r3, [r7, #12]
				do //exit idle state
				{
					SD_SendCmd(CMD55,0,0X01);	
 800aea4:	2201      	movs	r2, #1
 800aea6:	2100      	movs	r1, #0
 800aea8:	2037      	movs	r0, #55	@ 0x37
 800aeaa:	f7ff fefe 	bl	800acaa <SD_SendCmd>
					r1=SD_SendCmd(CMD41,0,0X01);
 800aeae:	2201      	movs	r2, #1
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	2029      	movs	r0, #41	@ 0x29
 800aeb4:	f7ff fef9 	bl	800acaa <SD_SendCmd>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d01a      	beq.n	800aef8 <SD_Initialize+0x1ac>
 800aec2:	89bb      	ldrh	r3, [r7, #12]
 800aec4:	1e5a      	subs	r2, r3, #1
 800aec6:	81ba      	strh	r2, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1eb      	bne.n	800aea4 <SD_Initialize+0x158>
 800aecc:	e014      	b.n	800aef8 <SD_Initialize+0x1ac>
			}else
			{
				SD_Type=SD_TYPE_MMC;//MMC V3
 800aece:	4b1d      	ldr	r3, [pc, #116]	@ (800af44 <SD_Initialize+0x1f8>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	701a      	strb	r2, [r3, #0]
				retry=0XFFFE;
 800aed4:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800aed8:	81bb      	strh	r3, [r7, #12]
				do 
				{											    
					r1=SD_SendCmd(CMD1,0,0X01);
 800aeda:	2201      	movs	r2, #1
 800aedc:	2100      	movs	r1, #0
 800aede:	2001      	movs	r0, #1
 800aee0:	f7ff fee3 	bl	800acaa <SD_SendCmd>
 800aee4:	4603      	mov	r3, r0
 800aee6:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);  
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d004      	beq.n	800aef8 <SD_Initialize+0x1ac>
 800aeee:	89bb      	ldrh	r3, [r7, #12]
 800aef0:	1e5a      	subs	r2, r3, #1
 800aef2:	81ba      	strh	r2, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1f0      	bne.n	800aeda <SD_Initialize+0x18e>
			}
			if(retry==0||SD_SendCmd(CMD16,512,0X01)!=0)SD_Type=SD_TYPE_ERR;
 800aef8:	89bb      	ldrh	r3, [r7, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d008      	beq.n	800af10 <SD_Initialize+0x1c4>
 800aefe:	2201      	movs	r2, #1
 800af00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af04:	2010      	movs	r0, #16
 800af06:	f7ff fed0 	bl	800acaa <SD_SendCmd>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <SD_Initialize+0x1ca>
 800af10:	4b0c      	ldr	r3, [pc, #48]	@ (800af44 <SD_Initialize+0x1f8>)
 800af12:	2200      	movs	r2, #0
 800af14:	701a      	strb	r2, [r3, #0]
		}
	}
	SD_DisSelect();
 800af16:	f7ff fe05 	bl	800ab24 <SD_DisSelect>
	SD_SPI_SpeedHigh();
 800af1a:	f7ff fdfc 	bl	800ab16 <SD_SPI_SpeedHigh>
	if(SD_Type)return 0;
 800af1e:	4b09      	ldr	r3, [pc, #36]	@ (800af44 <SD_Initialize+0x1f8>)
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <SD_Initialize+0x1de>
 800af26:	2300      	movs	r3, #0
 800af28:	e005      	b.n	800af36 <SD_Initialize+0x1ea>
	else if(r1)return r1; 	   
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <SD_Initialize+0x1e8>
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	e000      	b.n	800af36 <SD_Initialize+0x1ea>
	return 0xaa;
 800af34:	23aa      	movs	r3, #170	@ 0xaa
}
 800af36:	4618      	mov	r0, r3
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd90      	pop	{r4, r7, pc}
 800af3e:	bf00      	nop
 800af40:	40020400 	.word	0x40020400
 800af44:	2000214c 	.word	0x2000214c

0800af48 <SD_ReadDisk>:
//buf: data buffer
//sector: sector
//cnt: totals of sectors]
//return: 0 ok, other for failure
unsigned char SD_ReadDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	4613      	mov	r3, r2
 800af54:	71fb      	strb	r3, [r7, #7]
	unsigned char r1;
	if(SD_Type!=SD_TYPE_V2HC)sector <<= 9;
 800af56:	4b21      	ldr	r3, [pc, #132]	@ (800afdc <SD_ReadDisk+0x94>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2b06      	cmp	r3, #6
 800af5c:	d002      	beq.n	800af64 <SD_ReadDisk+0x1c>
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	025b      	lsls	r3, r3, #9
 800af62:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800af64:	79fb      	ldrb	r3, [r7, #7]
 800af66:	2b01      	cmp	r3, #1
 800af68:	d111      	bne.n	800af8e <SD_ReadDisk+0x46>
	{
		r1=SD_SendCmd(CMD17,sector,0X01);
 800af6a:	2201      	movs	r2, #1
 800af6c:	68b9      	ldr	r1, [r7, #8]
 800af6e:	2011      	movs	r0, #17
 800af70:	f7ff fe9b 	bl	800acaa <SD_SendCmd>
 800af74:	4603      	mov	r3, r0
 800af76:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800af78:	7dfb      	ldrb	r3, [r7, #23]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d127      	bne.n	800afce <SD_ReadDisk+0x86>
		{
			r1=SD_RecvData(buf,512);   
 800af7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f7ff fe2d 	bl	800abe2 <SD_RecvData>
 800af88:	4603      	mov	r3, r0
 800af8a:	75fb      	strb	r3, [r7, #23]
 800af8c:	e01f      	b.n	800afce <SD_ReadDisk+0x86>
		}
	}else
	{
		r1=SD_SendCmd(CMD18,sector,0X01);
 800af8e:	2201      	movs	r2, #1
 800af90:	68b9      	ldr	r1, [r7, #8]
 800af92:	2012      	movs	r0, #18
 800af94:	f7ff fe89 	bl	800acaa <SD_SendCmd>
 800af98:	4603      	mov	r3, r0
 800af9a:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_RecvData(buf,512);
 800af9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f7ff fe1e 	bl	800abe2 <SD_RecvData>
 800afa6:	4603      	mov	r3, r0
 800afa8:	75fb      	strb	r3, [r7, #23]
			buf+=512;  
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800afb0:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0); 	
 800afb2:	79fb      	ldrb	r3, [r7, #7]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	71fb      	strb	r3, [r7, #7]
 800afb8:	79fb      	ldrb	r3, [r7, #7]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d002      	beq.n	800afc4 <SD_ReadDisk+0x7c>
 800afbe:	7dfb      	ldrb	r3, [r7, #23]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d0eb      	beq.n	800af9c <SD_ReadDisk+0x54>
		SD_SendCmd(CMD12,0,0X01);	
 800afc4:	2201      	movs	r2, #1
 800afc6:	2100      	movs	r1, #0
 800afc8:	200c      	movs	r0, #12
 800afca:	f7ff fe6e 	bl	800acaa <SD_SendCmd>
	}   
	SD_DisSelect();
 800afce:	f7ff fda9 	bl	800ab24 <SD_DisSelect>
	return r1;//
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	2000214c 	.word	0x2000214c

0800afe0 <SD_WriteDisk>:
//buf: data buffer
//sector: start sector
//cnt: totals of sectors]
//return: 0 ok, other for failure
unsigned char SD_WriteDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	4613      	mov	r3, r2
 800afec:	71fb      	strb	r3, [r7, #7]
	unsigned char r1;
	if(SD_Type!=SD_TYPE_V2HC)sector *= 512;
 800afee:	4b2a      	ldr	r3, [pc, #168]	@ (800b098 <SD_WriteDisk+0xb8>)
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b06      	cmp	r3, #6
 800aff4:	d002      	beq.n	800affc <SD_WriteDisk+0x1c>
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	025b      	lsls	r3, r3, #9
 800affa:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800affc:	79fb      	ldrb	r3, [r7, #7]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d110      	bne.n	800b024 <SD_WriteDisk+0x44>
	{
		r1=SD_SendCmd(CMD24,sector,0X01);
 800b002:	2201      	movs	r2, #1
 800b004:	68b9      	ldr	r1, [r7, #8]
 800b006:	2018      	movs	r0, #24
 800b008:	f7ff fe4f 	bl	800acaa <SD_SendCmd>
 800b00c:	4603      	mov	r3, r0
 800b00e:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d138      	bne.n	800b088 <SD_WriteDisk+0xa8>
		{
			r1=SD_SendBlock(buf,0xFE); 
 800b016:	21fe      	movs	r1, #254	@ 0xfe
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f7ff fe0a 	bl	800ac32 <SD_SendBlock>
 800b01e:	4603      	mov	r3, r0
 800b020:	75fb      	strb	r3, [r7, #23]
 800b022:	e031      	b.n	800b088 <SD_WriteDisk+0xa8>
		}
	}else
	{
		if(SD_Type!=SD_TYPE_MMC)
 800b024:	4b1c      	ldr	r3, [pc, #112]	@ (800b098 <SD_WriteDisk+0xb8>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d00a      	beq.n	800b042 <SD_WriteDisk+0x62>
		{
			SD_SendCmd(CMD55,0,0X01);	
 800b02c:	2201      	movs	r2, #1
 800b02e:	2100      	movs	r1, #0
 800b030:	2037      	movs	r0, #55	@ 0x37
 800b032:	f7ff fe3a 	bl	800acaa <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0X01);	
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	2201      	movs	r2, #1
 800b03a:	4619      	mov	r1, r3
 800b03c:	2017      	movs	r0, #23
 800b03e:	f7ff fe34 	bl	800acaa <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0X01);
 800b042:	2201      	movs	r2, #1
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	2019      	movs	r0, #25
 800b048:	f7ff fe2f 	bl	800acaa <SD_SendCmd>
 800b04c:	4603      	mov	r3, r0
 800b04e:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d118      	bne.n	800b088 <SD_WriteDisk+0xa8>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); 
 800b056:	21fc      	movs	r1, #252	@ 0xfc
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7ff fdea 	bl	800ac32 <SD_SendBlock>
 800b05e:	4603      	mov	r3, r0
 800b060:	75fb      	strb	r3, [r7, #23]
				buf+=512;  
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b068:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	3b01      	subs	r3, #1
 800b06e:	71fb      	strb	r3, [r7, #7]
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d002      	beq.n	800b07c <SD_WriteDisk+0x9c>
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0ec      	beq.n	800b056 <SD_WriteDisk+0x76>
			r1=SD_SendBlock(0,0xFD);
 800b07c:	21fd      	movs	r1, #253	@ 0xfd
 800b07e:	2000      	movs	r0, #0
 800b080:	f7ff fdd7 	bl	800ac32 <SD_SendBlock>
 800b084:	4603      	mov	r3, r0
 800b086:	75fb      	strb	r3, [r7, #23]
		}
	}   
	SD_DisSelect();
 800b088:	f7ff fd4c 	bl	800ab24 <SD_DisSelect>
	return r1;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
}	   
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	2000214c 	.word	0x2000214c

0800b09c <malloc>:
 800b09c:	4b02      	ldr	r3, [pc, #8]	@ (800b0a8 <malloc+0xc>)
 800b09e:	4601      	mov	r1, r0
 800b0a0:	6818      	ldr	r0, [r3, #0]
 800b0a2:	f000 b825 	b.w	800b0f0 <_malloc_r>
 800b0a6:	bf00      	nop
 800b0a8:	20000130 	.word	0x20000130

0800b0ac <sbrk_aligned>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	4e0f      	ldr	r6, [pc, #60]	@ (800b0ec <sbrk_aligned+0x40>)
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	6831      	ldr	r1, [r6, #0]
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	b911      	cbnz	r1, 800b0be <sbrk_aligned+0x12>
 800b0b8:	f000 faec 	bl	800b694 <_sbrk_r>
 800b0bc:	6030      	str	r0, [r6, #0]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f000 fae7 	bl	800b694 <_sbrk_r>
 800b0c6:	1c43      	adds	r3, r0, #1
 800b0c8:	d103      	bne.n	800b0d2 <sbrk_aligned+0x26>
 800b0ca:	f04f 34ff 	mov.w	r4, #4294967295
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	bd70      	pop	{r4, r5, r6, pc}
 800b0d2:	1cc4      	adds	r4, r0, #3
 800b0d4:	f024 0403 	bic.w	r4, r4, #3
 800b0d8:	42a0      	cmp	r0, r4
 800b0da:	d0f8      	beq.n	800b0ce <sbrk_aligned+0x22>
 800b0dc:	1a21      	subs	r1, r4, r0
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f000 fad8 	bl	800b694 <_sbrk_r>
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d1f2      	bne.n	800b0ce <sbrk_aligned+0x22>
 800b0e8:	e7ef      	b.n	800b0ca <sbrk_aligned+0x1e>
 800b0ea:	bf00      	nop
 800b0ec:	20002150 	.word	0x20002150

0800b0f0 <_malloc_r>:
 800b0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	1ccd      	adds	r5, r1, #3
 800b0f6:	f025 0503 	bic.w	r5, r5, #3
 800b0fa:	3508      	adds	r5, #8
 800b0fc:	2d0c      	cmp	r5, #12
 800b0fe:	bf38      	it	cc
 800b100:	250c      	movcc	r5, #12
 800b102:	2d00      	cmp	r5, #0
 800b104:	4606      	mov	r6, r0
 800b106:	db01      	blt.n	800b10c <_malloc_r+0x1c>
 800b108:	42a9      	cmp	r1, r5
 800b10a:	d904      	bls.n	800b116 <_malloc_r+0x26>
 800b10c:	230c      	movs	r3, #12
 800b10e:	6033      	str	r3, [r6, #0]
 800b110:	2000      	movs	r0, #0
 800b112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1ec <_malloc_r+0xfc>
 800b11a:	f000 f869 	bl	800b1f0 <__malloc_lock>
 800b11e:	f8d8 3000 	ldr.w	r3, [r8]
 800b122:	461c      	mov	r4, r3
 800b124:	bb44      	cbnz	r4, 800b178 <_malloc_r+0x88>
 800b126:	4629      	mov	r1, r5
 800b128:	4630      	mov	r0, r6
 800b12a:	f7ff ffbf 	bl	800b0ac <sbrk_aligned>
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	4604      	mov	r4, r0
 800b132:	d158      	bne.n	800b1e6 <_malloc_r+0xf6>
 800b134:	f8d8 4000 	ldr.w	r4, [r8]
 800b138:	4627      	mov	r7, r4
 800b13a:	2f00      	cmp	r7, #0
 800b13c:	d143      	bne.n	800b1c6 <_malloc_r+0xd6>
 800b13e:	2c00      	cmp	r4, #0
 800b140:	d04b      	beq.n	800b1da <_malloc_r+0xea>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	4639      	mov	r1, r7
 800b146:	4630      	mov	r0, r6
 800b148:	eb04 0903 	add.w	r9, r4, r3
 800b14c:	f000 faa2 	bl	800b694 <_sbrk_r>
 800b150:	4581      	cmp	r9, r0
 800b152:	d142      	bne.n	800b1da <_malloc_r+0xea>
 800b154:	6821      	ldr	r1, [r4, #0]
 800b156:	1a6d      	subs	r5, r5, r1
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7ff ffa6 	bl	800b0ac <sbrk_aligned>
 800b160:	3001      	adds	r0, #1
 800b162:	d03a      	beq.n	800b1da <_malloc_r+0xea>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	442b      	add	r3, r5
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	f8d8 3000 	ldr.w	r3, [r8]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	bb62      	cbnz	r2, 800b1cc <_malloc_r+0xdc>
 800b172:	f8c8 7000 	str.w	r7, [r8]
 800b176:	e00f      	b.n	800b198 <_malloc_r+0xa8>
 800b178:	6822      	ldr	r2, [r4, #0]
 800b17a:	1b52      	subs	r2, r2, r5
 800b17c:	d420      	bmi.n	800b1c0 <_malloc_r+0xd0>
 800b17e:	2a0b      	cmp	r2, #11
 800b180:	d917      	bls.n	800b1b2 <_malloc_r+0xc2>
 800b182:	1961      	adds	r1, r4, r5
 800b184:	42a3      	cmp	r3, r4
 800b186:	6025      	str	r5, [r4, #0]
 800b188:	bf18      	it	ne
 800b18a:	6059      	strne	r1, [r3, #4]
 800b18c:	6863      	ldr	r3, [r4, #4]
 800b18e:	bf08      	it	eq
 800b190:	f8c8 1000 	streq.w	r1, [r8]
 800b194:	5162      	str	r2, [r4, r5]
 800b196:	604b      	str	r3, [r1, #4]
 800b198:	4630      	mov	r0, r6
 800b19a:	f000 f82f 	bl	800b1fc <__malloc_unlock>
 800b19e:	f104 000b 	add.w	r0, r4, #11
 800b1a2:	1d23      	adds	r3, r4, #4
 800b1a4:	f020 0007 	bic.w	r0, r0, #7
 800b1a8:	1ac2      	subs	r2, r0, r3
 800b1aa:	bf1c      	itt	ne
 800b1ac:	1a1b      	subne	r3, r3, r0
 800b1ae:	50a3      	strne	r3, [r4, r2]
 800b1b0:	e7af      	b.n	800b112 <_malloc_r+0x22>
 800b1b2:	6862      	ldr	r2, [r4, #4]
 800b1b4:	42a3      	cmp	r3, r4
 800b1b6:	bf0c      	ite	eq
 800b1b8:	f8c8 2000 	streq.w	r2, [r8]
 800b1bc:	605a      	strne	r2, [r3, #4]
 800b1be:	e7eb      	b.n	800b198 <_malloc_r+0xa8>
 800b1c0:	4623      	mov	r3, r4
 800b1c2:	6864      	ldr	r4, [r4, #4]
 800b1c4:	e7ae      	b.n	800b124 <_malloc_r+0x34>
 800b1c6:	463c      	mov	r4, r7
 800b1c8:	687f      	ldr	r7, [r7, #4]
 800b1ca:	e7b6      	b.n	800b13a <_malloc_r+0x4a>
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	d1fb      	bne.n	800b1cc <_malloc_r+0xdc>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	6053      	str	r3, [r2, #4]
 800b1d8:	e7de      	b.n	800b198 <_malloc_r+0xa8>
 800b1da:	230c      	movs	r3, #12
 800b1dc:	6033      	str	r3, [r6, #0]
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f000 f80c 	bl	800b1fc <__malloc_unlock>
 800b1e4:	e794      	b.n	800b110 <_malloc_r+0x20>
 800b1e6:	6005      	str	r5, [r0, #0]
 800b1e8:	e7d6      	b.n	800b198 <_malloc_r+0xa8>
 800b1ea:	bf00      	nop
 800b1ec:	20002154 	.word	0x20002154

0800b1f0 <__malloc_lock>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	@ (800b1f8 <__malloc_lock+0x8>)
 800b1f2:	f000 ba9c 	b.w	800b72e <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	20002298 	.word	0x20002298

0800b1fc <__malloc_unlock>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	@ (800b204 <__malloc_unlock+0x8>)
 800b1fe:	f000 ba97 	b.w	800b730 <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	20002298 	.word	0x20002298

0800b208 <std>:
 800b208:	2300      	movs	r3, #0
 800b20a:	b510      	push	{r4, lr}
 800b20c:	4604      	mov	r4, r0
 800b20e:	e9c0 3300 	strd	r3, r3, [r0]
 800b212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b216:	6083      	str	r3, [r0, #8]
 800b218:	8181      	strh	r1, [r0, #12]
 800b21a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b21c:	81c2      	strh	r2, [r0, #14]
 800b21e:	6183      	str	r3, [r0, #24]
 800b220:	4619      	mov	r1, r3
 800b222:	2208      	movs	r2, #8
 800b224:	305c      	adds	r0, #92	@ 0x5c
 800b226:	f000 f9f9 	bl	800b61c <memset>
 800b22a:	4b0d      	ldr	r3, [pc, #52]	@ (800b260 <std+0x58>)
 800b22c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b22e:	4b0d      	ldr	r3, [pc, #52]	@ (800b264 <std+0x5c>)
 800b230:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b232:	4b0d      	ldr	r3, [pc, #52]	@ (800b268 <std+0x60>)
 800b234:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b236:	4b0d      	ldr	r3, [pc, #52]	@ (800b26c <std+0x64>)
 800b238:	6323      	str	r3, [r4, #48]	@ 0x30
 800b23a:	4b0d      	ldr	r3, [pc, #52]	@ (800b270 <std+0x68>)
 800b23c:	6224      	str	r4, [r4, #32]
 800b23e:	429c      	cmp	r4, r3
 800b240:	d006      	beq.n	800b250 <std+0x48>
 800b242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b246:	4294      	cmp	r4, r2
 800b248:	d002      	beq.n	800b250 <std+0x48>
 800b24a:	33d0      	adds	r3, #208	@ 0xd0
 800b24c:	429c      	cmp	r4, r3
 800b24e:	d105      	bne.n	800b25c <std+0x54>
 800b250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b258:	f000 ba68 	b.w	800b72c <__retarget_lock_init_recursive>
 800b25c:	bd10      	pop	{r4, pc}
 800b25e:	bf00      	nop
 800b260:	0800b46d 	.word	0x0800b46d
 800b264:	0800b48f 	.word	0x0800b48f
 800b268:	0800b4c7 	.word	0x0800b4c7
 800b26c:	0800b4eb 	.word	0x0800b4eb
 800b270:	20002158 	.word	0x20002158

0800b274 <stdio_exit_handler>:
 800b274:	4a02      	ldr	r2, [pc, #8]	@ (800b280 <stdio_exit_handler+0xc>)
 800b276:	4903      	ldr	r1, [pc, #12]	@ (800b284 <stdio_exit_handler+0x10>)
 800b278:	4803      	ldr	r0, [pc, #12]	@ (800b288 <stdio_exit_handler+0x14>)
 800b27a:	f000 b869 	b.w	800b350 <_fwalk_sglue>
 800b27e:	bf00      	nop
 800b280:	20000124 	.word	0x20000124
 800b284:	0800be6d 	.word	0x0800be6d
 800b288:	20000134 	.word	0x20000134

0800b28c <cleanup_stdio>:
 800b28c:	6841      	ldr	r1, [r0, #4]
 800b28e:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c0 <cleanup_stdio+0x34>)
 800b290:	4299      	cmp	r1, r3
 800b292:	b510      	push	{r4, lr}
 800b294:	4604      	mov	r4, r0
 800b296:	d001      	beq.n	800b29c <cleanup_stdio+0x10>
 800b298:	f000 fde8 	bl	800be6c <_fflush_r>
 800b29c:	68a1      	ldr	r1, [r4, #8]
 800b29e:	4b09      	ldr	r3, [pc, #36]	@ (800b2c4 <cleanup_stdio+0x38>)
 800b2a0:	4299      	cmp	r1, r3
 800b2a2:	d002      	beq.n	800b2aa <cleanup_stdio+0x1e>
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 fde1 	bl	800be6c <_fflush_r>
 800b2aa:	68e1      	ldr	r1, [r4, #12]
 800b2ac:	4b06      	ldr	r3, [pc, #24]	@ (800b2c8 <cleanup_stdio+0x3c>)
 800b2ae:	4299      	cmp	r1, r3
 800b2b0:	d004      	beq.n	800b2bc <cleanup_stdio+0x30>
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b8:	f000 bdd8 	b.w	800be6c <_fflush_r>
 800b2bc:	bd10      	pop	{r4, pc}
 800b2be:	bf00      	nop
 800b2c0:	20002158 	.word	0x20002158
 800b2c4:	200021c0 	.word	0x200021c0
 800b2c8:	20002228 	.word	0x20002228

0800b2cc <global_stdio_init.part.0>:
 800b2cc:	b510      	push	{r4, lr}
 800b2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b2fc <global_stdio_init.part.0+0x30>)
 800b2d0:	4c0b      	ldr	r4, [pc, #44]	@ (800b300 <global_stdio_init.part.0+0x34>)
 800b2d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b304 <global_stdio_init.part.0+0x38>)
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2104      	movs	r1, #4
 800b2dc:	f7ff ff94 	bl	800b208 <std>
 800b2e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	2109      	movs	r1, #9
 800b2e8:	f7ff ff8e 	bl	800b208 <std>
 800b2ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f6:	2112      	movs	r1, #18
 800b2f8:	f7ff bf86 	b.w	800b208 <std>
 800b2fc:	20002290 	.word	0x20002290
 800b300:	20002158 	.word	0x20002158
 800b304:	0800b275 	.word	0x0800b275

0800b308 <__sfp_lock_acquire>:
 800b308:	4801      	ldr	r0, [pc, #4]	@ (800b310 <__sfp_lock_acquire+0x8>)
 800b30a:	f000 ba10 	b.w	800b72e <__retarget_lock_acquire_recursive>
 800b30e:	bf00      	nop
 800b310:	20002299 	.word	0x20002299

0800b314 <__sfp_lock_release>:
 800b314:	4801      	ldr	r0, [pc, #4]	@ (800b31c <__sfp_lock_release+0x8>)
 800b316:	f000 ba0b 	b.w	800b730 <__retarget_lock_release_recursive>
 800b31a:	bf00      	nop
 800b31c:	20002299 	.word	0x20002299

0800b320 <__sinit>:
 800b320:	b510      	push	{r4, lr}
 800b322:	4604      	mov	r4, r0
 800b324:	f7ff fff0 	bl	800b308 <__sfp_lock_acquire>
 800b328:	6a23      	ldr	r3, [r4, #32]
 800b32a:	b11b      	cbz	r3, 800b334 <__sinit+0x14>
 800b32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b330:	f7ff bff0 	b.w	800b314 <__sfp_lock_release>
 800b334:	4b04      	ldr	r3, [pc, #16]	@ (800b348 <__sinit+0x28>)
 800b336:	6223      	str	r3, [r4, #32]
 800b338:	4b04      	ldr	r3, [pc, #16]	@ (800b34c <__sinit+0x2c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1f5      	bne.n	800b32c <__sinit+0xc>
 800b340:	f7ff ffc4 	bl	800b2cc <global_stdio_init.part.0>
 800b344:	e7f2      	b.n	800b32c <__sinit+0xc>
 800b346:	bf00      	nop
 800b348:	0800b28d 	.word	0x0800b28d
 800b34c:	20002290 	.word	0x20002290

0800b350 <_fwalk_sglue>:
 800b350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b354:	4607      	mov	r7, r0
 800b356:	4688      	mov	r8, r1
 800b358:	4614      	mov	r4, r2
 800b35a:	2600      	movs	r6, #0
 800b35c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b360:	f1b9 0901 	subs.w	r9, r9, #1
 800b364:	d505      	bpl.n	800b372 <_fwalk_sglue+0x22>
 800b366:	6824      	ldr	r4, [r4, #0]
 800b368:	2c00      	cmp	r4, #0
 800b36a:	d1f7      	bne.n	800b35c <_fwalk_sglue+0xc>
 800b36c:	4630      	mov	r0, r6
 800b36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b372:	89ab      	ldrh	r3, [r5, #12]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d907      	bls.n	800b388 <_fwalk_sglue+0x38>
 800b378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b37c:	3301      	adds	r3, #1
 800b37e:	d003      	beq.n	800b388 <_fwalk_sglue+0x38>
 800b380:	4629      	mov	r1, r5
 800b382:	4638      	mov	r0, r7
 800b384:	47c0      	blx	r8
 800b386:	4306      	orrs	r6, r0
 800b388:	3568      	adds	r5, #104	@ 0x68
 800b38a:	e7e9      	b.n	800b360 <_fwalk_sglue+0x10>

0800b38c <iprintf>:
 800b38c:	b40f      	push	{r0, r1, r2, r3}
 800b38e:	b507      	push	{r0, r1, r2, lr}
 800b390:	4906      	ldr	r1, [pc, #24]	@ (800b3ac <iprintf+0x20>)
 800b392:	ab04      	add	r3, sp, #16
 800b394:	6808      	ldr	r0, [r1, #0]
 800b396:	f853 2b04 	ldr.w	r2, [r3], #4
 800b39a:	6881      	ldr	r1, [r0, #8]
 800b39c:	9301      	str	r3, [sp, #4]
 800b39e:	f000 fa3d 	bl	800b81c <_vfiprintf_r>
 800b3a2:	b003      	add	sp, #12
 800b3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3a8:	b004      	add	sp, #16
 800b3aa:	4770      	bx	lr
 800b3ac:	20000130 	.word	0x20000130

0800b3b0 <_puts_r>:
 800b3b0:	6a03      	ldr	r3, [r0, #32]
 800b3b2:	b570      	push	{r4, r5, r6, lr}
 800b3b4:	6884      	ldr	r4, [r0, #8]
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	460e      	mov	r6, r1
 800b3ba:	b90b      	cbnz	r3, 800b3c0 <_puts_r+0x10>
 800b3bc:	f7ff ffb0 	bl	800b320 <__sinit>
 800b3c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3c2:	07db      	lsls	r3, r3, #31
 800b3c4:	d405      	bmi.n	800b3d2 <_puts_r+0x22>
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	0598      	lsls	r0, r3, #22
 800b3ca:	d402      	bmi.n	800b3d2 <_puts_r+0x22>
 800b3cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3ce:	f000 f9ae 	bl	800b72e <__retarget_lock_acquire_recursive>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	0719      	lsls	r1, r3, #28
 800b3d6:	d502      	bpl.n	800b3de <_puts_r+0x2e>
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d135      	bne.n	800b44a <_puts_r+0x9a>
 800b3de:	4621      	mov	r1, r4
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f000 f8c5 	bl	800b570 <__swsetup_r>
 800b3e6:	b380      	cbz	r0, 800b44a <_puts_r+0x9a>
 800b3e8:	f04f 35ff 	mov.w	r5, #4294967295
 800b3ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3ee:	07da      	lsls	r2, r3, #31
 800b3f0:	d405      	bmi.n	800b3fe <_puts_r+0x4e>
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	059b      	lsls	r3, r3, #22
 800b3f6:	d402      	bmi.n	800b3fe <_puts_r+0x4e>
 800b3f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3fa:	f000 f999 	bl	800b730 <__retarget_lock_release_recursive>
 800b3fe:	4628      	mov	r0, r5
 800b400:	bd70      	pop	{r4, r5, r6, pc}
 800b402:	2b00      	cmp	r3, #0
 800b404:	da04      	bge.n	800b410 <_puts_r+0x60>
 800b406:	69a2      	ldr	r2, [r4, #24]
 800b408:	429a      	cmp	r2, r3
 800b40a:	dc17      	bgt.n	800b43c <_puts_r+0x8c>
 800b40c:	290a      	cmp	r1, #10
 800b40e:	d015      	beq.n	800b43c <_puts_r+0x8c>
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	6022      	str	r2, [r4, #0]
 800b416:	7019      	strb	r1, [r3, #0]
 800b418:	68a3      	ldr	r3, [r4, #8]
 800b41a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b41e:	3b01      	subs	r3, #1
 800b420:	60a3      	str	r3, [r4, #8]
 800b422:	2900      	cmp	r1, #0
 800b424:	d1ed      	bne.n	800b402 <_puts_r+0x52>
 800b426:	2b00      	cmp	r3, #0
 800b428:	da11      	bge.n	800b44e <_puts_r+0x9e>
 800b42a:	4622      	mov	r2, r4
 800b42c:	210a      	movs	r1, #10
 800b42e:	4628      	mov	r0, r5
 800b430:	f000 f85f 	bl	800b4f2 <__swbuf_r>
 800b434:	3001      	adds	r0, #1
 800b436:	d0d7      	beq.n	800b3e8 <_puts_r+0x38>
 800b438:	250a      	movs	r5, #10
 800b43a:	e7d7      	b.n	800b3ec <_puts_r+0x3c>
 800b43c:	4622      	mov	r2, r4
 800b43e:	4628      	mov	r0, r5
 800b440:	f000 f857 	bl	800b4f2 <__swbuf_r>
 800b444:	3001      	adds	r0, #1
 800b446:	d1e7      	bne.n	800b418 <_puts_r+0x68>
 800b448:	e7ce      	b.n	800b3e8 <_puts_r+0x38>
 800b44a:	3e01      	subs	r6, #1
 800b44c:	e7e4      	b.n	800b418 <_puts_r+0x68>
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	1c5a      	adds	r2, r3, #1
 800b452:	6022      	str	r2, [r4, #0]
 800b454:	220a      	movs	r2, #10
 800b456:	701a      	strb	r2, [r3, #0]
 800b458:	e7ee      	b.n	800b438 <_puts_r+0x88>
	...

0800b45c <puts>:
 800b45c:	4b02      	ldr	r3, [pc, #8]	@ (800b468 <puts+0xc>)
 800b45e:	4601      	mov	r1, r0
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	f7ff bfa5 	b.w	800b3b0 <_puts_r>
 800b466:	bf00      	nop
 800b468:	20000130 	.word	0x20000130

0800b46c <__sread>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	460c      	mov	r4, r1
 800b470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b474:	f000 f8fc 	bl	800b670 <_read_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	bfab      	itete	ge
 800b47c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b47e:	89a3      	ldrhlt	r3, [r4, #12]
 800b480:	181b      	addge	r3, r3, r0
 800b482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b486:	bfac      	ite	ge
 800b488:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b48a:	81a3      	strhlt	r3, [r4, #12]
 800b48c:	bd10      	pop	{r4, pc}

0800b48e <__swrite>:
 800b48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b492:	461f      	mov	r7, r3
 800b494:	898b      	ldrh	r3, [r1, #12]
 800b496:	05db      	lsls	r3, r3, #23
 800b498:	4605      	mov	r5, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	4616      	mov	r6, r2
 800b49e:	d505      	bpl.n	800b4ac <__swrite+0x1e>
 800b4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f000 f8d0 	bl	800b64c <_lseek_r>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4b6:	81a3      	strh	r3, [r4, #12]
 800b4b8:	4632      	mov	r2, r6
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	4628      	mov	r0, r5
 800b4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c2:	f000 b8f7 	b.w	800b6b4 <_write_r>

0800b4c6 <__sseek>:
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ce:	f000 f8bd 	bl	800b64c <_lseek_r>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	bf15      	itete	ne
 800b4d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4e2:	81a3      	strheq	r3, [r4, #12]
 800b4e4:	bf18      	it	ne
 800b4e6:	81a3      	strhne	r3, [r4, #12]
 800b4e8:	bd10      	pop	{r4, pc}

0800b4ea <__sclose>:
 800b4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ee:	f000 b89d 	b.w	800b62c <_close_r>

0800b4f2 <__swbuf_r>:
 800b4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f4:	460e      	mov	r6, r1
 800b4f6:	4614      	mov	r4, r2
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	b118      	cbz	r0, 800b504 <__swbuf_r+0x12>
 800b4fc:	6a03      	ldr	r3, [r0, #32]
 800b4fe:	b90b      	cbnz	r3, 800b504 <__swbuf_r+0x12>
 800b500:	f7ff ff0e 	bl	800b320 <__sinit>
 800b504:	69a3      	ldr	r3, [r4, #24]
 800b506:	60a3      	str	r3, [r4, #8]
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	071a      	lsls	r2, r3, #28
 800b50c:	d501      	bpl.n	800b512 <__swbuf_r+0x20>
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	b943      	cbnz	r3, 800b524 <__swbuf_r+0x32>
 800b512:	4621      	mov	r1, r4
 800b514:	4628      	mov	r0, r5
 800b516:	f000 f82b 	bl	800b570 <__swsetup_r>
 800b51a:	b118      	cbz	r0, 800b524 <__swbuf_r+0x32>
 800b51c:	f04f 37ff 	mov.w	r7, #4294967295
 800b520:	4638      	mov	r0, r7
 800b522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	6922      	ldr	r2, [r4, #16]
 800b528:	1a98      	subs	r0, r3, r2
 800b52a:	6963      	ldr	r3, [r4, #20]
 800b52c:	b2f6      	uxtb	r6, r6
 800b52e:	4283      	cmp	r3, r0
 800b530:	4637      	mov	r7, r6
 800b532:	dc05      	bgt.n	800b540 <__swbuf_r+0x4e>
 800b534:	4621      	mov	r1, r4
 800b536:	4628      	mov	r0, r5
 800b538:	f000 fc98 	bl	800be6c <_fflush_r>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d1ed      	bne.n	800b51c <__swbuf_r+0x2a>
 800b540:	68a3      	ldr	r3, [r4, #8]
 800b542:	3b01      	subs	r3, #1
 800b544:	60a3      	str	r3, [r4, #8]
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	6022      	str	r2, [r4, #0]
 800b54c:	701e      	strb	r6, [r3, #0]
 800b54e:	6962      	ldr	r2, [r4, #20]
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	429a      	cmp	r2, r3
 800b554:	d004      	beq.n	800b560 <__swbuf_r+0x6e>
 800b556:	89a3      	ldrh	r3, [r4, #12]
 800b558:	07db      	lsls	r3, r3, #31
 800b55a:	d5e1      	bpl.n	800b520 <__swbuf_r+0x2e>
 800b55c:	2e0a      	cmp	r6, #10
 800b55e:	d1df      	bne.n	800b520 <__swbuf_r+0x2e>
 800b560:	4621      	mov	r1, r4
 800b562:	4628      	mov	r0, r5
 800b564:	f000 fc82 	bl	800be6c <_fflush_r>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d0d9      	beq.n	800b520 <__swbuf_r+0x2e>
 800b56c:	e7d6      	b.n	800b51c <__swbuf_r+0x2a>
	...

0800b570 <__swsetup_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4b29      	ldr	r3, [pc, #164]	@ (800b618 <__swsetup_r+0xa8>)
 800b574:	4605      	mov	r5, r0
 800b576:	6818      	ldr	r0, [r3, #0]
 800b578:	460c      	mov	r4, r1
 800b57a:	b118      	cbz	r0, 800b584 <__swsetup_r+0x14>
 800b57c:	6a03      	ldr	r3, [r0, #32]
 800b57e:	b90b      	cbnz	r3, 800b584 <__swsetup_r+0x14>
 800b580:	f7ff fece 	bl	800b320 <__sinit>
 800b584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b588:	0719      	lsls	r1, r3, #28
 800b58a:	d422      	bmi.n	800b5d2 <__swsetup_r+0x62>
 800b58c:	06da      	lsls	r2, r3, #27
 800b58e:	d407      	bmi.n	800b5a0 <__swsetup_r+0x30>
 800b590:	2209      	movs	r2, #9
 800b592:	602a      	str	r2, [r5, #0]
 800b594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b598:	81a3      	strh	r3, [r4, #12]
 800b59a:	f04f 30ff 	mov.w	r0, #4294967295
 800b59e:	e033      	b.n	800b608 <__swsetup_r+0x98>
 800b5a0:	0758      	lsls	r0, r3, #29
 800b5a2:	d512      	bpl.n	800b5ca <__swsetup_r+0x5a>
 800b5a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5a6:	b141      	cbz	r1, 800b5ba <__swsetup_r+0x4a>
 800b5a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5ac:	4299      	cmp	r1, r3
 800b5ae:	d002      	beq.n	800b5b6 <__swsetup_r+0x46>
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	f000 f8bf 	bl	800b734 <_free_r>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	6063      	str	r3, [r4, #4]
 800b5c6:	6923      	ldr	r3, [r4, #16]
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	f043 0308 	orr.w	r3, r3, #8
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	6923      	ldr	r3, [r4, #16]
 800b5d4:	b94b      	cbnz	r3, 800b5ea <__swsetup_r+0x7a>
 800b5d6:	89a3      	ldrh	r3, [r4, #12]
 800b5d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b5dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5e0:	d003      	beq.n	800b5ea <__swsetup_r+0x7a>
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f000 fc8f 	bl	800bf08 <__smakebuf_r>
 800b5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ee:	f013 0201 	ands.w	r2, r3, #1
 800b5f2:	d00a      	beq.n	800b60a <__swsetup_r+0x9a>
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	60a2      	str	r2, [r4, #8]
 800b5f8:	6962      	ldr	r2, [r4, #20]
 800b5fa:	4252      	negs	r2, r2
 800b5fc:	61a2      	str	r2, [r4, #24]
 800b5fe:	6922      	ldr	r2, [r4, #16]
 800b600:	b942      	cbnz	r2, 800b614 <__swsetup_r+0xa4>
 800b602:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b606:	d1c5      	bne.n	800b594 <__swsetup_r+0x24>
 800b608:	bd38      	pop	{r3, r4, r5, pc}
 800b60a:	0799      	lsls	r1, r3, #30
 800b60c:	bf58      	it	pl
 800b60e:	6962      	ldrpl	r2, [r4, #20]
 800b610:	60a2      	str	r2, [r4, #8]
 800b612:	e7f4      	b.n	800b5fe <__swsetup_r+0x8e>
 800b614:	2000      	movs	r0, #0
 800b616:	e7f7      	b.n	800b608 <__swsetup_r+0x98>
 800b618:	20000130 	.word	0x20000130

0800b61c <memset>:
 800b61c:	4402      	add	r2, r0
 800b61e:	4603      	mov	r3, r0
 800b620:	4293      	cmp	r3, r2
 800b622:	d100      	bne.n	800b626 <memset+0xa>
 800b624:	4770      	bx	lr
 800b626:	f803 1b01 	strb.w	r1, [r3], #1
 800b62a:	e7f9      	b.n	800b620 <memset+0x4>

0800b62c <_close_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4d06      	ldr	r5, [pc, #24]	@ (800b648 <_close_r+0x1c>)
 800b630:	2300      	movs	r3, #0
 800b632:	4604      	mov	r4, r0
 800b634:	4608      	mov	r0, r1
 800b636:	602b      	str	r3, [r5, #0]
 800b638:	f7f5 fa63 	bl	8000b02 <_close>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d102      	bne.n	800b646 <_close_r+0x1a>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	b103      	cbz	r3, 800b646 <_close_r+0x1a>
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	20002294 	.word	0x20002294

0800b64c <_lseek_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	4d07      	ldr	r5, [pc, #28]	@ (800b66c <_lseek_r+0x20>)
 800b650:	4604      	mov	r4, r0
 800b652:	4608      	mov	r0, r1
 800b654:	4611      	mov	r1, r2
 800b656:	2200      	movs	r2, #0
 800b658:	602a      	str	r2, [r5, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f7f5 fa78 	bl	8000b50 <_lseek>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_lseek_r+0x1e>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_lseek_r+0x1e>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	20002294 	.word	0x20002294

0800b670 <_read_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	@ (800b690 <_read_r+0x20>)
 800b674:	4604      	mov	r4, r0
 800b676:	4608      	mov	r0, r1
 800b678:	4611      	mov	r1, r2
 800b67a:	2200      	movs	r2, #0
 800b67c:	602a      	str	r2, [r5, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	f7f5 fa06 	bl	8000a90 <_read>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_read_r+0x1e>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_read_r+0x1e>
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	20002294 	.word	0x20002294

0800b694 <_sbrk_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4d06      	ldr	r5, [pc, #24]	@ (800b6b0 <_sbrk_r+0x1c>)
 800b698:	2300      	movs	r3, #0
 800b69a:	4604      	mov	r4, r0
 800b69c:	4608      	mov	r0, r1
 800b69e:	602b      	str	r3, [r5, #0]
 800b6a0:	f7f5 fa64 	bl	8000b6c <_sbrk>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_sbrk_r+0x1a>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_sbrk_r+0x1a>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	20002294 	.word	0x20002294

0800b6b4 <_write_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d07      	ldr	r5, [pc, #28]	@ (800b6d4 <_write_r+0x20>)
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	4611      	mov	r1, r2
 800b6be:	2200      	movs	r2, #0
 800b6c0:	602a      	str	r2, [r5, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f7f5 fa01 	bl	8000aca <_write>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_write_r+0x1e>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_write_r+0x1e>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	20002294 	.word	0x20002294

0800b6d8 <__errno>:
 800b6d8:	4b01      	ldr	r3, [pc, #4]	@ (800b6e0 <__errno+0x8>)
 800b6da:	6818      	ldr	r0, [r3, #0]
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20000130 	.word	0x20000130

0800b6e4 <__libc_init_array>:
 800b6e4:	b570      	push	{r4, r5, r6, lr}
 800b6e6:	4d0d      	ldr	r5, [pc, #52]	@ (800b71c <__libc_init_array+0x38>)
 800b6e8:	4c0d      	ldr	r4, [pc, #52]	@ (800b720 <__libc_init_array+0x3c>)
 800b6ea:	1b64      	subs	r4, r4, r5
 800b6ec:	10a4      	asrs	r4, r4, #2
 800b6ee:	2600      	movs	r6, #0
 800b6f0:	42a6      	cmp	r6, r4
 800b6f2:	d109      	bne.n	800b708 <__libc_init_array+0x24>
 800b6f4:	4d0b      	ldr	r5, [pc, #44]	@ (800b724 <__libc_init_array+0x40>)
 800b6f6:	4c0c      	ldr	r4, [pc, #48]	@ (800b728 <__libc_init_array+0x44>)
 800b6f8:	f000 fc64 	bl	800bfc4 <_init>
 800b6fc:	1b64      	subs	r4, r4, r5
 800b6fe:	10a4      	asrs	r4, r4, #2
 800b700:	2600      	movs	r6, #0
 800b702:	42a6      	cmp	r6, r4
 800b704:	d105      	bne.n	800b712 <__libc_init_array+0x2e>
 800b706:	bd70      	pop	{r4, r5, r6, pc}
 800b708:	f855 3b04 	ldr.w	r3, [r5], #4
 800b70c:	4798      	blx	r3
 800b70e:	3601      	adds	r6, #1
 800b710:	e7ee      	b.n	800b6f0 <__libc_init_array+0xc>
 800b712:	f855 3b04 	ldr.w	r3, [r5], #4
 800b716:	4798      	blx	r3
 800b718:	3601      	adds	r6, #1
 800b71a:	e7f2      	b.n	800b702 <__libc_init_array+0x1e>
 800b71c:	080105f0 	.word	0x080105f0
 800b720:	080105f0 	.word	0x080105f0
 800b724:	080105f0 	.word	0x080105f0
 800b728:	080105f4 	.word	0x080105f4

0800b72c <__retarget_lock_init_recursive>:
 800b72c:	4770      	bx	lr

0800b72e <__retarget_lock_acquire_recursive>:
 800b72e:	4770      	bx	lr

0800b730 <__retarget_lock_release_recursive>:
 800b730:	4770      	bx	lr
	...

0800b734 <_free_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4605      	mov	r5, r0
 800b738:	2900      	cmp	r1, #0
 800b73a:	d041      	beq.n	800b7c0 <_free_r+0x8c>
 800b73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b740:	1f0c      	subs	r4, r1, #4
 800b742:	2b00      	cmp	r3, #0
 800b744:	bfb8      	it	lt
 800b746:	18e4      	addlt	r4, r4, r3
 800b748:	f7ff fd52 	bl	800b1f0 <__malloc_lock>
 800b74c:	4a1d      	ldr	r2, [pc, #116]	@ (800b7c4 <_free_r+0x90>)
 800b74e:	6813      	ldr	r3, [r2, #0]
 800b750:	b933      	cbnz	r3, 800b760 <_free_r+0x2c>
 800b752:	6063      	str	r3, [r4, #4]
 800b754:	6014      	str	r4, [r2, #0]
 800b756:	4628      	mov	r0, r5
 800b758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b75c:	f7ff bd4e 	b.w	800b1fc <__malloc_unlock>
 800b760:	42a3      	cmp	r3, r4
 800b762:	d908      	bls.n	800b776 <_free_r+0x42>
 800b764:	6820      	ldr	r0, [r4, #0]
 800b766:	1821      	adds	r1, r4, r0
 800b768:	428b      	cmp	r3, r1
 800b76a:	bf01      	itttt	eq
 800b76c:	6819      	ldreq	r1, [r3, #0]
 800b76e:	685b      	ldreq	r3, [r3, #4]
 800b770:	1809      	addeq	r1, r1, r0
 800b772:	6021      	streq	r1, [r4, #0]
 800b774:	e7ed      	b.n	800b752 <_free_r+0x1e>
 800b776:	461a      	mov	r2, r3
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	b10b      	cbz	r3, 800b780 <_free_r+0x4c>
 800b77c:	42a3      	cmp	r3, r4
 800b77e:	d9fa      	bls.n	800b776 <_free_r+0x42>
 800b780:	6811      	ldr	r1, [r2, #0]
 800b782:	1850      	adds	r0, r2, r1
 800b784:	42a0      	cmp	r0, r4
 800b786:	d10b      	bne.n	800b7a0 <_free_r+0x6c>
 800b788:	6820      	ldr	r0, [r4, #0]
 800b78a:	4401      	add	r1, r0
 800b78c:	1850      	adds	r0, r2, r1
 800b78e:	4283      	cmp	r3, r0
 800b790:	6011      	str	r1, [r2, #0]
 800b792:	d1e0      	bne.n	800b756 <_free_r+0x22>
 800b794:	6818      	ldr	r0, [r3, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	6053      	str	r3, [r2, #4]
 800b79a:	4408      	add	r0, r1
 800b79c:	6010      	str	r0, [r2, #0]
 800b79e:	e7da      	b.n	800b756 <_free_r+0x22>
 800b7a0:	d902      	bls.n	800b7a8 <_free_r+0x74>
 800b7a2:	230c      	movs	r3, #12
 800b7a4:	602b      	str	r3, [r5, #0]
 800b7a6:	e7d6      	b.n	800b756 <_free_r+0x22>
 800b7a8:	6820      	ldr	r0, [r4, #0]
 800b7aa:	1821      	adds	r1, r4, r0
 800b7ac:	428b      	cmp	r3, r1
 800b7ae:	bf04      	itt	eq
 800b7b0:	6819      	ldreq	r1, [r3, #0]
 800b7b2:	685b      	ldreq	r3, [r3, #4]
 800b7b4:	6063      	str	r3, [r4, #4]
 800b7b6:	bf04      	itt	eq
 800b7b8:	1809      	addeq	r1, r1, r0
 800b7ba:	6021      	streq	r1, [r4, #0]
 800b7bc:	6054      	str	r4, [r2, #4]
 800b7be:	e7ca      	b.n	800b756 <_free_r+0x22>
 800b7c0:	bd38      	pop	{r3, r4, r5, pc}
 800b7c2:	bf00      	nop
 800b7c4:	20002154 	.word	0x20002154

0800b7c8 <__sfputc_r>:
 800b7c8:	6893      	ldr	r3, [r2, #8]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	b410      	push	{r4}
 800b7d0:	6093      	str	r3, [r2, #8]
 800b7d2:	da08      	bge.n	800b7e6 <__sfputc_r+0x1e>
 800b7d4:	6994      	ldr	r4, [r2, #24]
 800b7d6:	42a3      	cmp	r3, r4
 800b7d8:	db01      	blt.n	800b7de <__sfputc_r+0x16>
 800b7da:	290a      	cmp	r1, #10
 800b7dc:	d103      	bne.n	800b7e6 <__sfputc_r+0x1e>
 800b7de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7e2:	f7ff be86 	b.w	800b4f2 <__swbuf_r>
 800b7e6:	6813      	ldr	r3, [r2, #0]
 800b7e8:	1c58      	adds	r0, r3, #1
 800b7ea:	6010      	str	r0, [r2, #0]
 800b7ec:	7019      	strb	r1, [r3, #0]
 800b7ee:	4608      	mov	r0, r1
 800b7f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <__sfputs_r>:
 800b7f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	460f      	mov	r7, r1
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	18d5      	adds	r5, r2, r3
 800b800:	42ac      	cmp	r4, r5
 800b802:	d101      	bne.n	800b808 <__sfputs_r+0x12>
 800b804:	2000      	movs	r0, #0
 800b806:	e007      	b.n	800b818 <__sfputs_r+0x22>
 800b808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b80c:	463a      	mov	r2, r7
 800b80e:	4630      	mov	r0, r6
 800b810:	f7ff ffda 	bl	800b7c8 <__sfputc_r>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d1f3      	bne.n	800b800 <__sfputs_r+0xa>
 800b818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b81c <_vfiprintf_r>:
 800b81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b820:	460d      	mov	r5, r1
 800b822:	b09d      	sub	sp, #116	@ 0x74
 800b824:	4614      	mov	r4, r2
 800b826:	4698      	mov	r8, r3
 800b828:	4606      	mov	r6, r0
 800b82a:	b118      	cbz	r0, 800b834 <_vfiprintf_r+0x18>
 800b82c:	6a03      	ldr	r3, [r0, #32]
 800b82e:	b90b      	cbnz	r3, 800b834 <_vfiprintf_r+0x18>
 800b830:	f7ff fd76 	bl	800b320 <__sinit>
 800b834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b836:	07d9      	lsls	r1, r3, #31
 800b838:	d405      	bmi.n	800b846 <_vfiprintf_r+0x2a>
 800b83a:	89ab      	ldrh	r3, [r5, #12]
 800b83c:	059a      	lsls	r2, r3, #22
 800b83e:	d402      	bmi.n	800b846 <_vfiprintf_r+0x2a>
 800b840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b842:	f7ff ff74 	bl	800b72e <__retarget_lock_acquire_recursive>
 800b846:	89ab      	ldrh	r3, [r5, #12]
 800b848:	071b      	lsls	r3, r3, #28
 800b84a:	d501      	bpl.n	800b850 <_vfiprintf_r+0x34>
 800b84c:	692b      	ldr	r3, [r5, #16]
 800b84e:	b99b      	cbnz	r3, 800b878 <_vfiprintf_r+0x5c>
 800b850:	4629      	mov	r1, r5
 800b852:	4630      	mov	r0, r6
 800b854:	f7ff fe8c 	bl	800b570 <__swsetup_r>
 800b858:	b170      	cbz	r0, 800b878 <_vfiprintf_r+0x5c>
 800b85a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b85c:	07dc      	lsls	r4, r3, #31
 800b85e:	d504      	bpl.n	800b86a <_vfiprintf_r+0x4e>
 800b860:	f04f 30ff 	mov.w	r0, #4294967295
 800b864:	b01d      	add	sp, #116	@ 0x74
 800b866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86a:	89ab      	ldrh	r3, [r5, #12]
 800b86c:	0598      	lsls	r0, r3, #22
 800b86e:	d4f7      	bmi.n	800b860 <_vfiprintf_r+0x44>
 800b870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b872:	f7ff ff5d 	bl	800b730 <__retarget_lock_release_recursive>
 800b876:	e7f3      	b.n	800b860 <_vfiprintf_r+0x44>
 800b878:	2300      	movs	r3, #0
 800b87a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b87c:	2320      	movs	r3, #32
 800b87e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b882:	f8cd 800c 	str.w	r8, [sp, #12]
 800b886:	2330      	movs	r3, #48	@ 0x30
 800b888:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ba38 <_vfiprintf_r+0x21c>
 800b88c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b890:	f04f 0901 	mov.w	r9, #1
 800b894:	4623      	mov	r3, r4
 800b896:	469a      	mov	sl, r3
 800b898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b89c:	b10a      	cbz	r2, 800b8a2 <_vfiprintf_r+0x86>
 800b89e:	2a25      	cmp	r2, #37	@ 0x25
 800b8a0:	d1f9      	bne.n	800b896 <_vfiprintf_r+0x7a>
 800b8a2:	ebba 0b04 	subs.w	fp, sl, r4
 800b8a6:	d00b      	beq.n	800b8c0 <_vfiprintf_r+0xa4>
 800b8a8:	465b      	mov	r3, fp
 800b8aa:	4622      	mov	r2, r4
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f7ff ffa1 	bl	800b7f6 <__sfputs_r>
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	f000 80a7 	beq.w	800ba08 <_vfiprintf_r+0x1ec>
 800b8ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8bc:	445a      	add	r2, fp
 800b8be:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f000 809f 	beq.w	800ba08 <_vfiprintf_r+0x1ec>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d4:	f10a 0a01 	add.w	sl, sl, #1
 800b8d8:	9304      	str	r3, [sp, #16]
 800b8da:	9307      	str	r3, [sp, #28]
 800b8dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8e2:	4654      	mov	r4, sl
 800b8e4:	2205      	movs	r2, #5
 800b8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ea:	4853      	ldr	r0, [pc, #332]	@ (800ba38 <_vfiprintf_r+0x21c>)
 800b8ec:	f7f4 fc80 	bl	80001f0 <memchr>
 800b8f0:	9a04      	ldr	r2, [sp, #16]
 800b8f2:	b9d8      	cbnz	r0, 800b92c <_vfiprintf_r+0x110>
 800b8f4:	06d1      	lsls	r1, r2, #27
 800b8f6:	bf44      	itt	mi
 800b8f8:	2320      	movmi	r3, #32
 800b8fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8fe:	0713      	lsls	r3, r2, #28
 800b900:	bf44      	itt	mi
 800b902:	232b      	movmi	r3, #43	@ 0x2b
 800b904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b908:	f89a 3000 	ldrb.w	r3, [sl]
 800b90c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b90e:	d015      	beq.n	800b93c <_vfiprintf_r+0x120>
 800b910:	9a07      	ldr	r2, [sp, #28]
 800b912:	4654      	mov	r4, sl
 800b914:	2000      	movs	r0, #0
 800b916:	f04f 0c0a 	mov.w	ip, #10
 800b91a:	4621      	mov	r1, r4
 800b91c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b920:	3b30      	subs	r3, #48	@ 0x30
 800b922:	2b09      	cmp	r3, #9
 800b924:	d94b      	bls.n	800b9be <_vfiprintf_r+0x1a2>
 800b926:	b1b0      	cbz	r0, 800b956 <_vfiprintf_r+0x13a>
 800b928:	9207      	str	r2, [sp, #28]
 800b92a:	e014      	b.n	800b956 <_vfiprintf_r+0x13a>
 800b92c:	eba0 0308 	sub.w	r3, r0, r8
 800b930:	fa09 f303 	lsl.w	r3, r9, r3
 800b934:	4313      	orrs	r3, r2
 800b936:	9304      	str	r3, [sp, #16]
 800b938:	46a2      	mov	sl, r4
 800b93a:	e7d2      	b.n	800b8e2 <_vfiprintf_r+0xc6>
 800b93c:	9b03      	ldr	r3, [sp, #12]
 800b93e:	1d19      	adds	r1, r3, #4
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	9103      	str	r1, [sp, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	bfbb      	ittet	lt
 800b948:	425b      	neglt	r3, r3
 800b94a:	f042 0202 	orrlt.w	r2, r2, #2
 800b94e:	9307      	strge	r3, [sp, #28]
 800b950:	9307      	strlt	r3, [sp, #28]
 800b952:	bfb8      	it	lt
 800b954:	9204      	strlt	r2, [sp, #16]
 800b956:	7823      	ldrb	r3, [r4, #0]
 800b958:	2b2e      	cmp	r3, #46	@ 0x2e
 800b95a:	d10a      	bne.n	800b972 <_vfiprintf_r+0x156>
 800b95c:	7863      	ldrb	r3, [r4, #1]
 800b95e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b960:	d132      	bne.n	800b9c8 <_vfiprintf_r+0x1ac>
 800b962:	9b03      	ldr	r3, [sp, #12]
 800b964:	1d1a      	adds	r2, r3, #4
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	9203      	str	r2, [sp, #12]
 800b96a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b96e:	3402      	adds	r4, #2
 800b970:	9305      	str	r3, [sp, #20]
 800b972:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ba48 <_vfiprintf_r+0x22c>
 800b976:	7821      	ldrb	r1, [r4, #0]
 800b978:	2203      	movs	r2, #3
 800b97a:	4650      	mov	r0, sl
 800b97c:	f7f4 fc38 	bl	80001f0 <memchr>
 800b980:	b138      	cbz	r0, 800b992 <_vfiprintf_r+0x176>
 800b982:	9b04      	ldr	r3, [sp, #16]
 800b984:	eba0 000a 	sub.w	r0, r0, sl
 800b988:	2240      	movs	r2, #64	@ 0x40
 800b98a:	4082      	lsls	r2, r0
 800b98c:	4313      	orrs	r3, r2
 800b98e:	3401      	adds	r4, #1
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b996:	4829      	ldr	r0, [pc, #164]	@ (800ba3c <_vfiprintf_r+0x220>)
 800b998:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b99c:	2206      	movs	r2, #6
 800b99e:	f7f4 fc27 	bl	80001f0 <memchr>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d03f      	beq.n	800ba26 <_vfiprintf_r+0x20a>
 800b9a6:	4b26      	ldr	r3, [pc, #152]	@ (800ba40 <_vfiprintf_r+0x224>)
 800b9a8:	bb1b      	cbnz	r3, 800b9f2 <_vfiprintf_r+0x1d6>
 800b9aa:	9b03      	ldr	r3, [sp, #12]
 800b9ac:	3307      	adds	r3, #7
 800b9ae:	f023 0307 	bic.w	r3, r3, #7
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	9303      	str	r3, [sp, #12]
 800b9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b8:	443b      	add	r3, r7
 800b9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9bc:	e76a      	b.n	800b894 <_vfiprintf_r+0x78>
 800b9be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	e7a8      	b.n	800b91a <_vfiprintf_r+0xfe>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	3401      	adds	r4, #1
 800b9cc:	9305      	str	r3, [sp, #20]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	f04f 0c0a 	mov.w	ip, #10
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9da:	3a30      	subs	r2, #48	@ 0x30
 800b9dc:	2a09      	cmp	r2, #9
 800b9de:	d903      	bls.n	800b9e8 <_vfiprintf_r+0x1cc>
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d0c6      	beq.n	800b972 <_vfiprintf_r+0x156>
 800b9e4:	9105      	str	r1, [sp, #20]
 800b9e6:	e7c4      	b.n	800b972 <_vfiprintf_r+0x156>
 800b9e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e7f0      	b.n	800b9d4 <_vfiprintf_r+0x1b8>
 800b9f2:	ab03      	add	r3, sp, #12
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	462a      	mov	r2, r5
 800b9f8:	4b12      	ldr	r3, [pc, #72]	@ (800ba44 <_vfiprintf_r+0x228>)
 800b9fa:	a904      	add	r1, sp, #16
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f3af 8000 	nop.w
 800ba02:	4607      	mov	r7, r0
 800ba04:	1c78      	adds	r0, r7, #1
 800ba06:	d1d6      	bne.n	800b9b6 <_vfiprintf_r+0x19a>
 800ba08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba0a:	07d9      	lsls	r1, r3, #31
 800ba0c:	d405      	bmi.n	800ba1a <_vfiprintf_r+0x1fe>
 800ba0e:	89ab      	ldrh	r3, [r5, #12]
 800ba10:	059a      	lsls	r2, r3, #22
 800ba12:	d402      	bmi.n	800ba1a <_vfiprintf_r+0x1fe>
 800ba14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba16:	f7ff fe8b 	bl	800b730 <__retarget_lock_release_recursive>
 800ba1a:	89ab      	ldrh	r3, [r5, #12]
 800ba1c:	065b      	lsls	r3, r3, #25
 800ba1e:	f53f af1f 	bmi.w	800b860 <_vfiprintf_r+0x44>
 800ba22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba24:	e71e      	b.n	800b864 <_vfiprintf_r+0x48>
 800ba26:	ab03      	add	r3, sp, #12
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	462a      	mov	r2, r5
 800ba2c:	4b05      	ldr	r3, [pc, #20]	@ (800ba44 <_vfiprintf_r+0x228>)
 800ba2e:	a904      	add	r1, sp, #16
 800ba30:	4630      	mov	r0, r6
 800ba32:	f000 f879 	bl	800bb28 <_printf_i>
 800ba36:	e7e4      	b.n	800ba02 <_vfiprintf_r+0x1e6>
 800ba38:	080105b4 	.word	0x080105b4
 800ba3c:	080105be 	.word	0x080105be
 800ba40:	00000000 	.word	0x00000000
 800ba44:	0800b7f7 	.word	0x0800b7f7
 800ba48:	080105ba 	.word	0x080105ba

0800ba4c <_printf_common>:
 800ba4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba50:	4616      	mov	r6, r2
 800ba52:	4698      	mov	r8, r3
 800ba54:	688a      	ldr	r2, [r1, #8]
 800ba56:	690b      	ldr	r3, [r1, #16]
 800ba58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	bfb8      	it	lt
 800ba60:	4613      	movlt	r3, r2
 800ba62:	6033      	str	r3, [r6, #0]
 800ba64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba68:	4607      	mov	r7, r0
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	b10a      	cbz	r2, 800ba72 <_printf_common+0x26>
 800ba6e:	3301      	adds	r3, #1
 800ba70:	6033      	str	r3, [r6, #0]
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	0699      	lsls	r1, r3, #26
 800ba76:	bf42      	ittt	mi
 800ba78:	6833      	ldrmi	r3, [r6, #0]
 800ba7a:	3302      	addmi	r3, #2
 800ba7c:	6033      	strmi	r3, [r6, #0]
 800ba7e:	6825      	ldr	r5, [r4, #0]
 800ba80:	f015 0506 	ands.w	r5, r5, #6
 800ba84:	d106      	bne.n	800ba94 <_printf_common+0x48>
 800ba86:	f104 0a19 	add.w	sl, r4, #25
 800ba8a:	68e3      	ldr	r3, [r4, #12]
 800ba8c:	6832      	ldr	r2, [r6, #0]
 800ba8e:	1a9b      	subs	r3, r3, r2
 800ba90:	42ab      	cmp	r3, r5
 800ba92:	dc26      	bgt.n	800bae2 <_printf_common+0x96>
 800ba94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba98:	6822      	ldr	r2, [r4, #0]
 800ba9a:	3b00      	subs	r3, #0
 800ba9c:	bf18      	it	ne
 800ba9e:	2301      	movne	r3, #1
 800baa0:	0692      	lsls	r2, r2, #26
 800baa2:	d42b      	bmi.n	800bafc <_printf_common+0xb0>
 800baa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800baa8:	4641      	mov	r1, r8
 800baaa:	4638      	mov	r0, r7
 800baac:	47c8      	blx	r9
 800baae:	3001      	adds	r0, #1
 800bab0:	d01e      	beq.n	800baf0 <_printf_common+0xa4>
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	6922      	ldr	r2, [r4, #16]
 800bab6:	f003 0306 	and.w	r3, r3, #6
 800baba:	2b04      	cmp	r3, #4
 800babc:	bf02      	ittt	eq
 800babe:	68e5      	ldreq	r5, [r4, #12]
 800bac0:	6833      	ldreq	r3, [r6, #0]
 800bac2:	1aed      	subeq	r5, r5, r3
 800bac4:	68a3      	ldr	r3, [r4, #8]
 800bac6:	bf0c      	ite	eq
 800bac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bacc:	2500      	movne	r5, #0
 800bace:	4293      	cmp	r3, r2
 800bad0:	bfc4      	itt	gt
 800bad2:	1a9b      	subgt	r3, r3, r2
 800bad4:	18ed      	addgt	r5, r5, r3
 800bad6:	2600      	movs	r6, #0
 800bad8:	341a      	adds	r4, #26
 800bada:	42b5      	cmp	r5, r6
 800badc:	d11a      	bne.n	800bb14 <_printf_common+0xc8>
 800bade:	2000      	movs	r0, #0
 800bae0:	e008      	b.n	800baf4 <_printf_common+0xa8>
 800bae2:	2301      	movs	r3, #1
 800bae4:	4652      	mov	r2, sl
 800bae6:	4641      	mov	r1, r8
 800bae8:	4638      	mov	r0, r7
 800baea:	47c8      	blx	r9
 800baec:	3001      	adds	r0, #1
 800baee:	d103      	bne.n	800baf8 <_printf_common+0xac>
 800baf0:	f04f 30ff 	mov.w	r0, #4294967295
 800baf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf8:	3501      	adds	r5, #1
 800bafa:	e7c6      	b.n	800ba8a <_printf_common+0x3e>
 800bafc:	18e1      	adds	r1, r4, r3
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	2030      	movs	r0, #48	@ 0x30
 800bb02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb06:	4422      	add	r2, r4
 800bb08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb10:	3302      	adds	r3, #2
 800bb12:	e7c7      	b.n	800baa4 <_printf_common+0x58>
 800bb14:	2301      	movs	r3, #1
 800bb16:	4622      	mov	r2, r4
 800bb18:	4641      	mov	r1, r8
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	47c8      	blx	r9
 800bb1e:	3001      	adds	r0, #1
 800bb20:	d0e6      	beq.n	800baf0 <_printf_common+0xa4>
 800bb22:	3601      	adds	r6, #1
 800bb24:	e7d9      	b.n	800bada <_printf_common+0x8e>
	...

0800bb28 <_printf_i>:
 800bb28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb2c:	7e0f      	ldrb	r7, [r1, #24]
 800bb2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb30:	2f78      	cmp	r7, #120	@ 0x78
 800bb32:	4691      	mov	r9, r2
 800bb34:	4680      	mov	r8, r0
 800bb36:	460c      	mov	r4, r1
 800bb38:	469a      	mov	sl, r3
 800bb3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb3e:	d807      	bhi.n	800bb50 <_printf_i+0x28>
 800bb40:	2f62      	cmp	r7, #98	@ 0x62
 800bb42:	d80a      	bhi.n	800bb5a <_printf_i+0x32>
 800bb44:	2f00      	cmp	r7, #0
 800bb46:	f000 80d1 	beq.w	800bcec <_printf_i+0x1c4>
 800bb4a:	2f58      	cmp	r7, #88	@ 0x58
 800bb4c:	f000 80b8 	beq.w	800bcc0 <_printf_i+0x198>
 800bb50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb58:	e03a      	b.n	800bbd0 <_printf_i+0xa8>
 800bb5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb5e:	2b15      	cmp	r3, #21
 800bb60:	d8f6      	bhi.n	800bb50 <_printf_i+0x28>
 800bb62:	a101      	add	r1, pc, #4	@ (adr r1, 800bb68 <_printf_i+0x40>)
 800bb64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb68:	0800bbc1 	.word	0x0800bbc1
 800bb6c:	0800bbd5 	.word	0x0800bbd5
 800bb70:	0800bb51 	.word	0x0800bb51
 800bb74:	0800bb51 	.word	0x0800bb51
 800bb78:	0800bb51 	.word	0x0800bb51
 800bb7c:	0800bb51 	.word	0x0800bb51
 800bb80:	0800bbd5 	.word	0x0800bbd5
 800bb84:	0800bb51 	.word	0x0800bb51
 800bb88:	0800bb51 	.word	0x0800bb51
 800bb8c:	0800bb51 	.word	0x0800bb51
 800bb90:	0800bb51 	.word	0x0800bb51
 800bb94:	0800bcd3 	.word	0x0800bcd3
 800bb98:	0800bbff 	.word	0x0800bbff
 800bb9c:	0800bc8d 	.word	0x0800bc8d
 800bba0:	0800bb51 	.word	0x0800bb51
 800bba4:	0800bb51 	.word	0x0800bb51
 800bba8:	0800bcf5 	.word	0x0800bcf5
 800bbac:	0800bb51 	.word	0x0800bb51
 800bbb0:	0800bbff 	.word	0x0800bbff
 800bbb4:	0800bb51 	.word	0x0800bb51
 800bbb8:	0800bb51 	.word	0x0800bb51
 800bbbc:	0800bc95 	.word	0x0800bc95
 800bbc0:	6833      	ldr	r3, [r6, #0]
 800bbc2:	1d1a      	adds	r2, r3, #4
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6032      	str	r2, [r6, #0]
 800bbc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e09c      	b.n	800bd0e <_printf_i+0x1e6>
 800bbd4:	6833      	ldr	r3, [r6, #0]
 800bbd6:	6820      	ldr	r0, [r4, #0]
 800bbd8:	1d19      	adds	r1, r3, #4
 800bbda:	6031      	str	r1, [r6, #0]
 800bbdc:	0606      	lsls	r6, r0, #24
 800bbde:	d501      	bpl.n	800bbe4 <_printf_i+0xbc>
 800bbe0:	681d      	ldr	r5, [r3, #0]
 800bbe2:	e003      	b.n	800bbec <_printf_i+0xc4>
 800bbe4:	0645      	lsls	r5, r0, #25
 800bbe6:	d5fb      	bpl.n	800bbe0 <_printf_i+0xb8>
 800bbe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bbec:	2d00      	cmp	r5, #0
 800bbee:	da03      	bge.n	800bbf8 <_printf_i+0xd0>
 800bbf0:	232d      	movs	r3, #45	@ 0x2d
 800bbf2:	426d      	negs	r5, r5
 800bbf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbf8:	4858      	ldr	r0, [pc, #352]	@ (800bd5c <_printf_i+0x234>)
 800bbfa:	230a      	movs	r3, #10
 800bbfc:	e011      	b.n	800bc22 <_printf_i+0xfa>
 800bbfe:	6821      	ldr	r1, [r4, #0]
 800bc00:	6833      	ldr	r3, [r6, #0]
 800bc02:	0608      	lsls	r0, r1, #24
 800bc04:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc08:	d402      	bmi.n	800bc10 <_printf_i+0xe8>
 800bc0a:	0649      	lsls	r1, r1, #25
 800bc0c:	bf48      	it	mi
 800bc0e:	b2ad      	uxthmi	r5, r5
 800bc10:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc12:	4852      	ldr	r0, [pc, #328]	@ (800bd5c <_printf_i+0x234>)
 800bc14:	6033      	str	r3, [r6, #0]
 800bc16:	bf14      	ite	ne
 800bc18:	230a      	movne	r3, #10
 800bc1a:	2308      	moveq	r3, #8
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc22:	6866      	ldr	r6, [r4, #4]
 800bc24:	60a6      	str	r6, [r4, #8]
 800bc26:	2e00      	cmp	r6, #0
 800bc28:	db05      	blt.n	800bc36 <_printf_i+0x10e>
 800bc2a:	6821      	ldr	r1, [r4, #0]
 800bc2c:	432e      	orrs	r6, r5
 800bc2e:	f021 0104 	bic.w	r1, r1, #4
 800bc32:	6021      	str	r1, [r4, #0]
 800bc34:	d04b      	beq.n	800bcce <_printf_i+0x1a6>
 800bc36:	4616      	mov	r6, r2
 800bc38:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc3c:	fb03 5711 	mls	r7, r3, r1, r5
 800bc40:	5dc7      	ldrb	r7, [r0, r7]
 800bc42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc46:	462f      	mov	r7, r5
 800bc48:	42bb      	cmp	r3, r7
 800bc4a:	460d      	mov	r5, r1
 800bc4c:	d9f4      	bls.n	800bc38 <_printf_i+0x110>
 800bc4e:	2b08      	cmp	r3, #8
 800bc50:	d10b      	bne.n	800bc6a <_printf_i+0x142>
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	07df      	lsls	r7, r3, #31
 800bc56:	d508      	bpl.n	800bc6a <_printf_i+0x142>
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	6861      	ldr	r1, [r4, #4]
 800bc5c:	4299      	cmp	r1, r3
 800bc5e:	bfde      	ittt	le
 800bc60:	2330      	movle	r3, #48	@ 0x30
 800bc62:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc66:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc6a:	1b92      	subs	r2, r2, r6
 800bc6c:	6122      	str	r2, [r4, #16]
 800bc6e:	f8cd a000 	str.w	sl, [sp]
 800bc72:	464b      	mov	r3, r9
 800bc74:	aa03      	add	r2, sp, #12
 800bc76:	4621      	mov	r1, r4
 800bc78:	4640      	mov	r0, r8
 800bc7a:	f7ff fee7 	bl	800ba4c <_printf_common>
 800bc7e:	3001      	adds	r0, #1
 800bc80:	d14a      	bne.n	800bd18 <_printf_i+0x1f0>
 800bc82:	f04f 30ff 	mov.w	r0, #4294967295
 800bc86:	b004      	add	sp, #16
 800bc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	f043 0320 	orr.w	r3, r3, #32
 800bc92:	6023      	str	r3, [r4, #0]
 800bc94:	4832      	ldr	r0, [pc, #200]	@ (800bd60 <_printf_i+0x238>)
 800bc96:	2778      	movs	r7, #120	@ 0x78
 800bc98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	6831      	ldr	r1, [r6, #0]
 800bca0:	061f      	lsls	r7, r3, #24
 800bca2:	f851 5b04 	ldr.w	r5, [r1], #4
 800bca6:	d402      	bmi.n	800bcae <_printf_i+0x186>
 800bca8:	065f      	lsls	r7, r3, #25
 800bcaa:	bf48      	it	mi
 800bcac:	b2ad      	uxthmi	r5, r5
 800bcae:	6031      	str	r1, [r6, #0]
 800bcb0:	07d9      	lsls	r1, r3, #31
 800bcb2:	bf44      	itt	mi
 800bcb4:	f043 0320 	orrmi.w	r3, r3, #32
 800bcb8:	6023      	strmi	r3, [r4, #0]
 800bcba:	b11d      	cbz	r5, 800bcc4 <_printf_i+0x19c>
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	e7ad      	b.n	800bc1c <_printf_i+0xf4>
 800bcc0:	4826      	ldr	r0, [pc, #152]	@ (800bd5c <_printf_i+0x234>)
 800bcc2:	e7e9      	b.n	800bc98 <_printf_i+0x170>
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	f023 0320 	bic.w	r3, r3, #32
 800bcca:	6023      	str	r3, [r4, #0]
 800bccc:	e7f6      	b.n	800bcbc <_printf_i+0x194>
 800bcce:	4616      	mov	r6, r2
 800bcd0:	e7bd      	b.n	800bc4e <_printf_i+0x126>
 800bcd2:	6833      	ldr	r3, [r6, #0]
 800bcd4:	6825      	ldr	r5, [r4, #0]
 800bcd6:	6961      	ldr	r1, [r4, #20]
 800bcd8:	1d18      	adds	r0, r3, #4
 800bcda:	6030      	str	r0, [r6, #0]
 800bcdc:	062e      	lsls	r6, r5, #24
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	d501      	bpl.n	800bce6 <_printf_i+0x1be>
 800bce2:	6019      	str	r1, [r3, #0]
 800bce4:	e002      	b.n	800bcec <_printf_i+0x1c4>
 800bce6:	0668      	lsls	r0, r5, #25
 800bce8:	d5fb      	bpl.n	800bce2 <_printf_i+0x1ba>
 800bcea:	8019      	strh	r1, [r3, #0]
 800bcec:	2300      	movs	r3, #0
 800bcee:	6123      	str	r3, [r4, #16]
 800bcf0:	4616      	mov	r6, r2
 800bcf2:	e7bc      	b.n	800bc6e <_printf_i+0x146>
 800bcf4:	6833      	ldr	r3, [r6, #0]
 800bcf6:	1d1a      	adds	r2, r3, #4
 800bcf8:	6032      	str	r2, [r6, #0]
 800bcfa:	681e      	ldr	r6, [r3, #0]
 800bcfc:	6862      	ldr	r2, [r4, #4]
 800bcfe:	2100      	movs	r1, #0
 800bd00:	4630      	mov	r0, r6
 800bd02:	f7f4 fa75 	bl	80001f0 <memchr>
 800bd06:	b108      	cbz	r0, 800bd0c <_printf_i+0x1e4>
 800bd08:	1b80      	subs	r0, r0, r6
 800bd0a:	6060      	str	r0, [r4, #4]
 800bd0c:	6863      	ldr	r3, [r4, #4]
 800bd0e:	6123      	str	r3, [r4, #16]
 800bd10:	2300      	movs	r3, #0
 800bd12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd16:	e7aa      	b.n	800bc6e <_printf_i+0x146>
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	4640      	mov	r0, r8
 800bd20:	47d0      	blx	sl
 800bd22:	3001      	adds	r0, #1
 800bd24:	d0ad      	beq.n	800bc82 <_printf_i+0x15a>
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	079b      	lsls	r3, r3, #30
 800bd2a:	d413      	bmi.n	800bd54 <_printf_i+0x22c>
 800bd2c:	68e0      	ldr	r0, [r4, #12]
 800bd2e:	9b03      	ldr	r3, [sp, #12]
 800bd30:	4298      	cmp	r0, r3
 800bd32:	bfb8      	it	lt
 800bd34:	4618      	movlt	r0, r3
 800bd36:	e7a6      	b.n	800bc86 <_printf_i+0x15e>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	4632      	mov	r2, r6
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	4640      	mov	r0, r8
 800bd40:	47d0      	blx	sl
 800bd42:	3001      	adds	r0, #1
 800bd44:	d09d      	beq.n	800bc82 <_printf_i+0x15a>
 800bd46:	3501      	adds	r5, #1
 800bd48:	68e3      	ldr	r3, [r4, #12]
 800bd4a:	9903      	ldr	r1, [sp, #12]
 800bd4c:	1a5b      	subs	r3, r3, r1
 800bd4e:	42ab      	cmp	r3, r5
 800bd50:	dcf2      	bgt.n	800bd38 <_printf_i+0x210>
 800bd52:	e7eb      	b.n	800bd2c <_printf_i+0x204>
 800bd54:	2500      	movs	r5, #0
 800bd56:	f104 0619 	add.w	r6, r4, #25
 800bd5a:	e7f5      	b.n	800bd48 <_printf_i+0x220>
 800bd5c:	080105c5 	.word	0x080105c5
 800bd60:	080105d6 	.word	0x080105d6

0800bd64 <__sflush_r>:
 800bd64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd6c:	0716      	lsls	r6, r2, #28
 800bd6e:	4605      	mov	r5, r0
 800bd70:	460c      	mov	r4, r1
 800bd72:	d454      	bmi.n	800be1e <__sflush_r+0xba>
 800bd74:	684b      	ldr	r3, [r1, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	dc02      	bgt.n	800bd80 <__sflush_r+0x1c>
 800bd7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	dd48      	ble.n	800be12 <__sflush_r+0xae>
 800bd80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd82:	2e00      	cmp	r6, #0
 800bd84:	d045      	beq.n	800be12 <__sflush_r+0xae>
 800bd86:	2300      	movs	r3, #0
 800bd88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd8c:	682f      	ldr	r7, [r5, #0]
 800bd8e:	6a21      	ldr	r1, [r4, #32]
 800bd90:	602b      	str	r3, [r5, #0]
 800bd92:	d030      	beq.n	800bdf6 <__sflush_r+0x92>
 800bd94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd96:	89a3      	ldrh	r3, [r4, #12]
 800bd98:	0759      	lsls	r1, r3, #29
 800bd9a:	d505      	bpl.n	800bda8 <__sflush_r+0x44>
 800bd9c:	6863      	ldr	r3, [r4, #4]
 800bd9e:	1ad2      	subs	r2, r2, r3
 800bda0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bda2:	b10b      	cbz	r3, 800bda8 <__sflush_r+0x44>
 800bda4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bda6:	1ad2      	subs	r2, r2, r3
 800bda8:	2300      	movs	r3, #0
 800bdaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdac:	6a21      	ldr	r1, [r4, #32]
 800bdae:	4628      	mov	r0, r5
 800bdb0:	47b0      	blx	r6
 800bdb2:	1c43      	adds	r3, r0, #1
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	d106      	bne.n	800bdc6 <__sflush_r+0x62>
 800bdb8:	6829      	ldr	r1, [r5, #0]
 800bdba:	291d      	cmp	r1, #29
 800bdbc:	d82b      	bhi.n	800be16 <__sflush_r+0xb2>
 800bdbe:	4a2a      	ldr	r2, [pc, #168]	@ (800be68 <__sflush_r+0x104>)
 800bdc0:	40ca      	lsrs	r2, r1
 800bdc2:	07d6      	lsls	r6, r2, #31
 800bdc4:	d527      	bpl.n	800be16 <__sflush_r+0xb2>
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	6062      	str	r2, [r4, #4]
 800bdca:	04d9      	lsls	r1, r3, #19
 800bdcc:	6922      	ldr	r2, [r4, #16]
 800bdce:	6022      	str	r2, [r4, #0]
 800bdd0:	d504      	bpl.n	800bddc <__sflush_r+0x78>
 800bdd2:	1c42      	adds	r2, r0, #1
 800bdd4:	d101      	bne.n	800bdda <__sflush_r+0x76>
 800bdd6:	682b      	ldr	r3, [r5, #0]
 800bdd8:	b903      	cbnz	r3, 800bddc <__sflush_r+0x78>
 800bdda:	6560      	str	r0, [r4, #84]	@ 0x54
 800bddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdde:	602f      	str	r7, [r5, #0]
 800bde0:	b1b9      	cbz	r1, 800be12 <__sflush_r+0xae>
 800bde2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bde6:	4299      	cmp	r1, r3
 800bde8:	d002      	beq.n	800bdf0 <__sflush_r+0x8c>
 800bdea:	4628      	mov	r0, r5
 800bdec:	f7ff fca2 	bl	800b734 <_free_r>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdf4:	e00d      	b.n	800be12 <__sflush_r+0xae>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	47b0      	blx	r6
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	1c50      	adds	r0, r2, #1
 800be00:	d1c9      	bne.n	800bd96 <__sflush_r+0x32>
 800be02:	682b      	ldr	r3, [r5, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d0c6      	beq.n	800bd96 <__sflush_r+0x32>
 800be08:	2b1d      	cmp	r3, #29
 800be0a:	d001      	beq.n	800be10 <__sflush_r+0xac>
 800be0c:	2b16      	cmp	r3, #22
 800be0e:	d11e      	bne.n	800be4e <__sflush_r+0xea>
 800be10:	602f      	str	r7, [r5, #0]
 800be12:	2000      	movs	r0, #0
 800be14:	e022      	b.n	800be5c <__sflush_r+0xf8>
 800be16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be1a:	b21b      	sxth	r3, r3
 800be1c:	e01b      	b.n	800be56 <__sflush_r+0xf2>
 800be1e:	690f      	ldr	r7, [r1, #16]
 800be20:	2f00      	cmp	r7, #0
 800be22:	d0f6      	beq.n	800be12 <__sflush_r+0xae>
 800be24:	0793      	lsls	r3, r2, #30
 800be26:	680e      	ldr	r6, [r1, #0]
 800be28:	bf08      	it	eq
 800be2a:	694b      	ldreq	r3, [r1, #20]
 800be2c:	600f      	str	r7, [r1, #0]
 800be2e:	bf18      	it	ne
 800be30:	2300      	movne	r3, #0
 800be32:	eba6 0807 	sub.w	r8, r6, r7
 800be36:	608b      	str	r3, [r1, #8]
 800be38:	f1b8 0f00 	cmp.w	r8, #0
 800be3c:	dde9      	ble.n	800be12 <__sflush_r+0xae>
 800be3e:	6a21      	ldr	r1, [r4, #32]
 800be40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be42:	4643      	mov	r3, r8
 800be44:	463a      	mov	r2, r7
 800be46:	4628      	mov	r0, r5
 800be48:	47b0      	blx	r6
 800be4a:	2800      	cmp	r0, #0
 800be4c:	dc08      	bgt.n	800be60 <__sflush_r+0xfc>
 800be4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	f04f 30ff 	mov.w	r0, #4294967295
 800be5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be60:	4407      	add	r7, r0
 800be62:	eba8 0800 	sub.w	r8, r8, r0
 800be66:	e7e7      	b.n	800be38 <__sflush_r+0xd4>
 800be68:	20400001 	.word	0x20400001

0800be6c <_fflush_r>:
 800be6c:	b538      	push	{r3, r4, r5, lr}
 800be6e:	690b      	ldr	r3, [r1, #16]
 800be70:	4605      	mov	r5, r0
 800be72:	460c      	mov	r4, r1
 800be74:	b913      	cbnz	r3, 800be7c <_fflush_r+0x10>
 800be76:	2500      	movs	r5, #0
 800be78:	4628      	mov	r0, r5
 800be7a:	bd38      	pop	{r3, r4, r5, pc}
 800be7c:	b118      	cbz	r0, 800be86 <_fflush_r+0x1a>
 800be7e:	6a03      	ldr	r3, [r0, #32]
 800be80:	b90b      	cbnz	r3, 800be86 <_fflush_r+0x1a>
 800be82:	f7ff fa4d 	bl	800b320 <__sinit>
 800be86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0f3      	beq.n	800be76 <_fflush_r+0xa>
 800be8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be90:	07d0      	lsls	r0, r2, #31
 800be92:	d404      	bmi.n	800be9e <_fflush_r+0x32>
 800be94:	0599      	lsls	r1, r3, #22
 800be96:	d402      	bmi.n	800be9e <_fflush_r+0x32>
 800be98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be9a:	f7ff fc48 	bl	800b72e <__retarget_lock_acquire_recursive>
 800be9e:	4628      	mov	r0, r5
 800bea0:	4621      	mov	r1, r4
 800bea2:	f7ff ff5f 	bl	800bd64 <__sflush_r>
 800bea6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bea8:	07da      	lsls	r2, r3, #31
 800beaa:	4605      	mov	r5, r0
 800beac:	d4e4      	bmi.n	800be78 <_fflush_r+0xc>
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	059b      	lsls	r3, r3, #22
 800beb2:	d4e1      	bmi.n	800be78 <_fflush_r+0xc>
 800beb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800beb6:	f7ff fc3b 	bl	800b730 <__retarget_lock_release_recursive>
 800beba:	e7dd      	b.n	800be78 <_fflush_r+0xc>

0800bebc <__swhatbuf_r>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	460c      	mov	r4, r1
 800bec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec4:	2900      	cmp	r1, #0
 800bec6:	b096      	sub	sp, #88	@ 0x58
 800bec8:	4615      	mov	r5, r2
 800beca:	461e      	mov	r6, r3
 800becc:	da0d      	bge.n	800beea <__swhatbuf_r+0x2e>
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bed4:	f04f 0100 	mov.w	r1, #0
 800bed8:	bf14      	ite	ne
 800beda:	2340      	movne	r3, #64	@ 0x40
 800bedc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bee0:	2000      	movs	r0, #0
 800bee2:	6031      	str	r1, [r6, #0]
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	b016      	add	sp, #88	@ 0x58
 800bee8:	bd70      	pop	{r4, r5, r6, pc}
 800beea:	466a      	mov	r2, sp
 800beec:	f000 f848 	bl	800bf80 <_fstat_r>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	dbec      	blt.n	800bece <__swhatbuf_r+0x12>
 800bef4:	9901      	ldr	r1, [sp, #4]
 800bef6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800befa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800befe:	4259      	negs	r1, r3
 800bf00:	4159      	adcs	r1, r3
 800bf02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf06:	e7eb      	b.n	800bee0 <__swhatbuf_r+0x24>

0800bf08 <__smakebuf_r>:
 800bf08:	898b      	ldrh	r3, [r1, #12]
 800bf0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf0c:	079d      	lsls	r5, r3, #30
 800bf0e:	4606      	mov	r6, r0
 800bf10:	460c      	mov	r4, r1
 800bf12:	d507      	bpl.n	800bf24 <__smakebuf_r+0x1c>
 800bf14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	6123      	str	r3, [r4, #16]
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	6163      	str	r3, [r4, #20]
 800bf20:	b003      	add	sp, #12
 800bf22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf24:	ab01      	add	r3, sp, #4
 800bf26:	466a      	mov	r2, sp
 800bf28:	f7ff ffc8 	bl	800bebc <__swhatbuf_r>
 800bf2c:	9f00      	ldr	r7, [sp, #0]
 800bf2e:	4605      	mov	r5, r0
 800bf30:	4639      	mov	r1, r7
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7ff f8dc 	bl	800b0f0 <_malloc_r>
 800bf38:	b948      	cbnz	r0, 800bf4e <__smakebuf_r+0x46>
 800bf3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3e:	059a      	lsls	r2, r3, #22
 800bf40:	d4ee      	bmi.n	800bf20 <__smakebuf_r+0x18>
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	f043 0302 	orr.w	r3, r3, #2
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	e7e2      	b.n	800bf14 <__smakebuf_r+0xc>
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	6020      	str	r0, [r4, #0]
 800bf52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf56:	81a3      	strh	r3, [r4, #12]
 800bf58:	9b01      	ldr	r3, [sp, #4]
 800bf5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf5e:	b15b      	cbz	r3, 800bf78 <__smakebuf_r+0x70>
 800bf60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf64:	4630      	mov	r0, r6
 800bf66:	f000 f81d 	bl	800bfa4 <_isatty_r>
 800bf6a:	b128      	cbz	r0, 800bf78 <__smakebuf_r+0x70>
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	f023 0303 	bic.w	r3, r3, #3
 800bf72:	f043 0301 	orr.w	r3, r3, #1
 800bf76:	81a3      	strh	r3, [r4, #12]
 800bf78:	89a3      	ldrh	r3, [r4, #12]
 800bf7a:	431d      	orrs	r5, r3
 800bf7c:	81a5      	strh	r5, [r4, #12]
 800bf7e:	e7cf      	b.n	800bf20 <__smakebuf_r+0x18>

0800bf80 <_fstat_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d07      	ldr	r5, [pc, #28]	@ (800bfa0 <_fstat_r+0x20>)
 800bf84:	2300      	movs	r3, #0
 800bf86:	4604      	mov	r4, r0
 800bf88:	4608      	mov	r0, r1
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	602b      	str	r3, [r5, #0]
 800bf8e:	f7f4 fdc4 	bl	8000b1a <_fstat>
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	d102      	bne.n	800bf9c <_fstat_r+0x1c>
 800bf96:	682b      	ldr	r3, [r5, #0]
 800bf98:	b103      	cbz	r3, 800bf9c <_fstat_r+0x1c>
 800bf9a:	6023      	str	r3, [r4, #0]
 800bf9c:	bd38      	pop	{r3, r4, r5, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20002294 	.word	0x20002294

0800bfa4 <_isatty_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4d06      	ldr	r5, [pc, #24]	@ (800bfc0 <_isatty_r+0x1c>)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4604      	mov	r4, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	f7f4 fdc3 	bl	8000b3a <_isatty>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	d102      	bne.n	800bfbe <_isatty_r+0x1a>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	b103      	cbz	r3, 800bfbe <_isatty_r+0x1a>
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	20002294 	.word	0x20002294

0800bfc4 <_init>:
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	bf00      	nop
 800bfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfca:	bc08      	pop	{r3}
 800bfcc:	469e      	mov	lr, r3
 800bfce:	4770      	bx	lr

0800bfd0 <_fini>:
 800bfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd2:	bf00      	nop
 800bfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd6:	bc08      	pop	{r3}
 800bfd8:	469e      	mov	lr, r3
 800bfda:	4770      	bx	lr
