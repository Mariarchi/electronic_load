
LCD_by_myself_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdcc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004578  0800bf6c  0800bf6c  0000cf6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104e4  080104e4  00012180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080104e4  080104e4  000114e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104ec  080104ec  00012180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104ec  080104ec  000114ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080104f0  080104f0  000114f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  080104f4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000211c  20000180  08010674  00012180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000229c  08010674  0001229c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eae8  00000000  00000000  000121b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054d4  00000000  00000000  00030c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00036170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001482  00000000  00000000  00037ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d287  00000000  00000000  00039122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b02  00000000  00000000  000563a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099177  00000000  00000000  0007beab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115022  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000765c  00000000  00000000  00115068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011c6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf54 	.word	0x0800bf54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800bf54 	.word	0x0800bf54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a2f      	ldr	r2, [pc, #188]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a28      	ldr	r2, [pc, #160]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_GPIO_Init+0xdc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800062c:	481b      	ldr	r0, [pc, #108]	@ (800069c <MX_GPIO_Init+0xe0>)
 800062e:	f000 ff7f 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin|TP_CS_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	21d0      	movs	r1, #208	@ 0xd0
 8000636:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 8000638:	f000 ff7a 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 800063c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	4811      	ldr	r0, [pc, #68]	@ (800069c <MX_GPIO_Init+0xe0>)
 8000656:	f000 fdcf 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800065a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	480b      	ldr	r0, [pc, #44]	@ (800069c <MX_GPIO_Init+0xe0>)
 8000670:	f000 fdc2 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LCD_CS_Pin TP_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin|TP_CS_Pin;
 8000674:	23d0      	movs	r3, #208	@ 0xd0
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 800068c:	f000 fdb4 	bl	80011f8 <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400

080006a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d013      	beq.n	80006e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80006c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00b      	beq.n	80006e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006cc:	e000      	b.n	80006d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f9      	beq.n	80006ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006da:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fbd5 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f869 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f7ff ff5b 	bl	80005bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000706:	f000 f903 	bl	8000910 <MX_SPI1_Init>
  MX_TIM3_Init();
 800070a:	f000 fa7b 	bl	8000c04 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800070e:	f000 fb2f 	bl	8000d70 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000712:	f007 f8c3 	bl	800789c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  printf("3.5inch TFT Touch Shield Demo\r\n");
 8000716:	4829      	ldr	r0, [pc, #164]	@ (80007bc <main+0xc8>)
 8000718:	f00a fe68 	bl	800b3ec <puts>
  System_Init();
 800071c:	f007 fdce 	bl	80082bc <System_Init>

  LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;//SCAN_DIR_DFT = D2U_L2R направление отрисовки?
 8000720:	2306      	movs	r3, #6
 8000722:	72fb      	strb	r3, [r7, #11]
  printf("Init LCD...\r\n");
 8000724:	4826      	ldr	r0, [pc, #152]	@ (80007c0 <main+0xcc>)
 8000726:	f00a fe61 	bl	800b3ec <puts>
  LCD_Init(Lcd_ScanDir, 64000); // управление яркостью
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	f44f 417a 	mov.w	r1, #64000	@ 0xfa00
 8000730:	4618      	mov	r0, r3
 8000732:	f008 fd6b 	bl	800920c <LCD_Init>
  printf("Init TouchPad...\r\n");
 8000736:	4823      	ldr	r0, [pc, #140]	@ (80007c4 <main+0xd0>)
 8000738:	f00a fe58 	bl	800b3ec <puts>
  TP_Init(Lcd_ScanDir);
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	4618      	mov	r0, r3
 8000740:	f00a f966 	bl	800aa10 <TP_Init>
  printf("Init SDcard...\r\n");
 8000744:	4820      	ldr	r0, [pc, #128]	@ (80007c8 <main+0xd4>)
 8000746:	f00a fe51 	bl	800b3ec <puts>
  SD_Init();
 800074a:	f008 facf 	bl	8008cec <SD_Init>
  printf("Install factory TP set...\r\n");
 800074e:	481f      	ldr	r0, [pc, #124]	@ (80007cc <main+0xd8>)
 8000750:	f00a fe4c 	bl	800b3ec <puts>
  TP_GetAdFac();//Get the default calibration factor
 8000754:	f009 ff56 	bl	800a604 <TP_GetAdFac>
  printf("Initialization for Electronic load \r\n");
 8000758:	481d      	ldr	r0, [pc, #116]	@ (80007d0 <main+0xdc>)
 800075a:	f00a fe47 	bl	800b3ec <puts>
  LOAD_Init();
 800075e:	f00a f975 	bl	800aa4c <LOAD_Init>
	printf("**********Touch Draw Board**********\r\n");
	TP_GetAdFac();//Get the default calibration factor
	TP_Dialog();//initialize the drawing board
*/

	uint32_t previousTick = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]

	DEV_TIME sDev_time;
	sDev_time.Hour = 00;
 8000766:	2300      	movs	r3, #0
 8000768:	713b      	strb	r3, [r7, #4]
	sDev_time.Min = 00;
 800076a:	2300      	movs	r3, #0
 800076c:	717b      	strb	r3, [r7, #5]
	sDev_time.Sec = 00;
 800076e:	2300      	movs	r3, #0
 8000770:	71bb      	strb	r3, [r7, #6]

	LCD_Clear(LCD_BACKGROUND);
 8000772:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000776:	f008 fe39 	bl	80093ec <LCD_Clear>
	TP_MenuDialog();
 800077a:	f009 ffbb 	bl	800a6f4 <TP_MenuDialog>
	  //GUI_Show();
	  //LCD_Show_bmp(Bmp_ScanDir , Lcd_ScanDir);
	  //TP_DrawBoard();
	  //GUI_DisGrayMap(0, 0, gImage_ninja);

	  TP_MenuTouch();
 800077e:	f00a f8cd 	bl	800a91c <TP_MenuTouch>
	  TP_IndicationsUnit();
 8000782:	f00a f88d 	bl	800a8a0 <TP_IndicationsUnit>

	  if (HAL_GetTick() - previousTick >= 1000) {
 8000786:	f000 fbf5 	bl	8000f74 <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000794:	d3f3      	bcc.n	800077e <main+0x8a>
		  previousTick = HAL_GetTick();
 8000796:	f000 fbed 	bl	8000f74 <HAL_GetTick>
 800079a:	60f8      	str	r0, [r7, #12]

		  sDev_time.Sec++;
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	3301      	adds	r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	71bb      	strb	r3, [r7, #6]
		  GUI_Showtime(0, 0, 126, 25, &sDev_time, BLUE);
 80007a4:	231f      	movs	r3, #31
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	463b      	mov	r3, r7
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2319      	movs	r3, #25
 80007ae:	227e      	movs	r2, #126	@ 0x7e
 80007b0:	2100      	movs	r1, #0
 80007b2:	2000      	movs	r0, #0
 80007b4:	f009 faac 	bl	8009d10 <GUI_Showtime>
	  TP_MenuTouch();
 80007b8:	e7e1      	b.n	800077e <main+0x8a>
 80007ba:	bf00      	nop
 80007bc:	0800bf6c 	.word	0x0800bf6c
 80007c0:	0800bf8c 	.word	0x0800bf8c
 80007c4:	0800bf9c 	.word	0x0800bf9c
 80007c8:	0800bfb0 	.word	0x0800bfb0
 80007cc:	0800bfc0 	.word	0x0800bfc0
 80007d0:	0800bfdc 	.word	0x0800bfdc

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	@ 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	@ 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00a fee2 	bl	800b5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <SystemClock_Config+0xc8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	4a26      	ldr	r2, [pc, #152]	@ (800089c <SystemClock_Config+0xc8>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	@ 0x40
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <SystemClock_Config+0xc8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <SystemClock_Config+0xcc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a20      	ldr	r2, [pc, #128]	@ (80008a0 <SystemClock_Config+0xcc>)
 800081e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <SystemClock_Config+0xcc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000834:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000844:	2310      	movs	r3, #16
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 123;
 8000848:	237b      	movs	r3, #123	@ 0x7b
 800084a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f002 f8d5 	bl	8002a08 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000864:	f000 f84d 	bl	8000902 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086c:	2302      	movs	r3, #2
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2103      	movs	r1, #3
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fb37 	bl	8002ef8 <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000890:	f000 f837 	bl	8000902 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	3750      	adds	r7, #80	@ 0x50
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <USB_Send_Message>:

/* USER CODE BEGIN 4 */
void USB_Send_Message(const char *msg) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff fc97 	bl	80001e0 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f007 f8ae 	bl	8007a18 <CDC_Transmit_FS>
	HAL_Delay(10);
 80008bc:	200a      	movs	r0, #10
 80008be:	f000 fb65 	bl	8000f8c <HAL_Delay>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_write>:
void UART_Send(const char *msg) {
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

// Опционально: перенаправляем printf на SWO (удобно для отладки)
int _write(int file, char *ptr, int len) {
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	e009      	b.n	80008f0 <_write+0x26>
        ITM_SendChar(ptr[i]);
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fedd 	bl	80006a4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	3301      	adds	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dbf1      	blt.n	80008dc <_write+0x12>
    }
    return len;
 80008f8:	687b      	ldr	r3, [r7, #4]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000906:	b672      	cpsid	i
}
 8000908:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090a:	bf00      	nop
 800090c:	e7fd      	b.n	800090a <Error_Handler+0x8>
	...

08000910 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_SPI1_Init+0x64>)
 8000916:	4a18      	ldr	r2, [pc, #96]	@ (8000978 <MX_SPI1_Init+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_SPI1_Init+0x64>)
 800091c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_SPI1_Init+0x64>)
 800093c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000940:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_SPI1_Init+0x64>)
 8000944:	2210      	movs	r2, #16
 8000946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_SPI1_Init+0x64>)
 800095c:	220a      	movs	r2, #10
 800095e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_SPI1_Init+0x64>)
 8000962:	f002 fca9 	bl	80032b8 <HAL_SPI_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800096c:	f7ff ffc9 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000019c 	.word	0x2000019c
 8000978:	40013000 	.word	0x40013000

0800097c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <HAL_SPI_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12b      	bne.n	80009f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <HAL_SPI_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009d6:	23e0      	movs	r3, #224	@ 0xe0
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009e6:	2305      	movs	r3, #5
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <HAL_SPI_MspInit+0x8c>)
 80009f2:	f000 fc01 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	@ 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40013000 	.word	0x40013000
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <NMI_Handler+0x4>

08000a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <MemManage_Handler+0x4>

08000a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab2:	f000 fa4b 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <OTG_FS_IRQHandler+0x10>)
 8000ac2:	f000 fe92 	bl	80017ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000176c 	.word	0x2000176c

08000ad0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
  }

  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b32:	605a      	str	r2, [r3, #4]
  return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_isatty>:

int _isatty(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f00a fd60 	bl	800b668 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20020000 	.word	0x20020000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	200001f4 	.word	0x200001f4
 8000bdc:	200022a0 	.word	0x200022a0

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c26:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000c28:	4a22      	ldr	r2, [pc, #136]	@ (8000cb4 <MX_TIM3_Init+0xb0>)
 8000c2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000c3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c4c:	4818      	ldr	r0, [pc, #96]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000c4e:	f002 fbbc 	bl	80033ca <HAL_TIM_PWM_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c58:	f7ff fe53 	bl	8000902 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4811      	ldr	r0, [pc, #68]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000c6c:	f002 ffa6 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000c76:	f7ff fe44 	bl	8000902 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7a:	2360      	movs	r3, #96	@ 0x60
 8000c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000c92:	f002 fc99 	bl	80035c8 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c9c:	f7ff fe31 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca0:	4803      	ldr	r0, [pc, #12]	@ (8000cb0 <MX_TIM3_Init+0xac>)
 8000ca2:	f000 f82b 	bl	8000cfc <HAL_TIM_MspPostInit>

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200001f8 	.word	0x200001f8
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d10d      	bne.n	8000ce6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <HAL_TIM_PWM_MspInit+0x40>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a09      	ldr	r2, [pc, #36]	@ (8000cf8 <HAL_TIM_PWM_MspInit+0x40>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <HAL_TIM_PWM_MspInit+0x40>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40000400 	.word	0x40000400
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <HAL_TIM_MspPostInit+0x68>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d11d      	bne.n	8000d5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	@ (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <HAL_TIM_MspPostInit+0x70>)
 8000d56:	f000 fa4f 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40000400 	.word	0x40000400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400

08000d70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <MX_USART2_UART_Init+0x50>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_USART2_UART_Init+0x4c>)
 8000da8:	f002 ff76 	bl	8003c98 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000db2:	f7ff fda6 	bl	8000902 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000240 	.word	0x20000240
 8000dc0:	40004400 	.word	0x40004400

08000dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <HAL_UART_MspInit+0x84>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12b      	bne.n	8000e3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_UART_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_UART_MspInit+0x8c>)
 8000e3a:	f000 f9dd 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e58:	f7ff fec2 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f00a fbf7 	bl	800b674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fc35 	bl	80006f4 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000e98:	080104f4 	.word	0x080104f4
  ldr r2, =_sbss
 8000e9c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000ea0:	2000229c 	.word	0x2000229c

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f94f 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fd96 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f967 	bl	80011de <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f92f 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000288 	.word	0x20000288

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000288 	.word	0x20000288

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	@ (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff3e 	bl	800101c <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff31 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e159      	b.n	80014c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8148 	bne.w	80014c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	2b02      	cmp	r3, #2
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a2 	beq.w	80014c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	4a56      	ldr	r2, [pc, #344]	@ (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138c:	6453      	str	r3, [r2, #68]	@ 0x44
 800138e:	4b54      	ldr	r3, [pc, #336]	@ (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a52      	ldr	r2, [pc, #328]	@ (80014e4 <HAL_GPIO_Init+0x2ec>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a49      	ldr	r2, [pc, #292]	@ (80014e8 <HAL_GPIO_Init+0x2f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x202>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a48      	ldr	r2, [pc, #288]	@ (80014ec <HAL_GPIO_Init+0x2f4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x1fe>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a47      	ldr	r2, [pc, #284]	@ (80014f0 <HAL_GPIO_Init+0x2f8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a46      	ldr	r2, [pc, #280]	@ (80014f4 <HAL_GPIO_Init+0x2fc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x1f6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a45      	ldr	r2, [pc, #276]	@ (80014f8 <HAL_GPIO_Init+0x300>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x1f2>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	@ (80014e4 <HAL_GPIO_Init+0x2ec>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <HAL_GPIO_Init+0x304>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a2f      	ldr	r2, [pc, #188]	@ (80014fc <HAL_GPIO_Init+0x304>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HAL_GPIO_Init+0x304>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a24      	ldr	r2, [pc, #144]	@ (80014fc <HAL_GPIO_Init+0x304>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <HAL_GPIO_Init+0x304>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001492:	4a1a      	ldr	r2, [pc, #104]	@ (80014fc <HAL_GPIO_Init+0x304>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <HAL_GPIO_Init+0x304>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014bc:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <HAL_GPIO_Init+0x304>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f aea2 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af02      	add	r7, sp, #8
 8001568:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e101      	b.n	8001778 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f006 fb8a 	bl	8007ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2203      	movs	r2, #3
 8001598:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015a2:	d102      	bne.n	80015aa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 ff4d 	bl	800444e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7c1a      	ldrb	r2, [r3, #16]
 80015bc:	f88d 2000 	strb.w	r2, [sp]
 80015c0:	3304      	adds	r3, #4
 80015c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c4:	f002 fe2c 	bl	8004220 <USB_CoreInit>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e0ce      	b.n	8001778 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 ff45 	bl	8004470 <USB_SetCurrentMode>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0bf      	b.n	8001778 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e04a      	b.n	8001694 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	3315      	adds	r3, #21
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	3314      	adds	r3, #20
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	b298      	uxth	r0, r3
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	332e      	adds	r3, #46	@ 0x2e
 800163a:	4602      	mov	r2, r0
 800163c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	3318      	adds	r3, #24
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	331c      	adds	r3, #28
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3320      	adds	r3, #32
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3324      	adds	r3, #36	@ 0x24
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	3301      	adds	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	791b      	ldrb	r3, [r3, #4]
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3af      	bcc.n	80015fe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e044      	b.n	800172e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001712:	7bfa      	ldrb	r2, [r7, #15]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3301      	adds	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	791b      	ldrb	r3, [r3, #4]
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3b5      	bcc.n	80016a4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7c1a      	ldrb	r2, [r3, #16]
 8001740:	f88d 2000 	strb.w	r2, [sp]
 8001744:	3304      	adds	r3, #4
 8001746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001748:	f002 fede 	bl	8004508 <USB_DevInit>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2202      	movs	r2, #2
 8001756:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00c      	b.n	8001778 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f003 ff28 	bl	80055c6 <USB_DevDisconnect>

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_PCD_Start+0x1c>
 8001798:	2302      	movs	r3, #2
 800179a:	e022      	b.n	80017e2 <HAL_PCD_Start+0x62>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fe2f 	bl	800442c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fed6 	bl	8005584 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017ea:	b590      	push	{r4, r7, lr}
 80017ec:	b08d      	sub	sp, #52	@ 0x34
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f003 ff94 	bl	800572e <USB_GetMode>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	f040 848c 	bne.w	8002126 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fef8 	bl	8005608 <USB_ReadInterrupts>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8482 	beq.w	8002124 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fee5 	bl	8005608 <USB_ReadInterrupts>
 800183e:	4603      	mov	r3, r0
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b02      	cmp	r3, #2
 8001846:	d107      	bne.n	8001858 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f002 0202 	and.w	r2, r2, #2
 8001856:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fed3 	bl	8005608 <USB_ReadInterrupts>
 8001862:	4603      	mov	r3, r0
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2b10      	cmp	r3, #16
 800186a:	d161      	bne.n	8001930 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0210 	bic.w	r2, r2, #16
 800187a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f003 020f 	and.w	r2, r3, #15
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	3304      	adds	r3, #4
 800189a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80018a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018a6:	d124      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d035      	beq.n	8001920 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	6a38      	ldr	r0, [r7, #32]
 80018c8:	f003 fd0a 	bl	80052e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d8:	441a      	add	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ea:	441a      	add	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	e016      	b.n	8001920 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80018f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80018fc:	d110      	bne.n	8001920 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001904:	2208      	movs	r2, #8
 8001906:	4619      	mov	r1, r3
 8001908:	6a38      	ldr	r0, [r7, #32]
 800190a:	f003 fce9 	bl	80052e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800191a:	441a      	add	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0210 	orr.w	r2, r2, #16
 800192e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f003 fe67 	bl	8005608 <USB_ReadInterrupts>
 800193a:	4603      	mov	r3, r0
 800193c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001940:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001944:	f040 80a7 	bne.w	8001a96 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fe6c 	bl	800562e <USB_ReadDevAllOutEpInterrupt>
 8001956:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001958:	e099      	b.n	8001a8e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 808e 	beq.w	8001a82 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f003 fe90 	bl	8005696 <USB_ReadDevOutEPInterrupt>
 8001976:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00c      	beq.n	800199c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	015a      	lsls	r2, r3, #5
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	4413      	add	r3, r2
 800198a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800198e:	461a      	mov	r2, r3
 8001990:	2301      	movs	r3, #1
 8001992:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001994:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fea4 	bl	80026e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00c      	beq.n	80019c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019b2:	461a      	mov	r2, r3
 80019b4:	2308      	movs	r3, #8
 80019b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 ff7a 	bl	80028b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019d6:	461a      	mov	r2, r3
 80019d8:	2310      	movs	r3, #16
 80019da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d030      	beq.n	8001a48 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ee:	2b80      	cmp	r3, #128	@ 0x80
 80019f0:	d109      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a04:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	3304      	adds	r3, #4
 8001a1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	78db      	ldrb	r3, [r3, #3]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2200      	movs	r2, #0
 8001a28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f006 fa35 	bl	8007ea0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a42:	461a      	mov	r2, r3
 8001a44:	2302      	movs	r3, #2
 8001a46:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2320      	movs	r3, #32
 8001a62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a80:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	3301      	adds	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f47f af62 	bne.w	800195a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fdb4 	bl	8005608 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001aaa:	f040 80db 	bne.w	8001c64 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fdd5 	bl	8005662 <USB_ReadDevAllInEpInterrupt>
 8001ab8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001abe:	e0cd      	b.n	8001c5c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80c2 	beq.w	8001c50 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fdfb 	bl	80056d2 <USB_ReadDevInEPInterrupt>
 8001adc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d057      	beq.n	8001b98 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	2201      	movs	r2, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69f9      	ldr	r1, [r7, #28]
 8001b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001b08:	4013      	ands	r3, r2
 8001b0a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	799b      	ldrb	r3, [r3, #6]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d132      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	3320      	adds	r3, #32
 8001b36:	6819      	ldr	r1, [r3, #0]
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4403      	add	r3, r0
 8001b46:	331c      	adds	r3, #28
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4419      	add	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4403      	add	r3, r0
 8001b5a:	3320      	adds	r3, #32
 8001b5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d113      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x3a2>
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3324      	adds	r3, #36	@ 0x24
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001b84:	461a      	mov	r2, r3
 8001b86:	2101      	movs	r1, #1
 8001b88:	f003 fe02 	bl	8005790 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4619      	mov	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f006 f909 	bl	8007daa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2310      	movs	r3, #16
 8001bce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001be6:	461a      	mov	r2, r3
 8001be8:	2340      	movs	r3, #64	@ 0x40
 8001bea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d023      	beq.n	8001c3e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bf6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bf8:	6a38      	ldr	r0, [r7, #32]
 8001bfa:	f002 fde9 	bl	80047d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	3310      	adds	r3, #16
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3304      	adds	r3, #4
 8001c10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	78db      	ldrb	r3, [r3, #3]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d108      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f006 f94c 	bl	8007ec4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fcbd 	bl	80025ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	3301      	adds	r3, #1
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f47f af2e 	bne.w	8001ac0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fccd 	bl	8005608 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c78:	d122      	bne.n	8001cc0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d108      	bne.n	8001caa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fea4 	bl	80029f0 <HAL_PCDEx_LPM_Callback>
 8001ca8:	e002      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f006 f8ea 	bl	8007e84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fc9f 	bl	8005608 <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cd4:	d112      	bne.n	8001cfc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f006 f8a6 	bl	8007e38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001cfa:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fc81 	bl	8005608 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d10:	f040 80b7 	bne.w	8001e82 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2110      	movs	r1, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 fd4e 	bl	80047d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d38:	e046      	b.n	8001dc8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d46:	461a      	mov	r2, r3
 8001d48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d4c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d5e:	0151      	lsls	r1, r2, #5
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	440a      	add	r2, r1
 8001d64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001d68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d80:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d92:	0151      	lsls	r1, r2, #5
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	440a      	add	r2, r1
 8001d98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001d9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001da0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001db2:	0151      	lsls	r1, r2, #5
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	440a      	add	r2, r1
 8001db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001dbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001dc0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d3b2      	bcc.n	8001d3a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001de2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001de6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7bdb      	ldrb	r3, [r3, #15]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d016      	beq.n	8001e1e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e00:	f043 030b 	orr.w	r3, r3, #11
 8001e04:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e16:	f043 030b 	orr.w	r3, r3, #11
 8001e1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1c:	e015      	b.n	8001e4a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e30:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001e34:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e44:	f043 030b 	orr.w	r3, r3, #11
 8001e48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e58:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001e5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f003 fc8f 	bl	8005790 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fbbe 	bl	8005608 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e96:	d123      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fc54 	bl	800574a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fd0b 	bl	80048c2 <USB_GetDevSpeed>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681c      	ldr	r4, [r3, #0]
 8001eb8:	f001 f9ca 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f002 fa0f 	bl	80042e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f005 ff95 	bl	8007dfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fb8f 	bl	8005608 <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d10a      	bne.n	8001f0a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f005 ff72 	bl	8007dde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f002 0208 	and.w	r2, r2, #8
 8001f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fb7a 	bl	8005608 <USB_ReadInterrupts>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1a:	2b80      	cmp	r3, #128	@ 0x80
 8001f1c:	d123      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2e:	e014      	b.n	8001f5a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fb0a 	bl	8002568 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	3301      	adds	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	791b      	ldrb	r3, [r3, #4]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d3e4      	bcc.n	8001f30 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fb4c 	bl	8005608 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f7a:	d13c      	bne.n	8001ff6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f80:	e02b      	b.n	8001fda <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3318      	adds	r3, #24
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d115      	bne.n	8001fd4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001fa8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da12      	bge.n	8001fd4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3317      	adds	r3, #23
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4619      	mov	r1, r3
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 faca 	bl	8002568 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	791b      	ldrb	r3, [r3, #4]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d3cd      	bcc.n	8001f82 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 fb04 	bl	8005608 <USB_ReadInterrupts>
 8002000:	4603      	mov	r3, r0
 8002002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800200a:	d156      	bne.n	80020ba <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800200c:	2301      	movs	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002010:	e045      	b.n	800209e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d12e      	bne.n	8002098 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800203a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800203c:	2b00      	cmp	r3, #0
 800203e:	da2b      	bge.n	8002098 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	0c1a      	lsrs	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800204a:	4053      	eors	r3, r2
 800204c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002050:	2b00      	cmp	r3, #0
 8002052:	d121      	bne.n	8002098 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002090:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002094:	6053      	str	r3, [r2, #4]
            break;
 8002096:	e008      	b.n	80020aa <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	3301      	adds	r3, #1
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	791b      	ldrb	r3, [r3, #4]
 80020a2:	461a      	mov	r2, r3
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d3b3      	bcc.n	8002012 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80020b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 faa2 	bl	8005608 <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ce:	d10a      	bne.n	80020e6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f005 ff09 	bl	8007ee8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80020e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fa8c 	bl	8005608 <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d115      	bne.n	8002126 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f005 fef9 	bl	8007f04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	e000      	b.n	8002126 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002124:	bf00      	nop
    }
  }
}
 8002126:	3734      	adds	r7, #52	@ 0x34
 8002128:	46bd      	mov	sp, r7
 800212a:	bd90      	pop	{r4, r7, pc}

0800212c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_PCD_SetAddress+0x1a>
 8002142:	2302      	movs	r3, #2
 8002144:	e012      	b.n	800216c <HAL_PCD_SetAddress+0x40>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f003 f9eb 	bl	8005538 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4603      	mov	r3, r0
 8002184:	70fb      	strb	r3, [r7, #3]
 8002186:	460b      	mov	r3, r1
 8002188:	803b      	strh	r3, [r7, #0]
 800218a:	4613      	mov	r3, r2
 800218c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	da0f      	bge.n	80021ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	3310      	adds	r3, #16
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	3304      	adds	r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	705a      	strb	r2, [r3, #1]
 80021b8:	e00f      	b.n	80021da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80021e6:	883b      	ldrh	r3, [r7, #0]
 80021e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	78ba      	ldrb	r2, [r7, #2]
 80021f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	785b      	ldrb	r3, [r3, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002208:	78bb      	ldrb	r3, [r7, #2]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d102      	bne.n	8002214 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_PCD_EP_Open+0xae>
 800221e:	2302      	movs	r3, #2
 8002220:	e00e      	b.n	8002240 <HAL_PCD_EP_Open+0xcc>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fb6b 	bl	800490c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800223e:	7afb      	ldrb	r3, [r7, #11]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002258:	2b00      	cmp	r3, #0
 800225a:	da0f      	bge.n	800227c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 020f 	and.w	r2, r3, #15
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	3310      	adds	r3, #16
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	705a      	strb	r2, [r3, #1]
 800227a:	e00f      	b.n	800229c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 020f 	and.w	r2, r3, #15
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	3304      	adds	r3, #4
 8002294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_PCD_EP_Close+0x6e>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e00e      	b.n	80022d4 <HAL_PCD_EP_Close+0x8c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 fba9 	bl	8004a1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	460b      	mov	r3, r1
 80022ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	f003 020f 	and.w	r2, r3, #15
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2200      	movs	r2, #0
 8002316:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2200      	movs	r2, #0
 800231c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231e:	7afb      	ldrb	r3, [r7, #11]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	b2da      	uxtb	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	799b      	ldrb	r3, [r3, #6]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	799b      	ldrb	r3, [r3, #6]
 8002340:	461a      	mov	r2, r3
 8002342:	6979      	ldr	r1, [r7, #20]
 8002344:	f002 fc46 	bl	8004bd4 <USB_EPStartXfer>

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 020f 	and.w	r2, r3, #15
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002374:	681b      	ldr	r3, [r3, #0]
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	460b      	mov	r3, r1
 8002390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3310      	adds	r3, #16
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2200      	movs	r2, #0
 80023ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2201      	movs	r2, #1
 80023c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c2:	7afb      	ldrb	r3, [r7, #11]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	799b      	ldrb	r3, [r3, #6]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d102      	bne.n	80023dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	799b      	ldrb	r3, [r3, #6]
 80023e4:	461a      	mov	r2, r3
 80023e6:	6979      	ldr	r1, [r7, #20]
 80023e8:	f002 fbf4 	bl	8004bd4 <USB_EPStartXfer>

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	7912      	ldrb	r2, [r2, #4]
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e04f      	b.n	80024b4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002418:	2b00      	cmp	r3, #0
 800241a:	da0f      	bge.n	800243c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 020f 	and.w	r2, r3, #15
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3310      	adds	r3, #16
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	705a      	strb	r2, [r3, #1]
 800243a:	e00d      	b.n	8002458 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_PCD_EP_SetStall+0x82>
 8002474:	2302      	movs	r3, #2
 8002476:	e01d      	b.n	80024b4 <HAL_PCD_EP_SetStall+0xbe>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	4618      	mov	r0, r3
 8002488:	f002 ff82 	bl	8005390 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7999      	ldrb	r1, [r3, #6]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024a4:	461a      	mov	r2, r3
 80024a6:	f003 f973 	bl	8005790 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	7912      	ldrb	r2, [r2, #4]
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e042      	b.n	8002560 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da0f      	bge.n	8002502 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	3310      	adds	r3, #16
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	705a      	strb	r2, [r3, #1]
 8002500:	e00f      	b.n	8002522 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	f003 020f 	and.w	r2, r3, #15
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	3304      	adds	r3, #4
 800251a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	b2da      	uxtb	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_PCD_EP_ClrStall+0x86>
 800253e:	2302      	movs	r3, #2
 8002540:	e00e      	b.n	8002560 <HAL_PCD_EP_ClrStall+0xa4>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68f9      	ldr	r1, [r7, #12]
 8002550:	4618      	mov	r0, r3
 8002552:	f002 ff8b 	bl	800546c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002578:	2b00      	cmp	r3, #0
 800257a:	da0c      	bge.n	8002596 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 020f 	and.w	r2, r3, #15
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	3310      	adds	r3, #16
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	e00c      	b.n	80025b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 020f 	and.w	r2, r3, #15
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fdaa 	bl	8005110 <USB_EPStopXfer>
 80025bc:	4603      	mov	r3, r0
 80025be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025c0:	7afb      	ldrb	r3, [r7, #11]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b08a      	sub	sp, #40	@ 0x28
 80025ce:	af02      	add	r7, sp, #8
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	3310      	adds	r3, #16
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	3304      	adds	r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d901      	bls.n	8002602 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06b      	b.n	80026da <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	429a      	cmp	r2, r3
 8002616:	d902      	bls.n	800261e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3303      	adds	r3, #3
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002626:	e02a      	b.n	800267e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	429a      	cmp	r2, r3
 800263c:	d902      	bls.n	8002644 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	3303      	adds	r3, #3
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	68d9      	ldr	r1, [r3, #12]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4603      	mov	r3, r0
 8002660:	6978      	ldr	r0, [r7, #20]
 8002662:	f002 fdff 	bl	8005264 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	441a      	add	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	441a      	add	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	429a      	cmp	r2, r3
 8002692:	d809      	bhi.n	80026a8 <PCD_WriteEmptyTxFifo+0xde>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800269c:	429a      	cmp	r2, r3
 800269e:	d203      	bcs.n	80026a8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1bf      	bne.n	8002628 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d811      	bhi.n	80026d8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	2201      	movs	r2, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	6939      	ldr	r1, [r7, #16]
 80026d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80026d4:	4013      	ands	r3, r2
 80026d6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	333c      	adds	r3, #60	@ 0x3c
 80026fc:	3304      	adds	r3, #4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	799b      	ldrb	r3, [r3, #6]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d17b      	bne.n	8002812 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	4a61      	ldr	r2, [pc, #388]	@ (80028ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	f240 80b9 	bls.w	80028a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80b3 	beq.w	80028a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002746:	461a      	mov	r2, r3
 8002748:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800274c:	6093      	str	r3, [r2, #8]
 800274e:	e0a7      	b.n	80028a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4413      	add	r3, r2
 8002762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002766:	461a      	mov	r2, r3
 8002768:	2320      	movs	r3, #32
 800276a:	6093      	str	r3, [r2, #8]
 800276c:	e098      	b.n	80028a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 8093 	bne.w	80028a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	4a4b      	ldr	r2, [pc, #300]	@ (80028ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d90f      	bls.n	80027a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002798:	461a      	mov	r2, r3
 800279a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800279e:	6093      	str	r3, [r2, #8]
 80027a0:	e07e      	b.n	80028a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	3304      	adds	r3, #4
 80027b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a1a      	ldr	r2, [r3, #32]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	0159      	lsls	r1, r3, #5
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d114      	bne.n	8002804 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027ec:	461a      	mov	r2, r3
 80027ee:	2101      	movs	r1, #1
 80027f0:	f002 ffce 	bl	8005790 <USB_EP0_OutStart>
 80027f4:	e006      	b.n	8002804 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	441a      	add	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f005 fab2 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
 8002810:	e046      	b.n	80028a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	4a26      	ldr	r2, [pc, #152]	@ (80028b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d124      	bne.n	8002864 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002830:	461a      	mov	r2, r3
 8002832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002836:	6093      	str	r3, [r2, #8]
 8002838:	e032      	b.n	80028a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	2320      	movs	r3, #32
 8002854:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f005 fa89 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
 8002862:	e01d      	b.n	80028a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d114      	bne.n	8002894 <PCD_EP_OutXfrComplete_int+0x1b0>
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d108      	bne.n	8002894 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800288c:	461a      	mov	r2, r3
 800288e:	2100      	movs	r1, #0
 8002890:	f002 ff7e 	bl	8005790 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f005 fa6a 	bl	8007d74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	4f54300a 	.word	0x4f54300a
 80028b0:	4f54310a 	.word	0x4f54310a

080028b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	333c      	adds	r3, #60	@ 0x3c
 80028cc:	3304      	adds	r3, #4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4a15      	ldr	r2, [pc, #84]	@ (800293c <PCD_EP_OutSetupPacket_int+0x88>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d90e      	bls.n	8002908 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002900:	461a      	mov	r2, r3
 8002902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002906:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f005 fa21 	bl	8007d50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <PCD_EP_OutSetupPacket_int+0x88>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d90c      	bls.n	8002930 <PCD_EP_OutSetupPacket_int+0x7c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	799b      	ldrb	r3, [r3, #6]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d108      	bne.n	8002930 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002928:	461a      	mov	r2, r3
 800292a:	2101      	movs	r1, #1
 800292c:	f002 ff30 	bl	8005790 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	4f54300a 	.word	0x4f54300a

08002940 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	70fb      	strb	r3, [r7, #3]
 800294c:	4613      	mov	r3, r2
 800294e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d107      	bne.n	800296e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800295e:	883b      	ldrh	r3, [r7, #0]
 8002960:	0419      	lsls	r1, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	430a      	orrs	r2, r1
 800296a:	629a      	str	r2, [r3, #40]	@ 0x28
 800296c:	e028      	b.n	80029c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4413      	add	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	e00d      	b.n	800299e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	3340      	adds	r3, #64	@ 0x40
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4413      	add	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	3301      	adds	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d3ec      	bcc.n	8002982 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029a8:	883b      	ldrh	r3, [r7, #0]
 80029aa:	0418      	lsls	r0, r3, #16
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	4302      	orrs	r2, r0
 80029b8:	3340      	adds	r3, #64	@ 0x40
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e267      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d075      	beq.n	8002b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a26:	4b88      	ldr	r3, [pc, #544]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d00c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a32:	4b85      	ldr	r3, [pc, #532]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d112      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3e:	4b82      	ldr	r3, [pc, #520]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a4a:	d10b      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d05b      	beq.n	8002b10 <HAL_RCC_OscConfig+0x108>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d157      	bne.n	8002b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e242      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x74>
 8002a6e:	4b76      	ldr	r3, [pc, #472]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a75      	ldr	r2, [pc, #468]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e01d      	b.n	8002ab8 <HAL_RCC_OscConfig+0xb0>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x98>
 8002a86:	4b70      	ldr	r3, [pc, #448]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6f      	ldr	r2, [pc, #444]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b6d      	ldr	r3, [pc, #436]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a6c      	ldr	r2, [pc, #432]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0xb0>
 8002aa0:	4b69      	ldr	r3, [pc, #420]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a68      	ldr	r2, [pc, #416]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b66      	ldr	r3, [pc, #408]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a65      	ldr	r2, [pc, #404]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fa58 	bl	8000f74 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fa54 	bl	8000f74 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	@ 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e207      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b5b      	ldr	r3, [pc, #364]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xc0>
 8002ae6:	e014      	b.n	8002b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fa44 	bl	8000f74 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe fa40 	bl	8000f74 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	@ 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e1f3      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	4b51      	ldr	r3, [pc, #324]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0xe8>
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d063      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2a:	4b47      	ldr	r3, [pc, #284]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d11c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b36:	4b44      	ldr	r3, [pc, #272]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d116      	bne.n	8002b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b42:	4b41      	ldr	r3, [pc, #260]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCC_OscConfig+0x152>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e1c7      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4937      	ldr	r1, [pc, #220]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	e03a      	b.n	8002be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b78:	4b34      	ldr	r3, [pc, #208]	@ (8002c4c <HAL_RCC_OscConfig+0x244>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe f9f9 	bl	8000f74 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b86:	f7fe f9f5 	bl	8000f74 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e1a8      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba4:	4b28      	ldr	r3, [pc, #160]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4925      	ldr	r1, [pc, #148]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]
 8002bb8:	e015      	b.n	8002be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bba:	4b24      	ldr	r3, [pc, #144]	@ (8002c4c <HAL_RCC_OscConfig+0x244>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe f9d8 	bl	8000f74 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7fe f9d4 	bl	8000f74 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e187      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d036      	beq.n	8002c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfa:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <HAL_RCC_OscConfig+0x248>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe f9b8 	bl	8000f74 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fe f9b4 	bl	8000f74 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e167      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x200>
 8002c26:	e01b      	b.n	8002c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c28:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <HAL_RCC_OscConfig+0x248>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe f9a1 	bl	8000f74 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	e00e      	b.n	8002c54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c36:	f7fe f99d 	bl	8000f74 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d907      	bls.n	8002c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e150      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	42470000 	.word	0x42470000
 8002c50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b88      	ldr	r3, [pc, #544]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ea      	bne.n	8002c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8097 	beq.w	8002d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c72:	4b81      	ldr	r3, [pc, #516]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	4b7d      	ldr	r3, [pc, #500]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	4a7c      	ldr	r2, [pc, #496]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b77      	ldr	r3, [pc, #476]	@ (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d118      	bne.n	8002cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002caa:	4b74      	ldr	r3, [pc, #464]	@ (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a73      	ldr	r2, [pc, #460]	@ (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe f95d 	bl	8000f74 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbe:	f7fe f959 	bl	8000f74 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e10c      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x2ea>
 8002ce4:	4b64      	ldr	r3, [pc, #400]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4a63      	ldr	r2, [pc, #396]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf0:	e01c      	b.n	8002d2c <HAL_RCC_OscConfig+0x324>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x30c>
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfe:	4a5e      	ldr	r2, [pc, #376]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d06:	4b5c      	ldr	r3, [pc, #368]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d12:	e00b      	b.n	8002d2c <HAL_RCC_OscConfig+0x324>
 8002d14:	4b58      	ldr	r3, [pc, #352]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d18:	4a57      	ldr	r2, [pc, #348]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d20:	4b55      	ldr	r3, [pc, #340]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d24:	4a54      	ldr	r2, [pc, #336]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d26:	f023 0304 	bic.w	r3, r3, #4
 8002d2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d015      	beq.n	8002d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe f91e 	bl	8000f74 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7fe f91a 	bl	8000f74 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0cb      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d52:	4b49      	ldr	r3, [pc, #292]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0ee      	beq.n	8002d3c <HAL_RCC_OscConfig+0x334>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d60:	f7fe f908 	bl	8000f74 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe f904 	bl	8000f74 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0b5      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ee      	bne.n	8002d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d90:	4b39      	ldr	r3, [pc, #228]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	4a38      	ldr	r2, [pc, #224]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a1 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da6:	4b34      	ldr	r3, [pc, #208]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d05c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d141      	bne.n	8002e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b31      	ldr	r3, [pc, #196]	@ (8002e80 <HAL_RCC_OscConfig+0x478>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe f8d8 	bl	8000f74 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe f8d4 	bl	8000f74 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e087      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b27      	ldr	r3, [pc, #156]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	491b      	ldr	r1, [pc, #108]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <HAL_RCC_OscConfig+0x478>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe f8ad 	bl	8000f74 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe f8a9 	bl	8000f74 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e05c      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e30:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x416>
 8002e3c:	e054      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <HAL_RCC_OscConfig+0x478>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe f896 	bl	8000f74 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe f892 	bl	8000f74 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e045      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x444>
 8002e6a:	e03d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e038      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_RCC_OscConfig+0x4ec>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d028      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d121      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0cc      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b68      	ldr	r3, [pc, #416]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d90c      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b65      	ldr	r3, [pc, #404]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b63      	ldr	r3, [pc, #396]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0b8      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f4c:	4b59      	ldr	r3, [pc, #356]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a58      	ldr	r2, [pc, #352]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f64:	4b53      	ldr	r3, [pc, #332]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a52      	ldr	r2, [pc, #328]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b50      	ldr	r3, [pc, #320]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	494d      	ldr	r1, [pc, #308]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d044      	beq.n	8003018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b47      	ldr	r3, [pc, #284]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d119      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e07f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e06f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e067      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b37      	ldr	r3, [pc, #220]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4934      	ldr	r1, [pc, #208]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fd ffc4 	bl	8000f74 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fd ffc0 	bl	8000f74 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e04f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b2b      	ldr	r3, [pc, #172]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b25      	ldr	r3, [pc, #148]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d20c      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b22      	ldr	r3, [pc, #136]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b20      	ldr	r3, [pc, #128]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e032      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4916      	ldr	r1, [pc, #88]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306a:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	490e      	ldr	r1, [pc, #56]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800307e:	f000 f821 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 8003082:	4602      	mov	r2, r0
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	490a      	ldr	r1, [pc, #40]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	5ccb      	ldrb	r3, [r1, r3]
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	4a09      	ldr	r2, [pc, #36]	@ (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800309a:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd ff24 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00
 80030b4:	40023800 	.word	0x40023800
 80030b8:	0800c7bc 	.word	0x0800c7bc
 80030bc:	20000000 	.word	0x20000000
 80030c0:	20000004 	.word	0x20000004

080030c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b090      	sub	sp, #64	@ 0x40
 80030ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030dc:	4b59      	ldr	r3, [pc, #356]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d00d      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x40>
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	f200 80a1 	bhi.w	8003230 <HAL_RCC_GetSysClockFreq+0x16c>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x34>
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x3a>
 80030f6:	e09b      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4b53      	ldr	r3, [pc, #332]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x184>)
 80030fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030fc:	e09b      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fe:	4b53      	ldr	r3, [pc, #332]	@ (800324c <HAL_RCC_GetSysClockFreq+0x188>)
 8003100:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003102:	e098      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003104:	4b4f      	ldr	r3, [pc, #316]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310e:	4b4d      	ldr	r3, [pc, #308]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d028      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311a:	4b4a      	ldr	r3, [pc, #296]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	2200      	movs	r2, #0
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	627a      	str	r2, [r7, #36]	@ 0x24
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800312c:	2100      	movs	r1, #0
 800312e:	4b47      	ldr	r3, [pc, #284]	@ (800324c <HAL_RCC_GetSysClockFreq+0x188>)
 8003130:	fb03 f201 	mul.w	r2, r3, r1
 8003134:	2300      	movs	r3, #0
 8003136:	fb00 f303 	mul.w	r3, r0, r3
 800313a:	4413      	add	r3, r2
 800313c:	4a43      	ldr	r2, [pc, #268]	@ (800324c <HAL_RCC_GetSysClockFreq+0x188>)
 800313e:	fba0 1202 	umull	r1, r2, r0, r2
 8003142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003144:	460a      	mov	r2, r1
 8003146:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800314a:	4413      	add	r3, r2
 800314c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800314e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003150:	2200      	movs	r2, #0
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	61fa      	str	r2, [r7, #28]
 8003156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800315e:	f7fd f897 	bl	8000290 <__aeabi_uldivmod>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4613      	mov	r3, r2
 8003168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800316a:	e053      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316c:	4b35      	ldr	r3, [pc, #212]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	2200      	movs	r2, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	617a      	str	r2, [r7, #20]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800317e:	f04f 0b00 	mov.w	fp, #0
 8003182:	4652      	mov	r2, sl
 8003184:	465b      	mov	r3, fp
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	0159      	lsls	r1, r3, #5
 8003190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003194:	0150      	lsls	r0, r2, #5
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	ebb2 080a 	subs.w	r8, r2, sl
 800319e:	eb63 090b 	sbc.w	r9, r3, fp
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031b6:	ebb2 0408 	subs.w	r4, r2, r8
 80031ba:	eb63 0509 	sbc.w	r5, r3, r9
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	00eb      	lsls	r3, r5, #3
 80031c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031cc:	00e2      	lsls	r2, r4, #3
 80031ce:	4614      	mov	r4, r2
 80031d0:	461d      	mov	r5, r3
 80031d2:	eb14 030a 	adds.w	r3, r4, sl
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	eb45 030b 	adc.w	r3, r5, fp
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ea:	4629      	mov	r1, r5
 80031ec:	028b      	lsls	r3, r1, #10
 80031ee:	4621      	mov	r1, r4
 80031f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f4:	4621      	mov	r1, r4
 80031f6:	028a      	lsls	r2, r1, #10
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fe:	2200      	movs	r2, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	60fa      	str	r2, [r7, #12]
 8003204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003208:	f7fd f842 	bl	8000290 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4613      	mov	r3, r2
 8003212:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	3301      	adds	r3, #1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003224:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800322e:	e002      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x184>)
 8003232:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003238:	4618      	mov	r0, r3
 800323a:	3740      	adds	r7, #64	@ 0x40
 800323c:	46bd      	mov	sp, r7
 800323e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	00f42400 	.word	0x00f42400
 800324c:	017d7840 	.word	0x017d7840

08003250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b03      	ldr	r3, [pc, #12]	@ (8003264 <HAL_RCC_GetHCLKFreq+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000000 	.word	0x20000000

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800326c:	f7ff fff0 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	@ (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	0800c7cc 	.word	0x0800c7cc

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003294:	f7ff ffdc 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0b5b      	lsrs	r3, r3, #13
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	@ (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	0800c7cc 	.word	0x0800c7cc

080032b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07b      	b.n	80033c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032da:	d009      	beq.n	80032f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	61da      	str	r2, [r3, #28]
 80032e2:	e005      	b.n	80032f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd fb36 	bl	800097c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003374:	ea42 0103 	orr.w	r1, r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	f003 0104 	and.w	r1, r3, #4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	f003 0210 	and.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e041      	b.n	8003460 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd fc61 	bl	8000cb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f000 f99f 	bl	800374c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_TIM_PWM_Start+0x24>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e022      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d109      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x3e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e015      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d109      	bne.n	80034c0 <HAL_TIM_PWM_Start+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e008      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e068      	b.n	80035ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0x82>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e8:	e013      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start+0x92>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003508:	e003      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fb28 	bl	8003b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a23      	ldr	r2, [pc, #140]	@ (80035b4 <HAL_TIM_PWM_Start+0x14c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d107      	bne.n	800353a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003538:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1d      	ldr	r2, [pc, #116]	@ (80035b4 <HAL_TIM_PWM_Start+0x14c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d018      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354c:	d013      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a19      	ldr	r2, [pc, #100]	@ (80035b8 <HAL_TIM_PWM_Start+0x150>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00e      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <HAL_TIM_PWM_Start+0x154>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a16      	ldr	r2, [pc, #88]	@ (80035c0 <HAL_TIM_PWM_Start+0x158>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <HAL_TIM_PWM_Start+0x15c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d111      	bne.n	800359a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b06      	cmp	r3, #6
 8003586:	d010      	beq.n	80035aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	e007      	b.n	80035aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	40014000 	.word	0x40014000

080035c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e0ae      	b.n	8003744 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	f200 809f 	bhi.w	8003734 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003735 	.word	0x08003735
 8003604:	08003735 	.word	0x08003735
 8003608:	08003735 	.word	0x08003735
 800360c:	08003671 	.word	0x08003671
 8003610:	08003735 	.word	0x08003735
 8003614:	08003735 	.word	0x08003735
 8003618:	08003735 	.word	0x08003735
 800361c:	080036b3 	.word	0x080036b3
 8003620:	08003735 	.word	0x08003735
 8003624:	08003735 	.word	0x08003735
 8003628:	08003735 	.word	0x08003735
 800362c:	080036f3 	.word	0x080036f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f90e 	bl	8003858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0208 	orr.w	r2, r2, #8
 800364a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0204 	bic.w	r2, r2, #4
 800365a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6999      	ldr	r1, [r3, #24]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	619a      	str	r2, [r3, #24]
      break;
 800366e:	e064      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f954 	bl	8003924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6999      	ldr	r1, [r3, #24]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	619a      	str	r2, [r3, #24]
      break;
 80036b0:	e043      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f99f 	bl	80039fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0208 	orr.w	r2, r2, #8
 80036cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0204 	bic.w	r2, r2, #4
 80036dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69d9      	ldr	r1, [r3, #28]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	61da      	str	r2, [r3, #28]
      break;
 80036f0:	e023      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f9e9 	bl	8003ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800370c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800371c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69d9      	ldr	r1, [r3, #28]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	61da      	str	r2, [r3, #28]
      break;
 8003732:	e002      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
      break;
 8003738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a37      	ldr	r2, [pc, #220]	@ (800383c <TIM_Base_SetConfig+0xf0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00f      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376a:	d00b      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a34      	ldr	r2, [pc, #208]	@ (8003840 <TIM_Base_SetConfig+0xf4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a33      	ldr	r2, [pc, #204]	@ (8003844 <TIM_Base_SetConfig+0xf8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d003      	beq.n	8003784 <TIM_Base_SetConfig+0x38>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a32      	ldr	r2, [pc, #200]	@ (8003848 <TIM_Base_SetConfig+0xfc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d108      	bne.n	8003796 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a28      	ldr	r2, [pc, #160]	@ (800383c <TIM_Base_SetConfig+0xf0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01b      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a4:	d017      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a25      	ldr	r2, [pc, #148]	@ (8003840 <TIM_Base_SetConfig+0xf4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a24      	ldr	r2, [pc, #144]	@ (8003844 <TIM_Base_SetConfig+0xf8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00f      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a23      	ldr	r2, [pc, #140]	@ (8003848 <TIM_Base_SetConfig+0xfc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a22      	ldr	r2, [pc, #136]	@ (800384c <TIM_Base_SetConfig+0x100>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a21      	ldr	r2, [pc, #132]	@ (8003850 <TIM_Base_SetConfig+0x104>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_Base_SetConfig+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a20      	ldr	r2, [pc, #128]	@ (8003854 <TIM_Base_SetConfig+0x108>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0c      	ldr	r2, [pc, #48]	@ (800383c <TIM_Base_SetConfig+0xf0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d103      	bne.n	8003816 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	601a      	str	r2, [r3, #0]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40014000 	.word	0x40014000
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800

08003858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f023 0201 	bic.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 0302 	bic.w	r3, r3, #2
 80038a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003920 <TIM_OC1_SetConfig+0xc8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10c      	bne.n	80038ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0308 	bic.w	r3, r3, #8
 80038ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a13      	ldr	r2, [pc, #76]	@ (8003920 <TIM_OC1_SetConfig+0xc8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d111      	bne.n	80038fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40010000 	.word	0x40010000

08003924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0210 	bic.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0320 	bic.w	r3, r3, #32
 800396e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1e      	ldr	r2, [pc, #120]	@ (80039f8 <TIM_OC2_SetConfig+0xd4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10d      	bne.n	80039a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800398a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800399e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <TIM_OC2_SetConfig+0xd4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d113      	bne.n	80039d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000

080039fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <TIM_OC3_SetConfig+0xd0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10d      	bne.n	8003a76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a14      	ldr	r2, [pc, #80]	@ (8003acc <TIM_OC3_SetConfig+0xd0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d113      	bne.n	8003aa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40010000 	.word	0x40010000

08003ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	031b      	lsls	r3, r3, #12
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a10      	ldr	r2, [pc, #64]	@ (8003b6c <TIM_OC4_SetConfig+0x9c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d109      	bne.n	8003b44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000

08003b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2201      	movs	r2, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	401a      	ands	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e050      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	@ (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c20:	d013      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a18      	ldr	r2, [pc, #96]	@ (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a16      	ldr	r2, [pc, #88]	@ (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a15      	ldr	r2, [pc, #84]	@ (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a13      	ldr	r2, [pc, #76]	@ (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40014000 	.word	0x40014000

08003c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e042      	b.n	8003d30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd f880 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2224      	movs	r2, #36	@ 0x24
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f82b 	bl	8003d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b0c0      	sub	sp, #256	@ 0x100
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	68d9      	ldr	r1, [r3, #12]
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	ea40 0301 	orr.w	r3, r0, r1
 8003d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d90:	f021 010c 	bic.w	r1, r1, #12
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	6999      	ldr	r1, [r3, #24]
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	ea40 0301 	orr.w	r3, r0, r1
 8003dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8004004 <UART_SetConfig+0x2cc>)
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d005      	beq.n	8003dd8 <UART_SetConfig+0xa0>
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8004008 <UART_SetConfig+0x2d0>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d104      	bne.n	8003de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7ff fa5a 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003de0:	e003      	b.n	8003dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003de2:	f7ff fa41 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8003de6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df4:	f040 810c 	bne.w	8004010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	1891      	adds	r1, r2, r2
 8003e10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e12:	415b      	adcs	r3, r3
 8003e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	eb12 0801 	adds.w	r8, r2, r1
 8003e20:	4629      	mov	r1, r5
 8003e22:	eb43 0901 	adc.w	r9, r3, r1
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e3a:	4690      	mov	r8, r2
 8003e3c:	4699      	mov	r9, r3
 8003e3e:	4623      	mov	r3, r4
 8003e40:	eb18 0303 	adds.w	r3, r8, r3
 8003e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e48:	462b      	mov	r3, r5
 8003e4a:	eb49 0303 	adc.w	r3, r9, r3
 8003e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e66:	460b      	mov	r3, r1
 8003e68:	18db      	adds	r3, r3, r3
 8003e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	eb42 0303 	adc.w	r3, r2, r3
 8003e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e7c:	f7fc fa08 	bl	8000290 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4b61      	ldr	r3, [pc, #388]	@ (800400c <UART_SetConfig+0x2d4>)
 8003e86:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	011c      	lsls	r4, r3, #4
 8003e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed0:	4692      	mov	sl, r2
 8003ed2:	469b      	mov	fp, r3
 8003ed4:	4643      	mov	r3, r8
 8003ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003efc:	460b      	mov	r3, r1
 8003efe:	18db      	adds	r3, r3, r3
 8003f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f02:	4613      	mov	r3, r2
 8003f04:	eb42 0303 	adc.w	r3, r2, r3
 8003f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f12:	f7fc f9bd 	bl	8000290 <__aeabi_uldivmod>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <UART_SetConfig+0x2d4>)
 8003f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2264      	movs	r2, #100	@ 0x64
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	1acb      	subs	r3, r1, r3
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f32:	4b36      	ldr	r3, [pc, #216]	@ (800400c <UART_SetConfig+0x2d4>)
 8003f34:	fba3 2302 	umull	r2, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f40:	441c      	add	r4, r3
 8003f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	1891      	adds	r1, r2, r2
 8003f5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f64:	4641      	mov	r1, r8
 8003f66:	1851      	adds	r1, r2, r1
 8003f68:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	414b      	adcs	r3, r1
 8003f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	00cb      	lsls	r3, r1, #3
 8003f80:	4651      	mov	r1, sl
 8003f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f86:	4651      	mov	r1, sl
 8003f88:	00ca      	lsls	r2, r1, #3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4642      	mov	r2, r8
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f98:	464b      	mov	r3, r9
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	eb42 0303 	adc.w	r3, r2, r3
 8003fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fb8:	460b      	mov	r3, r1
 8003fba:	18db      	adds	r3, r3, r3
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fce:	f7fc f95f 	bl	8000290 <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <UART_SetConfig+0x2d4>)
 8003fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	2164      	movs	r1, #100	@ 0x64
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	3332      	adds	r3, #50	@ 0x32
 8003fea:	4a08      	ldr	r2, [pc, #32]	@ (800400c <UART_SetConfig+0x2d4>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	f003 0207 	and.w	r2, r3, #7
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4422      	add	r2, r4
 8003ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004000:	e106      	b.n	8004210 <UART_SetConfig+0x4d8>
 8004002:	bf00      	nop
 8004004:	40011000 	.word	0x40011000
 8004008:	40011400 	.word	0x40011400
 800400c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800401a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800401e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004022:	4642      	mov	r2, r8
 8004024:	464b      	mov	r3, r9
 8004026:	1891      	adds	r1, r2, r2
 8004028:	6239      	str	r1, [r7, #32]
 800402a:	415b      	adcs	r3, r3
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
 800402e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004032:	4641      	mov	r1, r8
 8004034:	1854      	adds	r4, r2, r1
 8004036:	4649      	mov	r1, r9
 8004038:	eb43 0501 	adc.w	r5, r3, r1
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	00eb      	lsls	r3, r5, #3
 8004046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404a:	00e2      	lsls	r2, r4, #3
 800404c:	4614      	mov	r4, r2
 800404e:	461d      	mov	r5, r3
 8004050:	4643      	mov	r3, r8
 8004052:	18e3      	adds	r3, r4, r3
 8004054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004058:	464b      	mov	r3, r9
 800405a:	eb45 0303 	adc.w	r3, r5, r3
 800405e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800406e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800407e:	4629      	mov	r1, r5
 8004080:	008b      	lsls	r3, r1, #2
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004088:	4621      	mov	r1, r4
 800408a:	008a      	lsls	r2, r1, #2
 800408c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004090:	f7fc f8fe 	bl	8000290 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4b60      	ldr	r3, [pc, #384]	@ (800421c <UART_SetConfig+0x4e4>)
 800409a:	fba3 2302 	umull	r2, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	011c      	lsls	r4, r3, #4
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	61b9      	str	r1, [r7, #24]
 80040bc:	415b      	adcs	r3, r3
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c4:	4641      	mov	r1, r8
 80040c6:	1851      	adds	r1, r2, r1
 80040c8:	6139      	str	r1, [r7, #16]
 80040ca:	4649      	mov	r1, r9
 80040cc:	414b      	adcs	r3, r1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040dc:	4659      	mov	r1, fp
 80040de:	00cb      	lsls	r3, r1, #3
 80040e0:	4651      	mov	r1, sl
 80040e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040e6:	4651      	mov	r1, sl
 80040e8:	00ca      	lsls	r2, r1, #3
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	4642      	mov	r2, r8
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040f8:	464b      	mov	r3, r9
 80040fa:	460a      	mov	r2, r1
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800410e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800411c:	4649      	mov	r1, r9
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004126:	4641      	mov	r1, r8
 8004128:	008a      	lsls	r2, r1, #2
 800412a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800412e:	f7fc f8af 	bl	8000290 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4611      	mov	r1, r2
 8004138:	4b38      	ldr	r3, [pc, #224]	@ (800421c <UART_SetConfig+0x4e4>)
 800413a:	fba3 2301 	umull	r2, r3, r3, r1
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2264      	movs	r2, #100	@ 0x64
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	1acb      	subs	r3, r1, r3
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	3332      	adds	r3, #50	@ 0x32
 800414c:	4a33      	ldr	r2, [pc, #204]	@ (800421c <UART_SetConfig+0x4e4>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004158:	441c      	add	r4, r3
 800415a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415e:	2200      	movs	r2, #0
 8004160:	673b      	str	r3, [r7, #112]	@ 0x70
 8004162:	677a      	str	r2, [r7, #116]	@ 0x74
 8004164:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	1891      	adds	r1, r2, r2
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	415b      	adcs	r3, r3
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004178:	4641      	mov	r1, r8
 800417a:	1851      	adds	r1, r2, r1
 800417c:	6039      	str	r1, [r7, #0]
 800417e:	4649      	mov	r1, r9
 8004180:	414b      	adcs	r3, r1
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004190:	4659      	mov	r1, fp
 8004192:	00cb      	lsls	r3, r1, #3
 8004194:	4651      	mov	r1, sl
 8004196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419a:	4651      	mov	r1, sl
 800419c:	00ca      	lsls	r2, r1, #3
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	4603      	mov	r3, r0
 80041a4:	4642      	mov	r2, r8
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041aa:	464b      	mov	r3, r9
 80041ac:	460a      	mov	r2, r1
 80041ae:	eb42 0303 	adc.w	r3, r2, r3
 80041b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80041be:	667a      	str	r2, [r7, #100]	@ 0x64
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041cc:	4649      	mov	r1, r9
 80041ce:	008b      	lsls	r3, r1, #2
 80041d0:	4641      	mov	r1, r8
 80041d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d6:	4641      	mov	r1, r8
 80041d8:	008a      	lsls	r2, r1, #2
 80041da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041de:	f7fc f857 	bl	8000290 <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4b0d      	ldr	r3, [pc, #52]	@ (800421c <UART_SetConfig+0x4e4>)
 80041e8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	2164      	movs	r1, #100	@ 0x64
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	3332      	adds	r3, #50	@ 0x32
 80041fa:	4a08      	ldr	r2, [pc, #32]	@ (800421c <UART_SetConfig+0x4e4>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4422      	add	r2, r4
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004216:	46bd      	mov	sp, r7
 8004218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421c:	51eb851f 	.word	0x51eb851f

08004220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004220:	b084      	sub	sp, #16
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	f107 001c 	add.w	r0, r7, #28
 800422e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004232:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004236:	2b01      	cmp	r3, #1
 8004238:	d123      	bne.n	8004282 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800424e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004262:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004266:	2b01      	cmp	r3, #1
 8004268:	d105      	bne.n	8004276 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f001 fae8 	bl	800584c <USB_CoreReset>
 800427c:	4603      	mov	r3, r0
 800427e:	73fb      	strb	r3, [r7, #15]
 8004280:	e01b      	b.n	80042ba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f001 fadc 	bl	800584c <USB_CoreReset>
 8004294:	4603      	mov	r3, r0
 8004296:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004298:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80042ac:	e005      	b.n	80042ba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042ba:	7fbb      	ldrb	r3, [r7, #30]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10b      	bne.n	80042d8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f043 0206 	orr.w	r2, r3, #6
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042e4:	b004      	add	sp, #16
 80042e6:	4770      	bx	lr

080042e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d165      	bne.n	80043c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4a41      	ldr	r2, [pc, #260]	@ (8004404 <USB_SetTurnaroundTime+0x11c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d906      	bls.n	8004312 <USB_SetTurnaroundTime+0x2a>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4a40      	ldr	r2, [pc, #256]	@ (8004408 <USB_SetTurnaroundTime+0x120>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d202      	bcs.n	8004312 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800430c:	230f      	movs	r3, #15
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e062      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4a3c      	ldr	r2, [pc, #240]	@ (8004408 <USB_SetTurnaroundTime+0x120>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d306      	bcc.n	8004328 <USB_SetTurnaroundTime+0x40>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4a3b      	ldr	r2, [pc, #236]	@ (800440c <USB_SetTurnaroundTime+0x124>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d202      	bcs.n	8004328 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004322:	230e      	movs	r3, #14
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e057      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4a38      	ldr	r2, [pc, #224]	@ (800440c <USB_SetTurnaroundTime+0x124>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d306      	bcc.n	800433e <USB_SetTurnaroundTime+0x56>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4a37      	ldr	r2, [pc, #220]	@ (8004410 <USB_SetTurnaroundTime+0x128>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d202      	bcs.n	800433e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004338:	230d      	movs	r3, #13
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e04c      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4a33      	ldr	r2, [pc, #204]	@ (8004410 <USB_SetTurnaroundTime+0x128>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d306      	bcc.n	8004354 <USB_SetTurnaroundTime+0x6c>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a32      	ldr	r2, [pc, #200]	@ (8004414 <USB_SetTurnaroundTime+0x12c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d802      	bhi.n	8004354 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800434e:	230c      	movs	r3, #12
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e041      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4a2f      	ldr	r2, [pc, #188]	@ (8004414 <USB_SetTurnaroundTime+0x12c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d906      	bls.n	800436a <USB_SetTurnaroundTime+0x82>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4a2e      	ldr	r2, [pc, #184]	@ (8004418 <USB_SetTurnaroundTime+0x130>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d802      	bhi.n	800436a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004364:	230b      	movs	r3, #11
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e036      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4a2a      	ldr	r2, [pc, #168]	@ (8004418 <USB_SetTurnaroundTime+0x130>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d906      	bls.n	8004380 <USB_SetTurnaroundTime+0x98>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4a29      	ldr	r2, [pc, #164]	@ (800441c <USB_SetTurnaroundTime+0x134>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d802      	bhi.n	8004380 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800437a:	230a      	movs	r3, #10
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e02b      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4a26      	ldr	r2, [pc, #152]	@ (800441c <USB_SetTurnaroundTime+0x134>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d906      	bls.n	8004396 <USB_SetTurnaroundTime+0xae>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a25      	ldr	r2, [pc, #148]	@ (8004420 <USB_SetTurnaroundTime+0x138>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d202      	bcs.n	8004396 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004390:	2309      	movs	r3, #9
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e020      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4a21      	ldr	r2, [pc, #132]	@ (8004420 <USB_SetTurnaroundTime+0x138>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d306      	bcc.n	80043ac <USB_SetTurnaroundTime+0xc4>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a20      	ldr	r2, [pc, #128]	@ (8004424 <USB_SetTurnaroundTime+0x13c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d802      	bhi.n	80043ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043a6:	2308      	movs	r3, #8
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e015      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <USB_SetTurnaroundTime+0x13c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d906      	bls.n	80043c2 <USB_SetTurnaroundTime+0xda>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <USB_SetTurnaroundTime+0x140>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d202      	bcs.n	80043c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043bc:	2307      	movs	r3, #7
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e00a      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043c2:	2306      	movs	r3, #6
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e007      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043ce:	2309      	movs	r3, #9
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e001      	b.n	80043d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043d4:	2309      	movs	r3, #9
 80043d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	029b      	lsls	r3, r3, #10
 80043ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80043f0:	431a      	orrs	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	00d8acbf 	.word	0x00d8acbf
 8004408:	00e4e1c0 	.word	0x00e4e1c0
 800440c:	00f42400 	.word	0x00f42400
 8004410:	01067380 	.word	0x01067380
 8004414:	011a499f 	.word	0x011a499f
 8004418:	01312cff 	.word	0x01312cff
 800441c:	014ca43f 	.word	0x014ca43f
 8004420:	016e3600 	.word	0x016e3600
 8004424:	01a6ab1f 	.word	0x01a6ab1f
 8004428:	01e84800 	.word	0x01e84800

0800442c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f043 0201 	orr.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 0201 	bic.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d115      	bne.n	80044be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800449e:	200a      	movs	r0, #10
 80044a0:	f7fc fd74 	bl	8000f8c <HAL_Delay>
      ms += 10U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	330a      	adds	r3, #10
 80044a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f001 f93f 	bl	800572e <USB_GetMode>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d01e      	beq.n	80044f4 <USB_SetCurrentMode+0x84>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80044ba:	d9f0      	bls.n	800449e <USB_SetCurrentMode+0x2e>
 80044bc:	e01a      	b.n	80044f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d115      	bne.n	80044f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044d0:	200a      	movs	r0, #10
 80044d2:	f7fc fd5b 	bl	8000f8c <HAL_Delay>
      ms += 10U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	330a      	adds	r3, #10
 80044da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f001 f926 	bl	800572e <USB_GetMode>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <USB_SetCurrentMode+0x84>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80044ec:	d9f0      	bls.n	80044d0 <USB_SetCurrentMode+0x60>
 80044ee:	e001      	b.n	80044f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e005      	b.n	8004500 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80044f8:	d101      	bne.n	80044fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004508:	b084      	sub	sp, #16
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	e009      	b.n	800453c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3340      	adds	r3, #64	@ 0x40
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	2200      	movs	r2, #0
 8004534:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	3301      	adds	r3, #1
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b0e      	cmp	r3, #14
 8004540:	d9f2      	bls.n	8004528 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004542:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11c      	bne.n	8004584 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004562:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	639a      	str	r2, [r3, #56]	@ 0x38
 8004582:	e00b      	b.n	800459c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004588:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80045a2:	461a      	mov	r2, r3
 80045a4:	2300      	movs	r3, #0
 80045a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10d      	bne.n	80045cc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045b8:	2100      	movs	r1, #0
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f968 	bl	8004890 <USB_SetDevSpeed>
 80045c0:	e008      	b.n	80045d4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045c2:	2101      	movs	r1, #1
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f963 	bl	8004890 <USB_SetDevSpeed>
 80045ca:	e003      	b.n	80045d4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045cc:	2103      	movs	r1, #3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f95e 	bl	8004890 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045d4:	2110      	movs	r1, #16
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8fa 	bl	80047d0 <USB_FlushTxFifo>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f924 	bl	8004834 <USB_FlushRxFifo>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045fc:	461a      	mov	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004608:	461a      	mov	r2, r3
 800460a:	2300      	movs	r3, #0
 800460c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004614:	461a      	mov	r2, r3
 8004616:	2300      	movs	r3, #0
 8004618:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	e043      	b.n	80046a8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004632:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004636:	d118      	bne.n	800466a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464a:	461a      	mov	r2, r3
 800464c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e013      	b.n	800467c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004660:	461a      	mov	r2, r3
 8004662:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	e008      	b.n	800467c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004676:	461a      	mov	r2, r3
 8004678:	2300      	movs	r3, #0
 800467a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004688:	461a      	mov	r2, r3
 800468a:	2300      	movs	r3, #0
 800468c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800469a:	461a      	mov	r2, r3
 800469c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3301      	adds	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046ac:	461a      	mov	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d3b5      	bcc.n	8004620 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	e043      	b.n	8004742 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046d0:	d118      	bne.n	8004704 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e4:	461a      	mov	r2, r3
 80046e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e013      	b.n	8004716 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fa:	461a      	mov	r2, r3
 80046fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e008      	b.n	8004716 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004710:	461a      	mov	r2, r3
 8004712:	2300      	movs	r3, #0
 8004714:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004722:	461a      	mov	r2, r3
 8004724:	2300      	movs	r3, #0
 8004726:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800473a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	3301      	adds	r3, #1
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004746:	461a      	mov	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4293      	cmp	r3, r2
 800474c:	d3b5      	bcc.n	80046ba <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800475c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004760:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800476e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004770:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f043 0210 	orr.w	r2, r3, #16
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	4b10      	ldr	r3, [pc, #64]	@ (80047cc <USB_DevInit+0x2c4>)
 800478a:	4313      	orrs	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004790:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f043 0208 	orr.w	r2, r3, #8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d107      	bne.n	80047bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047c8:	b004      	add	sp, #16
 80047ca:	4770      	bx	lr
 80047cc:	803c3800 	.word	0x803c3800

080047d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047ea:	d901      	bls.n	80047f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e01b      	b.n	8004828 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	daf2      	bge.n	80047de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	019b      	lsls	r3, r3, #6
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004814:	d901      	bls.n	800481a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e006      	b.n	8004828 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b20      	cmp	r3, #32
 8004824:	d0f0      	beq.n	8004808 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800484c:	d901      	bls.n	8004852 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e018      	b.n	8004884 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	daf2      	bge.n	8004840 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2210      	movs	r2, #16
 8004862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004870:	d901      	bls.n	8004876 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e006      	b.n	8004884 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d0f0      	beq.n	8004864 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	68f9      	ldr	r1, [r7, #12]
 80048ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b087      	sub	sp, #28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 0306 	and.w	r3, r3, #6
 80048da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80048e2:	2300      	movs	r3, #0
 80048e4:	75fb      	strb	r3, [r7, #23]
 80048e6:	e00a      	b.n	80048fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d002      	beq.n	80048f4 <USB_GetDevSpeed+0x32>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d102      	bne.n	80048fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048f4:	2302      	movs	r3, #2
 80048f6:	75fb      	strb	r3, [r7, #23]
 80048f8:	e001      	b.n	80048fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048fa:	230f      	movs	r3, #15
 80048fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004900:	4618      	mov	r0, r3
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d13a      	bne.n	800499e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	b29b      	uxth	r3, r3
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004946:	4313      	orrs	r3, r2
 8004948:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d155      	bne.n	8004a0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	791b      	ldrb	r3, [r3, #4]
 800497a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800497c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	059b      	lsls	r3, r3, #22
 8004982:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004984:	4313      	orrs	r3, r2
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	440a      	add	r2, r1
 800498e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e036      	b.n	8004a0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	2101      	movs	r1, #1
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	041b      	lsls	r3, r3, #16
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049bc:	4313      	orrs	r3, r2
 80049be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11a      	bne.n	8004a0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	791b      	ldrb	r3, [r3, #4]
 80049f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049f2:	430b      	orrs	r3, r1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d161      	bne.n	8004afc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a4e:	d11f      	bne.n	8004a90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	0159      	lsls	r1, r3, #5
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	440b      	add	r3, r1
 8004aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af2:	4619      	mov	r1, r3
 8004af4:	4b35      	ldr	r3, [pc, #212]	@ (8004bcc <USB_DeactivateEndpoint+0x1b0>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]
 8004afa:	e060      	b.n	8004bbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b12:	d11f      	bne.n	8004b54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b74:	4013      	ands	r3, r2
 8004b76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	43db      	mvns	r3, r3
 8004b92:	68f9      	ldr	r1, [r7, #12]
 8004b94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	0159      	lsls	r1, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	440b      	add	r3, r1
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <USB_DeactivateEndpoint+0x1b4>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	ec337800 	.word	0xec337800
 8004bd0:	eff37800 	.word	0xeff37800

08004bd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	@ 0x28
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f040 817f 	bne.w	8004ef4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d132      	bne.n	8004c64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c18:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c1c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c5c:	0cdb      	lsrs	r3, r3, #19
 8004c5e:	04db      	lsls	r3, r3, #19
 8004c60:	6113      	str	r3, [r2, #16]
 8004c62:	e097      	b.n	8004d94 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c7e:	0cdb      	lsrs	r3, r3, #19
 8004c80:	04db      	lsls	r3, r3, #19
 8004c82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c9e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ca2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ca6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d11a      	bne.n	8004ce4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d903      	bls.n	8004cc2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ce0:	6113      	str	r3, [r2, #16]
 8004ce2:	e044      	b.n	8004d6e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	1e5a      	subs	r2, r3, #1
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	8afb      	ldrh	r3, [r7, #22]
 8004d0a:	04d9      	lsls	r1, r3, #19
 8004d0c:	4ba4      	ldr	r3, [pc, #656]	@ (8004fa0 <USB_EPStartXfer+0x3cc>)
 8004d0e:	400b      	ands	r3, r1
 8004d10:	69b9      	ldr	r1, [r7, #24]
 8004d12:	0148      	lsls	r0, r1, #5
 8004d14:	69f9      	ldr	r1, [r7, #28]
 8004d16:	4401      	add	r1, r0
 8004d18:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	791b      	ldrb	r3, [r3, #4]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d122      	bne.n	8004d6e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d42:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004d46:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	8afb      	ldrh	r3, [r7, #22]
 8004d58:	075b      	lsls	r3, r3, #29
 8004d5a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004d5e:	69b9      	ldr	r1, [r7, #24]
 8004d60:	0148      	lsls	r0, r1, #5
 8004d62:	69f9      	ldr	r1, [r7, #28]
 8004d64:	4401      	add	r1, r0
 8004d66:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	0148      	lsls	r0, r1, #5
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	4401      	add	r1, r0
 8004d8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d90:	4313      	orrs	r3, r2
 8004d92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d14b      	bne.n	8004e32 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dae:	461a      	mov	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	791b      	ldrb	r3, [r3, #4]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d128      	bne.n	8004e10 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d110      	bne.n	8004df0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004de8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e00f      	b.n	8004e10 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e166      	b.n	8005100 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e50:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d015      	beq.n	8004e86 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 814e 	beq.w	8005100 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	2101      	movs	r1, #1
 8004e76:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7a:	69f9      	ldr	r1, [r7, #28]
 8004e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e80:	4313      	orrs	r3, r2
 8004e82:	634b      	str	r3, [r1, #52]	@ 0x34
 8004e84:	e13c      	b.n	8005100 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d110      	bne.n	8004eb8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e00f      	b.n	8004ed8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	68d9      	ldr	r1, [r3, #12]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	781a      	ldrb	r2, [r3, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	b298      	uxth	r0, r3
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	4603      	mov	r3, r0
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f9b9 	bl	8005264 <USB_WritePacket>
 8004ef2:	e105      	b.n	8005100 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f0e:	0cdb      	lsrs	r3, r3, #19
 8004f10:	04db      	lsls	r3, r3, #19
 8004f12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f2e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f32:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f36:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d132      	bne.n	8004fa4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f6c:	69b9      	ldr	r1, [r7, #24]
 8004f6e:	0148      	lsls	r0, r1, #5
 8004f70:	69f9      	ldr	r1, [r7, #28]
 8004f72:	4401      	add	r1, r0
 8004f74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f9a:	6113      	str	r3, [r2, #16]
 8004f9c:	e062      	b.n	8005064 <USB_EPStartXfer+0x490>
 8004f9e:	bf00      	nop
 8004fa0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d123      	bne.n	8004ff4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc2:	69b9      	ldr	r1, [r7, #24]
 8004fc4:	0148      	lsls	r0, r1, #5
 8004fc6:	69f9      	ldr	r1, [r7, #28]
 8004fc8:	4401      	add	r1, r0
 8004fca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ff0:	6113      	str	r3, [r2, #16]
 8004ff2:	e037      	b.n	8005064 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	1e5a      	subs	r2, r3, #1
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	8afa      	ldrh	r2, [r7, #22]
 8005010:	fb03 f202 	mul.w	r2, r3, r2
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	8afb      	ldrh	r3, [r7, #22]
 8005028:	04d9      	lsls	r1, r3, #19
 800502a:	4b38      	ldr	r3, [pc, #224]	@ (800510c <USB_EPStartXfer+0x538>)
 800502c:	400b      	ands	r3, r1
 800502e:	69b9      	ldr	r1, [r7, #24]
 8005030:	0148      	lsls	r0, r1, #5
 8005032:	69f9      	ldr	r1, [r7, #28]
 8005034:	4401      	add	r1, r0
 8005036:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800503a:	4313      	orrs	r3, r2
 800503c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005054:	69b9      	ldr	r1, [r7, #24]
 8005056:	0148      	lsls	r0, r1, #5
 8005058:	69f9      	ldr	r1, [r7, #28]
 800505a:	4401      	add	r1, r0
 800505c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005060:	4313      	orrs	r3, r2
 8005062:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d10d      	bne.n	8005086 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005082:	460a      	mov	r2, r1
 8005084:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	791b      	ldrb	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d128      	bne.n	80050e0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d110      	bne.n	80050c0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	e00f      	b.n	80050e0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	1ff80000 	.word	0x1ff80000

08005110 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	785b      	ldrb	r3, [r3, #1]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d14a      	bne.n	80051c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005146:	f040 8086 	bne.w	8005256 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	7812      	ldrb	r2, [r2, #0]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005168:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800516c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	7812      	ldrb	r2, [r2, #0]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800518c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005190:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3301      	adds	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800519e:	4293      	cmp	r3, r2
 80051a0:	d902      	bls.n	80051a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
          break;
 80051a6:	e056      	b.n	8005256 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051c0:	d0e7      	beq.n	8005192 <USB_EPStopXfer+0x82>
 80051c2:	e048      	b.n	8005256 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051dc:	d13b      	bne.n	8005256 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	7812      	ldrb	r2, [r2, #0]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005200:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	440a      	add	r2, r1
 800521c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005220:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005224:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3301      	adds	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005232:	4293      	cmp	r3, r2
 8005234:	d902      	bls.n	800523c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	75fb      	strb	r3, [r7, #23]
          break;
 800523a:	e00c      	b.n	8005256 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005254:	d0e7      	beq.n	8005226 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005256:	7dfb      	ldrb	r3, [r7, #23]
}
 8005258:	4618      	mov	r0, r3
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005264:	b480      	push	{r7}
 8005266:	b089      	sub	sp, #36	@ 0x24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	4611      	mov	r1, r2
 8005270:	461a      	mov	r2, r3
 8005272:	460b      	mov	r3, r1
 8005274:	71fb      	strb	r3, [r7, #7]
 8005276:	4613      	mov	r3, r2
 8005278:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005282:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d123      	bne.n	80052d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800528a:	88bb      	ldrh	r3, [r7, #4]
 800528c:	3303      	adds	r3, #3
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005292:	2300      	movs	r3, #0
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e018      	b.n	80052ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	031a      	lsls	r2, r3, #12
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a4:	461a      	mov	r2, r3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	3301      	adds	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3301      	adds	r3, #1
 80052b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	3301      	adds	r3, #1
 80052bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	3301      	adds	r3, #1
 80052c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	3301      	adds	r3, #1
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d3e2      	bcc.n	8005298 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3724      	adds	r7, #36	@ 0x24
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b08b      	sub	sp, #44	@ 0x2c
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005306:	2300      	movs	r3, #0
 8005308:	623b      	str	r3, [r7, #32]
 800530a:	e014      	b.n	8005336 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	601a      	str	r2, [r3, #0]
    pDest++;
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	3301      	adds	r3, #1
 800531c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	3301      	adds	r3, #1
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	3301      	adds	r3, #1
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	3301      	adds	r3, #1
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	3301      	adds	r3, #1
 8005334:	623b      	str	r3, [r7, #32]
 8005336:	6a3a      	ldr	r2, [r7, #32]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	429a      	cmp	r2, r3
 800533c:	d3e6      	bcc.n	800530c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800533e:	8bfb      	ldrh	r3, [r7, #30]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01e      	beq.n	8005382 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800534e:	461a      	mov	r2, r3
 8005350:	f107 0310 	add.w	r3, r7, #16
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
 8005364:	b2da      	uxtb	r2, r3
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	701a      	strb	r2, [r3, #0]
      i++;
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	3301      	adds	r3, #1
 800536e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	3301      	adds	r3, #1
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005376:	8bfb      	ldrh	r3, [r7, #30]
 8005378:	3b01      	subs	r3, #1
 800537a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800537c:	8bfb      	ldrh	r3, [r7, #30]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1ea      	bne.n	8005358 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005384:	4618      	mov	r0, r3
 8005386:	372c      	adds	r7, #44	@ 0x2c
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d12c      	bne.n	8005406 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db12      	blt.n	80053e4 <USB_EPSetStall+0x54>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00f      	beq.n	80053e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	0151      	lsls	r1, r2, #5
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	440a      	add	r2, r1
 80053fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	e02b      	b.n	800545e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	db12      	blt.n	800543e <USB_EPSetStall+0xae>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00f      	beq.n	800543e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	440a      	add	r2, r1
 8005434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005438:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800543c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005458:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800545c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d128      	bne.n	80054da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	440a      	add	r2, r1
 800549e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	791b      	ldrb	r3, [r3, #4]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d003      	beq.n	80054b8 <USB_EPClearStall+0x4c>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	791b      	ldrb	r3, [r3, #4]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d138      	bne.n	800552a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e027      	b.n	800552a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	791b      	ldrb	r3, [r3, #4]
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d003      	beq.n	800550a <USB_EPClearStall+0x9e>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	791b      	ldrb	r3, [r3, #4]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d10f      	bne.n	800552a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005528:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005556:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800555a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005572:	4313      	orrs	r3, r2
 8005574:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055b2:	f023 0302 	bic.w	r3, r3, #2
 80055b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055e0:	f023 0303 	bic.w	r3, r3, #3
 80055e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055f4:	f043 0302 	orr.w	r3, r3, #2
 80055f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005620:	68fb      	ldr	r3, [r7, #12]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	4013      	ands	r3, r2
 8005650:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	0c1b      	lsrs	r3, r3, #16
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	b29b      	uxth	r3, r3
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4013      	ands	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056c4:	68bb      	ldr	r3, [r7, #8]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b087      	sub	sp, #28
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005702:	01db      	lsls	r3, r3, #7
 8005704:	b2db      	uxtb	r3, r3
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4013      	ands	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005720:	68bb      	ldr	r3, [r7, #8]
}
 8005722:	4618      	mov	r0, r3
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0301 	and.w	r3, r3, #1
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005764:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005768:	f023 0307 	bic.w	r3, r3, #7
 800576c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800577c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005780:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	460b      	mov	r3, r1
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	333c      	adds	r3, #60	@ 0x3c
 80057a6:	3304      	adds	r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4a26      	ldr	r2, [pc, #152]	@ (8005848 <USB_EP0_OutStart+0xb8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d90a      	bls.n	80057ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c4:	d101      	bne.n	80057ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e037      	b.n	800583a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f8:	f043 0318 	orr.w	r3, r3, #24
 80057fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800580c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005810:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005812:	7afb      	ldrb	r3, [r7, #11]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d10f      	bne.n	8005838 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581e:	461a      	mov	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005832:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	4f54300a 	.word	0x4f54300a

0800584c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005864:	d901      	bls.n	800586a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e022      	b.n	80058b0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	daf2      	bge.n	8005858 <USB_CoreReset+0xc>

  count = 10U;
 8005872:	230a      	movs	r3, #10
 8005874:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005876:	e002      	b.n	800587e <USB_CoreReset+0x32>
  {
    count--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1f9      	bne.n	8005878 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f043 0201 	orr.w	r2, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800589c:	d901      	bls.n	80058a2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e006      	b.n	80058b0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d0f0      	beq.n	8005890 <USB_CoreReset+0x44>

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80058cc:	f002 fcb2 	bl	8008234 <USBD_static_malloc>
 80058d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	32b0      	adds	r2, #176	@ 0xb0
 80058e2:	2100      	movs	r1, #0
 80058e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80058e8:	2302      	movs	r3, #2
 80058ea:	e0d4      	b.n	8005a96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80058ec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80058f0:	2100      	movs	r1, #0
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f005 fe5a 	bl	800b5ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	32b0      	adds	r2, #176	@ 0xb0
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	32b0      	adds	r2, #176	@ 0xb0
 8005912:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	7c1b      	ldrb	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d138      	bne.n	8005996 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005924:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa0 <USBD_CDC_Init+0x1e4>)
 8005926:	7819      	ldrb	r1, [r3, #0]
 8005928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800592c:	2202      	movs	r2, #2
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fb5d 	bl	8007fee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005934:	4b5a      	ldr	r3, [pc, #360]	@ (8005aa0 <USBD_CDC_Init+0x1e4>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 020f 	and.w	r2, r3, #15
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	3323      	adds	r3, #35	@ 0x23
 800594a:	2201      	movs	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800594e:	4b55      	ldr	r3, [pc, #340]	@ (8005aa4 <USBD_CDC_Init+0x1e8>)
 8005950:	7819      	ldrb	r1, [r3, #0]
 8005952:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005956:	2202      	movs	r2, #2
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f002 fb48 	bl	8007fee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800595e:	4b51      	ldr	r3, [pc, #324]	@ (8005aa4 <USBD_CDC_Init+0x1e8>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	f003 020f 	and.w	r2, r3, #15
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800597a:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa8 <USBD_CDC_Init+0x1ec>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f003 020f 	and.w	r2, r3, #15
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	331c      	adds	r3, #28
 8005990:	2210      	movs	r2, #16
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e035      	b.n	8005a02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005996:	4b42      	ldr	r3, [pc, #264]	@ (8005aa0 <USBD_CDC_Init+0x1e4>)
 8005998:	7819      	ldrb	r1, [r3, #0]
 800599a:	2340      	movs	r3, #64	@ 0x40
 800599c:	2202      	movs	r2, #2
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f002 fb25 	bl	8007fee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059a4:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa0 <USBD_CDC_Init+0x1e4>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	3323      	adds	r3, #35	@ 0x23
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059be:	4b39      	ldr	r3, [pc, #228]	@ (8005aa4 <USBD_CDC_Init+0x1e8>)
 80059c0:	7819      	ldrb	r1, [r3, #0]
 80059c2:	2340      	movs	r3, #64	@ 0x40
 80059c4:	2202      	movs	r2, #2
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f002 fb11 	bl	8007fee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059cc:	4b35      	ldr	r3, [pc, #212]	@ (8005aa4 <USBD_CDC_Init+0x1e8>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059e8:	4b2f      	ldr	r3, [pc, #188]	@ (8005aa8 <USBD_CDC_Init+0x1ec>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f003 020f 	and.w	r2, r3, #15
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	331c      	adds	r3, #28
 80059fe:	2210      	movs	r2, #16
 8005a00:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a02:	4b29      	ldr	r3, [pc, #164]	@ (8005aa8 <USBD_CDC_Init+0x1ec>)
 8005a04:	7819      	ldrb	r1, [r3, #0]
 8005a06:	2308      	movs	r3, #8
 8005a08:	2203      	movs	r2, #3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f002 faef 	bl	8007fee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a10:	4b25      	ldr	r3, [pc, #148]	@ (8005aa8 <USBD_CDC_Init+0x1ec>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	3323      	adds	r3, #35	@ 0x23
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	33b0      	adds	r3, #176	@ 0xb0
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a60:	2302      	movs	r3, #2
 8005a62:	e018      	b.n	8005a96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	7c1b      	ldrb	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <USBD_CDC_Init+0x1e8>)
 8005a6e:	7819      	ldrb	r1, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f002 fba6 	bl	80081cc <USBD_LL_PrepareReceive>
 8005a80:	e008      	b.n	8005a94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a82:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <USBD_CDC_Init+0x1e8>)
 8005a84:	7819      	ldrb	r1, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a8c:	2340      	movs	r3, #64	@ 0x40
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f002 fb9c 	bl	80081cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000093 	.word	0x20000093
 8005aa4:	20000094 	.word	0x20000094
 8005aa8:	20000095 	.word	0x20000095

08005aac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ba4 <USBD_CDC_DeInit+0xf8>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f002 fabb 	bl	800803a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005ac4:	4b37      	ldr	r3, [pc, #220]	@ (8005ba4 <USBD_CDC_DeInit+0xf8>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	3323      	adds	r3, #35	@ 0x23
 8005ada:	2200      	movs	r2, #0
 8005adc:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005ade:	4b32      	ldr	r3, [pc, #200]	@ (8005ba8 <USBD_CDC_DeInit+0xfc>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f002 faa8 	bl	800803a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005aea:	4b2f      	ldr	r3, [pc, #188]	@ (8005ba8 <USBD_CDC_DeInit+0xfc>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	f003 020f 	and.w	r2, r3, #15
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b06:	4b29      	ldr	r3, [pc, #164]	@ (8005bac <USBD_CDC_DeInit+0x100>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f002 fa94 	bl	800803a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b12:	4b26      	ldr	r3, [pc, #152]	@ (8005bac <USBD_CDC_DeInit+0x100>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	3323      	adds	r3, #35	@ 0x23
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bac <USBD_CDC_DeInit+0x100>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 020f 	and.w	r2, r3, #15
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	331c      	adds	r3, #28
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	32b0      	adds	r2, #176	@ 0xb0
 8005b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01f      	beq.n	8005b98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	33b0      	adds	r3, #176	@ 0xb0
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	32b0      	adds	r2, #176	@ 0xb0
 8005b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f002 fb68 	bl	8008250 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32b0      	adds	r2, #176	@ 0xb0
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000093 	.word	0x20000093
 8005ba8:	20000094 	.word	0x20000094
 8005bac:	20000095 	.word	0x20000095

08005bb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	32b0      	adds	r2, #176	@ 0xb0
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e0bf      	b.n	8005d60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d050      	beq.n	8005c8e <USBD_CDC_Setup+0xde>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	f040 80af 	bne.w	8005d50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	88db      	ldrh	r3, [r3, #6]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d03a      	beq.n	8005c70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	b25b      	sxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	da1b      	bge.n	8005c3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	33b0      	adds	r3, #176	@ 0xb0
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	88d2      	ldrh	r2, [r2, #6]
 8005c20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	88db      	ldrh	r3, [r3, #6]
 8005c26:	2b07      	cmp	r3, #7
 8005c28:	bf28      	it	cs
 8005c2a:	2307      	movcs	r3, #7
 8005c2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	89fa      	ldrh	r2, [r7, #14]
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fda9 	bl	800778c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c3a:	e090      	b.n	8005d5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	785a      	ldrb	r2, [r3, #1]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	88db      	ldrh	r3, [r3, #6]
 8005c4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c4c:	d803      	bhi.n	8005c56 <USBD_CDC_Setup+0xa6>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	88db      	ldrh	r3, [r3, #6]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	e000      	b.n	8005c58 <USBD_CDC_Setup+0xa8>
 8005c56:	2240      	movs	r2, #64	@ 0x40
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c5e:	6939      	ldr	r1, [r7, #16]
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005c66:	461a      	mov	r2, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 fdbe 	bl	80077ea <USBD_CtlPrepareRx>
      break;
 8005c6e:	e076      	b.n	8005d5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	33b0      	adds	r3, #176	@ 0xb0
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	7850      	ldrb	r0, [r2, #1]
 8005c86:	2200      	movs	r2, #0
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	4798      	blx	r3
      break;
 8005c8c:	e067      	b.n	8005d5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b0b      	cmp	r3, #11
 8005c94:	d851      	bhi.n	8005d3a <USBD_CDC_Setup+0x18a>
 8005c96:	a201      	add	r2, pc, #4	@ (adr r2, 8005c9c <USBD_CDC_Setup+0xec>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005ccd 	.word	0x08005ccd
 8005ca0:	08005d49 	.word	0x08005d49
 8005ca4:	08005d3b 	.word	0x08005d3b
 8005ca8:	08005d3b 	.word	0x08005d3b
 8005cac:	08005d3b 	.word	0x08005d3b
 8005cb0:	08005d3b 	.word	0x08005d3b
 8005cb4:	08005d3b 	.word	0x08005d3b
 8005cb8:	08005d3b 	.word	0x08005d3b
 8005cbc:	08005d3b 	.word	0x08005d3b
 8005cc0:	08005d3b 	.word	0x08005d3b
 8005cc4:	08005cf7 	.word	0x08005cf7
 8005cc8:	08005d21 	.word	0x08005d21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d107      	bne.n	8005ce8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cd8:	f107 030a 	add.w	r3, r7, #10
 8005cdc:	2202      	movs	r2, #2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 fd53 	bl	800778c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ce6:	e032      	b.n	8005d4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fcd1 	bl	8007692 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	75fb      	strb	r3, [r7, #23]
          break;
 8005cf4:	e02b      	b.n	8005d4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d107      	bne.n	8005d12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d02:	f107 030d 	add.w	r3, r7, #13
 8005d06:	2201      	movs	r2, #1
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fd3e 	bl	800778c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d10:	e01d      	b.n	8005d4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 fcbc 	bl	8007692 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d1e:	e016      	b.n	8005d4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d00f      	beq.n	8005d4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 fcaf 	bl	8007692 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d34:	2303      	movs	r3, #3
 8005d36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d38:	e008      	b.n	8005d4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fca8 	bl	8007692 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d42:	2303      	movs	r3, #3
 8005d44:	75fb      	strb	r3, [r7, #23]
          break;
 8005d46:	e002      	b.n	8005d4e <USBD_CDC_Setup+0x19e>
          break;
 8005d48:	bf00      	nop
 8005d4a:	e008      	b.n	8005d5e <USBD_CDC_Setup+0x1ae>
          break;
 8005d4c:	bf00      	nop
      }
      break;
 8005d4e:	e006      	b.n	8005d5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 fc9d 	bl	8007692 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005d7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	32b0      	adds	r2, #176	@ 0xb0
 8005d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e065      	b.n	8005e5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	32b0      	adds	r2, #176	@ 0xb0
 8005d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	3314      	adds	r3, #20
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d02f      	beq.n	8005e1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	f003 020f 	and.w	r2, r3, #15
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	3314      	adds	r3, #20
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	f003 010f 	and.w	r1, r3, #15
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	440b      	add	r3, r1
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4403      	add	r3, r0
 8005de4:	331c      	adds	r3, #28
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d112      	bne.n	8005e1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	f003 020f 	and.w	r2, r3, #15
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	3314      	adds	r3, #20
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e0e:	78f9      	ldrb	r1, [r7, #3]
 8005e10:	2300      	movs	r3, #0
 8005e12:	2200      	movs	r2, #0
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f002 f9b8 	bl	800818a <USBD_LL_Transmit>
 8005e1a:	e01f      	b.n	8005e5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	33b0      	adds	r3, #176	@ 0xb0
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d010      	beq.n	8005e5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	33b0      	adds	r3, #176	@ 0xb0
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	32b0      	adds	r2, #176	@ 0xb0
 8005e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	32b0      	adds	r2, #176	@ 0xb0
 8005e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e01a      	b.n	8005ece <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f002 f9b6 	bl	800820e <USBD_LL_GetRxDataSize>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	33b0      	adds	r3, #176	@ 0xb0
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	32b0      	adds	r2, #176	@ 0xb0
 8005ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e024      	b.n	8005f42 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	33b0      	adds	r3, #176	@ 0xb0
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d019      	beq.n	8005f40 <USBD_CDC_EP0_RxReady+0x6a>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f12:	2bff      	cmp	r3, #255	@ 0xff
 8005f14:	d014      	beq.n	8005f40 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	33b0      	adds	r3, #176	@ 0xb0
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	22ff      	movs	r2, #255	@ 0xff
 8005f3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f54:	2182      	movs	r1, #130	@ 0x82
 8005f56:	4818      	ldr	r0, [pc, #96]	@ (8005fb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f58:	f000 fd62 	bl	8006a20 <USBD_GetEpDesc>
 8005f5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4815      	ldr	r0, [pc, #84]	@ (8005fb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f62:	f000 fd5d 	bl	8006a20 <USBD_GetEpDesc>
 8005f66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f68:	2181      	movs	r1, #129	@ 0x81
 8005f6a:	4813      	ldr	r0, [pc, #76]	@ (8005fb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f6c:	f000 fd58 	bl	8006a20 <USBD_GetEpDesc>
 8005f70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d006      	beq.n	8005f92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f8c:	711a      	strb	r2, [r3, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fa0:	711a      	strb	r2, [r3, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2243      	movs	r2, #67	@ 0x43
 8005faa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fac:	4b02      	ldr	r3, [pc, #8]	@ (8005fb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000050 	.word	0x20000050

08005fbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fc4:	2182      	movs	r1, #130	@ 0x82
 8005fc6:	4818      	ldr	r0, [pc, #96]	@ (8006028 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fc8:	f000 fd2a 	bl	8006a20 <USBD_GetEpDesc>
 8005fcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fce:	2101      	movs	r1, #1
 8005fd0:	4815      	ldr	r0, [pc, #84]	@ (8006028 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fd2:	f000 fd25 	bl	8006a20 <USBD_GetEpDesc>
 8005fd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fd8:	2181      	movs	r1, #129	@ 0x81
 8005fda:	4813      	ldr	r0, [pc, #76]	@ (8006028 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fdc:	f000 fd20 	bl	8006a20 <USBD_GetEpDesc>
 8005fe0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2210      	movs	r2, #16
 8005fec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	711a      	strb	r2, [r3, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f042 0202 	orr.w	r2, r2, #2
 8006000:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	711a      	strb	r2, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f042 0202 	orr.w	r2, r2, #2
 8006014:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2243      	movs	r2, #67	@ 0x43
 800601a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800601c:	4b02      	ldr	r3, [pc, #8]	@ (8006028 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000050 	.word	0x20000050

0800602c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006034:	2182      	movs	r1, #130	@ 0x82
 8006036:	4818      	ldr	r0, [pc, #96]	@ (8006098 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006038:	f000 fcf2 	bl	8006a20 <USBD_GetEpDesc>
 800603c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800603e:	2101      	movs	r1, #1
 8006040:	4815      	ldr	r0, [pc, #84]	@ (8006098 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006042:	f000 fced 	bl	8006a20 <USBD_GetEpDesc>
 8006046:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006048:	2181      	movs	r1, #129	@ 0x81
 800604a:	4813      	ldr	r0, [pc, #76]	@ (8006098 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800604c:	f000 fce8 	bl	8006a20 <USBD_GetEpDesc>
 8006050:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2210      	movs	r2, #16
 800605c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d006      	beq.n	8006072 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2200      	movs	r2, #0
 8006068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800606c:	711a      	strb	r2, [r3, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d006      	beq.n	8006086 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006080:	711a      	strb	r2, [r3, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2243      	movs	r2, #67	@ 0x43
 800608a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800608c:	4b02      	ldr	r3, [pc, #8]	@ (8006098 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000050 	.word	0x20000050

0800609c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	220a      	movs	r2, #10
 80060a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060aa:	4b03      	ldr	r3, [pc, #12]	@ (80060b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	2000000c 	.word	0x2000000c

080060bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e009      	b.n	80060e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	33b0      	adds	r3, #176	@ 0xb0
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	32b0      	adds	r2, #176	@ 0xb0
 8006106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006112:	2303      	movs	r3, #3
 8006114:	e008      	b.n	8006128 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	32b0      	adds	r2, #176	@ 0xb0
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006154:	2303      	movs	r3, #3
 8006156:	e004      	b.n	8006162 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	32b0      	adds	r2, #176	@ 0xb0
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006192:	2303      	movs	r3, #3
 8006194:	e025      	b.n	80061e2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800619c:	2b00      	cmp	r3, #0
 800619e:	d11f      	bne.n	80061e0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80061a8:	4b10      	ldr	r3, [pc, #64]	@ (80061ec <USBD_CDC_TransmitPacket+0x7c>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f003 020f 	and.w	r2, r3, #15
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4403      	add	r3, r0
 80061c2:	3314      	adds	r3, #20
 80061c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80061c6:	4b09      	ldr	r3, [pc, #36]	@ (80061ec <USBD_CDC_TransmitPacket+0x7c>)
 80061c8:	7819      	ldrb	r1, [r3, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 ffd7 	bl	800818a <USBD_LL_Transmit>

    ret = USBD_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000093 	.word	0x20000093

080061f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	32b0      	adds	r2, #176	@ 0xb0
 8006202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006206:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32b0      	adds	r2, #176	@ 0xb0
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800621a:	2303      	movs	r3, #3
 800621c:	e018      	b.n	8006250 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7c1b      	ldrb	r3, [r3, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006226:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <USBD_CDC_ReceivePacket+0x68>)
 8006228:	7819      	ldrb	r1, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006230:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 ffc9 	bl	80081cc <USBD_LL_PrepareReceive>
 800623a:	e008      	b.n	800624e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <USBD_CDC_ReceivePacket+0x68>)
 800623e:	7819      	ldrb	r1, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006246:	2340      	movs	r3, #64	@ 0x40
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 ffbf 	bl	80081cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20000094 	.word	0x20000094

0800625c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	e01f      	b.n	80062b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	79fa      	ldrb	r2, [r7, #7]
 80062a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f001 fe39 	bl	8007f20 <USBD_LL_Init>
 80062ae:	4603      	mov	r3, r0
 80062b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e025      	b.n	8006320 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	32ae      	adds	r2, #174	@ 0xae
 80062e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32ae      	adds	r2, #174	@ 0xae
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	f107 020e 	add.w	r2, r7, #14
 8006304:	4610      	mov	r0, r2
 8006306:	4798      	blx	r3
 8006308:	4602      	mov	r2, r0
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 fe41 	bl	8007fb8 <USBD_LL_Start>
 8006336:	4603      	mov	r3, r0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006348:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	78fa      	ldrb	r2, [r7, #3]
 800637a:	4611      	mov	r1, r2
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	460b      	mov	r3, r1
 8006398:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	4611      	mov	r1, r2
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	4798      	blx	r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063b4:	2303      	movs	r3, #3
 80063b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 f922 	bl	800761e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80063e8:	461a      	mov	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d01a      	beq.n	8006434 <USBD_LL_SetupStage+0x72>
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d822      	bhi.n	8006448 <USBD_LL_SetupStage+0x86>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <USBD_LL_SetupStage+0x4a>
 8006406:	2b01      	cmp	r3, #1
 8006408:	d00a      	beq.n	8006420 <USBD_LL_SetupStage+0x5e>
 800640a:	e01d      	b.n	8006448 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fb77 	bl	8006b08 <USBD_StdDevReq>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
      break;
 800641e:	e020      	b.n	8006462 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fbdf 	bl	8006bec <USBD_StdItfReq>
 800642e:	4603      	mov	r3, r0
 8006430:	73fb      	strb	r3, [r7, #15]
      break;
 8006432:	e016      	b.n	8006462 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fc41 	bl	8006cc4 <USBD_StdEPReq>
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]
      break;
 8006446:	e00c      	b.n	8006462 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800644e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006452:	b2db      	uxtb	r3, r3
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 fe0e 	bl	8008078 <USBD_LL_StallEP>
 800645c:	4603      	mov	r3, r0
 800645e:	73fb      	strb	r3, [r7, #15]
      break;
 8006460:	bf00      	nop
  }

  return ret;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	460b      	mov	r3, r1
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d177      	bne.n	8006574 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800648a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006492:	2b03      	cmp	r3, #3
 8006494:	f040 80a1 	bne.w	80065da <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	8992      	ldrh	r2, [r2, #12]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d91c      	bls.n	80064de <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	8992      	ldrh	r2, [r2, #12]
 80064ac:	1a9a      	subs	r2, r3, r2
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	8992      	ldrh	r2, [r2, #12]
 80064ba:	441a      	add	r2, r3
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6919      	ldr	r1, [r3, #16]
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	899b      	ldrh	r3, [r3, #12]
 80064c8:	461a      	mov	r2, r3
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4293      	cmp	r3, r2
 80064d0:	bf38      	it	cc
 80064d2:	4613      	movcc	r3, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f001 f9a8 	bl	800782c <USBD_CtlContinueRx>
 80064dc:	e07d      	b.n	80065da <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d014      	beq.n	8006516 <USBD_LL_DataOutStage+0xaa>
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d81d      	bhi.n	800652c <USBD_LL_DataOutStage+0xc0>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <USBD_LL_DataOutStage+0x8e>
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d003      	beq.n	8006500 <USBD_LL_DataOutStage+0x94>
 80064f8:	e018      	b.n	800652c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	75bb      	strb	r3, [r7, #22]
            break;
 80064fe:	e018      	b.n	8006532 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006506:	b2db      	uxtb	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fa6e 	bl	80069ec <USBD_CoreFindIF>
 8006510:	4603      	mov	r3, r0
 8006512:	75bb      	strb	r3, [r7, #22]
            break;
 8006514:	e00d      	b.n	8006532 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800651c:	b2db      	uxtb	r3, r3
 800651e:	4619      	mov	r1, r3
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fa70 	bl	8006a06 <USBD_CoreFindEP>
 8006526:	4603      	mov	r3, r0
 8006528:	75bb      	strb	r3, [r7, #22]
            break;
 800652a:	e002      	b.n	8006532 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	75bb      	strb	r3, [r7, #22]
            break;
 8006530:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006532:	7dbb      	ldrb	r3, [r7, #22]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d119      	bne.n	800656c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b03      	cmp	r3, #3
 8006542:	d113      	bne.n	800656c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006544:	7dba      	ldrb	r2, [r7, #22]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	32ae      	adds	r2, #174	@ 0xae
 800654a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006554:	7dba      	ldrb	r2, [r7, #22]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800655c:	7dba      	ldrb	r2, [r7, #22]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	32ae      	adds	r2, #174	@ 0xae
 8006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f001 f96e 	bl	800784e <USBD_CtlSendStatus>
 8006572:	e032      	b.n	80065da <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006574:	7afb      	ldrb	r3, [r7, #11]
 8006576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4619      	mov	r1, r3
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fa41 	bl	8006a06 <USBD_CoreFindEP>
 8006584:	4603      	mov	r3, r0
 8006586:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006588:	7dbb      	ldrb	r3, [r7, #22]
 800658a:	2bff      	cmp	r3, #255	@ 0xff
 800658c:	d025      	beq.n	80065da <USBD_LL_DataOutStage+0x16e>
 800658e:	7dbb      	ldrb	r3, [r7, #22]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d122      	bne.n	80065da <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b03      	cmp	r3, #3
 800659e:	d117      	bne.n	80065d0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065a0:	7dba      	ldrb	r2, [r7, #22]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	32ae      	adds	r2, #174	@ 0xae
 80065a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00f      	beq.n	80065d0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80065b0:	7dba      	ldrb	r2, [r7, #22]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065b8:	7dba      	ldrb	r2, [r7, #22]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	32ae      	adds	r2, #174	@ 0xae
 80065be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	7afa      	ldrb	r2, [r7, #11]
 80065c6:	4611      	mov	r1, r2
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	4798      	blx	r3
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	e000      	b.n	80065dc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	460b      	mov	r3, r1
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80065f2:	7afb      	ldrb	r3, [r7, #11]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d178      	bne.n	80066ea <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3314      	adds	r3, #20
 80065fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006604:	2b02      	cmp	r3, #2
 8006606:	d163      	bne.n	80066d0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	8992      	ldrh	r2, [r2, #12]
 8006610:	4293      	cmp	r3, r2
 8006612:	d91c      	bls.n	800664e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	8992      	ldrh	r2, [r2, #12]
 800661c:	1a9a      	subs	r2, r3, r2
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	8992      	ldrh	r2, [r2, #12]
 800662a:	441a      	add	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	6919      	ldr	r1, [r3, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	461a      	mov	r2, r3
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f001 f8c4 	bl	80077c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006640:	2300      	movs	r3, #0
 8006642:	2200      	movs	r2, #0
 8006644:	2100      	movs	r1, #0
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f001 fdc0 	bl	80081cc <USBD_LL_PrepareReceive>
 800664c:	e040      	b.n	80066d0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	899b      	ldrh	r3, [r3, #12]
 8006652:	461a      	mov	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	429a      	cmp	r2, r3
 800665a:	d11c      	bne.n	8006696 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006664:	4293      	cmp	r3, r2
 8006666:	d316      	bcc.n	8006696 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006672:	429a      	cmp	r2, r3
 8006674:	d20f      	bcs.n	8006696 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006676:	2200      	movs	r2, #0
 8006678:	2100      	movs	r1, #0
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f001 f8a4 	bl	80077c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006688:	2300      	movs	r3, #0
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f001 fd9c 	bl	80081cc <USBD_LL_PrepareReceive>
 8006694:	e01c      	b.n	80066d0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d10f      	bne.n	80066c2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066c2:	2180      	movs	r1, #128	@ 0x80
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f001 fcd7 	bl	8008078 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f001 f8d2 	bl	8007874 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d03a      	beq.n	8006750 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7ff fe30 	bl	8006340 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80066e8:	e032      	b.n	8006750 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066ea:	7afb      	ldrb	r3, [r7, #11]
 80066ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	4619      	mov	r1, r3
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f986 	bl	8006a06 <USBD_CoreFindEP>
 80066fa:	4603      	mov	r3, r0
 80066fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	2bff      	cmp	r3, #255	@ 0xff
 8006702:	d025      	beq.n	8006750 <USBD_LL_DataInStage+0x16c>
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d122      	bne.n	8006750 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b03      	cmp	r3, #3
 8006714:	d11c      	bne.n	8006750 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006716:	7dfa      	ldrb	r2, [r7, #23]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	32ae      	adds	r2, #174	@ 0xae
 800671c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d014      	beq.n	8006750 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006726:	7dfa      	ldrb	r2, [r7, #23]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800672e:	7dfa      	ldrb	r2, [r7, #23]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	32ae      	adds	r2, #174	@ 0xae
 8006734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	7afa      	ldrb	r2, [r7, #11]
 800673c:	4611      	mov	r1, r2
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	4798      	blx	r3
 8006742:	4603      	mov	r3, r0
 8006744:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006746:	7dbb      	ldrb	r3, [r7, #22]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800674c:	7dbb      	ldrb	r3, [r7, #22]
 800674e:	e000      	b.n	8006752 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d014      	beq.n	80067c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00e      	beq.n	80067c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6852      	ldr	r2, [r2, #4]
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	4611      	mov	r1, r2
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067bc:	2303      	movs	r3, #3
 80067be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067c0:	2340      	movs	r3, #64	@ 0x40
 80067c2:	2200      	movs	r2, #0
 80067c4:	2100      	movs	r1, #0
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 fc11 	bl	8007fee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2240      	movs	r2, #64	@ 0x40
 80067d8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067dc:	2340      	movs	r3, #64	@ 0x40
 80067de:	2200      	movs	r2, #0
 80067e0:	2180      	movs	r1, #128	@ 0x80
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f001 fc03 	bl	8007fee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2240      	movs	r2, #64	@ 0x40
 80067f4:	841a      	strh	r2, [r3, #32]

  return ret;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b04      	cmp	r3, #4
 8006832:	d006      	beq.n	8006842 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800683a:	b2da      	uxtb	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2204      	movs	r2, #4
 8006846:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b04      	cmp	r3, #4
 800686a:	d106      	bne.n	800687a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006872:	b2da      	uxtb	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b03      	cmp	r3, #3
 800689a:	d110      	bne.n	80068be <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	32ae      	adds	r2, #174	@ 0xae
 80068de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e01c      	b.n	8006924 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d115      	bne.n	8006922 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	32ae      	adds	r2, #174	@ 0xae
 8006900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	32ae      	adds	r2, #174	@ 0xae
 8006914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	4611      	mov	r1, r2
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	32ae      	adds	r2, #174	@ 0xae
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800694a:	2303      	movs	r3, #3
 800694c:	e01c      	b.n	8006988 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b03      	cmp	r3, #3
 8006958:	d115      	bne.n	8006986 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	32ae      	adds	r2, #174	@ 0xae
 8006964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	32ae      	adds	r2, #174	@ 0xae
 8006978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	4611      	mov	r1, r2
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6852      	ldr	r2, [r2, #4]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	4611      	mov	r1, r2
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069de:	2303      	movs	r3, #3
 80069e0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	885b      	ldrh	r3, [r3, #2]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	7812      	ldrb	r2, [r2, #0]
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d91f      	bls.n	8006a86 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a4c:	e013      	b.n	8006a76 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a4e:	f107 030a 	add.w	r3, r7, #10
 8006a52:	4619      	mov	r1, r3
 8006a54:	6978      	ldr	r0, [r7, #20]
 8006a56:	f000 f81b 	bl	8006a90 <USBD_GetNextDesc>
 8006a5a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2b05      	cmp	r3, #5
 8006a62:	d108      	bne.n	8006a76 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	789b      	ldrb	r3, [r3, #2]
 8006a6c:	78fa      	ldrb	r2, [r7, #3]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d008      	beq.n	8006a84 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	885b      	ldrh	r3, [r3, #2]
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	897b      	ldrh	r3, [r7, #10]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d8e5      	bhi.n	8006a4e <USBD_GetEpDesc+0x2e>
 8006a82:	e000      	b.n	8006a86 <USBD_GetEpDesc+0x66>
          break;
 8006a84:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a86:	693b      	ldr	r3, [r7, #16]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	7812      	ldrb	r2, [r2, #0]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006aba:	68fb      	ldr	r3, [r7, #12]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	3301      	adds	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ae6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	b21a      	sxth	r2, r3
 8006aee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	b21b      	sxth	r3, r3
 8006af6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006af8:	89fb      	ldrh	r3, [r7, #14]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b1e:	2b40      	cmp	r3, #64	@ 0x40
 8006b20:	d005      	beq.n	8006b2e <USBD_StdDevReq+0x26>
 8006b22:	2b40      	cmp	r3, #64	@ 0x40
 8006b24:	d857      	bhi.n	8006bd6 <USBD_StdDevReq+0xce>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00f      	beq.n	8006b4a <USBD_StdDevReq+0x42>
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d153      	bne.n	8006bd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	32ae      	adds	r2, #174	@ 0xae
 8006b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]
      break;
 8006b48:	e04a      	b.n	8006be0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	2b09      	cmp	r3, #9
 8006b50:	d83b      	bhi.n	8006bca <USBD_StdDevReq+0xc2>
 8006b52:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <USBD_StdDevReq+0x50>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006bc1 	.word	0x08006bc1
 8006b60:	08006bcb 	.word	0x08006bcb
 8006b64:	08006bb7 	.word	0x08006bb7
 8006b68:	08006bcb 	.word	0x08006bcb
 8006b6c:	08006b8b 	.word	0x08006b8b
 8006b70:	08006b81 	.word	0x08006b81
 8006b74:	08006bcb 	.word	0x08006bcb
 8006b78:	08006ba3 	.word	0x08006ba3
 8006b7c:	08006b95 	.word	0x08006b95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa3e 	bl	8007004 <USBD_GetDescriptor>
          break;
 8006b88:	e024      	b.n	8006bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fba3 	bl	80072d8 <USBD_SetAddress>
          break;
 8006b92:	e01f      	b.n	8006bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fbe2 	bl	8007360 <USBD_SetConfig>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73fb      	strb	r3, [r7, #15]
          break;
 8006ba0:	e018      	b.n	8006bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc85 	bl	80074b4 <USBD_GetConfig>
          break;
 8006baa:	e013      	b.n	8006bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fcb6 	bl	8007520 <USBD_GetStatus>
          break;
 8006bb4:	e00e      	b.n	8006bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fce5 	bl	8007588 <USBD_SetFeature>
          break;
 8006bbe:	e009      	b.n	8006bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fd09 	bl	80075da <USBD_ClrFeature>
          break;
 8006bc8:	e004      	b.n	8006bd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fd60 	bl	8007692 <USBD_CtlError>
          break;
 8006bd2:	bf00      	nop
      }
      break;
 8006bd4:	e004      	b.n	8006be0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fd5a 	bl	8007692 <USBD_CtlError>
      break;
 8006bde:	bf00      	nop
  }

  return ret;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop

08006bec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c02:	2b40      	cmp	r3, #64	@ 0x40
 8006c04:	d005      	beq.n	8006c12 <USBD_StdItfReq+0x26>
 8006c06:	2b40      	cmp	r3, #64	@ 0x40
 8006c08:	d852      	bhi.n	8006cb0 <USBD_StdItfReq+0xc4>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <USBD_StdItfReq+0x26>
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d14e      	bne.n	8006cb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d840      	bhi.n	8006ca2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	889b      	ldrh	r3, [r3, #4]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d836      	bhi.n	8006c98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	889b      	ldrh	r3, [r3, #4]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff feda 	bl	80069ec <USBD_CoreFindIF>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2bff      	cmp	r3, #255	@ 0xff
 8006c40:	d01d      	beq.n	8006c7e <USBD_StdItfReq+0x92>
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11a      	bne.n	8006c7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c48:	7bba      	ldrb	r2, [r7, #14]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	32ae      	adds	r2, #174	@ 0xae
 8006c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00f      	beq.n	8006c78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c58:	7bba      	ldrb	r2, [r7, #14]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c60:	7bba      	ldrb	r2, [r7, #14]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	32ae      	adds	r2, #174	@ 0xae
 8006c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c76:	e004      	b.n	8006c82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c7c:	e001      	b.n	8006c82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	88db      	ldrh	r3, [r3, #6]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d110      	bne.n	8006cac <USBD_StdItfReq+0xc0>
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10d      	bne.n	8006cac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fddc 	bl	800784e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c96:	e009      	b.n	8006cac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fcf9 	bl	8007692 <USBD_CtlError>
          break;
 8006ca0:	e004      	b.n	8006cac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fcf4 	bl	8007692 <USBD_CtlError>
          break;
 8006caa:	e000      	b.n	8006cae <USBD_StdItfReq+0xc2>
          break;
 8006cac:	bf00      	nop
      }
      break;
 8006cae:	e004      	b.n	8006cba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fced 	bl	8007692 <USBD_CtlError>
      break;
 8006cb8:	bf00      	nop
  }

  return ret;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	889b      	ldrh	r3, [r3, #4]
 8006cd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ce0:	2b40      	cmp	r3, #64	@ 0x40
 8006ce2:	d007      	beq.n	8006cf4 <USBD_StdEPReq+0x30>
 8006ce4:	2b40      	cmp	r3, #64	@ 0x40
 8006ce6:	f200 8181 	bhi.w	8006fec <USBD_StdEPReq+0x328>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d02a      	beq.n	8006d44 <USBD_StdEPReq+0x80>
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	f040 817c 	bne.w	8006fec <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fe84 	bl	8006a06 <USBD_CoreFindEP>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d02:	7b7b      	ldrb	r3, [r7, #13]
 8006d04:	2bff      	cmp	r3, #255	@ 0xff
 8006d06:	f000 8176 	beq.w	8006ff6 <USBD_StdEPReq+0x332>
 8006d0a:	7b7b      	ldrb	r3, [r7, #13]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f040 8172 	bne.w	8006ff6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006d12:	7b7a      	ldrb	r2, [r7, #13]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d1a:	7b7a      	ldrb	r2, [r7, #13]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	32ae      	adds	r2, #174	@ 0xae
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 8165 	beq.w	8006ff6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d2c:	7b7a      	ldrb	r2, [r7, #13]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	32ae      	adds	r2, #174	@ 0xae
 8006d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d42:	e158      	b.n	8006ff6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	785b      	ldrb	r3, [r3, #1]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d008      	beq.n	8006d5e <USBD_StdEPReq+0x9a>
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	f300 8147 	bgt.w	8006fe0 <USBD_StdEPReq+0x31c>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 809b 	beq.w	8006e8e <USBD_StdEPReq+0x1ca>
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d03c      	beq.n	8006dd6 <USBD_StdEPReq+0x112>
 8006d5c:	e140      	b.n	8006fe0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d002      	beq.n	8006d70 <USBD_StdEPReq+0xac>
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d016      	beq.n	8006d9c <USBD_StdEPReq+0xd8>
 8006d6e:	e02c      	b.n	8006dca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00d      	beq.n	8006d92 <USBD_StdEPReq+0xce>
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	2b80      	cmp	r3, #128	@ 0x80
 8006d7a:	d00a      	beq.n	8006d92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f979 	bl	8008078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d86:	2180      	movs	r1, #128	@ 0x80
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f975 	bl	8008078 <USBD_LL_StallEP>
 8006d8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d90:	e020      	b.n	8006dd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc7c 	bl	8007692 <USBD_CtlError>
              break;
 8006d9a:	e01b      	b.n	8006dd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	885b      	ldrh	r3, [r3, #2]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10e      	bne.n	8006dc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <USBD_StdEPReq+0xfe>
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	2b80      	cmp	r3, #128	@ 0x80
 8006dae:	d008      	beq.n	8006dc2 <USBD_StdEPReq+0xfe>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	88db      	ldrh	r3, [r3, #6]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 f95b 	bl	8008078 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fd43 	bl	800784e <USBD_CtlSendStatus>

              break;
 8006dc8:	e004      	b.n	8006dd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fc60 	bl	8007692 <USBD_CtlError>
              break;
 8006dd2:	bf00      	nop
          }
          break;
 8006dd4:	e109      	b.n	8006fea <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d002      	beq.n	8006de8 <USBD_StdEPReq+0x124>
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d016      	beq.n	8006e14 <USBD_StdEPReq+0x150>
 8006de6:	e04b      	b.n	8006e80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00d      	beq.n	8006e0a <USBD_StdEPReq+0x146>
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b80      	cmp	r3, #128	@ 0x80
 8006df2:	d00a      	beq.n	8006e0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 f93d 	bl	8008078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dfe:	2180      	movs	r1, #128	@ 0x80
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f939 	bl	8008078 <USBD_LL_StallEP>
 8006e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e08:	e040      	b.n	8006e8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fc40 	bl	8007692 <USBD_CtlError>
              break;
 8006e12:	e03b      	b.n	8006e8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	885b      	ldrh	r3, [r3, #2]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d136      	bne.n	8006e8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d004      	beq.n	8006e30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 f943 	bl	80080b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fd0c 	bl	800784e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff fde3 	bl	8006a06 <USBD_CoreFindEP>
 8006e40:	4603      	mov	r3, r0
 8006e42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e44:	7b7b      	ldrb	r3, [r7, #13]
 8006e46:	2bff      	cmp	r3, #255	@ 0xff
 8006e48:	d01f      	beq.n	8006e8a <USBD_StdEPReq+0x1c6>
 8006e4a:	7b7b      	ldrb	r3, [r7, #13]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d11c      	bne.n	8006e8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e50:	7b7a      	ldrb	r2, [r7, #13]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e58:	7b7a      	ldrb	r2, [r7, #13]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	32ae      	adds	r2, #174	@ 0xae
 8006e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d010      	beq.n	8006e8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e68:	7b7a      	ldrb	r2, [r7, #13]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	32ae      	adds	r2, #174	@ 0xae
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e7e:	e004      	b.n	8006e8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fc05 	bl	8007692 <USBD_CtlError>
              break;
 8006e88:	e000      	b.n	8006e8c <USBD_StdEPReq+0x1c8>
              break;
 8006e8a:	bf00      	nop
          }
          break;
 8006e8c:	e0ad      	b.n	8006fea <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d002      	beq.n	8006ea0 <USBD_StdEPReq+0x1dc>
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d033      	beq.n	8006f06 <USBD_StdEPReq+0x242>
 8006e9e:	e099      	b.n	8006fd4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <USBD_StdEPReq+0x1f2>
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	2b80      	cmp	r3, #128	@ 0x80
 8006eaa:	d004      	beq.n	8006eb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fbef 	bl	8007692 <USBD_CtlError>
                break;
 8006eb4:	e093      	b.n	8006fde <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da0b      	bge.n	8006ed6 <USBD_StdEPReq+0x212>
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	3310      	adds	r3, #16
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	e00b      	b.n	8006eee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	4413      	add	r3, r2
 8006eec:	3304      	adds	r3, #4
 8006eee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	330e      	adds	r3, #14
 8006efa:	2202      	movs	r2, #2
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fc44 	bl	800778c <USBD_CtlSendData>
              break;
 8006f04:	e06b      	b.n	8006fde <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da11      	bge.n	8006f32 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	f003 020f 	and.w	r2, r3, #15
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	3323      	adds	r3, #35	@ 0x23
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d117      	bne.n	8006f58 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fbb1 	bl	8007692 <USBD_CtlError>
                  break;
 8006f30:	e055      	b.n	8006fde <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	f003 020f 	and.w	r2, r3, #15
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d104      	bne.n	8006f58 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fb9e 	bl	8007692 <USBD_CtlError>
                  break;
 8006f56:	e042      	b.n	8006fde <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	da0b      	bge.n	8006f78 <USBD_StdEPReq+0x2b4>
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	3310      	adds	r3, #16
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	3304      	adds	r3, #4
 8006f76:	e00b      	b.n	8006f90 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3304      	adds	r3, #4
 8006f90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <USBD_StdEPReq+0x2da>
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b80      	cmp	r3, #128	@ 0x80
 8006f9c:	d103      	bne.n	8006fa6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	739a      	strb	r2, [r3, #14]
 8006fa4:	e00e      	b.n	8006fc4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 f8a2 	bl	80080f4 <USBD_LL_IsStallEP>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	739a      	strb	r2, [r3, #14]
 8006fbc:	e002      	b.n	8006fc4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	330e      	adds	r3, #14
 8006fc8:	2202      	movs	r2, #2
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fbdd 	bl	800778c <USBD_CtlSendData>
              break;
 8006fd2:	e004      	b.n	8006fde <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb5b 	bl	8007692 <USBD_CtlError>
              break;
 8006fdc:	bf00      	nop
          }
          break;
 8006fde:	e004      	b.n	8006fea <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fb55 	bl	8007692 <USBD_CtlError>
          break;
 8006fe8:	bf00      	nop
      }
      break;
 8006fea:	e005      	b.n	8006ff8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fb4f 	bl	8007692 <USBD_CtlError>
      break;
 8006ff4:	e000      	b.n	8006ff8 <USBD_StdEPReq+0x334>
      break;
 8006ff6:	bf00      	nop
  }

  return ret;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	885b      	ldrh	r3, [r3, #2]
 800701e:	0a1b      	lsrs	r3, r3, #8
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	2b06      	cmp	r3, #6
 8007026:	f200 8128 	bhi.w	800727a <USBD_GetDescriptor+0x276>
 800702a:	a201      	add	r2, pc, #4	@ (adr r2, 8007030 <USBD_GetDescriptor+0x2c>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	0800704d 	.word	0x0800704d
 8007034:	08007065 	.word	0x08007065
 8007038:	080070a5 	.word	0x080070a5
 800703c:	0800727b 	.word	0x0800727b
 8007040:	0800727b 	.word	0x0800727b
 8007044:	0800721b 	.word	0x0800721b
 8007048:	08007247 	.word	0x08007247
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	7c12      	ldrb	r2, [r2, #16]
 8007058:	f107 0108 	add.w	r1, r7, #8
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
 8007060:	60f8      	str	r0, [r7, #12]
      break;
 8007062:	e112      	b.n	800728a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	7c1b      	ldrb	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10d      	bne.n	8007088 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007074:	f107 0208 	add.w	r2, r7, #8
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	2202      	movs	r2, #2
 8007084:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007086:	e100      	b.n	800728a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800708e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007090:	f107 0208 	add.w	r2, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	2202      	movs	r2, #2
 80070a0:	701a      	strb	r2, [r3, #0]
      break;
 80070a2:	e0f2      	b.n	800728a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	885b      	ldrh	r3, [r3, #2]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b05      	cmp	r3, #5
 80070ac:	f200 80ac 	bhi.w	8007208 <USBD_GetDescriptor+0x204>
 80070b0:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <USBD_GetDescriptor+0xb4>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	080070d1 	.word	0x080070d1
 80070bc:	08007105 	.word	0x08007105
 80070c0:	08007139 	.word	0x08007139
 80070c4:	0800716d 	.word	0x0800716d
 80070c8:	080071a1 	.word	0x080071a1
 80070cc:	080071d5 	.word	0x080071d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7c12      	ldrb	r2, [r2, #16]
 80070e8:	f107 0108 	add.w	r1, r7, #8
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
 80070f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070f2:	e091      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 facb 	bl	8007692 <USBD_CtlError>
            err++;
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	3301      	adds	r3, #1
 8007100:	72fb      	strb	r3, [r7, #11]
          break;
 8007102:	e089      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	7c12      	ldrb	r2, [r2, #16]
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007126:	e077      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fab1 	bl	8007692 <USBD_CtlError>
            err++;
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	3301      	adds	r3, #1
 8007134:	72fb      	strb	r3, [r7, #11]
          break;
 8007136:	e06f      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7c12      	ldrb	r2, [r2, #16]
 8007150:	f107 0108 	add.w	r1, r7, #8
 8007154:	4610      	mov	r0, r2
 8007156:	4798      	blx	r3
 8007158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715a:	e05d      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa97 	bl	8007692 <USBD_CtlError>
            err++;
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	3301      	adds	r3, #1
 8007168:	72fb      	strb	r3, [r7, #11]
          break;
 800716a:	e055      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	7c12      	ldrb	r2, [r2, #16]
 8007184:	f107 0108 	add.w	r1, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800718e:	e043      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa7d 	bl	8007692 <USBD_CtlError>
            err++;
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	3301      	adds	r3, #1
 800719c:	72fb      	strb	r3, [r7, #11]
          break;
 800719e:	e03b      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	7c12      	ldrb	r2, [r2, #16]
 80071b8:	f107 0108 	add.w	r1, r7, #8
 80071bc:	4610      	mov	r0, r2
 80071be:	4798      	blx	r3
 80071c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071c2:	e029      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa63 	bl	8007692 <USBD_CtlError>
            err++;
 80071cc:	7afb      	ldrb	r3, [r7, #11]
 80071ce:	3301      	adds	r3, #1
 80071d0:	72fb      	strb	r3, [r7, #11]
          break;
 80071d2:	e021      	b.n	8007218 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00b      	beq.n	80071f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	7c12      	ldrb	r2, [r2, #16]
 80071ec:	f107 0108 	add.w	r1, r7, #8
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071f6:	e00f      	b.n	8007218 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa49 	bl	8007692 <USBD_CtlError>
            err++;
 8007200:	7afb      	ldrb	r3, [r7, #11]
 8007202:	3301      	adds	r3, #1
 8007204:	72fb      	strb	r3, [r7, #11]
          break;
 8007206:	e007      	b.n	8007218 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa41 	bl	8007692 <USBD_CtlError>
          err++;
 8007210:	7afb      	ldrb	r3, [r7, #11]
 8007212:	3301      	adds	r3, #1
 8007214:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007216:	bf00      	nop
      }
      break;
 8007218:	e037      	b.n	800728a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	7c1b      	ldrb	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d109      	bne.n	8007236 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722a:	f107 0208 	add.w	r2, r7, #8
 800722e:	4610      	mov	r0, r2
 8007230:	4798      	blx	r3
 8007232:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007234:	e029      	b.n	800728a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fa2a 	bl	8007692 <USBD_CtlError>
        err++;
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	3301      	adds	r3, #1
 8007242:	72fb      	strb	r3, [r7, #11]
      break;
 8007244:	e021      	b.n	800728a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	7c1b      	ldrb	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10d      	bne.n	800726a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007256:	f107 0208 	add.w	r2, r7, #8
 800725a:	4610      	mov	r0, r2
 800725c:	4798      	blx	r3
 800725e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	2207      	movs	r2, #7
 8007266:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007268:	e00f      	b.n	800728a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa10 	bl	8007692 <USBD_CtlError>
        err++;
 8007272:	7afb      	ldrb	r3, [r7, #11]
 8007274:	3301      	adds	r3, #1
 8007276:	72fb      	strb	r3, [r7, #11]
      break;
 8007278:	e007      	b.n	800728a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa08 	bl	8007692 <USBD_CtlError>
      err++;
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	3301      	adds	r3, #1
 8007286:	72fb      	strb	r3, [r7, #11]
      break;
 8007288:	bf00      	nop
  }

  if (err != 0U)
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d11e      	bne.n	80072ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	88db      	ldrh	r3, [r3, #6]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d016      	beq.n	80072c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007298:	893b      	ldrh	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00e      	beq.n	80072bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	88da      	ldrh	r2, [r3, #6]
 80072a2:	893b      	ldrh	r3, [r7, #8]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	bf28      	it	cs
 80072a8:	4613      	movcs	r3, r2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072ae:	893b      	ldrh	r3, [r7, #8]
 80072b0:	461a      	mov	r2, r3
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fa69 	bl	800778c <USBD_CtlSendData>
 80072ba:	e009      	b.n	80072d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f9e7 	bl	8007692 <USBD_CtlError>
 80072c4:	e004      	b.n	80072d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fac1 	bl	800784e <USBD_CtlSendStatus>
 80072cc:	e000      	b.n	80072d0 <USBD_GetDescriptor+0x2cc>
    return;
 80072ce:	bf00      	nop
  }
}
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop

080072d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	889b      	ldrh	r3, [r3, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d131      	bne.n	800734e <USBD_SetAddress+0x76>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	88db      	ldrh	r3, [r3, #6]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12d      	bne.n	800734e <USBD_SetAddress+0x76>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	885b      	ldrh	r3, [r3, #2]
 80072f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80072f8:	d829      	bhi.n	800734e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	885b      	ldrh	r3, [r3, #2]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d104      	bne.n	800731c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f9bc 	bl	8007692 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	e01d      	b.n	8007358 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7bfa      	ldrb	r2, [r7, #15]
 8007320:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 ff0f 	bl	800814c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa8d 	bl	800784e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007342:	e009      	b.n	8007358 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734c:	e004      	b.n	8007358 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f99e 	bl	8007692 <USBD_CtlError>
  }
}
 8007356:	bf00      	nop
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	885b      	ldrh	r3, [r3, #2]
 8007372:	b2da      	uxtb	r2, r3
 8007374:	4b4e      	ldr	r3, [pc, #312]	@ (80074b0 <USBD_SetConfig+0x150>)
 8007376:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007378:	4b4d      	ldr	r3, [pc, #308]	@ (80074b0 <USBD_SetConfig+0x150>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d905      	bls.n	800738c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f985 	bl	8007692 <USBD_CtlError>
    return USBD_FAIL;
 8007388:	2303      	movs	r3, #3
 800738a:	e08c      	b.n	80074a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d002      	beq.n	800739e <USBD_SetConfig+0x3e>
 8007398:	2b03      	cmp	r3, #3
 800739a:	d029      	beq.n	80073f0 <USBD_SetConfig+0x90>
 800739c:	e075      	b.n	800748a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800739e:	4b44      	ldr	r3, [pc, #272]	@ (80074b0 <USBD_SetConfig+0x150>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d020      	beq.n	80073e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073a6:	4b42      	ldr	r3, [pc, #264]	@ (80074b0 <USBD_SetConfig+0x150>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073b0:	4b3f      	ldr	r3, [pc, #252]	@ (80074b0 <USBD_SetConfig+0x150>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fe ffcd 	bl	8006356 <USBD_SetClassConfig>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d008      	beq.n	80073d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f962 	bl	8007692 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2202      	movs	r2, #2
 80073d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073d6:	e065      	b.n	80074a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa38 	bl	800784e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2203      	movs	r2, #3
 80073e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80073e6:	e05d      	b.n	80074a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa30 	bl	800784e <USBD_CtlSendStatus>
      break;
 80073ee:	e059      	b.n	80074a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073f0:	4b2f      	ldr	r3, [pc, #188]	@ (80074b0 <USBD_SetConfig+0x150>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d112      	bne.n	800741e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007400:	4b2b      	ldr	r3, [pc, #172]	@ (80074b0 <USBD_SetConfig+0x150>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800740a:	4b29      	ldr	r3, [pc, #164]	@ (80074b0 <USBD_SetConfig+0x150>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fe ffbc 	bl	800638e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa19 	bl	800784e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800741c:	e042      	b.n	80074a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800741e:	4b24      	ldr	r3, [pc, #144]	@ (80074b0 <USBD_SetConfig+0x150>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d02a      	beq.n	8007482 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	b2db      	uxtb	r3, r3
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fe ffaa 	bl	800638e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800743a:	4b1d      	ldr	r3, [pc, #116]	@ (80074b0 <USBD_SetConfig+0x150>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007444:	4b1a      	ldr	r3, [pc, #104]	@ (80074b0 <USBD_SetConfig+0x150>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fe ff83 	bl	8006356 <USBD_SetClassConfig>
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00f      	beq.n	800747a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f918 	bl	8007692 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fe ff8f 	bl	800638e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007478:	e014      	b.n	80074a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9e7 	bl	800784e <USBD_CtlSendStatus>
      break;
 8007480:	e010      	b.n	80074a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f9e3 	bl	800784e <USBD_CtlSendStatus>
      break;
 8007488:	e00c      	b.n	80074a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f900 	bl	8007692 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007492:	4b07      	ldr	r3, [pc, #28]	@ (80074b0 <USBD_SetConfig+0x150>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7fe ff78 	bl	800638e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800749e:	2303      	movs	r3, #3
 80074a0:	73fb      	strb	r3, [r7, #15]
      break;
 80074a2:	bf00      	nop
  }

  return ret;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	2000028c 	.word	0x2000028c

080074b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d004      	beq.n	80074d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f8e2 	bl	8007692 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074ce:	e023      	b.n	8007518 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	dc02      	bgt.n	80074e2 <USBD_GetConfig+0x2e>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dc03      	bgt.n	80074e8 <USBD_GetConfig+0x34>
 80074e0:	e015      	b.n	800750e <USBD_GetConfig+0x5a>
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d00b      	beq.n	80074fe <USBD_GetConfig+0x4a>
 80074e6:	e012      	b.n	800750e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3308      	adds	r3, #8
 80074f2:	2201      	movs	r2, #1
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f948 	bl	800778c <USBD_CtlSendData>
        break;
 80074fc:	e00c      	b.n	8007518 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3304      	adds	r3, #4
 8007502:	2201      	movs	r2, #1
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f940 	bl	800778c <USBD_CtlSendData>
        break;
 800750c:	e004      	b.n	8007518 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f8be 	bl	8007692 <USBD_CtlError>
        break;
 8007516:	bf00      	nop
}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007530:	b2db      	uxtb	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	2b02      	cmp	r3, #2
 8007536:	d81e      	bhi.n	8007576 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	88db      	ldrh	r3, [r3, #6]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d004      	beq.n	800754a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f8a5 	bl	8007692 <USBD_CtlError>
        break;
 8007548:	e01a      	b.n	8007580 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f043 0202 	orr.w	r2, r3, #2
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	330c      	adds	r3, #12
 800756a:	2202      	movs	r2, #2
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f90c 	bl	800778c <USBD_CtlSendData>
      break;
 8007574:	e004      	b.n	8007580 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f88a 	bl	8007692 <USBD_CtlError>
      break;
 800757e:	bf00      	nop
  }
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	885b      	ldrh	r3, [r3, #2]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d107      	bne.n	80075aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f953 	bl	800784e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075a8:	e013      	b.n	80075d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	885b      	ldrh	r3, [r3, #2]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d10b      	bne.n	80075ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	889b      	ldrh	r3, [r3, #4]
 80075b6:	0a1b      	lsrs	r3, r3, #8
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f943 	bl	800784e <USBD_CtlSendStatus>
}
 80075c8:	e003      	b.n	80075d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f860 	bl	8007692 <USBD_CtlError>
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d80b      	bhi.n	800760a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d10c      	bne.n	8007614 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f923 	bl	800784e <USBD_CtlSendStatus>
      }
      break;
 8007608:	e004      	b.n	8007614 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f840 	bl	8007692 <USBD_CtlError>
      break;
 8007612:	e000      	b.n	8007616 <USBD_ClrFeature+0x3c>
      break;
 8007614:	bf00      	nop
  }
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	781a      	ldrb	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff fa3d 	bl	8006ac8 <SWAPBYTE>
 800764e:	4603      	mov	r3, r0
 8007650:	461a      	mov	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3301      	adds	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f7ff fa30 	bl	8006ac8 <SWAPBYTE>
 8007668:	4603      	mov	r3, r0
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fa23 	bl	8006ac8 <SWAPBYTE>
 8007682:	4603      	mov	r3, r0
 8007684:	461a      	mov	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	80da      	strh	r2, [r3, #6]
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800769c:	2180      	movs	r1, #128	@ 0x80
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fcea 	bl	8008078 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076a4:	2100      	movs	r1, #0
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fce6 	bl	8008078 <USBD_LL_StallEP>
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d042      	beq.n	8007750 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80076ce:	6938      	ldr	r0, [r7, #16]
 80076d0:	f000 f842 	bl	8007758 <USBD_GetLen>
 80076d4:	4603      	mov	r3, r0
 80076d6:	3301      	adds	r3, #1
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076de:	d808      	bhi.n	80076f2 <USBD_GetString+0x3e>
 80076e0:	6938      	ldr	r0, [r7, #16]
 80076e2:	f000 f839 	bl	8007758 <USBD_GetLen>
 80076e6:	4603      	mov	r3, r0
 80076e8:	3301      	adds	r3, #1
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	e001      	b.n	80076f6 <USBD_GetString+0x42>
 80076f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	4413      	add	r3, r2
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	701a      	strb	r2, [r3, #0]
  idx++;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	3301      	adds	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	2203      	movs	r2, #3
 8007714:	701a      	strb	r2, [r3, #0]
  idx++;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	3301      	adds	r3, #1
 800771a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800771c:	e013      	b.n	8007746 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	4413      	add	r3, r2
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3301      	adds	r3, #1
 800772e:	613b      	str	r3, [r7, #16]
    idx++;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	3301      	adds	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	4413      	add	r3, r2
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	3301      	adds	r3, #1
 8007744:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e7      	bne.n	800771e <USBD_GetString+0x6a>
 800774e:	e000      	b.n	8007752 <USBD_GetString+0x9e>
    return;
 8007750:	bf00      	nop
  }
}
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007768:	e005      	b.n	8007776 <USBD_GetLen+0x1e>
  {
    len++;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	3301      	adds	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	3301      	adds	r3, #1
 8007774:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1f5      	bne.n	800776a <USBD_GetLen+0x12>
  }

  return len;
 800777e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2202      	movs	r2, #2
 800779c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	2100      	movs	r1, #0
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 fce6 	bl	800818a <USBD_LL_Transmit>

  return USBD_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	2100      	movs	r1, #0
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 fcd5 	bl	800818a <USBD_LL_Transmit>

  return USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2203      	movs	r2, #3
 80077fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	2100      	movs	r1, #0
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fcd5 	bl	80081cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	2100      	movs	r1, #0
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fcc4 	bl	80081cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2204      	movs	r2, #4
 800785a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800785e:	2300      	movs	r3, #0
 8007860:	2200      	movs	r2, #0
 8007862:	2100      	movs	r1, #0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc90 	bl	800818a <USBD_LL_Transmit>

  return USBD_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2205      	movs	r2, #5
 8007880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007884:	2300      	movs	r3, #0
 8007886:	2200      	movs	r2, #0
 8007888:	2100      	movs	r1, #0
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fc9e 	bl	80081cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078a0:	2200      	movs	r2, #0
 80078a2:	4912      	ldr	r1, [pc, #72]	@ (80078ec <MX_USB_DEVICE_Init+0x50>)
 80078a4:	4812      	ldr	r0, [pc, #72]	@ (80078f0 <MX_USB_DEVICE_Init+0x54>)
 80078a6:	f7fe fcd9 	bl	800625c <USBD_Init>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078b0:	f7f9 f827 	bl	8000902 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078b4:	490f      	ldr	r1, [pc, #60]	@ (80078f4 <MX_USB_DEVICE_Init+0x58>)
 80078b6:	480e      	ldr	r0, [pc, #56]	@ (80078f0 <MX_USB_DEVICE_Init+0x54>)
 80078b8:	f7fe fd00 	bl	80062bc <USBD_RegisterClass>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078c2:	f7f9 f81e 	bl	8000902 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078c6:	490c      	ldr	r1, [pc, #48]	@ (80078f8 <MX_USB_DEVICE_Init+0x5c>)
 80078c8:	4809      	ldr	r0, [pc, #36]	@ (80078f0 <MX_USB_DEVICE_Init+0x54>)
 80078ca:	f7fe fbf7 	bl	80060bc <USBD_CDC_RegisterInterface>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078d4:	f7f9 f815 	bl	8000902 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078d8:	4805      	ldr	r0, [pc, #20]	@ (80078f0 <MX_USB_DEVICE_Init+0x54>)
 80078da:	f7fe fd25 	bl	8006328 <USBD_Start>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078e4:	f7f9 f80d 	bl	8000902 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078e8:	bf00      	nop
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	200000ac 	.word	0x200000ac
 80078f0:	20000290 	.word	0x20000290
 80078f4:	20000018 	.word	0x20000018
 80078f8:	20000098 	.word	0x20000098

080078fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007900:	2200      	movs	r2, #0
 8007902:	4905      	ldr	r1, [pc, #20]	@ (8007918 <CDC_Init_FS+0x1c>)
 8007904:	4805      	ldr	r0, [pc, #20]	@ (800791c <CDC_Init_FS+0x20>)
 8007906:	f7fe fbf3 	bl	80060f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800790a:	4905      	ldr	r1, [pc, #20]	@ (8007920 <CDC_Init_FS+0x24>)
 800790c:	4803      	ldr	r0, [pc, #12]	@ (800791c <CDC_Init_FS+0x20>)
 800790e:	f7fe fc11 	bl	8006134 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007912:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007914:	4618      	mov	r0, r3
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000d6c 	.word	0x20000d6c
 800791c:	20000290 	.word	0x20000290
 8007920:	2000056c 	.word	0x2000056c

08007924 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007928:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800792a:	4618      	mov	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	71fb      	strb	r3, [r7, #7]
 8007940:	4613      	mov	r3, r2
 8007942:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	2b23      	cmp	r3, #35	@ 0x23
 8007948:	d84a      	bhi.n	80079e0 <CDC_Control_FS+0xac>
 800794a:	a201      	add	r2, pc, #4	@ (adr r2, 8007950 <CDC_Control_FS+0x1c>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	080079e1 	.word	0x080079e1
 8007954:	080079e1 	.word	0x080079e1
 8007958:	080079e1 	.word	0x080079e1
 800795c:	080079e1 	.word	0x080079e1
 8007960:	080079e1 	.word	0x080079e1
 8007964:	080079e1 	.word	0x080079e1
 8007968:	080079e1 	.word	0x080079e1
 800796c:	080079e1 	.word	0x080079e1
 8007970:	080079e1 	.word	0x080079e1
 8007974:	080079e1 	.word	0x080079e1
 8007978:	080079e1 	.word	0x080079e1
 800797c:	080079e1 	.word	0x080079e1
 8007980:	080079e1 	.word	0x080079e1
 8007984:	080079e1 	.word	0x080079e1
 8007988:	080079e1 	.word	0x080079e1
 800798c:	080079e1 	.word	0x080079e1
 8007990:	080079e1 	.word	0x080079e1
 8007994:	080079e1 	.word	0x080079e1
 8007998:	080079e1 	.word	0x080079e1
 800799c:	080079e1 	.word	0x080079e1
 80079a0:	080079e1 	.word	0x080079e1
 80079a4:	080079e1 	.word	0x080079e1
 80079a8:	080079e1 	.word	0x080079e1
 80079ac:	080079e1 	.word	0x080079e1
 80079b0:	080079e1 	.word	0x080079e1
 80079b4:	080079e1 	.word	0x080079e1
 80079b8:	080079e1 	.word	0x080079e1
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	080079e1 	.word	0x080079e1
 80079c4:	080079e1 	.word	0x080079e1
 80079c8:	080079e1 	.word	0x080079e1
 80079cc:	080079e1 	.word	0x080079e1
 80079d0:	080079e1 	.word	0x080079e1
 80079d4:	080079e1 	.word	0x080079e1
 80079d8:	080079e1 	.word	0x080079e1
 80079dc:	080079e1 	.word	0x080079e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079e0:	bf00      	nop
  }

  return (USBD_OK);
 80079e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079fa:	6879      	ldr	r1, [r7, #4]
 80079fc:	4805      	ldr	r0, [pc, #20]	@ (8007a14 <CDC_Receive_FS+0x24>)
 80079fe:	f7fe fb99 	bl	8006134 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a02:	4804      	ldr	r0, [pc, #16]	@ (8007a14 <CDC_Receive_FS+0x24>)
 8007a04:	f7fe fbf4 	bl	80061f0 <USBD_CDC_ReceivePacket>
  //CDC_Transmit_FS(Buf, *Len); // ничего не получилось
  return (USBD_OK);
 8007a08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000290 	.word	0x20000290

08007a18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a28:	4b0d      	ldr	r3, [pc, #52]	@ (8007a60 <CDC_Transmit_FS+0x48>)
 8007a2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e00b      	b.n	8007a56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a3e:	887b      	ldrh	r3, [r7, #2]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4806      	ldr	r0, [pc, #24]	@ (8007a60 <CDC_Transmit_FS+0x48>)
 8007a46:	f7fe fb53 	bl	80060f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a4a:	4805      	ldr	r0, [pc, #20]	@ (8007a60 <CDC_Transmit_FS+0x48>)
 8007a4c:	f7fe fb90 	bl	8006170 <USBD_CDC_TransmitPacket>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000290 	.word	0x20000290

08007a64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2212      	movs	r2, #18
 8007a98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a9a:	4b03      	ldr	r3, [pc, #12]	@ (8007aa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	200000c8 	.word	0x200000c8

08007aac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2204      	movs	r2, #4
 8007abc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007abe:	4b03      	ldr	r3, [pc, #12]	@ (8007acc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	200000dc 	.word	0x200000dc

08007ad0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	6039      	str	r1, [r7, #0]
 8007ada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d105      	bne.n	8007aee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	4907      	ldr	r1, [pc, #28]	@ (8007b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ae6:	4808      	ldr	r0, [pc, #32]	@ (8007b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ae8:	f7ff fde4 	bl	80076b4 <USBD_GetString>
 8007aec:	e004      	b.n	8007af8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4904      	ldr	r1, [pc, #16]	@ (8007b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007af2:	4805      	ldr	r0, [pc, #20]	@ (8007b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007af4:	f7ff fdde 	bl	80076b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007af8:	4b02      	ldr	r3, [pc, #8]	@ (8007b04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	2000156c 	.word	0x2000156c
 8007b08:	0800c004 	.word	0x0800c004

08007b0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	4904      	ldr	r1, [pc, #16]	@ (8007b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b1c:	4804      	ldr	r0, [pc, #16]	@ (8007b30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b1e:	f7ff fdc9 	bl	80076b4 <USBD_GetString>
  return USBD_StrDesc;
 8007b22:	4b02      	ldr	r3, [pc, #8]	@ (8007b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	2000156c 	.word	0x2000156c
 8007b30:	0800c01c 	.word	0x0800c01c

08007b34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	221a      	movs	r2, #26
 8007b44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b46:	f000 f843 	bl	8007bd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b4a:	4b02      	ldr	r3, [pc, #8]	@ (8007b54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	200000e0 	.word	0x200000e0

08007b58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4907      	ldr	r1, [pc, #28]	@ (8007b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b6e:	4808      	ldr	r0, [pc, #32]	@ (8007b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b70:	f7ff fda0 	bl	80076b4 <USBD_GetString>
 8007b74:	e004      	b.n	8007b80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	4904      	ldr	r1, [pc, #16]	@ (8007b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b7a:	4805      	ldr	r0, [pc, #20]	@ (8007b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b7c:	f7ff fd9a 	bl	80076b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b80:	4b02      	ldr	r3, [pc, #8]	@ (8007b8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000156c 	.word	0x2000156c
 8007b90:	0800c030 	.word	0x0800c030

08007b94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d105      	bne.n	8007bb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	4907      	ldr	r1, [pc, #28]	@ (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007baa:	4808      	ldr	r0, [pc, #32]	@ (8007bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bac:	f7ff fd82 	bl	80076b4 <USBD_GetString>
 8007bb0:	e004      	b.n	8007bbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	4904      	ldr	r1, [pc, #16]	@ (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bb6:	4805      	ldr	r0, [pc, #20]	@ (8007bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bb8:	f7ff fd7c 	bl	80076b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bbc:	4b02      	ldr	r3, [pc, #8]	@ (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	2000156c 	.word	0x2000156c
 8007bcc:	0800c03c 	.word	0x0800c03c

08007bd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c14 <Get_SerialNum+0x44>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8007c18 <Get_SerialNum+0x48>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007be2:	4b0e      	ldr	r3, [pc, #56]	@ (8007c1c <Get_SerialNum+0x4c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	4909      	ldr	r1, [pc, #36]	@ (8007c20 <Get_SerialNum+0x50>)
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f814 	bl	8007c28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c00:	2204      	movs	r2, #4
 8007c02:	4908      	ldr	r1, [pc, #32]	@ (8007c24 <Get_SerialNum+0x54>)
 8007c04:	68b8      	ldr	r0, [r7, #8]
 8007c06:	f000 f80f 	bl	8007c28 <IntToUnicode>
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	1fff7a10 	.word	0x1fff7a10
 8007c18:	1fff7a14 	.word	0x1fff7a14
 8007c1c:	1fff7a18 	.word	0x1fff7a18
 8007c20:	200000e2 	.word	0x200000e2
 8007c24:	200000f2 	.word	0x200000f2

08007c28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	75fb      	strb	r3, [r7, #23]
 8007c3e:	e027      	b.n	8007c90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	0f1b      	lsrs	r3, r3, #28
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	d80b      	bhi.n	8007c60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	0f1b      	lsrs	r3, r3, #28
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4619      	mov	r1, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	440b      	add	r3, r1
 8007c58:	3230      	adds	r2, #48	@ 0x30
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e00a      	b.n	8007c76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	0f1b      	lsrs	r3, r3, #28
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	440b      	add	r3, r1
 8007c70:	3237      	adds	r2, #55	@ 0x37
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	3301      	adds	r3, #1
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	4413      	add	r3, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	75fb      	strb	r3, [r7, #23]
 8007c90:	7dfa      	ldrb	r2, [r7, #23]
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d3d3      	bcc.n	8007c40 <IntToUnicode+0x18>
  }
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
	...

08007ca8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	@ 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb0:	f107 0314 	add.w	r3, r7, #20
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	605a      	str	r2, [r3, #4]
 8007cba:	609a      	str	r2, [r3, #8]
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cc8:	d13a      	bne.n	8007d40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cca:	2300      	movs	r3, #0
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	4b1e      	ldr	r3, [pc, #120]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007cd4:	f043 0301 	orr.w	r3, r3, #1
 8007cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007cda:	4b1b      	ldr	r3, [pc, #108]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ce6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cec:	2302      	movs	r3, #2
 8007cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cf8:	230a      	movs	r3, #10
 8007cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cfc:	f107 0314 	add.w	r3, r7, #20
 8007d00:	4619      	mov	r1, r3
 8007d02:	4812      	ldr	r0, [pc, #72]	@ (8007d4c <HAL_PCD_MspInit+0xa4>)
 8007d04:	f7f9 fa78 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d08:	4b0f      	ldr	r3, [pc, #60]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d12:	6353      	str	r3, [r2, #52]	@ 0x34
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d22:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d24:	4b08      	ldr	r3, [pc, #32]	@ (8007d48 <HAL_PCD_MspInit+0xa0>)
 8007d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d30:	2200      	movs	r2, #0
 8007d32:	2100      	movs	r1, #0
 8007d34:	2043      	movs	r0, #67	@ 0x43
 8007d36:	f7f9 fa28 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d3a:	2043      	movs	r0, #67	@ 0x43
 8007d3c:	f7f9 fa41 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d40:	bf00      	nop
 8007d42:	3728      	adds	r7, #40	@ 0x28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40023800 	.word	0x40023800
 8007d4c:	40020000 	.word	0x40020000

08007d50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d64:	4619      	mov	r1, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	f7fe fb2b 	bl	80063c2 <USBD_LL_SetupStage>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fe fb65 	bl	800646c <USBD_LL_DataOutStage>
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	440b      	add	r3, r1
 8007dca:	3320      	adds	r3, #32
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f7fe fc07 	bl	80065e4 <USBD_LL_DataInStage>
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe fd4b 	bl	8006888 <USBD_LL_SOF>
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e02:	2301      	movs	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	79db      	ldrb	r3, [r3, #7]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d001      	beq.n	8007e12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e0e:	f7f8 fd78 	bl	8000902 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e18:	7bfa      	ldrb	r2, [r7, #15]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe fcef 	bl	8006800 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe fc96 	bl	800675a <USBD_LL_Reset>
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fcea 	bl	8006820 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	7adb      	ldrb	r3, [r3, #11]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e6c:	4b04      	ldr	r3, [pc, #16]	@ (8007e80 <HAL_PCD_SuspendCallback+0x48>)
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	4a03      	ldr	r2, [pc, #12]	@ (8007e80 <HAL_PCD_SuspendCallback+0x48>)
 8007e72:	f043 0306 	orr.w	r3, r3, #6
 8007e76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	e000ed00 	.word	0xe000ed00

08007e84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe fce0 	bl	8006858 <USBD_LL_Resume>
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eb2:	78fa      	ldrb	r2, [r7, #3]
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fd38 	bl	800692c <USBD_LL_IsoOUTIncomplete>
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ed6:	78fa      	ldrb	r2, [r7, #3]
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe fcf4 	bl	80068c8 <USBD_LL_IsoINIncomplete>
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fd4a 	bl	8006990 <USBD_LL_DevConnected>
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe fd47 	bl	80069a6 <USBD_LL_DevDisconnected>
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d13c      	bne.n	8007faa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f30:	4a20      	ldr	r2, [pc, #128]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f3c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f40:	4b1c      	ldr	r3, [pc, #112]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007f46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f48:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f4e:	4b19      	ldr	r3, [pc, #100]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f50:	2202      	movs	r2, #2
 8007f52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f54:	4b17      	ldr	r3, [pc, #92]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f5a:	4b16      	ldr	r3, [pc, #88]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f60:	4b14      	ldr	r3, [pc, #80]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f66:	4b13      	ldr	r3, [pc, #76]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f6c:	4b11      	ldr	r3, [pc, #68]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f72:	4b10      	ldr	r3, [pc, #64]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f78:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f7e:	480d      	ldr	r0, [pc, #52]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f80:	f7f9 faef 	bl	8001562 <HAL_PCD_Init>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f8a:	f7f8 fcba 	bl	8000902 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f8e:	2180      	movs	r1, #128	@ 0x80
 8007f90:	4808      	ldr	r0, [pc, #32]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f92:	f7fa fd1c 	bl	80029ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f96:	2240      	movs	r2, #64	@ 0x40
 8007f98:	2100      	movs	r1, #0
 8007f9a:	4806      	ldr	r0, [pc, #24]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007f9c:	f7fa fcd0 	bl	8002940 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fa0:	2280      	movs	r2, #128	@ 0x80
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4803      	ldr	r0, [pc, #12]	@ (8007fb4 <USBD_LL_Init+0x94>)
 8007fa6:	f7fa fccb 	bl	8002940 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	2000176c 	.word	0x2000176c

08007fb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7f9 fbd6 	bl	8001780 <HAL_PCD_Start>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f942 	bl	8008264 <USBD_Get_USB_Status>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	4608      	mov	r0, r1
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	70fb      	strb	r3, [r7, #3]
 8008000:	460b      	mov	r3, r1
 8008002:	70bb      	strb	r3, [r7, #2]
 8008004:	4613      	mov	r3, r2
 8008006:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008016:	78bb      	ldrb	r3, [r7, #2]
 8008018:	883a      	ldrh	r2, [r7, #0]
 800801a:	78f9      	ldrb	r1, [r7, #3]
 800801c:	f7fa f8aa 	bl	8002174 <HAL_PCD_EP_Open>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f91c 	bl	8008264 <USBD_Get_USB_Status>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008030:	7bbb      	ldrb	r3, [r7, #14]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	4611      	mov	r1, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f7fa f8f5 	bl	8002248 <HAL_PCD_EP_Close>
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f8fd 	bl	8008264 <USBD_Get_USB_Status>
 800806a:	4603      	mov	r3, r0
 800806c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800806e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	460b      	mov	r3, r1
 8008082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f7fa f9ad 	bl	80023f6 <HAL_PCD_EP_SetStall>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f8de 	bl	8008264 <USBD_Get_USB_Status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080d0:	78fa      	ldrb	r2, [r7, #3]
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fa f9f1 	bl	80024bc <HAL_PCD_EP_ClrStall>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 f8bf 	bl	8008264 <USBD_Get_USB_Status>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008106:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800810c:	2b00      	cmp	r3, #0
 800810e:	da0b      	bge.n	8008128 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	4613      	mov	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	3316      	adds	r3, #22
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	e00b      	b.n	8008140 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800812e:	68f9      	ldr	r1, [r7, #12]
 8008130:	4613      	mov	r3, r2
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800813e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f7f9 ffde 	bl	800212c <HAL_PCD_SetAddress>
 8008170:	4603      	mov	r3, r0
 8008172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f874 	bl	8008264 <USBD_Get_USB_Status>
 800817c:	4603      	mov	r3, r0
 800817e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008180:	7bbb      	ldrb	r3, [r7, #14]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b086      	sub	sp, #24
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	460b      	mov	r3, r1
 8008198:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80081a8:	7af9      	ldrb	r1, [r7, #11]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	f7fa f8e8 	bl	8002382 <HAL_PCD_EP_Transmit>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 f853 	bl	8008264 <USBD_Get_USB_Status>
 80081be:	4603      	mov	r3, r0
 80081c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	460b      	mov	r3, r1
 80081da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80081ea:	7af9      	ldrb	r1, [r7, #11]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	f7fa f874 	bl	80022dc <HAL_PCD_EP_Receive>
 80081f4:	4603      	mov	r3, r0
 80081f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f832 	bl	8008264 <USBD_Get_USB_Status>
 8008200:	4603      	mov	r3, r0
 8008202:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008204:	7dbb      	ldrb	r3, [r7, #22]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f7fa f894 	bl	8002352 <HAL_PCD_EP_GetRxCount>
 800822a:	4603      	mov	r3, r0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800823c:	4b03      	ldr	r3, [pc, #12]	@ (800824c <USBD_static_malloc+0x18>)
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20001c50 	.word	0x20001c50

08008250 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]

}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d817      	bhi.n	80082a8 <USBD_Get_USB_Status+0x44>
 8008278:	a201      	add	r2, pc, #4	@ (adr r2, 8008280 <USBD_Get_USB_Status+0x1c>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	08008291 	.word	0x08008291
 8008284:	08008297 	.word	0x08008297
 8008288:	0800829d 	.word	0x0800829d
 800828c:	080082a3 	.word	0x080082a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
    break;
 8008294:	e00b      	b.n	80082ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008296:	2303      	movs	r3, #3
 8008298:	73fb      	strb	r3, [r7, #15]
    break;
 800829a:	e008      	b.n	80082ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
    break;
 80082a0:	e005      	b.n	80082ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082a2:	2303      	movs	r3, #3
 80082a4:	73fb      	strb	r3, [r7, #15]
    break;
 80082a6:	e002      	b.n	80082ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082a8:	2303      	movs	r3, #3
 80082aa:	73fb      	strb	r3, [r7, #15]
    break;
 80082ac:	bf00      	nop
  }
  return usb_status;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
#if USE_SPI_4W
    printf("USE 4wire spi\r\n");
 80082c0:	4802      	ldr	r0, [pc, #8]	@ (80082cc <System_Init+0x10>)
 80082c2:	f003 f893 	bl	800b3ec <puts>
#elif USE_IIC
    printf("USE i2c\r\n");
#endif
    return 0;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	0800c04c 	.word	0x0800c04c

080082d0 <PWM_SetValue>:
{

}

void PWM_SetValue(uint16_t value)
{		
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	@ 0x28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	80fb      	strh	r3, [r7, #6]
////	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	
    TIM_OC_InitTypeDef sConfigOC;
	
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80082da:	2360      	movs	r3, #96	@ 0x60
 80082dc:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80082e2:	2300      	movs	r3, #0
 80082e4:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80082e6:	2300      	movs	r3, #0
 80082e8:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 80082ea:	f107 030c 	add.w	r3, r7, #12
 80082ee:	2204      	movs	r2, #4
 80082f0:	4619      	mov	r1, r3
 80082f2:	4805      	ldr	r0, [pc, #20]	@ (8008308 <PWM_SetValue+0x38>)
 80082f4:	f7fb f968 	bl	80035c8 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  
 80082f8:	2104      	movs	r1, #4
 80082fa:	4803      	ldr	r0, [pc, #12]	@ (8008308 <PWM_SetValue+0x38>)
 80082fc:	f7fb f8b4 	bl	8003468 <HAL_TIM_PWM_Start>
}
 8008300:	bf00      	nop
 8008302:	3728      	adds	r7, #40	@ 0x28
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	200001f8 	.word	0x200001f8

0800830c <SPI4W_Write_Byte>:
note:
	SPI4W_Write_Byte(value) : 
		Register hardware SPI
*********************************************/	
uint8_t SPI4W_Write_Byte(uint8_t value)                                    
{   
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	71fb      	strb	r3, [r7, #7]
    __HAL_SPI_ENABLE(&hspi1);
 8008316:	4b17      	ldr	r3, [pc, #92]	@ (8008374 <SPI4W_Write_Byte+0x68>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b15      	ldr	r3, [pc, #84]	@ (8008374 <SPI4W_Write_Byte+0x68>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008324:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 8008326:	4b14      	ldr	r3, [pc, #80]	@ (8008378 <SPI4W_Write_Byte+0x6c>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4a13      	ldr	r2, [pc, #76]	@ (8008378 <SPI4W_Write_Byte+0x6c>)
 800832c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008330:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 8008332:	bf00      	nop
 8008334:	4b10      	ldr	r3, [pc, #64]	@ (8008378 <SPI4W_Write_Byte+0x6c>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0f9      	beq.n	8008334 <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 8008340:	4a0e      	ldr	r2, [pc, #56]	@ (800837c <SPI4W_Write_Byte+0x70>)
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 8008346:	bf00      	nop
 8008348:	4b0b      	ldr	r3, [pc, #44]	@ (8008378 <SPI4W_Write_Byte+0x6c>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f9      	bne.n	8008348 <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 8008354:	bf00      	nop
 8008356:	4b08      	ldr	r3, [pc, #32]	@ (8008378 <SPI4W_Write_Byte+0x6c>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0f9      	beq.n	8008356 <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 8008362:	4b06      	ldr	r3, [pc, #24]	@ (800837c <SPI4W_Write_Byte+0x70>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	b2db      	uxtb	r3, r3
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	2000019c 	.word	0x2000019c
 8008378:	40013000 	.word	0x40013000
 800837c:	4001300c 	.word	0x4001300c

08008380 <SPI4W_Read_Byte>:

uint8_t SPI4W_Read_Byte(uint8_t value)                                    
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
	return SPI4W_Write_Byte(value);
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff ffbd 	bl	800830c <SPI4W_Write_Byte>
 8008392:	4603      	mov	r3, r0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7f8 fdf1 	bl	8000f8c <HAL_Delay>
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <Driver_Delay_us>:

void Driver_Delay_us(uint32_t xus)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
	int j;
    for(j=xus; j > 0; j--);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	e002      	b.n	80083c6 <Driver_Delay_us+0x14>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	dcf9      	bgt.n	80083c0 <Driver_Delay_us+0xe>
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <disk_initialize>:

//��ʼ������
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive nmuber (0..) */
)
{	
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	4603      	mov	r3, r0
 80083e2:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0;	    
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
	switch(drv)
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10e      	bne.n	800840c <disk_initialize+0x32>
	{
		case SD_CARD://SD��
			res = SD_Initialize();//SD_Initialize() 
 80083ee:	f002 fc75 	bl	800acdc <SD_Initialize>
 80083f2:	4603      	mov	r3, r0
 80083f4:	73fb      	strb	r3, [r7, #15]
		 	if(res)//STM32 SPI��bug,��sd������ʧ�ܵ�ʱ�������ִ����������,���ܵ���SPI��д�쳣
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00a      	beq.n	8008412 <disk_initialize+0x38>
			{
				SD_SPI_SpeedLow();
 80083fc:	f002 fb4c 	bl	800aa98 <SD_SPI_SpeedLow>
				SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 8008400:	20ff      	movs	r0, #255	@ 0xff
 8008402:	f002 fb3b 	bl	800aa7c <SD_SPI_ReadWriteByte>
				SD_SPI_SpeedHigh();
 8008406:	f002 fb4e 	bl	800aaa6 <SD_SPI_SpeedHigh>
			}
  			break;
 800840a:	e002      	b.n	8008412 <disk_initialize+0x38>
		default:
			res=1; 
 800840c:	2301      	movs	r3, #1
 800840e:	73fb      	strb	r3, [r7, #15]
 8008410:	e000      	b.n	8008414 <disk_initialize+0x3a>
  			break;
 8008412:	bf00      	nop
	}		 
	if(res)return  STA_NOINIT;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <disk_initialize+0x44>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <disk_initialize+0x46>
	else return 0; //��ʼ���ɹ�
 800841e:	2300      	movs	r3, #0
}   
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <disk_status>:
//��ô���״̬
DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0..) */
)
{		   
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	71fb      	strb	r3, [r7, #7]
    return 0;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <disk_read>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
 800844a:	461a      	mov	r2, r3
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
 8008450:	4613      	mov	r3, r2
 8008452:	73bb      	strb	r3, [r7, #14]
	uint8_t res=0; 
 8008454:	2300      	movs	r3, #0
 8008456:	75fb      	strb	r3, [r7, #23]
    if (!count)return RES_PARERR;//count���ܵ���0�����򷵻ز�������		 	 
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <disk_read+0x22>
 800845e:	2304      	movs	r3, #4
 8008460:	e01f      	b.n	80084a2 <disk_read+0x62>
	switch(drv)
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d112      	bne.n	800848e <disk_read+0x4e>
	{
		case SD_CARD://SD��
			res=SD_ReadDisk(buff,sector,count);	 
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	461a      	mov	r2, r3
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	68b8      	ldr	r0, [r7, #8]
 8008470:	f002 fd32 	bl	800aed8 <SD_ReadDisk>
 8008474:	4603      	mov	r3, r0
 8008476:	75fb      	strb	r3, [r7, #23]
		 	if(res)//STM32 SPI��bug,��sd������ʧ�ܵ�ʱ�������ִ����������,���ܵ���SPI��д�쳣
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <disk_read+0x54>
			{
				SD_SPI_SpeedLow();
 800847e:	f002 fb0b 	bl	800aa98 <SD_SPI_SpeedLow>
				SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 8008482:	20ff      	movs	r0, #255	@ 0xff
 8008484:	f002 fafa 	bl	800aa7c <SD_SPI_ReadWriteByte>
				SD_SPI_SpeedHigh();
 8008488:	f002 fb0d 	bl	800aaa6 <SD_SPI_SpeedHigh>
			}
			break;
 800848c:	e002      	b.n	8008494 <disk_read+0x54>
		default:
			res=1; 
 800848e:	2301      	movs	r3, #1
 8008490:	75fb      	strb	r3, [r7, #23]
 8008492:	e000      	b.n	8008496 <disk_read+0x56>
			break;
 8008494:	bf00      	nop
	}
   //������ֵ����SPI_SD_driver.c�ķ���ֵת��ff.c�ķ���ֵ
    if(res==0x00)return RES_OK;	 
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <disk_read+0x60>
 800849c:	2300      	movs	r3, #0
 800849e:	e000      	b.n	80084a2 <disk_read+0x62>
    else return RES_ERROR;	   
 80084a0:	2301      	movs	r3, #1
}  
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	        /* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	461a      	mov	r2, r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]
 80084ba:	4613      	mov	r3, r2
 80084bc:	73bb      	strb	r3, [r7, #14]
	uint8_t res=0;  
 80084be:	2300      	movs	r3, #0
 80084c0:	75fb      	strb	r3, [r7, #23]
    if (!count)return RES_PARERR;//count���ܵ���0�����򷵻ز�������		 	 
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <disk_write+0x22>
 80084c8:	2304      	movs	r3, #4
 80084ca:	e013      	b.n	80084f4 <disk_write+0x4a>
	switch(drv)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d108      	bne.n	80084e4 <disk_write+0x3a>
	{
		case SD_CARD://SD��
			res=SD_WriteDisk((uint8_t*)buff,sector,count);
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	461a      	mov	r2, r3
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	68b8      	ldr	r0, [r7, #8]
 80084da:	f002 fd49 	bl	800af70 <SD_WriteDisk>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]
			break;
 80084e2:	e001      	b.n	80084e8 <disk_write+0x3e>
		default:
			res=1; 
 80084e4:	2301      	movs	r3, #1
 80084e6:	75fb      	strb	r3, [r7, #23]
	}
    //������ֵ����SPI_SD_driver.c�ķ���ֵת��ff.c�ķ���ֵ
    if(res == 0x00)return RES_OK;	 
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <disk_write+0x48>
 80084ee:	2300      	movs	r3, #0
 80084f0:	e000      	b.n	80084f4 <disk_write+0x4a>
    else return RES_ERROR;		 
 80084f2:	2301      	movs	r3, #1
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	791b      	ldrb	r3, [r3, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d033      	beq.n	8008574 <sync_window+0x78>
		wsect = fs->winsect;	/* Current sector number */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008510:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7858      	ldrb	r0, [r3, #1]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800851c:	2301      	movs	r3, #1
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	f7ff ffc3 	bl	80084aa <disk_write>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <sync_window+0x32>
			return FR_DISK_ERR;
 800852a:	2301      	movs	r3, #1
 800852c:	e023      	b.n	8008576 <sync_window+0x7a>
		fs->wflag = 0;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	711a      	strb	r2, [r3, #4]
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	429a      	cmp	r2, r3
 8008542:	d217      	bcs.n	8008574 <sync_window+0x78>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	78db      	ldrb	r3, [r3, #3]
 8008548:	60bb      	str	r3, [r7, #8]
 800854a:	e010      	b.n	800856e <sync_window+0x72>
				wsect += fs->fsize;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	7858      	ldrb	r0, [r3, #1]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008560:	2301      	movs	r3, #1
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	f7ff ffa1 	bl	80084aa <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	3b01      	subs	r3, #1
 800856c:	60bb      	str	r3, [r7, #8]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d8eb      	bhi.n	800854c <sync_window+0x50>
			}
		}
	}
	return FR_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d018      	beq.n	80085c4 <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff ffb2 	bl	80084fc <sync_window>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <move_window+0x24>
			return FR_DISK_ERR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e011      	b.n	80085c6 <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7858      	ldrb	r0, [r3, #1]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80085ac:	2301      	movs	r3, #1
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	f7ff ff46 	bl	8008440 <disk_read>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <move_window+0x40>
			return FR_DISK_ERR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e003      	b.n	80085c6 <move_window+0x48>
		fs->winsect = sector;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	return FR_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b085      	sub	sp, #20
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
	int vol = -1;
 80085d6:	f04f 33ff 	mov.w	r3, #4294967295
 80085da:	60fb      	str	r3, [r7, #12]


	if (*path) {
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01b      	beq.n	800861c <get_ldnumber+0x4e>
		vol = (*path)[0] - '0';
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	3b30      	subs	r3, #48	@ 0x30
 80085ec:	60fb      	str	r3, [r7, #12]
		if ((UINT)vol < 9 && (*path)[1] == ':') {	/* There is a drive number */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d811      	bhi.n	8008618 <get_ldnumber+0x4a>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3301      	adds	r3, #1
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80085fe:	d10b      	bne.n	8008618 <get_ldnumber+0x4a>
			*path += 2;		/* Get value and strip it */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	1c9a      	adds	r2, r3, #2
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	601a      	str	r2, [r3, #0]
			if (vol >= _VOLUMES) vol = -1;	/* Check if the drive number is valid */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	dd05      	ble.n	800861c <get_ldnumber+0x4e>
 8008610:	f04f 33ff 	mov.w	r3, #4294967295
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	e001      	b.n	800861c <get_ldnumber+0x4e>
		} else {			/* No drive number use default drive */
#if _FS_RPATH && _VOLUMES >= 2
			vol = CurrVol;	/* Current drive */
#else
			vol = 0;		/* Drive 0 */
 8008618:	2300      	movs	r3, #0
 800861a:	60fb      	str	r3, [r7, #12]
#endif
		}
	}

	return vol;
 800861c:	68fb      	ldr	r3, [r7, #12]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
	...

0800862c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	711a      	strb	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f04f 32ff 	mov.w	r2, #4294967295
 8008642:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7ff ff99 	bl	800857e <move_window>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <check_fs+0x2a>
		return 3;
 8008652:	2303      	movs	r3, #3
 8008654:	e04b      	b.n	80086ee <check_fs+0xc2>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f203 232e 	addw	r3, r3, #558	@ 0x22e
 800865c:	3301      	adds	r3, #1
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b21b      	sxth	r3, r3
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	b21a      	sxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 800866c:	b21b      	sxth	r3, r3
 800866e:	4313      	orrs	r3, r2
 8008670:	b21b      	sxth	r3, r3
 8008672:	4a21      	ldr	r2, [pc, #132]	@ (80086f8 <check_fs+0xcc>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d001      	beq.n	800867c <check_fs+0x50>
		return 2;
 8008678:	2302      	movs	r3, #2
 800867a:	e038      	b.n	80086ee <check_fs+0xc2>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3366      	adds	r3, #102	@ 0x66
 8008680:	3303      	adds	r3, #3
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	061a      	lsls	r2, r3, #24
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3366      	adds	r3, #102	@ 0x66
 800868a:	3302      	adds	r3, #2
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	041b      	lsls	r3, r3, #16
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3366      	adds	r3, #102	@ 0x66
 8008696:	3301      	adds	r3, #1
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	4313      	orrs	r3, r2
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 80086a4:	4313      	orrs	r3, r2
 80086a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80086aa:	4a14      	ldr	r2, [pc, #80]	@ (80086fc <check_fs+0xd0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d101      	bne.n	80086b4 <check_fs+0x88>
		return 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	e01c      	b.n	80086ee <check_fs+0xc2>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3382      	adds	r3, #130	@ 0x82
 80086b8:	3303      	adds	r3, #3
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	061a      	lsls	r2, r3, #24
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3382      	adds	r3, #130	@ 0x82
 80086c2:	3302      	adds	r3, #2
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	041b      	lsls	r3, r3, #16
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3382      	adds	r3, #130	@ 0x82
 80086ce:	3301      	adds	r3, #1
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	4313      	orrs	r3, r2
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
 80086dc:	4313      	orrs	r3, r2
 80086de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80086e2:	4a06      	ldr	r2, [pc, #24]	@ (80086fc <check_fs+0xd0>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d101      	bne.n	80086ec <check_fs+0xc0>
		return 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	e000      	b.n	80086ee <check_fs+0xc2>

	return 1;
 80086ec:	2301      	movs	r3, #1
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	ffffaa55 	.word	0xffffaa55
 80086fc:	00544146 	.word	0x00544146

08008700 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b096      	sub	sp, #88	@ 0x58
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4613      	mov	r3, r2
 800870c:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008714:	68b8      	ldr	r0, [r7, #8]
 8008716:	f7ff ff5a 	bl	80085ce <get_ldnumber>
 800871a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800871c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800871e:	2b00      	cmp	r3, #0
 8008720:	da01      	bge.n	8008726 <find_volume+0x26>
 8008722:	230b      	movs	r3, #11
 8008724:	e294      	b.n	8008c50 <find_volume+0x550>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008726:	4a9b      	ldr	r2, [pc, #620]	@ (8008994 <find_volume+0x294>)
 8008728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800872a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800872e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <find_volume+0x3a>
 8008736:	230c      	movs	r3, #12
 8008738:	e28a      	b.n	8008c50 <find_volume+0x550>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800873e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01a      	beq.n	800877e <find_volume+0x7e>
		stat = disk_status(fs->drv);
 8008748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff fe6b 	bl	8008428 <disk_status>
 8008752:	4603      	mov	r3, r0
 8008754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008758:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10c      	bne.n	800877e <find_volume+0x7e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d007      	beq.n	800877a <find_volume+0x7a>
 800876a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <find_volume+0x7a>
				return FR_WRITE_PROTECTED;
 8008776:	230a      	movs	r3, #10
 8008778:	e26a      	b.n	8008c50 <find_volume+0x550>
			return FR_OK;				/* The file system object is valid */
 800877a:	2300      	movs	r3, #0
 800877c:	e268      	b.n	8008c50 <find_volume+0x550>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800877e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008786:	b2da      	uxtb	r2, r3
 8008788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fe22 	bl	80083da <disk_initialize>
 8008796:	4603      	mov	r3, r0
 8008798:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800879c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <find_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80087a8:	2303      	movs	r3, #3
 80087aa:	e251      	b.n	8008c50 <find_volume+0x550>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d007      	beq.n	80087c2 <find_volume+0xc2>
 80087b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <find_volume+0xc2>
		return FR_WRITE_PROTECTED;
 80087be:	230a      	movs	r3, #10
 80087c0:	e246      	b.n	8008c50 <find_volume+0x550>
#if _MAX_SS != 512						/* Get sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80087c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80087c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087ca:	f7ff ff2f 	bl	800862c <check_fs>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80087d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d155      	bne.n	8008888 <find_volume+0x188>
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80087dc:	2300      	movs	r3, #0
 80087de:	643b      	str	r3, [r7, #64]	@ 0x40
 80087e0:	e02a      	b.n	8008838 <find_volume+0x138>
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
 80087e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80087e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80087f0:	4413      	add	r3, r2
 80087f2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80087f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f6:	3304      	adds	r3, #4
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d012      	beq.n	8008824 <find_volume+0x124>
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	330b      	adds	r3, #11
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	061a      	lsls	r2, r3, #24
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	330a      	adds	r3, #10
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	041b      	lsls	r3, r3, #16
 800880e:	431a      	orrs	r2, r3
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	3309      	adds	r3, #9
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	021b      	lsls	r3, r3, #8
 8008818:	4313      	orrs	r3, r2
 800881a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800881c:	3208      	adds	r2, #8
 800881e:	7812      	ldrb	r2, [r2, #0]
 8008820:	431a      	orrs	r2, r3
 8008822:	e000      	b.n	8008826 <find_volume+0x126>
 8008824:	2200      	movs	r2, #0
 8008826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	3358      	adds	r3, #88	@ 0x58
 800882c:	443b      	add	r3, r7
 800882e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008834:	3301      	adds	r3, #1
 8008836:	643b      	str	r3, [r7, #64]	@ 0x40
 8008838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800883a:	2b03      	cmp	r3, #3
 800883c:	d9d1      	bls.n	80087e2 <find_volume+0xe2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800883e:	2300      	movs	r3, #0
 8008840:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <find_volume+0x14e>
 8008848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800884a:	3b01      	subs	r3, #1
 800884c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800884e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	3358      	adds	r3, #88	@ 0x58
 8008854:	443b      	add	r3, r7
 8008856:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800885a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800885c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <find_volume+0x16e>
 8008862:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008864:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008866:	f7ff fee1 	bl	800862c <check_fs>
 800886a:	4603      	mov	r3, r0
 800886c:	e000      	b.n	8008870 <find_volume+0x170>
 800886e:	2302      	movs	r3, #2
 8008870:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008874:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <find_volume+0x188>
 800887c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800887e:	3301      	adds	r3, #1
 8008880:	643b      	str	r3, [r7, #64]	@ 0x40
 8008882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008884:	2b03      	cmp	r3, #3
 8008886:	d9e2      	bls.n	800884e <find_volume+0x14e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008888:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800888c:	2b03      	cmp	r3, #3
 800888e:	d101      	bne.n	8008894 <find_volume+0x194>
 8008890:	2301      	movs	r3, #1
 8008892:	e1dd      	b.n	8008c50 <find_volume+0x550>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008894:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <find_volume+0x1a0>
 800889c:	230d      	movs	r3, #13
 800889e:	e1d7      	b.n	8008c50 <find_volume+0x550>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80088a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088a6:	b21b      	sxth	r3, r3
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	b21a      	sxth	r2, r3
 80088ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ae:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80088b2:	b21b      	sxth	r3, r3
 80088b4:	4313      	orrs	r3, r2
 80088b6:	b21b      	sxth	r3, r3
 80088b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088bc:	d001      	beq.n	80088c2 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80088be:	230d      	movs	r3, #13
 80088c0:	e1c6      	b.n	8008c50 <find_volume+0x550>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80088c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c4:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80088c8:	b21b      	sxth	r3, r3
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	b21a      	sxth	r2, r3
 80088ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80088d4:	b21b      	sxth	r3, r3
 80088d6:	4313      	orrs	r3, r2
 80088d8:	b21b      	sxth	r3, r3
 80088da:	b29b      	uxth	r3, r3
 80088dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80088de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d112      	bne.n	800890a <find_volume+0x20a>
 80088e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80088ea:	061a      	lsls	r2, r3, #24
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80088f2:	041b      	lsls	r3, r3, #16
 80088f4:	431a      	orrs	r2, r3
 80088f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80088fc:	021b      	lsls	r3, r3, #8
 80088fe:	4313      	orrs	r3, r2
 8008900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008902:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8008906:	4313      	orrs	r3, r2
 8008908:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800890a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800890e:	619a      	str	r2, [r3, #24]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008918:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800891a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891c:	78db      	ldrb	r3, [r3, #3]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d005      	beq.n	800892e <find_volume+0x22e>
 8008922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008924:	78db      	ldrb	r3, [r3, #3]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d001      	beq.n	800892e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800892a:	230d      	movs	r3, #13
 800892c:	e190      	b.n	8008c50 <find_volume+0x550>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800892e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008930:	78db      	ldrb	r3, [r3, #3]
 8008932:	461a      	mov	r2, r3
 8008934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008936:	fb02 f303 	mul.w	r3, r2, r3
 800893a:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 800893c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893e:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8008942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008944:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	789b      	ldrb	r3, [r3, #2]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d008      	beq.n	8008960 <find_volume+0x260>
 800894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008950:	789b      	ldrb	r3, [r3, #2]
 8008952:	461a      	mov	r2, r3
 8008954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008956:	789b      	ldrb	r3, [r3, #2]
 8008958:	3b01      	subs	r3, #1
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <find_volume+0x264>
		return FR_NO_FILESYSTEM;
 8008960:	230d      	movs	r3, #13
 8008962:	e175      	b.n	8008c50 <find_volume+0x550>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8008964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800896a:	b21b      	sxth	r3, r3
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	b21a      	sxth	r2, r3
 8008970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008976:	b21b      	sxth	r3, r3
 8008978:	4313      	orrs	r3, r2
 800897a:	b21b      	sxth	r3, r3
 800897c:	b29a      	uxth	r2, r3
 800897e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008980:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 8008982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008984:	891b      	ldrh	r3, [r3, #8]
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	b29b      	uxth	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <find_volume+0x298>
		return FR_NO_FILESYSTEM;
 8008990:	230d      	movs	r3, #13
 8008992:	e15d      	b.n	8008c50 <find_volume+0x550>
 8008994:	20001e70 	.word	0x20001e70

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8008998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800899e:	b21b      	sxth	r3, r3
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	b21a      	sxth	r2, r3
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	b21b      	sxth	r3, r3
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 80089b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d112      	bne.n	80089e0 <find_volume+0x2e0>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 80089c0:	061a      	lsls	r2, r3, #24
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80089c8:	041b      	lsls	r3, r3, #16
 80089ca:	431a      	orrs	r2, r3
 80089cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	4313      	orrs	r3, r2
 80089d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089d8:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 80089dc:	4313      	orrs	r3, r2
 80089de:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089e6:	b21b      	sxth	r3, r3
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	b21a      	sxth	r2, r3
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089f2:	b21b      	sxth	r3, r3
 80089f4:	4313      	orrs	r3, r2
 80089f6:	b21b      	sxth	r3, r3
 80089f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80089fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <find_volume+0x304>
 8008a00:	230d      	movs	r3, #13
 8008a02:	e125      	b.n	8008c50 <find_volume+0x550>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8008a04:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a08:	4413      	add	r3, r2
 8008a0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a0c:	8912      	ldrh	r2, [r2, #8]
 8008a0e:	0912      	lsrs	r2, r2, #4
 8008a10:	b292      	uxth	r2, r2
 8008a12:	4413      	add	r3, r2
 8008a14:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d201      	bcs.n	8008a22 <find_volume+0x322>
 8008a1e:	230d      	movs	r3, #13
 8008a20:	e116      	b.n	8008c50 <find_volume+0x550>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008a22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a2a:	7892      	ldrb	r2, [r2, #2]
 8008a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a30:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <find_volume+0x33c>
 8008a38:	230d      	movs	r3, #13
 8008a3a:	e109      	b.n	8008c50 <find_volume+0x550>
	fmt = FS_FAT12;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a44:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d902      	bls.n	8008a52 <find_volume+0x352>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d902      	bls.n	8008a62 <find_volume+0x362>
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	1c9a      	adds	r2, r3, #2
 8008a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a68:	615a      	str	r2, [r3, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a6e:	61da      	str	r2, [r3, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008a70:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a74:	441a      	add	r2, r3
 8008a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a78:	621a      	str	r2, [r3, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8008a7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7e:	441a      	add	r2, r3
 8008a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a82:	629a      	str	r2, [r3, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8008a84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d11e      	bne.n	8008aca <find_volume+0x3ca>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8e:	891b      	ldrh	r3, [r3, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <find_volume+0x398>
 8008a94:	230d      	movs	r3, #13
 8008a96:	e0db      	b.n	8008c50 <find_volume+0x550>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8008a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9a:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8008a9e:	061a      	lsls	r2, r3, #24
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8008aa6:	041b      	lsls	r3, r3, #16
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ab0:	021b      	lsls	r3, r3, #8
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ab6:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8008aba:	431a      	orrs	r2, r3
 8008abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abe:	625a      	str	r2, [r3, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ac8:	e01f      	b.n	8008b0a <find_volume+0x40a>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008acc:	891b      	ldrh	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <find_volume+0x3d6>
 8008ad2:	230d      	movs	r3, #13
 8008ad4:	e0bc      	b.n	8008c50 <find_volume+0x550>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	6a1a      	ldr	r2, [r3, #32]
 8008ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008adc:	441a      	add	r2, r3
 8008ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae0:	625a      	str	r2, [r3, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d103      	bne.n	8008af2 <find_volume+0x3f2>
 8008aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	e00a      	b.n	8008b08 <find_volume+0x408>
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	695a      	ldr	r2, [r3, #20]
 8008af6:	4613      	mov	r3, r2
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	4413      	add	r3, r2
 8008afc:	085a      	lsrs	r2, r3, #1
 8008afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 8008b08:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0c:	699a      	ldr	r2, [r3, #24]
 8008b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b10:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008b14:	0a5b      	lsrs	r3, r3, #9
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d201      	bcs.n	8008b1e <find_volume+0x41e>
		return FR_NO_FILESYSTEM;
 8008b1a:	230d      	movs	r3, #13
 8008b1c:	e098      	b.n	8008c50 <find_volume+0x550>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295
 8008b24:	611a      	str	r2, [r3, #16]
 8008b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b30:	2280      	movs	r2, #128	@ 0x80
 8008b32:	715a      	strb	r2, [r3, #5]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008b34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d17a      	bne.n	8008c32 <find_volume+0x532>
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8008b42:	b21b      	sxth	r3, r3
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	b21a      	sxth	r2, r3
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8008b4e:	b21b      	sxth	r3, r3
 8008b50:	4313      	orrs	r3, r2
 8008b52:	b21b      	sxth	r3, r3
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d16c      	bne.n	8008c32 <find_volume+0x532>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b60:	f7ff fd0d 	bl	800857e <move_window>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d163      	bne.n	8008c32 <find_volume+0x532>
	{
		fs->fsi_flag = 0;
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 8008b76:	b21b      	sxth	r3, r3
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	b21a      	sxth	r2, r3
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7e:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8008b82:	b21b      	sxth	r3, r3
 8008b84:	4313      	orrs	r3, r2
 8008b86:	b21b      	sxth	r3, r3
 8008b88:	4a33      	ldr	r2, [pc, #204]	@ (8008c58 <find_volume+0x558>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d151      	bne.n	8008c32 <find_volume+0x532>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b90:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008b94:	061a      	lsls	r2, r3, #24
 8008b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b98:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008b9c:	041b      	lsls	r3, r3, #16
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008ba6:	021b      	lsls	r3, r3, #8
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bac:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8008c5c <find_volume+0x55c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d13c      	bne.n	8008c32 <find_volume+0x532>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 8008bbe:	061a      	lsls	r2, r3, #24
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8008bc6:	041b      	lsls	r3, r3, #16
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bcc:	f893 3215 	ldrb.w	r3, [r3, #533]	@ 0x215
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bd6:	f892 2214 	ldrb.w	r2, [r2, #532]	@ 0x214
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	4a20      	ldr	r2, [pc, #128]	@ (8008c60 <find_volume+0x560>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d127      	bne.n	8008c32 <find_volume+0x532>
		{
#if !_FS_NOFSINFO
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8008be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be4:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8008be8:	061a      	lsls	r2, r3, #24
 8008bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bec:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8008bf0:	041b      	lsls	r3, r3, #16
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c00:	f892 2218 	ldrb.w	r2, [r2, #536]	@ 0x218
 8008c04:	431a      	orrs	r2, r3
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	611a      	str	r2, [r3, #16]
#endif
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0c:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8008c10:	061a      	lsls	r2, r3, #24
 8008c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c14:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8008c18:	041b      	lsls	r3, r3, #16
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	4313      	orrs	r3, r2
 8008c26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c28:	f892 221c 	ldrb.w	r2, [r2, #540]	@ 0x21c
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	60da      	str	r2, [r3, #12]
		}
	}
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c34:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008c38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c64 <find_volume+0x564>)
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	4b08      	ldr	r3, [pc, #32]	@ (8008c64 <find_volume+0x564>)
 8008c44:	801a      	strh	r2, [r3, #0]
 8008c46:	4b07      	ldr	r3, [pc, #28]	@ (8008c64 <find_volume+0x564>)
 8008c48:	881a      	ldrh	r2, [r3, #0]
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3758      	adds	r7, #88	@ 0x58
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	ffffaa55 	.word	0xffffaa55
 8008c5c:	41615252 	.word	0x41615252
 8008c60:	61417272 	.word	0x61417272
 8008c64:	20001e74 	.word	0x20001e74

08008c68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	4613      	mov	r3, r2
 8008c74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;


	vol = get_ldnumber(&path);
 8008c76:	f107 0308 	add.w	r3, r7, #8
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff fca7 	bl	80085ce <get_ldnumber>
 8008c80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	da01      	bge.n	8008c8c <f_mount+0x24>
 8008c88:	230b      	movs	r3, #11
 8008c8a:	e028      	b.n	8008cde <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c8c:	4a16      	ldr	r2, [pc, #88]	@ (8008ce8 <f_mount+0x80>)
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <f_mount+0x3a>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	490d      	ldr	r1, [pc, #52]	@ (8008ce8 <f_mount+0x80>)
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d002      	beq.n	8008cc4 <f_mount+0x5c>
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d001      	beq.n	8008cc8 <f_mount+0x60>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e00a      	b.n	8008cde <f_mount+0x76>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008cc8:	f107 0108 	add.w	r1, r7, #8
 8008ccc:	f107 030c 	add.w	r3, r7, #12
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff fd14 	bl	8008700 <find_volume>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3720      	adds	r7, #32
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20001e70 	.word	0x20001e70

08008cec <SD_Init>:
char* pDirectoryFiles[ MAX_BMP_FILES ];
uint8_t str[20];
FRESULT f_res;
FATFS microSDFatFs;

void SD_Init(void){
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
	
	SD_CS_1;
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	2110      	movs	r1, #16
 8008cf6:	481f      	ldr	r0, [pc, #124]	@ (8008d74 <SD_Init+0x88>)
 8008cf8:	f7f8 fc1a 	bl	8001530 <HAL_GPIO_WritePin>
	LCD_CS_1;
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	2140      	movs	r1, #64	@ 0x40
 8008d00:	481c      	ldr	r0, [pc, #112]	@ (8008d74 <SD_Init+0x88>)
 8008d02:	f7f8 fc15 	bl	8001530 <HAL_GPIO_WritePin>
	TP_CS_1;
 8008d06:	2201      	movs	r2, #1
 8008d08:	2180      	movs	r1, #128	@ 0x80
 8008d0a:	481a      	ldr	r0, [pc, #104]	@ (8008d74 <SD_Init+0x88>)
 8008d0c:	f7f8 fc10 	bl	8001530 <HAL_GPIO_WritePin>
	
	int counter = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	607b      	str	r3, [r7, #4]
    //Check the mounted device
	f_res = f_mount(&microSDFatFs,(TCHAR const*)"/",1);
 8008d14:	2201      	movs	r2, #1
 8008d16:	4918      	ldr	r1, [pc, #96]	@ (8008d78 <SD_Init+0x8c>)
 8008d18:	4818      	ldr	r0, [pc, #96]	@ (8008d7c <SD_Init+0x90>)
 8008d1a:	f7ff ffa5 	bl	8008c68 <f_mount>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	461a      	mov	r2, r3
 8008d22:	4b17      	ldr	r3, [pc, #92]	@ (8008d80 <SD_Init+0x94>)
 8008d24:	701a      	strb	r2, [r3, #0]
	if(f_res!=FR_OK){
 8008d26:	4b16      	ldr	r3, [pc, #88]	@ (8008d80 <SD_Init+0x94>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d006      	beq.n	8008d3c <SD_Init+0x50>
		printf("SD card mount file system failed ,error code :(%d)\r\n",f_res);
 8008d2e:	4b14      	ldr	r3, [pc, #80]	@ (8008d80 <SD_Init+0x94>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	4619      	mov	r1, r3
 8008d34:	4813      	ldr	r0, [pc, #76]	@ (8008d84 <SD_Init+0x98>)
 8008d36:	f002 faf1 	bl	800b31c <iprintf>
		USB_Send_Message("SD card mount file system success!!\r\n");
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
			pDirectoryFiles[counter] = malloc(11); 
		}	
	}
}
 8008d3a:	e017      	b.n	8008d6c <SD_Init+0x80>
		printf("SD card mount file system success!! \r\n");
 8008d3c:	4812      	ldr	r0, [pc, #72]	@ (8008d88 <SD_Init+0x9c>)
 8008d3e:	f002 fb55 	bl	800b3ec <puts>
		USB_Send_Message("SD card mount file system success!!\r\n");
 8008d42:	4812      	ldr	r0, [pc, #72]	@ (8008d8c <SD_Init+0xa0>)
 8008d44:	f7f7 fdae 	bl	80008a4 <USB_Send_Message>
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
 8008d48:	2300      	movs	r3, #0
 8008d4a:	607b      	str	r3, [r7, #4]
 8008d4c:	e00b      	b.n	8008d66 <SD_Init+0x7a>
			pDirectoryFiles[counter] = malloc(11); 
 8008d4e:	200b      	movs	r0, #11
 8008d50:	f002 f96c 	bl	800b02c <malloc>
 8008d54:	4603      	mov	r3, r0
 8008d56:	4619      	mov	r1, r3
 8008d58:	4a0d      	ldr	r2, [pc, #52]	@ (8008d90 <SD_Init+0xa4>)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3301      	adds	r3, #1
 8008d64:	607b      	str	r3, [r7, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b18      	cmp	r3, #24
 8008d6a:	ddf0      	ble.n	8008d4e <SD_Init+0x62>
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40020400 	.word	0x40020400
 8008d78:	0800c05c 	.word	0x0800c05c
 8008d7c:	20001ee0 	.word	0x20001ee0
 8008d80:	20001edc 	.word	0x20001edc
 8008d84:	0800c060 	.word	0x0800c060
 8008d88:	0800c098 	.word	0x0800c098
 8008d8c:	0800c0c0 	.word	0x0800c0c0
 8008d90:	20001e78 	.word	0x20001e78

08008d94 <LCD_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_Reset(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
    LCD_RST_1;
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d9e:	480e      	ldr	r0, [pc, #56]	@ (8008dd8 <LCD_Reset+0x44>)
 8008da0:	f7f8 fbc6 	bl	8001530 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8008da4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008da8:	f7ff faf8 	bl	800839c <Driver_Delay_ms>
    LCD_RST_0;
 8008dac:	2200      	movs	r2, #0
 8008dae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008db2:	4809      	ldr	r0, [pc, #36]	@ (8008dd8 <LCD_Reset+0x44>)
 8008db4:	f7f8 fbbc 	bl	8001530 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8008db8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008dbc:	f7ff faee 	bl	800839c <Driver_Delay_ms>
    LCD_RST_1;
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008dc6:	4804      	ldr	r0, [pc, #16]	@ (8008dd8 <LCD_Reset+0x44>)
 8008dc8:	f7f8 fbb2 	bl	8001530 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8008dcc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008dd0:	f7ff fae4 	bl	800839c <Driver_Delay_ms>
}
 8008dd4:	bf00      	nop
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	40020000 	.word	0x40020000

08008ddc <LCD_SetBackLight>:

static void LCD_SetBackLight(uint16_t value)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	80fb      	strh	r3, [r7, #6]
	PWM_SetValue(value);
 8008de6:	88fb      	ldrh	r3, [r7, #6]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff fa71 	bl	80082d0 <PWM_SetValue>
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <LCD_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
void LCD_WriteReg(uint8_t Reg)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
    LCD_DC_0;
 8008e02:	2200      	movs	r2, #0
 8008e04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008e08:	480a      	ldr	r0, [pc, #40]	@ (8008e34 <LCD_WriteReg+0x3c>)
 8008e0a:	f7f8 fb91 	bl	8001530 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2140      	movs	r1, #64	@ 0x40
 8008e12:	4809      	ldr	r0, [pc, #36]	@ (8008e38 <LCD_WriteReg+0x40>)
 8008e14:	f7f8 fb8c 	bl	8001530 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fa76 	bl	800830c <SPI4W_Write_Byte>
    LCD_CS_1;
 8008e20:	2201      	movs	r2, #1
 8008e22:	2140      	movs	r1, #64	@ 0x40
 8008e24:	4804      	ldr	r0, [pc, #16]	@ (8008e38 <LCD_WriteReg+0x40>)
 8008e26:	f7f8 fb83 	bl	8001530 <HAL_GPIO_WritePin>
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	40020000 	.word	0x40020000
 8008e38:	40020400 	.word	0x40020400

08008e3c <LCD_WriteData>:

void LCD_WriteData(uint8_t Data)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	71fb      	strb	r3, [r7, #7]
    LCD_DC_1;
 8008e46:	2201      	movs	r2, #1
 8008e48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008e4c:	480d      	ldr	r0, [pc, #52]	@ (8008e84 <LCD_WriteData+0x48>)
 8008e4e:	f7f8 fb6f 	bl	8001530 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8008e52:	2200      	movs	r2, #0
 8008e54:	2140      	movs	r1, #64	@ 0x40
 8008e56:	480c      	ldr	r0, [pc, #48]	@ (8008e88 <LCD_WriteData+0x4c>)
 8008e58:	f7f8 fb6a 	bl	8001530 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data >> 8);
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	121b      	asrs	r3, r3, #8
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff fa52 	bl	800830c <SPI4W_Write_Byte>
    SPI4W_Write_Byte(Data & 0XFF);
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7ff fa4e 	bl	800830c <SPI4W_Write_Byte>
    LCD_CS_1;
 8008e70:	2201      	movs	r2, #1
 8008e72:	2140      	movs	r1, #64	@ 0x40
 8008e74:	4804      	ldr	r0, [pc, #16]	@ (8008e88 <LCD_WriteData+0x4c>)
 8008e76:	f7f8 fb5b 	bl	8001530 <HAL_GPIO_WritePin>
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	40020000 	.word	0x40020000
 8008e88:	40020400 	.word	0x40020400

08008e8c <LCD_Write_AllData>:
/*******************************************************************************
function:
		Write register data
*******************************************************************************/
static void LCD_Write_AllData(uint16_t Data, uint32_t DataLen)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	6039      	str	r1, [r7, #0]
 8008e96:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_DC_1;
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008e9e:	4813      	ldr	r0, [pc, #76]	@ (8008eec <LCD_Write_AllData+0x60>)
 8008ea0:	f7f8 fb46 	bl	8001530 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2140      	movs	r1, #64	@ 0x40
 8008ea8:	4811      	ldr	r0, [pc, #68]	@ (8008ef0 <LCD_Write_AllData+0x64>)
 8008eaa:	f7f8 fb41 	bl	8001530 <HAL_GPIO_WritePin>
    for(i = 0; i < DataLen; i++) {
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	e00e      	b.n	8008ed2 <LCD_Write_AllData+0x46>
        SPI4W_Write_Byte(Data >> 8);
 8008eb4:	88fb      	ldrh	r3, [r7, #6]
 8008eb6:	0a1b      	lsrs	r3, r3, #8
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff fa25 	bl	800830c <SPI4W_Write_Byte>
        SPI4W_Write_Byte(Data & 0XFF);
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff fa20 	bl	800830c <SPI4W_Write_Byte>
    for(i = 0; i < DataLen; i++) {
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d3ec      	bcc.n	8008eb4 <LCD_Write_AllData+0x28>
    }
    LCD_CS_1;
 8008eda:	2201      	movs	r2, #1
 8008edc:	2140      	movs	r1, #64	@ 0x40
 8008ede:	4804      	ldr	r0, [pc, #16]	@ (8008ef0 <LCD_Write_AllData+0x64>)
 8008ee0:	f7f8 fb26 	bl	8001530 <HAL_GPIO_WritePin>
}
 8008ee4:	bf00      	nop
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	40020000 	.word	0x40020000
 8008ef0:	40020400 	.word	0x40020400

08008ef4 <LCD_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
    LCD_WriteReg(0XF9);
 8008ef8:	20f9      	movs	r0, #249	@ 0xf9
 8008efa:	f7ff ff7d 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8008efe:	2000      	movs	r0, #0
 8008f00:	f7ff ff9c 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x08);
 8008f04:	2008      	movs	r0, #8
 8008f06:	f7ff ff99 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0xC0);
 8008f0a:	20c0      	movs	r0, #192	@ 0xc0
 8008f0c:	f7ff ff74 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x19);//VREG1OUT POSITIVE
 8008f10:	2019      	movs	r0, #25
 8008f12:	f7ff ff93 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x1a);//VREG2OUT NEGATIVE
 8008f16:	201a      	movs	r0, #26
 8008f18:	f7ff ff90 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0xC1);
 8008f1c:	20c1      	movs	r0, #193	@ 0xc1
 8008f1e:	f7ff ff6b 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x45);//VGH,VGL    VGH>=14V.
 8008f22:	2045      	movs	r0, #69	@ 0x45
 8008f24:	f7ff ff8a 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 8008f28:	2000      	movs	r0, #0
 8008f2a:	f7ff ff87 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0xC2);	//Normal mode, increase can change the display quality, while increasing power consumption
 8008f2e:	20c2      	movs	r0, #194	@ 0xc2
 8008f30:	f7ff ff62 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x33);
 8008f34:	2033      	movs	r0, #51	@ 0x33
 8008f36:	f7ff ff81 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0XC5);
 8008f3a:	20c5      	movs	r0, #197	@ 0xc5
 8008f3c:	f7ff ff5c 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8008f40:	2000      	movs	r0, #0
 8008f42:	f7ff ff7b 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x28);//VCM_REG[7:0]. <=0X80.
 8008f46:	2028      	movs	r0, #40	@ 0x28
 8008f48:	f7ff ff78 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0xB1);//Sets the frame frequency of full color normal mode
 8008f4c:	20b1      	movs	r0, #177	@ 0xb1
 8008f4e:	f7ff ff53 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0xA0);//0XB0 =70HZ, <=0XB0.0xA0=62HZ
 8008f52:	20a0      	movs	r0, #160	@ 0xa0
 8008f54:	f7ff ff72 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x11);
 8008f58:	2011      	movs	r0, #17
 8008f5a:	f7ff ff6f 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0xB4);
 8008f5e:	20b4      	movs	r0, #180	@ 0xb4
 8008f60:	f7ff ff4a 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x02); //2 DOT FRAME MODE,F<=70HZ.
 8008f64:	2002      	movs	r0, #2
 8008f66:	f7ff ff69 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0xB6);//
 8008f6a:	20b6      	movs	r0, #182	@ 0xb6
 8008f6c:	f7ff ff44 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8008f70:	2000      	movs	r0, #0
 8008f72:	f7ff ff63 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x42);//0 GS SS SM ISC[3:0];
 8008f76:	2042      	movs	r0, #66	@ 0x42
 8008f78:	f7ff ff60 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x3B);
 8008f7c:	203b      	movs	r0, #59	@ 0x3b
 8008f7e:	f7ff ff5d 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0xB7);
 8008f82:	20b7      	movs	r0, #183	@ 0xb7
 8008f84:	f7ff ff38 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x07);
 8008f88:	2007      	movs	r0, #7
 8008f8a:	f7ff ff57 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0xE0);
 8008f8e:	20e0      	movs	r0, #224	@ 0xe0
 8008f90:	f7ff ff32 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8008f94:	201f      	movs	r0, #31
 8008f96:	f7ff ff51 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x25);
 8008f9a:	2025      	movs	r0, #37	@ 0x25
 8008f9c:	f7ff ff4e 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x22);
 8008fa0:	2022      	movs	r0, #34	@ 0x22
 8008fa2:	f7ff ff4b 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x0B);
 8008fa6:	200b      	movs	r0, #11
 8008fa8:	f7ff ff48 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x06);
 8008fac:	2006      	movs	r0, #6
 8008fae:	f7ff ff45 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x0A);
 8008fb2:	200a      	movs	r0, #10
 8008fb4:	f7ff ff42 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x4E);
 8008fb8:	204e      	movs	r0, #78	@ 0x4e
 8008fba:	f7ff ff3f 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0xC6);
 8008fbe:	20c6      	movs	r0, #198	@ 0xc6
 8008fc0:	f7ff ff3c 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x39);
 8008fc4:	2039      	movs	r0, #57	@ 0x39
 8008fc6:	f7ff ff39 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 8008fca:	2000      	movs	r0, #0
 8008fcc:	f7ff ff36 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	f7ff ff33 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	f7ff ff30 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 8008fdc:	2000      	movs	r0, #0
 8008fde:	f7ff ff2d 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	f7ff ff2a 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f7ff ff27 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0XE1);
 8008fee:	20e1      	movs	r0, #225	@ 0xe1
 8008ff0:	f7ff ff02 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8008ff4:	201f      	movs	r0, #31
 8008ff6:	f7ff ff21 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x3F);
 8008ffa:	203f      	movs	r0, #63	@ 0x3f
 8008ffc:	f7ff ff1e 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x3F);
 8009000:	203f      	movs	r0, #63	@ 0x3f
 8009002:	f7ff ff1b 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009006:	200f      	movs	r0, #15
 8009008:	f7ff ff18 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x1F);
 800900c:	201f      	movs	r0, #31
 800900e:	f7ff ff15 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009012:	200f      	movs	r0, #15
 8009014:	f7ff ff12 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x46);
 8009018:	2046      	movs	r0, #70	@ 0x46
 800901a:	f7ff ff0f 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x49);
 800901e:	2049      	movs	r0, #73	@ 0x49
 8009020:	f7ff ff0c 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x31);
 8009024:	2031      	movs	r0, #49	@ 0x31
 8009026:	f7ff ff09 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x05);
 800902a:	2005      	movs	r0, #5
 800902c:	f7ff ff06 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x09);
 8009030:	2009      	movs	r0, #9
 8009032:	f7ff ff03 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x03);
 8009036:	2003      	movs	r0, #3
 8009038:	f7ff ff00 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x1C);
 800903c:	201c      	movs	r0, #28
 800903e:	f7ff fefd 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x1A);
 8009042:	201a      	movs	r0, #26
 8009044:	f7ff fefa 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 8009048:	2000      	movs	r0, #0
 800904a:	f7ff fef7 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0XF1);
 800904e:	20f1      	movs	r0, #241	@ 0xf1
 8009050:	f7ff fed2 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x36);
 8009054:	2036      	movs	r0, #54	@ 0x36
 8009056:	f7ff fef1 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x04);
 800905a:	2004      	movs	r0, #4
 800905c:	f7ff feee 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 8009060:	2000      	movs	r0, #0
 8009062:	f7ff feeb 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x3C);
 8009066:	203c      	movs	r0, #60	@ 0x3c
 8009068:	f7ff fee8 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x0F);
 800906c:	200f      	movs	r0, #15
 800906e:	f7ff fee5 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009072:	200f      	movs	r0, #15
 8009074:	f7ff fee2 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0xA4);
 8009078:	20a4      	movs	r0, #164	@ 0xa4
 800907a:	f7ff fedf 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x02);
 800907e:	2002      	movs	r0, #2
 8009080:	f7ff fedc 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0XF2);
 8009084:	20f2      	movs	r0, #242	@ 0xf2
 8009086:	f7ff feb7 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x18);
 800908a:	2018      	movs	r0, #24
 800908c:	f7ff fed6 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0xA3);
 8009090:	20a3      	movs	r0, #163	@ 0xa3
 8009092:	f7ff fed3 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x12);
 8009096:	2012      	movs	r0, #18
 8009098:	f7ff fed0 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x02);
 800909c:	2002      	movs	r0, #2
 800909e:	f7ff fecd 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x32);
 80090a2:	2032      	movs	r0, #50	@ 0x32
 80090a4:	f7ff feca 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x12);
 80090a8:	2012      	movs	r0, #18
 80090aa:	f7ff fec7 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0xFF);
 80090ae:	20ff      	movs	r0, #255	@ 0xff
 80090b0:	f7ff fec4 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x32);
 80090b4:	2032      	movs	r0, #50	@ 0x32
 80090b6:	f7ff fec1 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 80090ba:	2000      	movs	r0, #0
 80090bc:	f7ff febe 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0XF4);
 80090c0:	20f4      	movs	r0, #244	@ 0xf4
 80090c2:	f7ff fe99 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x40);
 80090c6:	2040      	movs	r0, #64	@ 0x40
 80090c8:	f7ff feb8 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x00);
 80090cc:	2000      	movs	r0, #0
 80090ce:	f7ff feb5 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x08);
 80090d2:	2008      	movs	r0, #8
 80090d4:	f7ff feb2 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x91);
 80090d8:	2091      	movs	r0, #145	@ 0x91
 80090da:	f7ff feaf 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x04);
 80090de:	2004      	movs	r0, #4
 80090e0:	f7ff feac 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0XF8);
 80090e4:	20f8      	movs	r0, #248	@ 0xf8
 80090e6:	f7ff fe87 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x21);
 80090ea:	2021      	movs	r0, #33	@ 0x21
 80090ec:	f7ff fea6 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(0x04);
 80090f0:	2004      	movs	r0, #4
 80090f2:	f7ff fea3 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0X3A);	//Set Interface Pixel Format
 80090f6:	203a      	movs	r0, #58	@ 0x3a
 80090f8:	f7ff fe7e 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0x55);
 80090fc:	2055      	movs	r0, #85	@ 0x55
 80090fe:	f7ff fe9d 	bl	8008e3c <LCD_WriteData>

}
 8009102:	bf00      	nop
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <LCD_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	71fb      	strb	r3, [r7, #7]
    uint16_t MemoryAccessReg_Data = 0; //addr:0x36
 8009112:	2300      	movs	r3, #0
 8009114:	81fb      	strh	r3, [r7, #14]
    uint16_t DisFunReg_Data = 0; //addr:0xB6
 8009116:	2300      	movs	r3, #0
 8009118:	81bb      	strh	r3, [r7, #12]

    // Gets the scan direction of GRAM
    switch (Scan_dir) {
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	2b07      	cmp	r3, #7
 800911e:	d83b      	bhi.n	8009198 <LCD_SetGramScanWay+0x90>
 8009120:	a201      	add	r2, pc, #4	@ (adr r2, 8009128 <LCD_SetGramScanWay+0x20>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	08009149 	.word	0x08009149
 800912c:	08009153 	.word	0x08009153
 8009130:	0800915d 	.word	0x0800915d
 8009134:	08009167 	.word	0x08009167
 8009138:	08009171 	.word	0x08009171
 800913c:	0800917b 	.word	0x0800917b
 8009140:	08009185 	.word	0x08009185
 8009144:	0800918f 	.word	0x0800918f
    case L2R_U2D:
        MemoryAccessReg_Data = 0x08;//0x08 | 0X8
 8009148:	2308      	movs	r3, #8
 800914a:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 800914c:	2322      	movs	r3, #34	@ 0x22
 800914e:	81bb      	strh	r3, [r7, #12]
        break;
 8009150:	e022      	b.n	8009198 <LCD_SetGramScanWay+0x90>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x08;
 8009152:	2308      	movs	r3, #8
 8009154:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 8009156:	2362      	movs	r3, #98	@ 0x62
 8009158:	81bb      	strh	r3, [r7, #12]
        break;
 800915a:	e01d      	b.n	8009198 <LCD_SetGramScanWay+0x90>
    case R2L_U2D: //0X4
        MemoryAccessReg_Data = 0x08;
 800915c:	2308      	movs	r3, #8
 800915e:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 8009160:	2302      	movs	r3, #2
 8009162:	81bb      	strh	r3, [r7, #12]
        break;
 8009164:	e018      	b.n	8009198 <LCD_SetGramScanWay+0x90>
    case R2L_D2U: //0XC
        MemoryAccessReg_Data = 0x08;
 8009166:	2308      	movs	r3, #8
 8009168:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 800916a:	2342      	movs	r3, #66	@ 0x42
 800916c:	81bb      	strh	r3, [r7, #12]
        break;
 800916e:	e013      	b.n	8009198 <LCD_SetGramScanWay+0x90>
    case U2D_L2R: //0X2
        MemoryAccessReg_Data = 0x28;
 8009170:	2328      	movs	r3, #40	@ 0x28
 8009172:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 8009174:	2322      	movs	r3, #34	@ 0x22
 8009176:	81bb      	strh	r3, [r7, #12]
        break;
 8009178:	e00e      	b.n	8009198 <LCD_SetGramScanWay+0x90>
    case U2D_R2L: //0X6
        MemoryAccessReg_Data = 0x28;
 800917a:	2328      	movs	r3, #40	@ 0x28
 800917c:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 800917e:	2302      	movs	r3, #2
 8009180:	81bb      	strh	r3, [r7, #12]
        break;
 8009182:	e009      	b.n	8009198 <LCD_SetGramScanWay+0x90>
    case D2U_L2R: //0XA
        MemoryAccessReg_Data = 0x28;
 8009184:	2328      	movs	r3, #40	@ 0x28
 8009186:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 8009188:	2362      	movs	r3, #98	@ 0x62
 800918a:	81bb      	strh	r3, [r7, #12]
        break;
 800918c:	e004      	b.n	8009198 <LCD_SetGramScanWay+0x90>
    case D2U_R2L: //0XE
        MemoryAccessReg_Data = 0x28;
 800918e:	2328      	movs	r3, #40	@ 0x28
 8009190:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 8009192:	2342      	movs	r3, #66	@ 0x42
 8009194:	81bb      	strh	r3, [r7, #12]
        break;
 8009196:	bf00      	nop
    }

    //Get the screen scan direction
    sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8009198:	4a1b      	ldr	r2, [pc, #108]	@ (8009208 <LCD_SetGramScanWay+0x100>)
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	7113      	strb	r3, [r2, #4]

    //Get GRAM and LCD width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
 800919e:	79fb      	ldrb	r3, [r7, #7]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d008      	beq.n	80091b6 <LCD_SetGramScanWay+0xae>
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d005      	beq.n	80091b6 <LCD_SetGramScanWay+0xae>
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d002      	beq.n	80091b6 <LCD_SetGramScanWay+0xae>
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d108      	bne.n	80091c8 <LCD_SetGramScanWay+0xc0>
        sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 80091b6:	4b14      	ldr	r3, [pc, #80]	@ (8009208 <LCD_SetGramScanWay+0x100>)
 80091b8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80091bc:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;
 80091be:	4b12      	ldr	r3, [pc, #72]	@ (8009208 <LCD_SetGramScanWay+0x100>)
 80091c0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80091c4:	805a      	strh	r2, [r3, #2]
 80091c6:	e007      	b.n	80091d8 <LCD_SetGramScanWay+0xd0>
    } else {
        sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 80091c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009208 <LCD_SetGramScanWay+0x100>)
 80091ca:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80091ce:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;
 80091d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009208 <LCD_SetGramScanWay+0x100>)
 80091d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80091d6:	805a      	strh	r2, [r3, #2]
    }

    // Set the read / write scan direction of the frame memory
    LCD_WriteReg(0xB6);
 80091d8:	20b6      	movs	r0, #182	@ 0xb6
 80091da:	f7ff fe0d 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(0X00);
 80091de:	2000      	movs	r0, #0
 80091e0:	f7ff fe2c 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(DisFunReg_Data);
 80091e4:	89bb      	ldrh	r3, [r7, #12]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff fe27 	bl	8008e3c <LCD_WriteData>

    LCD_WriteReg(0x36);
 80091ee:	2036      	movs	r0, #54	@ 0x36
 80091f0:	f7ff fe02 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(MemoryAccessReg_Data);
 80091f4:	89fb      	ldrh	r3, [r7, #14]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff fe1f 	bl	8008e3c <LCD_WriteData>
}
 80091fe:	bf00      	nop
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20002110 	.word	0x20002110

0800920c <LCD_Init>:
/********************************************************************************
function:
	initialization
********************************************************************************/
void LCD_Init(LCD_SCAN_DIR LCD_ScanDir, uint16_t LCD_BLval)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	460a      	mov	r2, r1
 8009216:	71fb      	strb	r3, [r7, #7]
 8009218:	4613      	mov	r3, r2
 800921a:	80bb      	strh	r3, [r7, #4]
    //Hardware reset
    LCD_Reset();
 800921c:	f7ff fdba 	bl	8008d94 <LCD_Reset>

	if(LCD_BLval > 65535)
		LCD_BLval = 65535;
	LCD_SetBackLight(LCD_BLval);
 8009220:	88bb      	ldrh	r3, [r7, #4]
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff fdda 	bl	8008ddc <LCD_SetBackLight>
	
    //Set the initialization register
    LCD_InitReg();
 8009228:	f7ff fe64 	bl	8008ef4 <LCD_InitReg>

    //Set the display scan and color transfer modes
    LCD_SetGramScanWay( LCD_ScanDir);
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff ff6a 	bl	8009108 <LCD_SetGramScanWay>
    Driver_Delay_ms(200);
 8009234:	20c8      	movs	r0, #200	@ 0xc8
 8009236:	f7ff f8b1 	bl	800839c <Driver_Delay_ms>

    //sleep out
    LCD_WriteReg(0x11);
 800923a:	2011      	movs	r0, #17
 800923c:	f7ff fddc 	bl	8008df8 <LCD_WriteReg>
    Driver_Delay_ms(120);
 8009240:	2078      	movs	r0, #120	@ 0x78
 8009242:	f7ff f8ab 	bl	800839c <Driver_Delay_ms>

    //Turn on the LCD display
    LCD_WriteReg(0x29);
 8009246:	2029      	movs	r0, #41	@ 0x29
 8009248:	f7ff fdd6 	bl	8008df8 <LCD_WriteReg>
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <LCD_SetWindow>:
	Ystart  :   Y direction Start coordinates
	Xend    :   X direction end coordinates
	Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindow(POINT Xstart, POINT Ystart,	POINT Xend, POINT Yend)
{
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	4611      	mov	r1, r2
 8009260:	461a      	mov	r2, r3
 8009262:	4623      	mov	r3, r4
 8009264:	80fb      	strh	r3, [r7, #6]
 8009266:	4603      	mov	r3, r0
 8009268:	80bb      	strh	r3, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	807b      	strh	r3, [r7, #2]
 800926e:	4613      	mov	r3, r2
 8009270:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_WriteReg(0x2A);
 8009272:	202a      	movs	r0, #42	@ 0x2a
 8009274:	f7ff fdc0 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(Xstart >> 8);	 				//Set the horizontal starting point to the high octet
 8009278:	88fb      	ldrh	r3, [r7, #6]
 800927a:	0a1b      	lsrs	r3, r3, #8
 800927c:	b29b      	uxth	r3, r3
 800927e:	b2db      	uxtb	r3, r3
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff fddb 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(Xstart & 0xff);	 				//Set the horizontal starting point to the low octet
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff fdd6 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData((Xend - 1) >> 8);	//Set the horizontal end to the high octet
 8009290:	887b      	ldrh	r3, [r7, #2]
 8009292:	3b01      	subs	r3, #1
 8009294:	121b      	asrs	r3, r3, #8
 8009296:	b2db      	uxtb	r3, r3
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fdcf 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData((Xend - 1) & 0xff);	//Set the horizontal end to the low octet
 800929e:	887b      	ldrh	r3, [r7, #2]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	3b01      	subs	r3, #1
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff fdc8 	bl	8008e3c <LCD_WriteData>

    //set the Y coordinates
    LCD_WriteReg(0x2B);
 80092ac:	202b      	movs	r0, #43	@ 0x2b
 80092ae:	f7ff fda3 	bl	8008df8 <LCD_WriteReg>
    LCD_WriteData(Ystart >> 8);
 80092b2:	88bb      	ldrh	r3, [r7, #4]
 80092b4:	0a1b      	lsrs	r3, r3, #8
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fdbe 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData(Ystart & 0xff );
 80092c0:	88bb      	ldrh	r3, [r7, #4]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff fdb9 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData((Yend - 1) >> 8);
 80092ca:	883b      	ldrh	r3, [r7, #0]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	121b      	asrs	r3, r3, #8
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fdb2 	bl	8008e3c <LCD_WriteData>
    LCD_WriteData((Yend - 1) & 0xff);
 80092d8:	883b      	ldrh	r3, [r7, #0]
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	3b01      	subs	r3, #1
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7ff fdab 	bl	8008e3c <LCD_WriteData>
    LCD_WriteReg(0x2C);
 80092e6:	202c      	movs	r0, #44	@ 0x2c
 80092e8:	f7ff fd86 	bl	8008df8 <LCD_WriteReg>
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd90      	pop	{r4, r7, pc}

080092f4 <LCD_SetCursor>:
parameter:
	xStart :   X direction Start coordinates
	xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor(POINT Xpoint, POINT Ypoint)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	460a      	mov	r2, r1
 80092fe:	80fb      	strh	r3, [r7, #6]
 8009300:	4613      	mov	r3, r2
 8009302:	80bb      	strh	r3, [r7, #4]
    LCD_SetWindow(Xpoint, Ypoint, Xpoint, Ypoint);
 8009304:	88bb      	ldrh	r3, [r7, #4]
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	88b9      	ldrh	r1, [r7, #4]
 800930a:	88f8      	ldrh	r0, [r7, #6]
 800930c:	f7ff ffa2 	bl	8009254 <LCD_SetWindow>
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <LCD_SetColor>:
parameter:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void LCD_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor(COLOR Color , POINT Xpoint, POINT Ypoint)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	80fb      	strh	r3, [r7, #6]
 8009322:	460b      	mov	r3, r1
 8009324:	80bb      	strh	r3, [r7, #4]
 8009326:	4613      	mov	r3, r2
 8009328:	807b      	strh	r3, [r7, #2]
    LCD_Write_AllData(Color , (uint32_t)Xpoint * (uint32_t)Ypoint);
 800932a:	88bb      	ldrh	r3, [r7, #4]
 800932c:	887a      	ldrh	r2, [r7, #2]
 800932e:	fb03 f202 	mul.w	r2, r3, r2
 8009332:	88fb      	ldrh	r3, [r7, #6]
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff fda8 	bl	8008e8c <LCD_Write_AllData>
}
 800933c:	bf00      	nop
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <LCD_SetPointlColor>:
	Xpoint :   The x coordinate of the point
	Ypoint :   The y coordinate of the point
	Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor( POINT Xpoint, POINT Ypoint, COLOR Color)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	80fb      	strh	r3, [r7, #6]
 800934e:	460b      	mov	r3, r1
 8009350:	80bb      	strh	r3, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	807b      	strh	r3, [r7, #2]
    if ((Xpoint <= sLCD_DIS.LCD_Dis_Column) && (Ypoint <= sLCD_DIS.LCD_Dis_Page)) {
 8009356:	4b0d      	ldr	r3, [pc, #52]	@ (800938c <LCD_SetPointlColor+0x48>)
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	88fa      	ldrh	r2, [r7, #6]
 800935c:	429a      	cmp	r2, r3
 800935e:	d810      	bhi.n	8009382 <LCD_SetPointlColor+0x3e>
 8009360:	4b0a      	ldr	r3, [pc, #40]	@ (800938c <LCD_SetPointlColor+0x48>)
 8009362:	885b      	ldrh	r3, [r3, #2]
 8009364:	88ba      	ldrh	r2, [r7, #4]
 8009366:	429a      	cmp	r2, r3
 8009368:	d80b      	bhi.n	8009382 <LCD_SetPointlColor+0x3e>
        LCD_SetCursor (Xpoint, Ypoint);
 800936a:	88ba      	ldrh	r2, [r7, #4]
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	4611      	mov	r1, r2
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff ffbf 	bl	80092f4 <LCD_SetCursor>
        LCD_SetColor(Color, 1, 1);
 8009376:	887b      	ldrh	r3, [r7, #2]
 8009378:	2201      	movs	r2, #1
 800937a:	2101      	movs	r1, #1
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff ffcb 	bl	8009318 <LCD_SetColor>
    }
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20002110 	.word	0x20002110

08009390 <LCD_SetArealColor>:
	Xend   :   End point coordinates
	Yend   :   End point coordinates
	Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR Color)
{
 8009390:	b590      	push	{r4, r7, lr}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	4604      	mov	r4, r0
 8009398:	4608      	mov	r0, r1
 800939a:	4611      	mov	r1, r2
 800939c:	461a      	mov	r2, r3
 800939e:	4623      	mov	r3, r4
 80093a0:	80fb      	strh	r3, [r7, #6]
 80093a2:	4603      	mov	r3, r0
 80093a4:	80bb      	strh	r3, [r7, #4]
 80093a6:	460b      	mov	r3, r1
 80093a8:	807b      	strh	r3, [r7, #2]
 80093aa:	4613      	mov	r3, r2
 80093ac:	803b      	strh	r3, [r7, #0]
    if((Xend > Xstart) && (Yend > Ystart)) {
 80093ae:	887a      	ldrh	r2, [r7, #2]
 80093b0:	88fb      	ldrh	r3, [r7, #6]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d915      	bls.n	80093e2 <LCD_SetArealColor+0x52>
 80093b6:	883a      	ldrh	r2, [r7, #0]
 80093b8:	88bb      	ldrh	r3, [r7, #4]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d911      	bls.n	80093e2 <LCD_SetArealColor+0x52>
        LCD_SetWindow(Xstart , Ystart , Xend , Yend  );
 80093be:	883b      	ldrh	r3, [r7, #0]
 80093c0:	887a      	ldrh	r2, [r7, #2]
 80093c2:	88b9      	ldrh	r1, [r7, #4]
 80093c4:	88f8      	ldrh	r0, [r7, #6]
 80093c6:	f7ff ff45 	bl	8009254 <LCD_SetWindow>
        LCD_SetColor ( Color , Xend - Xstart, Yend - Ystart);
 80093ca:	887a      	ldrh	r2, [r7, #2]
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	b299      	uxth	r1, r3
 80093d2:	883a      	ldrh	r2, [r7, #0]
 80093d4:	88bb      	ldrh	r3, [r7, #4]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	b29a      	uxth	r2, r3
 80093da:	8b3b      	ldrh	r3, [r7, #24]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff ff9b 	bl	8009318 <LCD_SetColor>
    }
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd90      	pop	{r4, r7, pc}
	...

080093ec <LCD_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_Clear(COLOR  Color)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	4603      	mov	r3, r0
 80093f4:	80fb      	strh	r3, [r7, #6]
    LCD_SetArealColor(0, 0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page , Color);
 80093f6:	4b07      	ldr	r3, [pc, #28]	@ (8009414 <LCD_Clear+0x28>)
 80093f8:	881a      	ldrh	r2, [r3, #0]
 80093fa:	4b06      	ldr	r3, [pc, #24]	@ (8009414 <LCD_Clear+0x28>)
 80093fc:	8859      	ldrh	r1, [r3, #2]
 80093fe:	88fb      	ldrh	r3, [r7, #6]
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	460b      	mov	r3, r1
 8009404:	2100      	movs	r1, #0
 8009406:	2000      	movs	r0, #0
 8009408:	f7ff ffc2 	bl	8009390 <LCD_SetArealColor>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	20002110 	.word	0x20002110

08009418 <GUI_Swop>:
extern LCD_DIS sLCD_DIS;
/******************************************************************************
function:	Coordinate conversion
******************************************************************************/
void GUI_Swop(POINT Point1, POINT Point2)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	460a      	mov	r2, r1
 8009422:	80fb      	strh	r3, [r7, #6]
 8009424:	4613      	mov	r3, r2
 8009426:	80bb      	strh	r3, [r7, #4]
    POINT Temp;
    Temp = Point1;
 8009428:	88fb      	ldrh	r3, [r7, #6]
 800942a:	81fb      	strh	r3, [r7, #14]
    Point1 = Point2;
 800942c:	88bb      	ldrh	r3, [r7, #4]
 800942e:	80fb      	strh	r3, [r7, #6]
    Point2 = Temp;
 8009430:	89fb      	ldrh	r3, [r7, #14]
 8009432:	80bb      	strh	r3, [r7, #4]
}
 8009434:	bf00      	nop
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <GUI_DrawPoint>:
	Color		:   Set color
	Dot_Pixel	:	point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 8009440:	b590      	push	{r4, r7, lr}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	4604      	mov	r4, r0
 8009448:	4608      	mov	r0, r1
 800944a:	4611      	mov	r1, r2
 800944c:	461a      	mov	r2, r3
 800944e:	4623      	mov	r3, r4
 8009450:	80fb      	strh	r3, [r7, #6]
 8009452:	4603      	mov	r3, r0
 8009454:	80bb      	strh	r3, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	807b      	strh	r3, [r7, #2]
 800945a:	4613      	mov	r3, r2
 800945c:	707b      	strb	r3, [r7, #1]
    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 800945e:	4b34      	ldr	r3, [pc, #208]	@ (8009530 <GUI_DrawPoint+0xf0>)
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	88fa      	ldrh	r2, [r7, #6]
 8009464:	429a      	cmp	r2, r3
 8009466:	d804      	bhi.n	8009472 <GUI_DrawPoint+0x32>
 8009468:	4b31      	ldr	r3, [pc, #196]	@ (8009530 <GUI_DrawPoint+0xf0>)
 800946a:	885b      	ldrh	r3, [r3, #2]
 800946c:	88ba      	ldrh	r2, [r7, #4]
 800946e:	429a      	cmp	r2, r3
 8009470:	d903      	bls.n	800947a <GUI_DrawPoint+0x3a>
        DEBUG("GUI_DrawPoint Input exceeds the normal display range\r\n");
 8009472:	4830      	ldr	r0, [pc, #192]	@ (8009534 <GUI_DrawPoint+0xf4>)
 8009474:	f001 ffba 	bl	800b3ec <puts>
        return;
 8009478:	e056      	b.n	8009528 <GUI_DrawPoint+0xe8>
    }

    uint16_t XDir_Num , YDir_Num;
    if(DOT_STYLE == DOT_STYLE_DFT) {
 800947a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d12c      	bne.n	80094dc <GUI_DrawPoint+0x9c>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8009482:	2300      	movs	r3, #0
 8009484:	81fb      	strh	r3, [r7, #14]
 8009486:	e022      	b.n	80094ce <GUI_DrawPoint+0x8e>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8009488:	2300      	movs	r3, #0
 800948a:	81bb      	strh	r3, [r7, #12]
 800948c:	e016      	b.n	80094bc <GUI_DrawPoint+0x7c>
                LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800948e:	88fa      	ldrh	r2, [r7, #6]
 8009490:	89fb      	ldrh	r3, [r7, #14]
 8009492:	4413      	add	r3, r2
 8009494:	b29a      	uxth	r2, r3
 8009496:	787b      	ldrb	r3, [r7, #1]
 8009498:	b29b      	uxth	r3, r3
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	b298      	uxth	r0, r3
 800949e:	88ba      	ldrh	r2, [r7, #4]
 80094a0:	89bb      	ldrh	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	787b      	ldrb	r3, [r7, #1]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	887a      	ldrh	r2, [r7, #2]
 80094b0:	4619      	mov	r1, r3
 80094b2:	f7ff ff47 	bl	8009344 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80094b6:	89bb      	ldrh	r3, [r7, #12]
 80094b8:	3301      	adds	r3, #1
 80094ba:	81bb      	strh	r3, [r7, #12]
 80094bc:	89ba      	ldrh	r2, [r7, #12]
 80094be:	787b      	ldrb	r3, [r7, #1]
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	3b01      	subs	r3, #1
 80094c4:	429a      	cmp	r2, r3
 80094c6:	dbe2      	blt.n	800948e <GUI_DrawPoint+0x4e>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80094c8:	89fb      	ldrh	r3, [r7, #14]
 80094ca:	3301      	adds	r3, #1
 80094cc:	81fb      	strh	r3, [r7, #14]
 80094ce:	89fa      	ldrh	r2, [r7, #14]
 80094d0:	787b      	ldrb	r3, [r7, #1]
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	3b01      	subs	r3, #1
 80094d6:	429a      	cmp	r2, r3
 80094d8:	dbd6      	blt.n	8009488 <GUI_DrawPoint+0x48>
 80094da:	e025      	b.n	8009528 <GUI_DrawPoint+0xe8>
            }
        }
    } else {
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80094dc:	2300      	movs	r3, #0
 80094de:	81fb      	strh	r3, [r7, #14]
 80094e0:	e01d      	b.n	800951e <GUI_DrawPoint+0xde>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80094e2:	2300      	movs	r3, #0
 80094e4:	81bb      	strh	r3, [r7, #12]
 80094e6:	e012      	b.n	800950e <GUI_DrawPoint+0xce>
                LCD_SetPointlColor(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80094e8:	88fa      	ldrh	r2, [r7, #6]
 80094ea:	89fb      	ldrh	r3, [r7, #14]
 80094ec:	4413      	add	r3, r2
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b298      	uxth	r0, r3
 80094f4:	88ba      	ldrh	r2, [r7, #4]
 80094f6:	89bb      	ldrh	r3, [r7, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3b01      	subs	r3, #1
 80094fe:	b29b      	uxth	r3, r3
 8009500:	887a      	ldrh	r2, [r7, #2]
 8009502:	4619      	mov	r1, r3
 8009504:	f7ff ff1e 	bl	8009344 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8009508:	89bb      	ldrh	r3, [r7, #12]
 800950a:	3301      	adds	r3, #1
 800950c:	81bb      	strh	r3, [r7, #12]
 800950e:	787b      	ldrb	r3, [r7, #1]
 8009510:	b29b      	uxth	r3, r3
 8009512:	89ba      	ldrh	r2, [r7, #12]
 8009514:	429a      	cmp	r2, r3
 8009516:	d3e7      	bcc.n	80094e8 <GUI_DrawPoint+0xa8>
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8009518:	89fb      	ldrh	r3, [r7, #14]
 800951a:	3301      	adds	r3, #1
 800951c:	81fb      	strh	r3, [r7, #14]
 800951e:	787b      	ldrb	r3, [r7, #1]
 8009520:	b29b      	uxth	r3, r3
 8009522:	89fa      	ldrh	r2, [r7, #14]
 8009524:	429a      	cmp	r2, r3
 8009526:	d3dc      	bcc.n	80094e2 <GUI_DrawPoint+0xa2>
            }
        }
    }
}
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	bd90      	pop	{r4, r7, pc}
 800952e:	bf00      	nop
 8009530:	20002110 	.word	0x20002110
 8009534:	0800c15c 	.word	0x0800c15c

08009538 <GUI_DrawLine>:
	Yend   ：End point y coordinate
	Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b08d      	sub	sp, #52	@ 0x34
 800953c:	af02      	add	r7, sp, #8
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	4611      	mov	r1, r2
 8009544:	461a      	mov	r2, r3
 8009546:	4623      	mov	r3, r4
 8009548:	80fb      	strh	r3, [r7, #6]
 800954a:	4603      	mov	r3, r0
 800954c:	80bb      	strh	r3, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	807b      	strh	r3, [r7, #2]
 8009552:	4613      	mov	r3, r2
 8009554:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8009556:	4b58      	ldr	r3, [pc, #352]	@ (80096b8 <GUI_DrawLine+0x180>)
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	88fa      	ldrh	r2, [r7, #6]
 800955c:	429a      	cmp	r2, r3
 800955e:	d80e      	bhi.n	800957e <GUI_DrawLine+0x46>
 8009560:	4b55      	ldr	r3, [pc, #340]	@ (80096b8 <GUI_DrawLine+0x180>)
 8009562:	885b      	ldrh	r3, [r3, #2]
 8009564:	88ba      	ldrh	r2, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d809      	bhi.n	800957e <GUI_DrawLine+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800956a:	4b53      	ldr	r3, [pc, #332]	@ (80096b8 <GUI_DrawLine+0x180>)
 800956c:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800956e:	887a      	ldrh	r2, [r7, #2]
 8009570:	429a      	cmp	r2, r3
 8009572:	d804      	bhi.n	800957e <GUI_DrawLine+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8009574:	4b50      	ldr	r3, [pc, #320]	@ (80096b8 <GUI_DrawLine+0x180>)
 8009576:	885b      	ldrh	r3, [r3, #2]
 8009578:	883a      	ldrh	r2, [r7, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d903      	bls.n	8009586 <GUI_DrawLine+0x4e>
        DEBUG("GUI_DrawLine Input exceeds the normal display range\r\n");
 800957e:	484f      	ldr	r0, [pc, #316]	@ (80096bc <GUI_DrawLine+0x184>)
 8009580:	f001 ff34 	bl	800b3ec <puts>
        return;
 8009584:	e094      	b.n	80096b0 <GUI_DrawLine+0x178>
    }

    if(Xstart > Xend)
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	887b      	ldrh	r3, [r7, #2]
 800958a:	429a      	cmp	r2, r3
 800958c:	d905      	bls.n	800959a <GUI_DrawLine+0x62>
        GUI_Swop(Xstart, Xend);
 800958e:	887a      	ldrh	r2, [r7, #2]
 8009590:	88fb      	ldrh	r3, [r7, #6]
 8009592:	4611      	mov	r1, r2
 8009594:	4618      	mov	r0, r3
 8009596:	f7ff ff3f 	bl	8009418 <GUI_Swop>
    if(Ystart > Yend)
 800959a:	88ba      	ldrh	r2, [r7, #4]
 800959c:	883b      	ldrh	r3, [r7, #0]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d905      	bls.n	80095ae <GUI_DrawLine+0x76>
        GUI_Swop(Ystart, Yend);
 80095a2:	883a      	ldrh	r2, [r7, #0]
 80095a4:	88bb      	ldrh	r3, [r7, #4]
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff ff35 	bl	8009418 <GUI_Swop>

    POINT Xpoint = Xstart;
 80095ae:	88fb      	ldrh	r3, [r7, #6]
 80095b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    POINT Ypoint = Ystart;
 80095b2:	88bb      	ldrh	r3, [r7, #4]
 80095b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80095b6:	887a      	ldrh	r2, [r7, #2]
 80095b8:	88fb      	ldrh	r3, [r7, #6]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfb8      	it	lt
 80095c0:	425b      	neglt	r3, r3
 80095c2:	61bb      	str	r3, [r7, #24]
    int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80095c4:	883a      	ldrh	r2, [r7, #0]
 80095c6:	88bb      	ldrh	r3, [r7, #4]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bfb8      	it	lt
 80095ce:	425b      	neglt	r3, r3
 80095d0:	425b      	negs	r3, r3
 80095d2:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int32_t XAddway = Xstart < Xend ? 1 : -1;
 80095d4:	88fa      	ldrh	r2, [r7, #6]
 80095d6:	887b      	ldrh	r3, [r7, #2]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d201      	bcs.n	80095e0 <GUI_DrawLine+0xa8>
 80095dc:	2301      	movs	r3, #1
 80095de:	e001      	b.n	80095e4 <GUI_DrawLine+0xac>
 80095e0:	f04f 33ff 	mov.w	r3, #4294967295
 80095e4:	613b      	str	r3, [r7, #16]
    int32_t YAddway = Ystart < Yend ? 1 : -1;
 80095e6:	88ba      	ldrh	r2, [r7, #4]
 80095e8:	883b      	ldrh	r3, [r7, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d201      	bcs.n	80095f2 <GUI_DrawLine+0xba>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e001      	b.n	80095f6 <GUI_DrawLine+0xbe>
 80095f2:	f04f 33ff 	mov.w	r3, #4294967295
 80095f6:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int32_t Esp = dx + dy;
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	4413      	add	r3, r2
 80095fe:	623b      	str	r3, [r7, #32]
    int8_t Line_Style_Temp = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	77fb      	strb	r3, [r7, #31]

    for(;;) {
        Line_Style_Temp++;
 8009604:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	3301      	adds	r3, #1
 800960c:	b2db      	uxtb	r3, r3
 800960e:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if(Line_Style == LINE_DOTTED && Line_Style_Temp % 3 == 0) {
 8009610:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8009614:	2b01      	cmp	r3, #1
 8009616:	d11a      	bne.n	800964e <GUI_DrawLine+0x116>
 8009618:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800961c:	4b28      	ldr	r3, [pc, #160]	@ (80096c0 <GUI_DrawLine+0x188>)
 800961e:	fb83 3102 	smull	r3, r1, r3, r2
 8009622:	17d3      	asrs	r3, r2, #31
 8009624:	1ac9      	subs	r1, r1, r3
 8009626:	460b      	mov	r3, r1
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	440b      	add	r3, r1
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	b25b      	sxtb	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10c      	bne.n	800964e <GUI_DrawLine+0x116>
            //DEBUG("LINE_DOTTED\r\n");
            GUI_DrawPoint(Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 8009634:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009638:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800963a:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800963c:	2201      	movs	r2, #1
 800963e:	9200      	str	r2, [sp, #0]
 8009640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009644:	f7ff fefc 	bl	8009440 <GUI_DrawPoint>
            Line_Style_Temp = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	77fb      	strb	r3, [r7, #31]
 800964c:	e008      	b.n	8009660 <GUI_DrawLine+0x128>
        } else {
            GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 800964e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009652:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8009654:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8009656:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8009658:	2401      	movs	r4, #1
 800965a:	9400      	str	r4, [sp, #0]
 800965c:	f7ff fef0 	bl	8009440 <GUI_DrawPoint>
        }
        if(2 * Esp >= dy) {
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	429a      	cmp	r2, r3
 8009668:	dc0c      	bgt.n	8009684 <GUI_DrawLine+0x14c>
            if(Xpoint == Xend) break;
 800966a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800966c:	887b      	ldrh	r3, [r7, #2]
 800966e:	429a      	cmp	r2, r3
 8009670:	d01b      	beq.n	80096aa <GUI_DrawLine+0x172>
            Esp += dy;
 8009672:	6a3a      	ldr	r2, [r7, #32]
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	4413      	add	r3, r2
 8009678:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	b29a      	uxth	r2, r3
 800967e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009680:	4413      	add	r3, r2
 8009682:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if(2 * Esp <= dx) {
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	69ba      	ldr	r2, [r7, #24]
 800968a:	429a      	cmp	r2, r3
 800968c:	dbba      	blt.n	8009604 <GUI_DrawLine+0xcc>
            if(Ypoint == Yend) break;
 800968e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009690:	883b      	ldrh	r3, [r7, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d00b      	beq.n	80096ae <GUI_DrawLine+0x176>
            Esp += dx;
 8009696:	6a3a      	ldr	r2, [r7, #32]
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	4413      	add	r3, r2
 800969c:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096a4:	4413      	add	r3, r2
 80096a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        Line_Style_Temp++;
 80096a8:	e7ac      	b.n	8009604 <GUI_DrawLine+0xcc>
            if(Xpoint == Xend) break;
 80096aa:	bf00      	nop
 80096ac:	e000      	b.n	80096b0 <GUI_DrawLine+0x178>
            if(Ypoint == Yend) break;
 80096ae:	bf00      	nop
        }
    }
}
 80096b0:	372c      	adds	r7, #44	@ 0x2c
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd90      	pop	{r4, r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20002110 	.word	0x20002110
 80096bc:	0800c19c 	.word	0x0800c19c
 80096c0:	55555556 	.word	0x55555556

080096c4 <GUI_DrawRectangle>:
	Color  ：The color of the Rectangular segment
	Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel)
{
 80096c4:	b590      	push	{r4, r7, lr}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af04      	add	r7, sp, #16
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	4611      	mov	r1, r2
 80096d0:	461a      	mov	r2, r3
 80096d2:	4623      	mov	r3, r4
 80096d4:	80fb      	strh	r3, [r7, #6]
 80096d6:	4603      	mov	r3, r0
 80096d8:	80bb      	strh	r3, [r7, #4]
 80096da:	460b      	mov	r3, r1
 80096dc:	807b      	strh	r3, [r7, #2]
 80096de:	4613      	mov	r3, r2
 80096e0:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80096e2:	4b3a      	ldr	r3, [pc, #232]	@ (80097cc <GUI_DrawRectangle+0x108>)
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	88fa      	ldrh	r2, [r7, #6]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d80e      	bhi.n	800970a <GUI_DrawRectangle+0x46>
 80096ec:	4b37      	ldr	r3, [pc, #220]	@ (80097cc <GUI_DrawRectangle+0x108>)
 80096ee:	885b      	ldrh	r3, [r3, #2]
 80096f0:	88ba      	ldrh	r2, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d809      	bhi.n	800970a <GUI_DrawRectangle+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80096f6:	4b35      	ldr	r3, [pc, #212]	@ (80097cc <GUI_DrawRectangle+0x108>)
 80096f8:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80096fa:	887a      	ldrh	r2, [r7, #2]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d804      	bhi.n	800970a <GUI_DrawRectangle+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8009700:	4b32      	ldr	r3, [pc, #200]	@ (80097cc <GUI_DrawRectangle+0x108>)
 8009702:	885b      	ldrh	r3, [r3, #2]
 8009704:	883a      	ldrh	r2, [r7, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d903      	bls.n	8009712 <GUI_DrawRectangle+0x4e>
        DEBUG("Input exceeds the normal display range\r\n");
 800970a:	4831      	ldr	r0, [pc, #196]	@ (80097d0 <GUI_DrawRectangle+0x10c>)
 800970c:	f001 fe6e 	bl	800b3ec <puts>
        return;
 8009710:	e058      	b.n	80097c4 <GUI_DrawRectangle+0x100>
    }

    if(Xstart > Xend)
 8009712:	88fa      	ldrh	r2, [r7, #6]
 8009714:	887b      	ldrh	r3, [r7, #2]
 8009716:	429a      	cmp	r2, r3
 8009718:	d905      	bls.n	8009726 <GUI_DrawRectangle+0x62>
        GUI_Swop(Xstart, Xend);
 800971a:	887a      	ldrh	r2, [r7, #2]
 800971c:	88fb      	ldrh	r3, [r7, #6]
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f7ff fe79 	bl	8009418 <GUI_Swop>
    if(Ystart > Yend)
 8009726:	88ba      	ldrh	r2, [r7, #4]
 8009728:	883b      	ldrh	r3, [r7, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d905      	bls.n	800973a <GUI_DrawRectangle+0x76>
        GUI_Swop(Ystart, Yend);
 800972e:	883a      	ldrh	r2, [r7, #0]
 8009730:	88bb      	ldrh	r3, [r7, #4]
 8009732:	4611      	mov	r1, r2
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff fe6f 	bl	8009418 <GUI_Swop>

    
    if(Filled ) {
 800973a:	7f3b      	ldrb	r3, [r7, #28]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d009      	beq.n	8009754 <GUI_DrawRectangle+0x90>
		POINT Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
        }
	#elif HIGH_Speed_Show
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 8009740:	883c      	ldrh	r4, [r7, #0]
 8009742:	887a      	ldrh	r2, [r7, #2]
 8009744:	88b9      	ldrh	r1, [r7, #4]
 8009746:	88f8      	ldrh	r0, [r7, #6]
 8009748:	8b3b      	ldrh	r3, [r7, #24]
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	4623      	mov	r3, r4
 800974e:	f7ff fe1f 	bl	8009390 <LCD_SetArealColor>
 8009752:	e037      	b.n	80097c4 <GUI_DrawRectangle+0x100>
	#endif
    } else {
        GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 8009754:	88bc      	ldrh	r4, [r7, #4]
 8009756:	887a      	ldrh	r2, [r7, #2]
 8009758:	88b9      	ldrh	r1, [r7, #4]
 800975a:	88f8      	ldrh	r0, [r7, #6]
 800975c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009760:	9302      	str	r3, [sp, #8]
 8009762:	2300      	movs	r3, #0
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	8b3b      	ldrh	r3, [r7, #24]
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	4623      	mov	r3, r4
 800976c:	f7ff fee4 	bl	8009538 <GUI_DrawLine>
        GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8009770:	883c      	ldrh	r4, [r7, #0]
 8009772:	88fa      	ldrh	r2, [r7, #6]
 8009774:	88b9      	ldrh	r1, [r7, #4]
 8009776:	88f8      	ldrh	r0, [r7, #6]
 8009778:	f897 3020 	ldrb.w	r3, [r7, #32]
 800977c:	9302      	str	r3, [sp, #8]
 800977e:	2300      	movs	r3, #0
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	8b3b      	ldrh	r3, [r7, #24]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	4623      	mov	r3, r4
 8009788:	f7ff fed6 	bl	8009538 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 800978c:	88bc      	ldrh	r4, [r7, #4]
 800978e:	887a      	ldrh	r2, [r7, #2]
 8009790:	8839      	ldrh	r1, [r7, #0]
 8009792:	8878      	ldrh	r0, [r7, #2]
 8009794:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009798:	9302      	str	r3, [sp, #8]
 800979a:	2300      	movs	r3, #0
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	8b3b      	ldrh	r3, [r7, #24]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	4623      	mov	r3, r4
 80097a4:	f7ff fec8 	bl	8009538 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 80097a8:	883c      	ldrh	r4, [r7, #0]
 80097aa:	88fa      	ldrh	r2, [r7, #6]
 80097ac:	8839      	ldrh	r1, [r7, #0]
 80097ae:	8878      	ldrh	r0, [r7, #2]
 80097b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	2300      	movs	r3, #0
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	8b3b      	ldrh	r3, [r7, #24]
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	4623      	mov	r3, r4
 80097c0:	f7ff feba 	bl	8009538 <GUI_DrawLine>
    }
}
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd90      	pop	{r4, r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20002110 	.word	0x20002110
 80097d0:	0800c1dc 	.word	0x0800c1dc

080097d4 <GUI_DisChar>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08a      	sub	sp, #40	@ 0x28
 80097d8:	af02      	add	r7, sp, #8
 80097da:	607b      	str	r3, [r7, #4]
 80097dc:	4603      	mov	r3, r0
 80097de:	81fb      	strh	r3, [r7, #14]
 80097e0:	460b      	mov	r3, r1
 80097e2:	81bb      	strh	r3, [r7, #12]
 80097e4:	4613      	mov	r3, r2
 80097e6:	72fb      	strb	r3, [r7, #11]
    POINT Page, Column;

    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 80097e8:	4b50      	ldr	r3, [pc, #320]	@ (800992c <GUI_DisChar+0x158>)
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	89fa      	ldrh	r2, [r7, #14]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d804      	bhi.n	80097fc <GUI_DisChar+0x28>
 80097f2:	4b4e      	ldr	r3, [pc, #312]	@ (800992c <GUI_DisChar+0x158>)
 80097f4:	885b      	ldrh	r3, [r3, #2]
 80097f6:	89ba      	ldrh	r2, [r7, #12]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d903      	bls.n	8009804 <GUI_DisChar+0x30>
        DEBUG("GUI_DisChar Input exceeds the normal display range\r\n");
 80097fc:	484c      	ldr	r0, [pc, #304]	@ (8009930 <GUI_DisChar+0x15c>)
 80097fe:	f001 fdf5 	bl	800b3ec <puts>
        return;
 8009802:	e08f      	b.n	8009924 <GUI_DisChar+0x150>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8009804:	7afb      	ldrb	r3, [r7, #11]
 8009806:	3b20      	subs	r3, #32
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	88d2      	ldrh	r2, [r2, #6]
 800980c:	fb02 f303 	mul.w	r3, r2, r3
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	8892      	ldrh	r2, [r2, #4]
 8009814:	08d2      	lsrs	r2, r2, #3
 8009816:	b292      	uxth	r2, r2
 8009818:	4611      	mov	r1, r2
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	8892      	ldrh	r2, [r2, #4]
 800981e:	f002 0207 	and.w	r2, r2, #7
 8009822:	b292      	uxth	r2, r2
 8009824:	2a00      	cmp	r2, #0
 8009826:	bf14      	ite	ne
 8009828:	2201      	movne	r2, #1
 800982a:	2200      	moveq	r2, #0
 800982c:	b2d2      	uxtb	r2, r2
 800982e:	440a      	add	r2, r1
 8009830:	fb02 f303 	mul.w	r3, r2, r3
 8009834:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	4413      	add	r3, r2
 800983e:	61bb      	str	r3, [r7, #24]

    for(Page = 0; Page < Font->Height; Page ++ ) {
 8009840:	2300      	movs	r3, #0
 8009842:	83fb      	strh	r3, [r7, #30]
 8009844:	e069      	b.n	800991a <GUI_DisChar+0x146>
        for(Column = 0; Column < Font->Width; Column ++ ) {
 8009846:	2300      	movs	r3, #0
 8009848:	83bb      	strh	r3, [r7, #28]
 800984a:	e054      	b.n	80098f6 <GUI_DisChar+0x122>

            //To determine whether the font background color and screen background color is consistent
            if(FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800984c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800984e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009852:	4293      	cmp	r3, r2
 8009854:	d11a      	bne.n	800988c <GUI_DisChar+0xb8>
                if(*ptr & (0x80 >> (Column % 8)))
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	4619      	mov	r1, r3
 800985c:	8bbb      	ldrh	r3, [r7, #28]
 800985e:	f003 0307 	and.w	r3, r3, #7
 8009862:	2280      	movs	r2, #128	@ 0x80
 8009864:	fa42 f303 	asr.w	r3, r2, r3
 8009868:	400b      	ands	r3, r1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d037      	beq.n	80098de <GUI_DisChar+0x10a>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800986e:	89fa      	ldrh	r2, [r7, #14]
 8009870:	8bbb      	ldrh	r3, [r7, #28]
 8009872:	4413      	add	r3, r2
 8009874:	b298      	uxth	r0, r3
 8009876:	89ba      	ldrh	r2, [r7, #12]
 8009878:	8bfb      	ldrh	r3, [r7, #30]
 800987a:	4413      	add	r3, r2
 800987c:	b299      	uxth	r1, r3
 800987e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009880:	2301      	movs	r3, #1
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	2301      	movs	r3, #1
 8009886:	f7ff fddb 	bl	8009440 <GUI_DrawPoint>
 800988a:	e028      	b.n	80098de <GUI_DisChar+0x10a>
            } else {
                if(*ptr & (0x80 >> (Column % 8))) {
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	4619      	mov	r1, r3
 8009892:	8bbb      	ldrh	r3, [r7, #28]
 8009894:	f003 0307 	and.w	r3, r3, #7
 8009898:	2280      	movs	r2, #128	@ 0x80
 800989a:	fa42 f303 	asr.w	r3, r2, r3
 800989e:	400b      	ands	r3, r1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00e      	beq.n	80098c2 <GUI_DisChar+0xee>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 80098a4:	89fa      	ldrh	r2, [r7, #14]
 80098a6:	8bbb      	ldrh	r3, [r7, #28]
 80098a8:	4413      	add	r3, r2
 80098aa:	b298      	uxth	r0, r3
 80098ac:	89ba      	ldrh	r2, [r7, #12]
 80098ae:	8bfb      	ldrh	r3, [r7, #30]
 80098b0:	4413      	add	r3, r2
 80098b2:	b299      	uxth	r1, r3
 80098b4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80098b6:	2301      	movs	r3, #1
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	2301      	movs	r3, #1
 80098bc:	f7ff fdc0 	bl	8009440 <GUI_DrawPoint>
 80098c0:	e00d      	b.n	80098de <GUI_DisChar+0x10a>
                } else {
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 80098c2:	89fa      	ldrh	r2, [r7, #14]
 80098c4:	8bbb      	ldrh	r3, [r7, #28]
 80098c6:	4413      	add	r3, r2
 80098c8:	b298      	uxth	r0, r3
 80098ca:	89ba      	ldrh	r2, [r7, #12]
 80098cc:	8bfb      	ldrh	r3, [r7, #30]
 80098ce:	4413      	add	r3, r2
 80098d0:	b299      	uxth	r1, r3
 80098d2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80098d4:	2301      	movs	r3, #1
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	2301      	movs	r3, #1
 80098da:	f7ff fdb1 	bl	8009440 <GUI_DrawPoint>
                }
            }
            //One pixel is 8 bits
            if(Column % 8 == 7)
 80098de:	8bbb      	ldrh	r3, [r7, #28]
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	d102      	bne.n	80098f0 <GUI_DisChar+0x11c>
                ptr++;
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	3301      	adds	r3, #1
 80098ee:	61bb      	str	r3, [r7, #24]
        for(Column = 0; Column < Font->Width; Column ++ ) {
 80098f0:	8bbb      	ldrh	r3, [r7, #28]
 80098f2:	3301      	adds	r3, #1
 80098f4:	83bb      	strh	r3, [r7, #28]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	889b      	ldrh	r3, [r3, #4]
 80098fa:	8bba      	ldrh	r2, [r7, #28]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d3a5      	bcc.n	800984c <GUI_DisChar+0x78>
        }/* Write a line */
        if(Font->Width % 8 != 0)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	889b      	ldrh	r3, [r3, #4]
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	b29b      	uxth	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <GUI_DisChar+0x140>
            ptr++;
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	3301      	adds	r3, #1
 8009912:	61bb      	str	r3, [r7, #24]
    for(Page = 0; Page < Font->Height; Page ++ ) {
 8009914:	8bfb      	ldrh	r3, [r7, #30]
 8009916:	3301      	adds	r3, #1
 8009918:	83fb      	strh	r3, [r7, #30]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	88db      	ldrh	r3, [r3, #6]
 800991e:	8bfa      	ldrh	r2, [r7, #30]
 8009920:	429a      	cmp	r2, r3
 8009922:	d390      	bcc.n	8009846 <GUI_DisChar+0x72>
    }/* Write all */
}
 8009924:	3720      	adds	r7, #32
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	20002110 	.word	0x20002110
 8009930:	0800c24c 	.word	0x0800c24c

08009934 <GUI_DisString_EN>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b088      	sub	sp, #32
 8009938:	af02      	add	r7, sp, #8
 800993a:	60ba      	str	r2, [r7, #8]
 800993c:	607b      	str	r3, [r7, #4]
 800993e:	4603      	mov	r3, r0
 8009940:	81fb      	strh	r3, [r7, #14]
 8009942:	460b      	mov	r3, r1
 8009944:	81bb      	strh	r3, [r7, #12]
    POINT Xpoint = Xstart;
 8009946:	89fb      	ldrh	r3, [r7, #14]
 8009948:	82fb      	strh	r3, [r7, #22]
    POINT Ypoint = Ystart;
 800994a:	89bb      	ldrh	r3, [r7, #12]
 800994c:	82bb      	strh	r3, [r7, #20]

    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page) {
 800994e:	4b21      	ldr	r3, [pc, #132]	@ (80099d4 <GUI_DisString_EN+0xa0>)
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	89fa      	ldrh	r2, [r7, #14]
 8009954:	429a      	cmp	r2, r3
 8009956:	d804      	bhi.n	8009962 <GUI_DisString_EN+0x2e>
 8009958:	4b1e      	ldr	r3, [pc, #120]	@ (80099d4 <GUI_DisString_EN+0xa0>)
 800995a:	885b      	ldrh	r3, [r3, #2]
 800995c:	89ba      	ldrh	r2, [r7, #12]
 800995e:	429a      	cmp	r2, r3
 8009960:	d931      	bls.n	80099c6 <GUI_DisString_EN+0x92>
        DEBUG("GUI_DisString_EN Input exceeds the normal display range\r\n");
 8009962:	481d      	ldr	r0, [pc, #116]	@ (80099d8 <GUI_DisString_EN+0xa4>)
 8009964:	f001 fd42 	bl	800b3ec <puts>
        return;
 8009968:	e031      	b.n	80099ce <GUI_DisString_EN+0x9a>
    }

    while(* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
        if((Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ) {
 800996a:	8afb      	ldrh	r3, [r7, #22]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	8892      	ldrh	r2, [r2, #4]
 8009970:	4413      	add	r3, r2
 8009972:	4a18      	ldr	r2, [pc, #96]	@ (80099d4 <GUI_DisString_EN+0xa0>)
 8009974:	8812      	ldrh	r2, [r2, #0]
 8009976:	4293      	cmp	r3, r2
 8009978:	dd06      	ble.n	8009988 <GUI_DisString_EN+0x54>
            Xpoint = Xstart;
 800997a:	89fb      	ldrh	r3, [r7, #14]
 800997c:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	88da      	ldrh	r2, [r3, #6]
 8009982:	8abb      	ldrh	r3, [r7, #20]
 8009984:	4413      	add	r3, r2
 8009986:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if((Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ) {
 8009988:	8abb      	ldrh	r3, [r7, #20]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	88d2      	ldrh	r2, [r2, #6]
 800998e:	4413      	add	r3, r2
 8009990:	4a10      	ldr	r2, [pc, #64]	@ (80099d4 <GUI_DisString_EN+0xa0>)
 8009992:	8852      	ldrh	r2, [r2, #2]
 8009994:	4293      	cmp	r3, r2
 8009996:	dd03      	ble.n	80099a0 <GUI_DisString_EN+0x6c>
            Xpoint = Xstart;
 8009998:	89fb      	ldrh	r3, [r7, #14]
 800999a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800999c:	89bb      	ldrh	r3, [r7, #12]
 800999e:	82bb      	strh	r3, [r7, #20]
        }
        GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	781a      	ldrb	r2, [r3, #0]
 80099a4:	8ab9      	ldrh	r1, [r7, #20]
 80099a6:	8af8      	ldrh	r0, [r7, #22]
 80099a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	8c3b      	ldrh	r3, [r7, #32]
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f7ff ff0f 	bl	80097d4 <GUI_DisChar>

        //The next character of the address
        pString ++;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	3301      	adds	r3, #1
 80099ba:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	889a      	ldrh	r2, [r3, #4]
 80099c0:	8afb      	ldrh	r3, [r7, #22]
 80099c2:	4413      	add	r3, r2
 80099c4:	82fb      	strh	r3, [r7, #22]
    while(* pString != '\0') {
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1cd      	bne.n	800996a <GUI_DisString_EN+0x36>
    }
}
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	20002110 	.word	0x20002110
 80099d8:	0800c288 	.word	0x0800c288

080099dc <GUI_DisFloatNum>:
}


void GUI_DisFloatNum(POINT Xpoint, POINT Ypoint, float Nummber,
                sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b094      	sub	sp, #80	@ 0x50
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	ed87 0a04 	vstr	s0, [r7, #16]
 80099e6:	60fa      	str	r2, [r7, #12]
 80099e8:	461a      	mov	r2, r3
 80099ea:	4603      	mov	r3, r0
 80099ec:	82fb      	strh	r3, [r7, #22]
 80099ee:	460b      	mov	r3, r1
 80099f0:	82bb      	strh	r3, [r7, #20]
 80099f2:	4613      	mov	r3, r2
 80099f4:	817b      	strh	r3, [r7, #10]
    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 80099f6:	4b7f      	ldr	r3, [pc, #508]	@ (8009bf4 <GUI_DisFloatNum+0x218>)
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	8afa      	ldrh	r2, [r7, #22]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d804      	bhi.n	8009a0a <GUI_DisFloatNum+0x2e>
 8009a00:	4b7c      	ldr	r3, [pc, #496]	@ (8009bf4 <GUI_DisFloatNum+0x218>)
 8009a02:	885b      	ldrh	r3, [r3, #2]
 8009a04:	8aba      	ldrh	r2, [r7, #20]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d903      	bls.n	8009a12 <GUI_DisFloatNum+0x36>
        DEBUG("GUI_DisNum Input exceeds the normal display range\r\n");
 8009a0a:	487b      	ldr	r0, [pc, #492]	@ (8009bf8 <GUI_DisFloatNum+0x21c>)
 8009a0c:	f001 fcee 	bl	800b3ec <puts>
 8009a10:	e0ed      	b.n	8009bee <GUI_DisFloatNum+0x212>
        return;
    }

    // Проверяем, является ли число отрицательным
    uint8_t isNegative = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (Nummber < 0) {
 8009a18:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a24:	d508      	bpl.n	8009a38 <GUI_DisFloatNum+0x5c>
        isNegative = 1;
 8009a26:	2301      	movs	r3, #1
 8009a28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        Nummber = -Nummber;
 8009a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a30:	eef1 7a67 	vneg.f32	s15, s15
 8009a34:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    // Разделяем число на целую и дробную части
    uint8_t integerPart = (int)Nummber;
 8009a38:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a40:	edc7 7a01 	vstr	s15, [r7, #4]
 8009a44:	793b      	ldrb	r3, [r7, #4]
 8009a46:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    float fractionalPart = Nummber - integerPart;
 8009a4a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a56:	ed97 7a04 	vldr	s14, [r7, #16]
 8009a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a5e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Извлекаем сотые доли (округляем до двух знаков)
    uint8_t hundredths = (int)(fractionalPart * 100 + 0.5f); // +0.5 для округления
 8009a62:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8009a66:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8009bfc <GUI_DisFloatNum+0x220>
 8009a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a7a:	edc7 7a01 	vstr	s15, [r7, #4]
 8009a7e:	793b      	ldrb	r3, [r7, #4]
 8009a80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Обрабатываем целую часть (разбиваем на цифры)
    uint8_t intDigits[10] = {0}; // Максимум 10 цифр для int
 8009a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	605a      	str	r2, [r3, #4]
 8009a8e:	811a      	strh	r2, [r3, #8]
    uint8_t Str_Array[10] = {0};
 8009a90:	f107 0318 	add.w	r3, r7, #24
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	605a      	str	r2, [r3, #4]
 8009a9a:	811a      	strh	r2, [r3, #8]
    uint8_t *pStr = Str_Array;
 8009a9c:	f107 0318 	add.w	r3, r7, #24
 8009aa0:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t intLen = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    // Если целая часть = 0, то всё равно записываем 0
    if (integerPart == 0) {
 8009aa8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d12d      	bne.n	8009b0c <GUI_DisFloatNum+0x130>
        intDigits[intLen++] = 0;
 8009ab0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009ab4:	1c5a      	adds	r2, r3, #1
 8009ab6:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 8009aba:	3340      	adds	r3, #64	@ 0x40
 8009abc:	f107 0208 	add.w	r2, r7, #8
 8009ac0:	4413      	add	r3, r2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f803 2c24 	strb.w	r2, [r3, #-36]
 8009ac8:	e028      	b.n	8009b1c <GUI_DisFloatNum+0x140>
    } else {
        while (integerPart > 0 && intLen < 10) {
            intDigits[intLen++] = integerPart % 10;
 8009aca:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009ace:	1c5a      	adds	r2, r3, #1
 8009ad0:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009ada:	4b49      	ldr	r3, [pc, #292]	@ (8009c00 <GUI_DisFloatNum+0x224>)
 8009adc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ae0:	08d9      	lsrs	r1, r3, #3
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	f100 0340 	add.w	r3, r0, #64	@ 0x40
 8009af2:	f107 0108 	add.w	r1, r7, #8
 8009af6:	440b      	add	r3, r1
 8009af8:	f803 2c24 	strb.w	r2, [r3, #-36]
            integerPart /= 10;
 8009afc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009b00:	4a3f      	ldr	r2, [pc, #252]	@ (8009c00 <GUI_DisFloatNum+0x224>)
 8009b02:	fba2 2303 	umull	r2, r3, r2, r3
 8009b06:	08db      	lsrs	r3, r3, #3
 8009b08:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        while (integerPart > 0 && intLen < 10) {
 8009b0c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <GUI_DisFloatNum+0x140>
 8009b14:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009b18:	2b09      	cmp	r3, #9
 8009b1a:	d9d6      	bls.n	8009aca <GUI_DisFloatNum+0xee>
        }
    }

    // Записываем цифры целой части в обратном порядке
    size_t pos = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (isNegative) {
 8009b20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d009      	beq.n	8009b3c <GUI_DisFloatNum+0x160>
    	Str_Array[pos++] = '-'; // Можно заменить на 255 или другое значение, если нужны только цифры
 8009b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009b2e:	3340      	adds	r3, #64	@ 0x40
 8009b30:	f107 0208 	add.w	r2, r7, #8
 8009b34:	4413      	add	r3, r2
 8009b36:	222d      	movs	r2, #45	@ 0x2d
 8009b38:	f803 2c30 	strb.w	r2, [r3, #-48]
    }

    for (int i = intLen - 1; i >= 0; i--) {
 8009b3c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009b40:	3b01      	subs	r3, #1
 8009b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b44:	e012      	b.n	8009b6c <GUI_DisFloatNum+0x190>
    	Str_Array[pos++] = intDigits[i] + '0';
 8009b46:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8009b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b4c:	4413      	add	r3, r2
 8009b4e:	781a      	ldrb	r2, [r3, #0]
 8009b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b52:	1c59      	adds	r1, r3, #1
 8009b54:	6439      	str	r1, [r7, #64]	@ 0x40
 8009b56:	3230      	adds	r2, #48	@ 0x30
 8009b58:	b2d2      	uxtb	r2, r2
 8009b5a:	3340      	adds	r3, #64	@ 0x40
 8009b5c:	f107 0108 	add.w	r1, r7, #8
 8009b60:	440b      	add	r3, r1
 8009b62:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (int i = intLen - 1; i >= 0; i--) {
 8009b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	dae9      	bge.n	8009b46 <GUI_DisFloatNum+0x16a>
    }

    // Добавляем запятую
    Str_Array[pos++] = ','; // ASCII-код ',' = 44
 8009b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	643a      	str	r2, [r7, #64]	@ 0x40
 8009b78:	3340      	adds	r3, #64	@ 0x40
 8009b7a:	f107 0208 	add.w	r2, r7, #8
 8009b7e:	4413      	add	r3, r2
 8009b80:	222c      	movs	r2, #44	@ 0x2c
 8009b82:	f803 2c30 	strb.w	r2, [r3, #-48]

    // Добавляем сотые доли (две цифры)
    Str_Array[pos++] = hundredths / 10 + '0';  // Десятые
 8009b86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8009c00 <GUI_DisFloatNum+0x224>)
 8009b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b90:	08db      	lsrs	r3, r3, #3
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b96:	1c59      	adds	r1, r3, #1
 8009b98:	6439      	str	r1, [r7, #64]	@ 0x40
 8009b9a:	3230      	adds	r2, #48	@ 0x30
 8009b9c:	b2d2      	uxtb	r2, r2
 8009b9e:	3340      	adds	r3, #64	@ 0x40
 8009ba0:	f107 0108 	add.w	r1, r7, #8
 8009ba4:	440b      	add	r3, r1
 8009ba6:	f803 2c30 	strb.w	r2, [r3, #-48]
    Str_Array[pos++] = hundredths % 10 + '0';  // Сотые
 8009baa:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009bae:	4b14      	ldr	r3, [pc, #80]	@ (8009c00 <GUI_DisFloatNum+0x224>)
 8009bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8009bb4:	08d9      	lsrs	r1, r3, #3
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	440b      	add	r3, r1
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bc4:	1c59      	adds	r1, r3, #1
 8009bc6:	6439      	str	r1, [r7, #64]	@ 0x40
 8009bc8:	3230      	adds	r2, #48	@ 0x30
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	3340      	adds	r3, #64	@ 0x40
 8009bce:	f107 0108 	add.w	r1, r7, #8
 8009bd2:	440b      	add	r3, r1
 8009bd4:	f803 2c30 	strb.w	r2, [r3, #-48]

    //show
    GUI_DisString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground );
 8009bd8:	8ab9      	ldrh	r1, [r7, #20]
 8009bda:	8af8      	ldrh	r0, [r7, #22]
 8009bdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	897b      	ldrh	r3, [r7, #10]
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bea:	f7ff fea3 	bl	8009934 <GUI_DisString_EN>
}
 8009bee:	3748      	adds	r7, #72	@ 0x48
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	20002110 	.word	0x20002110
 8009bf8:	0800c2cc 	.word	0x0800c2cc
 8009bfc:	42c80000 	.word	0x42c80000
 8009c00:	cccccccd 	.word	0xcccccccd

08009c04 <GUI_GetFontSize>:
    }
}

// подбор размера шрифта
sFONT *GUI_GetFontSize(POINT Dx, POINT Dy)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	460a      	mov	r2, r1
 8009c0e:	80fb      	strh	r3, [r7, #6]
 8009c10:	4613      	mov	r3, r2
 8009c12:	80bb      	strh	r3, [r7, #4]
    sFONT *Font;
    if (Dx > Font24.Width && Dy > Font24.Height) {
 8009c14:	4b38      	ldr	r3, [pc, #224]	@ (8009cf8 <GUI_GetFontSize+0xf4>)
 8009c16:	889b      	ldrh	r3, [r3, #4]
 8009c18:	88fa      	ldrh	r2, [r7, #6]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d907      	bls.n	8009c2e <GUI_GetFontSize+0x2a>
 8009c1e:	4b36      	ldr	r3, [pc, #216]	@ (8009cf8 <GUI_GetFontSize+0xf4>)
 8009c20:	88db      	ldrh	r3, [r3, #6]
 8009c22:	88ba      	ldrh	r2, [r7, #4]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d902      	bls.n	8009c2e <GUI_GetFontSize+0x2a>
        Font = &Font24;
 8009c28:	4b33      	ldr	r3, [pc, #204]	@ (8009cf8 <GUI_GetFontSize+0xf4>)
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	e05e      	b.n	8009cec <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font20.Width && Dx < Font24.Width) &&
 8009c2e:	4b33      	ldr	r3, [pc, #204]	@ (8009cfc <GUI_GetFontSize+0xf8>)
 8009c30:	889b      	ldrh	r3, [r3, #4]
 8009c32:	88fa      	ldrh	r2, [r7, #6]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d911      	bls.n	8009c5c <GUI_GetFontSize+0x58>
 8009c38:	4b2f      	ldr	r3, [pc, #188]	@ (8009cf8 <GUI_GetFontSize+0xf4>)
 8009c3a:	889b      	ldrh	r3, [r3, #4]
 8009c3c:	88fa      	ldrh	r2, [r7, #6]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d20c      	bcs.n	8009c5c <GUI_GetFontSize+0x58>
               (Dy > Font20.Height && Dy < Font24.Height)) {
 8009c42:	4b2e      	ldr	r3, [pc, #184]	@ (8009cfc <GUI_GetFontSize+0xf8>)
 8009c44:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font20.Width && Dx < Font24.Width) &&
 8009c46:	88ba      	ldrh	r2, [r7, #4]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d907      	bls.n	8009c5c <GUI_GetFontSize+0x58>
               (Dy > Font20.Height && Dy < Font24.Height)) {
 8009c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8009cf8 <GUI_GetFontSize+0xf4>)
 8009c4e:	88db      	ldrh	r3, [r3, #6]
 8009c50:	88ba      	ldrh	r2, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d202      	bcs.n	8009c5c <GUI_GetFontSize+0x58>
        Font = &Font20;
 8009c56:	4b29      	ldr	r3, [pc, #164]	@ (8009cfc <GUI_GetFontSize+0xf8>)
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	e047      	b.n	8009cec <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font16.Width && Dx < Font20.Width) &&
 8009c5c:	4b28      	ldr	r3, [pc, #160]	@ (8009d00 <GUI_GetFontSize+0xfc>)
 8009c5e:	889b      	ldrh	r3, [r3, #4]
 8009c60:	88fa      	ldrh	r2, [r7, #6]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d911      	bls.n	8009c8a <GUI_GetFontSize+0x86>
 8009c66:	4b25      	ldr	r3, [pc, #148]	@ (8009cfc <GUI_GetFontSize+0xf8>)
 8009c68:	889b      	ldrh	r3, [r3, #4]
 8009c6a:	88fa      	ldrh	r2, [r7, #6]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d20c      	bcs.n	8009c8a <GUI_GetFontSize+0x86>
               (Dy > Font16.Height && Dy < Font20.Height)) {
 8009c70:	4b23      	ldr	r3, [pc, #140]	@ (8009d00 <GUI_GetFontSize+0xfc>)
 8009c72:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font16.Width && Dx < Font20.Width) &&
 8009c74:	88ba      	ldrh	r2, [r7, #4]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d907      	bls.n	8009c8a <GUI_GetFontSize+0x86>
               (Dy > Font16.Height && Dy < Font20.Height)) {
 8009c7a:	4b20      	ldr	r3, [pc, #128]	@ (8009cfc <GUI_GetFontSize+0xf8>)
 8009c7c:	88db      	ldrh	r3, [r3, #6]
 8009c7e:	88ba      	ldrh	r2, [r7, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d202      	bcs.n	8009c8a <GUI_GetFontSize+0x86>
        Font = &Font16;
 8009c84:	4b1e      	ldr	r3, [pc, #120]	@ (8009d00 <GUI_GetFontSize+0xfc>)
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	e030      	b.n	8009cec <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font12.Width && Dx < Font16.Width) &&
 8009c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8009d04 <GUI_GetFontSize+0x100>)
 8009c8c:	889b      	ldrh	r3, [r3, #4]
 8009c8e:	88fa      	ldrh	r2, [r7, #6]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d911      	bls.n	8009cb8 <GUI_GetFontSize+0xb4>
 8009c94:	4b1a      	ldr	r3, [pc, #104]	@ (8009d00 <GUI_GetFontSize+0xfc>)
 8009c96:	889b      	ldrh	r3, [r3, #4]
 8009c98:	88fa      	ldrh	r2, [r7, #6]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d20c      	bcs.n	8009cb8 <GUI_GetFontSize+0xb4>
               (Dy > Font12.Height && Dy < Font16.Height)) {
 8009c9e:	4b19      	ldr	r3, [pc, #100]	@ (8009d04 <GUI_GetFontSize+0x100>)
 8009ca0:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font12.Width && Dx < Font16.Width) &&
 8009ca2:	88ba      	ldrh	r2, [r7, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d907      	bls.n	8009cb8 <GUI_GetFontSize+0xb4>
               (Dy > Font12.Height && Dy < Font16.Height)) {
 8009ca8:	4b15      	ldr	r3, [pc, #84]	@ (8009d00 <GUI_GetFontSize+0xfc>)
 8009caa:	88db      	ldrh	r3, [r3, #6]
 8009cac:	88ba      	ldrh	r2, [r7, #4]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d202      	bcs.n	8009cb8 <GUI_GetFontSize+0xb4>
        Font = &Font12;
 8009cb2:	4b14      	ldr	r3, [pc, #80]	@ (8009d04 <GUI_GetFontSize+0x100>)
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	e019      	b.n	8009cec <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font8.Width && Dx < Font12.Width) &&
 8009cb8:	4b13      	ldr	r3, [pc, #76]	@ (8009d08 <GUI_GetFontSize+0x104>)
 8009cba:	889b      	ldrh	r3, [r3, #4]
 8009cbc:	88fa      	ldrh	r2, [r7, #6]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d911      	bls.n	8009ce6 <GUI_GetFontSize+0xe2>
 8009cc2:	4b10      	ldr	r3, [pc, #64]	@ (8009d04 <GUI_GetFontSize+0x100>)
 8009cc4:	889b      	ldrh	r3, [r3, #4]
 8009cc6:	88fa      	ldrh	r2, [r7, #6]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d20c      	bcs.n	8009ce6 <GUI_GetFontSize+0xe2>
               (Dy > Font8.Height && Dy < Font12.Height)) {
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8009d08 <GUI_GetFontSize+0x104>)
 8009cce:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font8.Width && Dx < Font12.Width) &&
 8009cd0:	88ba      	ldrh	r2, [r7, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d907      	bls.n	8009ce6 <GUI_GetFontSize+0xe2>
               (Dy > Font8.Height && Dy < Font12.Height)) {
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d04 <GUI_GetFontSize+0x100>)
 8009cd8:	88db      	ldrh	r3, [r3, #6]
 8009cda:	88ba      	ldrh	r2, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d202      	bcs.n	8009ce6 <GUI_GetFontSize+0xe2>
        Font = &Font8;
 8009ce0:	4b09      	ldr	r3, [pc, #36]	@ (8009d08 <GUI_GetFontSize+0x104>)
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	e002      	b.n	8009cec <GUI_GetFontSize+0xe8>
    } else {
        DEBUG("Please change the display area size, or add a larger font to modify\r\n");
 8009ce6:	4809      	ldr	r0, [pc, #36]	@ (8009d0c <GUI_GetFontSize+0x108>)
 8009ce8:	f001 fb80 	bl	800b3ec <puts>
    }
    return Font;
 8009cec:	68fb      	ldr	r3, [r7, #12]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000114 	.word	0x20000114
 8009cfc:	2000010c 	.word	0x2000010c
 8009d00:	20000104 	.word	0x20000104
 8009d04:	200000fc 	.word	0x200000fc
 8009d08:	2000011c 	.word	0x2000011c
 8009d0c:	0800c328 	.word	0x0800c328

08009d10 <GUI_Showtime>:
		Color  :   Set show color
  note:
******************************************************************************/
void GUI_Showtime(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  DEV_TIME *pTime, COLOR Color)
{
 8009d10:	b590      	push	{r4, r7, lr}
 8009d12:	b08b      	sub	sp, #44	@ 0x2c
 8009d14:	af02      	add	r7, sp, #8
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4623      	mov	r3, r4
 8009d20:	80fb      	strh	r3, [r7, #6]
 8009d22:	4603      	mov	r3, r0
 8009d24:	80bb      	strh	r3, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	807b      	strh	r3, [r7, #2]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	803b      	strh	r3, [r7, #0]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8009d2e:	4a6b      	ldr	r2, [pc, #428]	@ (8009edc <GUI_Showtime+0x1cc>)
 8009d30:	f107 030c 	add.w	r3, r7, #12
 8009d34:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d36:	c303      	stmia	r3!, {r0, r1}
 8009d38:	801a      	strh	r2, [r3, #0]
    sFONT *Font;

    //According to the display area adaptive font size
    POINT Dx = (Xend - Xstart) / 7;//Determine the spacing between characters
 8009d3a:	887a      	ldrh	r2, [r7, #2]
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	4a67      	ldr	r2, [pc, #412]	@ (8009ee0 <GUI_Showtime+0x1d0>)
 8009d42:	fb82 1203 	smull	r1, r2, r2, r3
 8009d46:	441a      	add	r2, r3
 8009d48:	1092      	asrs	r2, r2, #2
 8009d4a:	17db      	asrs	r3, r3, #31
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	83fb      	strh	r3, [r7, #30]
    POINT Dy = Yend - Ystart;      //determine the font size
 8009d50:	883a      	ldrh	r2, [r7, #0]
 8009d52:	88bb      	ldrh	r3, [r7, #4]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	83bb      	strh	r3, [r7, #28]
    Yend -= 5; // убрал немного расстояние отрисовки белого фона снизу
 8009d58:	883b      	ldrh	r3, [r7, #0]
 8009d5a:	3b05      	subs	r3, #5
 8009d5c:	803b      	strh	r3, [r7, #0]
    Font = GUI_GetFontSize(Dx, Dy);
 8009d5e:	8bba      	ldrh	r2, [r7, #28]
 8009d60:	8bfb      	ldrh	r3, [r7, #30]
 8009d62:	4611      	mov	r1, r2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7ff ff4d 	bl	8009c04 <GUI_GetFontSize>
 8009d6a:	61b8      	str	r0, [r7, #24]
	
	if ((pTime->Sec % 10) < 10 && (pTime->Sec % 10) > 0) {
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	799a      	ldrb	r2, [r3, #6]
 8009d70:	4b5c      	ldr	r3, [pc, #368]	@ (8009ee4 <GUI_Showtime+0x1d4>)
 8009d72:	fba3 1302 	umull	r1, r3, r3, r2
 8009d76:	08d9      	lsrs	r1, r3, #3
 8009d78:	460b      	mov	r3, r1
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d011      	beq.n	8009dac <GUI_Showtime+0x9c>
		LCD_SetArealColor(Xstart + Dx * 6, Ystart, Xend, Yend, WHITE);// xx:xx:x0
 8009d88:	8bfb      	ldrh	r3, [r7, #30]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	0052      	lsls	r2, r2, #1
 8009d8e:	4413      	add	r3, r2
 8009d90:	005b      	lsls	r3, r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	88fb      	ldrh	r3, [r7, #6]
 8009d96:	4413      	add	r3, r2
 8009d98:	b298      	uxth	r0, r3
 8009d9a:	883b      	ldrh	r3, [r7, #0]
 8009d9c:	887a      	ldrh	r2, [r7, #2]
 8009d9e:	88b9      	ldrh	r1, [r7, #4]
 8009da0:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009da4:	9400      	str	r4, [sp, #0]
 8009da6:	f7ff faf3 	bl	8009390 <LCD_SetArealColor>
 8009daa:	e0af      	b.n	8009f0c <GUI_Showtime+0x1fc>
	} else {
		if ((pTime->Sec / 10) < 6 && (pTime->Sec / 10) > 0) {
 8009dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dae:	799b      	ldrb	r3, [r3, #6]
 8009db0:	2b3b      	cmp	r3, #59	@ 0x3b
 8009db2:	d814      	bhi.n	8009dde <GUI_Showtime+0xce>
 8009db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db6:	799b      	ldrb	r3, [r3, #6]
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	d910      	bls.n	8009dde <GUI_Showtime+0xce>
			LCD_SetArealColor(Xstart + Dx * 5, Ystart, Xend, Yend, WHITE);// xx:xx:00
 8009dbc:	8bfb      	ldrh	r3, [r7, #30]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	0092      	lsls	r2, r2, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	88fb      	ldrh	r3, [r7, #6]
 8009dc8:	4413      	add	r3, r2
 8009dca:	b298      	uxth	r0, r3
 8009dcc:	883b      	ldrh	r3, [r7, #0]
 8009dce:	887a      	ldrh	r2, [r7, #2]
 8009dd0:	88b9      	ldrh	r1, [r7, #4]
 8009dd2:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009dd6:	9400      	str	r4, [sp, #0]
 8009dd8:	f7ff fada 	bl	8009390 <LCD_SetArealColor>
 8009ddc:	e096      	b.n	8009f0c <GUI_Showtime+0x1fc>
		} else {//sec = 60
			pTime->Min = pTime->Min + 1;
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	795b      	ldrb	r3, [r3, #5]
 8009de2:	3301      	adds	r3, #1
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	715a      	strb	r2, [r3, #5]
			pTime->Sec = 0;
 8009dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dec:	2200      	movs	r2, #0
 8009dee:	719a      	strb	r2, [r3, #6]
			if ((pTime->Min % 10) < 10 && (pTime->Min % 10) > 0) {
 8009df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df2:	795a      	ldrb	r2, [r3, #5]
 8009df4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ee4 <GUI_Showtime+0x1d4>)
 8009df6:	fba3 1302 	umull	r1, r3, r3, r2
 8009dfa:	08d9      	lsrs	r1, r3, #3
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d015      	beq.n	8009e38 <GUI_Showtime+0x128>
				LCD_SetArealColor(Xstart + Dx * 3 + Dx / 2, Ystart, Xend, Yend, WHITE);// xx:x0:00
 8009e0c:	8bfb      	ldrh	r3, [r7, #30]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	0052      	lsls	r2, r2, #1
 8009e12:	4413      	add	r3, r2
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	88fb      	ldrh	r3, [r7, #6]
 8009e18:	4413      	add	r3, r2
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	8bfb      	ldrh	r3, [r7, #30]
 8009e1e:	085b      	lsrs	r3, r3, #1
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	4413      	add	r3, r2
 8009e24:	b298      	uxth	r0, r3
 8009e26:	883b      	ldrh	r3, [r7, #0]
 8009e28:	887a      	ldrh	r2, [r7, #2]
 8009e2a:	88b9      	ldrh	r1, [r7, #4]
 8009e2c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009e30:	9400      	str	r4, [sp, #0]
 8009e32:	f7ff faad 	bl	8009390 <LCD_SetArealColor>
 8009e36:	e069      	b.n	8009f0c <GUI_Showtime+0x1fc>
			} else {
				if ((pTime->Min / 10) < 6 && (pTime->Min / 10) > 0) {
 8009e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3a:	795b      	ldrb	r3, [r3, #5]
 8009e3c:	2b3b      	cmp	r3, #59	@ 0x3b
 8009e3e:	d817      	bhi.n	8009e70 <GUI_Showtime+0x160>
 8009e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e42:	795b      	ldrb	r3, [r3, #5]
 8009e44:	2b09      	cmp	r3, #9
 8009e46:	d913      	bls.n	8009e70 <GUI_Showtime+0x160>
					LCD_SetArealColor(Xstart + Dx * 2 + Dx / 2, Ystart, Xend, Yend, WHITE);// xx:00:00
 8009e48:	8bfb      	ldrh	r3, [r7, #30]
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	88fb      	ldrh	r3, [r7, #6]
 8009e50:	4413      	add	r3, r2
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	8bfb      	ldrh	r3, [r7, #30]
 8009e56:	085b      	lsrs	r3, r3, #1
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4413      	add	r3, r2
 8009e5c:	b298      	uxth	r0, r3
 8009e5e:	883b      	ldrh	r3, [r7, #0]
 8009e60:	887a      	ldrh	r2, [r7, #2]
 8009e62:	88b9      	ldrh	r1, [r7, #4]
 8009e64:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009e68:	9400      	str	r4, [sp, #0]
 8009e6a:	f7ff fa91 	bl	8009390 <LCD_SetArealColor>
 8009e6e:	e04d      	b.n	8009f0c <GUI_Showtime+0x1fc>
				} else {//min = 60
					pTime->Hour =  pTime->Hour + 1;
 8009e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e72:	791b      	ldrb	r3, [r3, #4]
 8009e74:	3301      	adds	r3, #1
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	711a      	strb	r2, [r3, #4]
					pTime->Min = 0;
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7e:	2200      	movs	r2, #0
 8009e80:	715a      	strb	r2, [r3, #5]
					if ((pTime->Hour % 10) < 4 && (pTime->Hour % 10) > 0 && pTime->Hour < 24) {// x0:00:00
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	791a      	ldrb	r2, [r3, #4]
 8009e86:	4b17      	ldr	r3, [pc, #92]	@ (8009ee4 <GUI_Showtime+0x1d4>)
 8009e88:	fba3 1302 	umull	r1, r3, r3, r2
 8009e8c:	08d9      	lsrs	r1, r3, #3
 8009e8e:	460b      	mov	r3, r1
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	440b      	add	r3, r1
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d824      	bhi.n	8009ee8 <GUI_Showtime+0x1d8>
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea0:	791a      	ldrb	r2, [r3, #4]
 8009ea2:	4b10      	ldr	r3, [pc, #64]	@ (8009ee4 <GUI_Showtime+0x1d4>)
 8009ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ea8:	08d9      	lsrs	r1, r3, #3
 8009eaa:	460b      	mov	r3, r1
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	005b      	lsls	r3, r3, #1
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d016      	beq.n	8009ee8 <GUI_Showtime+0x1d8>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	791b      	ldrb	r3, [r3, #4]
 8009ebe:	2b17      	cmp	r3, #23
 8009ec0:	d812      	bhi.n	8009ee8 <GUI_Showtime+0x1d8>
						LCD_SetArealColor(Xstart + Dx, Ystart, Xend, Yend, WHITE);
 8009ec2:	88fa      	ldrh	r2, [r7, #6]
 8009ec4:	8bfb      	ldrh	r3, [r7, #30]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	b298      	uxth	r0, r3
 8009eca:	883b      	ldrh	r3, [r7, #0]
 8009ecc:	887a      	ldrh	r2, [r7, #2]
 8009ece:	88b9      	ldrh	r1, [r7, #4]
 8009ed0:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009ed4:	9400      	str	r4, [sp, #0]
 8009ed6:	f7ff fa5b 	bl	8009390 <LCD_SetArealColor>
 8009eda:	e017      	b.n	8009f0c <GUI_Showtime+0x1fc>
 8009edc:	0800c378 	.word	0x0800c378
 8009ee0:	92492493 	.word	0x92492493
 8009ee4:	cccccccd 	.word	0xcccccccd
					} else {
						pTime->Hour = 0;
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	2200      	movs	r2, #0
 8009eec:	711a      	strb	r2, [r3, #4]
						pTime->Min = 0;
 8009eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	715a      	strb	r2, [r3, #5]
						pTime->Sec = 0;
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	719a      	strb	r2, [r3, #6]
						LCD_SetArealColor(Xstart, Ystart, Xend, Yend, WHITE);// 00:00:00
 8009efa:	883b      	ldrh	r3, [r7, #0]
 8009efc:	887a      	ldrh	r2, [r7, #2]
 8009efe:	88b9      	ldrh	r1, [r7, #4]
 8009f00:	88f8      	ldrh	r0, [r7, #6]
 8009f02:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009f06:	9400      	str	r4, [sp, #0]
 8009f08:	f7ff fa42 	bl	8009390 <LCD_SetArealColor>
			}
		}
	}
    
    //Write data into the cache
    GUI_DisChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, FONT_BACKGROUND, Color);
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0e:	791b      	ldrb	r3, [r3, #4]
 8009f10:	4a74      	ldr	r2, [pc, #464]	@ (800a0e4 <GUI_Showtime+0x3d4>)
 8009f12:	fba2 2303 	umull	r2, r3, r2, r3
 8009f16:	08db      	lsrs	r3, r3, #3
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	3320      	adds	r3, #32
 8009f1c:	443b      	add	r3, r7
 8009f1e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8009f22:	88b9      	ldrh	r1, [r7, #4]
 8009f24:	88f8      	ldrh	r0, [r7, #6]
 8009f26:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	f7ff fc4f 	bl	80097d4 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, FONT_BACKGROUND, Color);
 8009f36:	88fa      	ldrh	r2, [r7, #6]
 8009f38:	8bfb      	ldrh	r3, [r7, #30]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	b298      	uxth	r0, r3
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f40:	791a      	ldrb	r2, [r3, #4]
 8009f42:	4b68      	ldr	r3, [pc, #416]	@ (800a0e4 <GUI_Showtime+0x3d4>)
 8009f44:	fba3 1302 	umull	r1, r3, r3, r2
 8009f48:	08d9      	lsrs	r1, r3, #3
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	440b      	add	r3, r1
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	3320      	adds	r3, #32
 8009f58:	443b      	add	r3, r7
 8009f5a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8009f5e:	88b9      	ldrh	r1, [r7, #4]
 8009f60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	f7ff fc32 	bl	80097d4 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, FONT_BACKGROUND, Color);
 8009f70:	88fa      	ldrh	r2, [r7, #6]
 8009f72:	8bfb      	ldrh	r3, [r7, #30]
 8009f74:	4413      	add	r3, r2
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	8bfb      	ldrh	r3, [r7, #30]
 8009f7a:	089b      	lsrs	r3, r3, #2
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	4413      	add	r3, r2
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	8bfb      	ldrh	r3, [r7, #30]
 8009f84:	085b      	lsrs	r3, r3, #1
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	4413      	add	r3, r2
 8009f8a:	b298      	uxth	r0, r3
 8009f8c:	88b9      	ldrh	r1, [r7, #4]
 8009f8e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	223a      	movs	r2, #58	@ 0x3a
 8009f9c:	f7ff fc1a 	bl	80097d4 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, FONT_BACKGROUND, Color);
 8009fa0:	8bfb      	ldrh	r3, [r7, #30]
 8009fa2:	005b      	lsls	r3, r3, #1
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	4413      	add	r3, r2
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	8bfb      	ldrh	r3, [r7, #30]
 8009fae:	085b      	lsrs	r3, r3, #1
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	4413      	add	r3, r2
 8009fb4:	b298      	uxth	r0, r3
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb8:	795b      	ldrb	r3, [r3, #5]
 8009fba:	4a4a      	ldr	r2, [pc, #296]	@ (800a0e4 <GUI_Showtime+0x3d4>)
 8009fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc0:	08db      	lsrs	r3, r3, #3
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	3320      	adds	r3, #32
 8009fc6:	443b      	add	r3, r7
 8009fc8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8009fcc:	88b9      	ldrh	r1, [r7, #4]
 8009fce:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	f7ff fbfb 	bl	80097d4 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, FONT_BACKGROUND, Color);
 8009fde:	8bfb      	ldrh	r3, [r7, #30]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	0052      	lsls	r2, r2, #1
 8009fe4:	4413      	add	r3, r2
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	88fb      	ldrh	r3, [r7, #6]
 8009fea:	4413      	add	r3, r2
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	8bfb      	ldrh	r3, [r7, #30]
 8009ff0:	085b      	lsrs	r3, r3, #1
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	4413      	add	r3, r2
 8009ff6:	b298      	uxth	r0, r3
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	795a      	ldrb	r2, [r3, #5]
 8009ffc:	4b39      	ldr	r3, [pc, #228]	@ (800a0e4 <GUI_Showtime+0x3d4>)
 8009ffe:	fba3 1302 	umull	r1, r3, r3, r2
 800a002:	08d9      	lsrs	r1, r3, #3
 800a004:	460b      	mov	r3, r1
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	440b      	add	r3, r1
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	3320      	adds	r3, #32
 800a012:	443b      	add	r3, r7
 800a014:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a018:	88b9      	ldrh	r1, [r7, #4]
 800a01a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	f7ff fbd5 	bl	80097d4 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, FONT_BACKGROUND, Color);
 800a02a:	8bfb      	ldrh	r3, [r7, #30]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	b29a      	uxth	r2, r3
 800a030:	88fb      	ldrh	r3, [r7, #6]
 800a032:	4413      	add	r3, r2
 800a034:	b29a      	uxth	r2, r3
 800a036:	8bfb      	ldrh	r3, [r7, #30]
 800a038:	085b      	lsrs	r3, r3, #1
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	4413      	add	r3, r2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	8bfb      	ldrh	r3, [r7, #30]
 800a042:	089b      	lsrs	r3, r3, #2
 800a044:	b29b      	uxth	r3, r3
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	b298      	uxth	r0, r3
 800a04a:	88b9      	ldrh	r1, [r7, #4]
 800a04c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	223a      	movs	r2, #58	@ 0x3a
 800a05a:	f7ff fbbb 	bl	80097d4 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, FONT_BACKGROUND, Color);
 800a05e:	8bfb      	ldrh	r3, [r7, #30]
 800a060:	461a      	mov	r2, r3
 800a062:	0092      	lsls	r2, r2, #2
 800a064:	4413      	add	r3, r2
 800a066:	b29a      	uxth	r2, r3
 800a068:	88fb      	ldrh	r3, [r7, #6]
 800a06a:	4413      	add	r3, r2
 800a06c:	b298      	uxth	r0, r3
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	799b      	ldrb	r3, [r3, #6]
 800a072:	4a1c      	ldr	r2, [pc, #112]	@ (800a0e4 <GUI_Showtime+0x3d4>)
 800a074:	fba2 2303 	umull	r2, r3, r2, r3
 800a078:	08db      	lsrs	r3, r3, #3
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	3320      	adds	r3, #32
 800a07e:	443b      	add	r3, r7
 800a080:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a084:	88b9      	ldrh	r1, [r7, #4]
 800a086:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	f7ff fb9f 	bl	80097d4 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, FONT_BACKGROUND, Color);
 800a096:	8bfb      	ldrh	r3, [r7, #30]
 800a098:	461a      	mov	r2, r3
 800a09a:	0052      	lsls	r2, r2, #1
 800a09c:	4413      	add	r3, r2
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	88fb      	ldrh	r3, [r7, #6]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	b298      	uxth	r0, r3
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	799a      	ldrb	r2, [r3, #6]
 800a0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e4 <GUI_Showtime+0x3d4>)
 800a0ae:	fba3 1302 	umull	r1, r3, r3, r2
 800a0b2:	08d9      	lsrs	r1, r3, #3
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	3320      	adds	r3, #32
 800a0c2:	443b      	add	r3, r7
 800a0c4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a0c8:	88b9      	ldrh	r1, [r7, #4]
 800a0ca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	f7ff fb7d 	bl	80097d4 <GUI_DisChar>
}
 800a0da:	bf00      	nop
 800a0dc:	3724      	adds	r7, #36	@ 0x24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd90      	pop	{r4, r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	cccccccd 	.word	0xcccccccd

0800a0e8 <TP_Read_ADC>:
parameter:
	Channel_Cmd :	0x90: Read channel Y +, select the ADC resolution is 12 bits, set to differential mode
					0xd0: Read channel x +, select the ADC resolution is 12 bits, set to differential mode
*******************************************************************************/
static uint16_t TP_Read_ADC(uint8_t CMD)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	71fb      	strb	r3, [r7, #7]
    uint16_t Data = 0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	81fb      	strh	r3, [r7, #14]

    //A cycle of at least 400ns.
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800a0f6:	4b1a      	ldr	r3, [pc, #104]	@ (800a160 <TP_Read_ADC+0x78>)
 800a0f8:	2228      	movs	r2, #40	@ 0x28
 800a0fa:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800a0fc:	4818      	ldr	r0, [pc, #96]	@ (800a160 <TP_Read_ADC+0x78>)
 800a0fe:	f7f9 f8db 	bl	80032b8 <HAL_SPI_Init>

	TP_CS_0;
 800a102:	2200      	movs	r2, #0
 800a104:	2180      	movs	r1, #128	@ 0x80
 800a106:	4817      	ldr	r0, [pc, #92]	@ (800a164 <TP_Read_ADC+0x7c>)
 800a108:	f7f7 fa12 	bl	8001530 <HAL_GPIO_WritePin>

	SPI4W_Write_Byte(CMD);
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe f8fc 	bl	800830c <SPI4W_Write_Byte>
	Driver_Delay_us(200);
 800a114:	20c8      	movs	r0, #200	@ 0xc8
 800a116:	f7fe f94c 	bl	80083b2 <Driver_Delay_us>
	
	Data = SPI4W_Read_Byte(0XFF);
 800a11a:	20ff      	movs	r0, #255	@ 0xff
 800a11c:	f7fe f930 	bl	8008380 <SPI4W_Read_Byte>
 800a120:	4603      	mov	r3, r0
 800a122:	81fb      	strh	r3, [r7, #14]
	Data <<= 8;//7bit
 800a124:	89fb      	ldrh	r3, [r7, #14]
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	81fb      	strh	r3, [r7, #14]
	Data |= SPI4W_Read_Byte(0XFF);
 800a12a:	20ff      	movs	r0, #255	@ 0xff
 800a12c:	f7fe f928 	bl	8008380 <SPI4W_Read_Byte>
 800a130:	4603      	mov	r3, r0
 800a132:	461a      	mov	r2, r3
 800a134:	89fb      	ldrh	r3, [r7, #14]
 800a136:	4313      	orrs	r3, r2
 800a138:	81fb      	strh	r3, [r7, #14]
	Data >>= 3;//5bit
 800a13a:	89fb      	ldrh	r3, [r7, #14]
 800a13c:	08db      	lsrs	r3, r3, #3
 800a13e:	81fb      	strh	r3, [r7, #14]
	TP_CS_1;
 800a140:	2201      	movs	r2, #1
 800a142:	2180      	movs	r1, #128	@ 0x80
 800a144:	4807      	ldr	r0, [pc, #28]	@ (800a164 <TP_Read_ADC+0x7c>)
 800a146:	f7f7 f9f3 	bl	8001530 <HAL_GPIO_WritePin>
	
	//LCD SPI speed = 18 MHz
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800a14a:	4b05      	ldr	r3, [pc, #20]	@ (800a160 <TP_Read_ADC+0x78>)
 800a14c:	2208      	movs	r2, #8
 800a14e:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800a150:	4803      	ldr	r0, [pc, #12]	@ (800a160 <TP_Read_ADC+0x78>)
 800a152:	f7f9 f8b1 	bl	80032b8 <HAL_SPI_Init>

    return Data;
 800a156:	89fb      	ldrh	r3, [r7, #14]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	2000019c 	.word	0x2000019c
 800a164:	40020400 	.word	0x40020400

0800a168 <TP_Read_ADC_Average>:
					0xd0 :Read channel x +
*******************************************************************************/
#define READ_TIMES  5	//Number of readings
#define LOST_NUM    1	//Discard value
static uint16_t TP_Read_ADC_Average(uint8_t Channel_Cmd)
{
 800a168:	b590      	push	{r4, r7, lr}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	71fb      	strb	r3, [r7, #7]
    uint8_t i, j;
    uint16_t Read_Buff[READ_TIMES];
    uint16_t Read_Sum = 0, Read_Temp = 0;
 800a172:	2300      	movs	r3, #0
 800a174:	82bb      	strh	r3, [r7, #20]
 800a176:	2300      	movs	r3, #0
 800a178:	827b      	strh	r3, [r7, #18]

    //Read and save multiple samples
    for(i = 0; i < READ_TIMES; i++){
 800a17a:	2300      	movs	r3, #0
 800a17c:	75fb      	strb	r3, [r7, #23]
 800a17e:	e011      	b.n	800a1a4 <TP_Read_ADC_Average+0x3c>
		Read_Buff[i] = TP_Read_ADC(Channel_Cmd);
 800a180:	7dfc      	ldrb	r4, [r7, #23]
 800a182:	79fb      	ldrb	r3, [r7, #7]
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff ffaf 	bl	800a0e8 <TP_Read_ADC>
 800a18a:	4603      	mov	r3, r0
 800a18c:	461a      	mov	r2, r3
 800a18e:	0063      	lsls	r3, r4, #1
 800a190:	3318      	adds	r3, #24
 800a192:	443b      	add	r3, r7
 800a194:	f823 2c10 	strh.w	r2, [r3, #-16]
		Driver_Delay_us(200);
 800a198:	20c8      	movs	r0, #200	@ 0xc8
 800a19a:	f7fe f90a 	bl	80083b2 <Driver_Delay_us>
    for(i = 0; i < READ_TIMES; i++){
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	75fb      	strb	r3, [r7, #23]
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d9ea      	bls.n	800a180 <TP_Read_ADC_Average+0x18>
	}
	
    //Sort from small to large
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	75fb      	strb	r3, [r7, #23]
 800a1ae:	e035      	b.n	800a21c <TP_Read_ADC_Average+0xb4>
        for (j = i + 1; j < READ_TIMES; j ++) {
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	75bb      	strb	r3, [r7, #22]
 800a1b6:	e02b      	b.n	800a210 <TP_Read_ADC_Average+0xa8>
            if (Read_Buff[i] > Read_Buff[j]) {
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	3318      	adds	r3, #24
 800a1be:	443b      	add	r3, r7
 800a1c0:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800a1c4:	7dbb      	ldrb	r3, [r7, #22]
 800a1c6:	005b      	lsls	r3, r3, #1
 800a1c8:	3318      	adds	r3, #24
 800a1ca:	443b      	add	r3, r7
 800a1cc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d91a      	bls.n	800a20a <TP_Read_ADC_Average+0xa2>
                Read_Temp = Read_Buff[i];
 800a1d4:	7dfb      	ldrb	r3, [r7, #23]
 800a1d6:	005b      	lsls	r3, r3, #1
 800a1d8:	3318      	adds	r3, #24
 800a1da:	443b      	add	r3, r7
 800a1dc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800a1e0:	827b      	strh	r3, [r7, #18]
                Read_Buff[i] = Read_Buff[j];
 800a1e2:	7dbb      	ldrb	r3, [r7, #22]
 800a1e4:	7dfa      	ldrb	r2, [r7, #23]
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	3318      	adds	r3, #24
 800a1ea:	443b      	add	r3, r7
 800a1ec:	f833 1c10 	ldrh.w	r1, [r3, #-16]
 800a1f0:	0053      	lsls	r3, r2, #1
 800a1f2:	3318      	adds	r3, #24
 800a1f4:	443b      	add	r3, r7
 800a1f6:	460a      	mov	r2, r1
 800a1f8:	f823 2c10 	strh.w	r2, [r3, #-16]
                Read_Buff[j] = Read_Temp;
 800a1fc:	7dbb      	ldrb	r3, [r7, #22]
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	3318      	adds	r3, #24
 800a202:	443b      	add	r3, r7
 800a204:	8a7a      	ldrh	r2, [r7, #18]
 800a206:	f823 2c10 	strh.w	r2, [r3, #-16]
        for (j = i + 1; j < READ_TIMES; j ++) {
 800a20a:	7dbb      	ldrb	r3, [r7, #22]
 800a20c:	3301      	adds	r3, #1
 800a20e:	75bb      	strb	r3, [r7, #22]
 800a210:	7dbb      	ldrb	r3, [r7, #22]
 800a212:	2b04      	cmp	r3, #4
 800a214:	d9d0      	bls.n	800a1b8 <TP_Read_ADC_Average+0x50>
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 800a216:	7dfb      	ldrb	r3, [r7, #23]
 800a218:	3301      	adds	r3, #1
 800a21a:	75fb      	strb	r3, [r7, #23]
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d9c6      	bls.n	800a1b0 <TP_Read_ADC_Average+0x48>
            }
        }
    }

    //Exclude the largest and the smallest
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 800a222:	2301      	movs	r3, #1
 800a224:	75fb      	strb	r3, [r7, #23]
 800a226:	e00b      	b.n	800a240 <TP_Read_ADC_Average+0xd8>
        Read_Sum += Read_Buff[i];
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	3318      	adds	r3, #24
 800a22e:	443b      	add	r3, r7
 800a230:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800a234:	8abb      	ldrh	r3, [r7, #20]
 800a236:	4413      	add	r3, r2
 800a238:	82bb      	strh	r3, [r7, #20]
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	3301      	adds	r3, #1
 800a23e:	75fb      	strb	r3, [r7, #23]
 800a240:	7dfb      	ldrb	r3, [r7, #23]
 800a242:	2b03      	cmp	r3, #3
 800a244:	d9f0      	bls.n	800a228 <TP_Read_ADC_Average+0xc0>

    //Averaging
    Read_Temp = Read_Sum / (READ_TIMES - 2 * LOST_NUM);
 800a246:	8abb      	ldrh	r3, [r7, #20]
 800a248:	4a04      	ldr	r2, [pc, #16]	@ (800a25c <TP_Read_ADC_Average+0xf4>)
 800a24a:	fba2 2303 	umull	r2, r3, r2, r3
 800a24e:	085b      	lsrs	r3, r3, #1
 800a250:	827b      	strh	r3, [r7, #18]

    return Read_Temp;
 800a252:	8a7b      	ldrh	r3, [r7, #18]
}
 800a254:	4618      	mov	r0, r3
 800a256:	371c      	adds	r7, #28
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd90      	pop	{r4, r7, pc}
 800a25c:	aaaaaaab 	.word	0xaaaaaaab

0800a260 <TP_Read_ADC_XY>:
parameter:
	Channel_Cmd :	0x90 :Read channel Y +
					0xd0 :Read channel x +
*******************************************************************************/
static void TP_Read_ADC_XY(uint16_t *pXCh_Adc, uint16_t  *pYCh_Adc )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
    *pXCh_Adc = TP_Read_ADC_Average(0xD0);
 800a26a:	20d0      	movs	r0, #208	@ 0xd0
 800a26c:	f7ff ff7c 	bl	800a168 <TP_Read_ADC_Average>
 800a270:	4603      	mov	r3, r0
 800a272:	461a      	mov	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	801a      	strh	r2, [r3, #0]
    *pYCh_Adc = TP_Read_ADC_Average(0x90);
 800a278:	2090      	movs	r0, #144	@ 0x90
 800a27a:	f7ff ff75 	bl	800a168 <TP_Read_ADC_Average>
 800a27e:	4603      	mov	r3, r0
 800a280:	461a      	mov	r2, r3
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	801a      	strh	r2, [r3, #0]
}
 800a286:	bf00      	nop
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <TP_Read_TwiceADC>:
	Channel_Cmd :	pYCh_Adc = 0x90 :Read channel Y +
					pXCh_Adc = 0xd0 :Read channel x +
*******************************************************************************/
#define ERR_RANGE 50	//tolerance scope
static bool TP_Read_TwiceADC(uint16_t *pXCh_Adc, uint16_t  *pYCh_Adc )
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
    uint16_t XCh_Adc1, YCh_Adc1, XCh_Adc2, YCh_Adc2;

    //Read the ADC values Read the ADC values twice
    TP_Read_ADC_XY(&XCh_Adc1, &YCh_Adc1);
 800a298:	f107 020c 	add.w	r2, r7, #12
 800a29c:	f107 030e 	add.w	r3, r7, #14
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff ffdc 	bl	800a260 <TP_Read_ADC_XY>
//	Driver_Delay_us(10);
    TP_Read_ADC_XY(&XCh_Adc2, &YCh_Adc2);
 800a2a8:	f107 0208 	add.w	r2, r7, #8
 800a2ac:	f107 030a 	add.w	r3, r7, #10
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff ffd4 	bl	800a260 <TP_Read_ADC_XY>
//	Driver_Delay_us(10);
	
    //The ADC error used twice is greater than ERR_RANGE to take the average
    if( ((XCh_Adc2 <= XCh_Adc1 && XCh_Adc1 < XCh_Adc2 + ERR_RANGE) ||
 800a2b8:	897a      	ldrh	r2, [r7, #10]
 800a2ba:	89fb      	ldrh	r3, [r7, #14]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d804      	bhi.n	800a2ca <TP_Read_TwiceADC+0x3c>
 800a2c0:	897b      	ldrh	r3, [r7, #10]
 800a2c2:	3331      	adds	r3, #49	@ 0x31
 800a2c4:	89fa      	ldrh	r2, [r7, #14]
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	da08      	bge.n	800a2dc <TP_Read_TwiceADC+0x4e>
         (XCh_Adc1 <= XCh_Adc2 && XCh_Adc2 < XCh_Adc1 + ERR_RANGE))
 800a2ca:	89fa      	ldrh	r2, [r7, #14]
 800a2cc:	897b      	ldrh	r3, [r7, #10]
    if( ((XCh_Adc2 <= XCh_Adc1 && XCh_Adc1 < XCh_Adc2 + ERR_RANGE) ||
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d82c      	bhi.n	800a32c <TP_Read_TwiceADC+0x9e>
         (XCh_Adc1 <= XCh_Adc2 && XCh_Adc2 < XCh_Adc1 + ERR_RANGE))
 800a2d2:	89fb      	ldrh	r3, [r7, #14]
 800a2d4:	3331      	adds	r3, #49	@ 0x31
 800a2d6:	897a      	ldrh	r2, [r7, #10]
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	db27      	blt.n	800a32c <TP_Read_TwiceADC+0x9e>
        && ((YCh_Adc2 <= YCh_Adc1 && YCh_Adc1 < YCh_Adc2 + ERR_RANGE) ||
 800a2dc:	893a      	ldrh	r2, [r7, #8]
 800a2de:	89bb      	ldrh	r3, [r7, #12]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d804      	bhi.n	800a2ee <TP_Read_TwiceADC+0x60>
 800a2e4:	893b      	ldrh	r3, [r7, #8]
 800a2e6:	3331      	adds	r3, #49	@ 0x31
 800a2e8:	89ba      	ldrh	r2, [r7, #12]
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	da08      	bge.n	800a300 <TP_Read_TwiceADC+0x72>
            (YCh_Adc1 <= YCh_Adc2 && YCh_Adc2 < YCh_Adc1 + ERR_RANGE))) {
 800a2ee:	89ba      	ldrh	r2, [r7, #12]
 800a2f0:	893b      	ldrh	r3, [r7, #8]
        && ((YCh_Adc2 <= YCh_Adc1 && YCh_Adc1 < YCh_Adc2 + ERR_RANGE) ||
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d81a      	bhi.n	800a32c <TP_Read_TwiceADC+0x9e>
            (YCh_Adc1 <= YCh_Adc2 && YCh_Adc2 < YCh_Adc1 + ERR_RANGE))) {
 800a2f6:	89bb      	ldrh	r3, [r7, #12]
 800a2f8:	3331      	adds	r3, #49	@ 0x31
 800a2fa:	893a      	ldrh	r2, [r7, #8]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	db15      	blt.n	800a32c <TP_Read_TwiceADC+0x9e>
        *pXCh_Adc = (XCh_Adc1 + XCh_Adc2) / 2;
 800a300:	89fb      	ldrh	r3, [r7, #14]
 800a302:	461a      	mov	r2, r3
 800a304:	897b      	ldrh	r3, [r7, #10]
 800a306:	4413      	add	r3, r2
 800a308:	0fda      	lsrs	r2, r3, #31
 800a30a:	4413      	add	r3, r2
 800a30c:	105b      	asrs	r3, r3, #1
 800a30e:	b29a      	uxth	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	801a      	strh	r2, [r3, #0]
        *pYCh_Adc = (YCh_Adc1 + YCh_Adc2) / 2;
 800a314:	89bb      	ldrh	r3, [r7, #12]
 800a316:	461a      	mov	r2, r3
 800a318:	893b      	ldrh	r3, [r7, #8]
 800a31a:	4413      	add	r3, r2
 800a31c:	0fda      	lsrs	r2, r3, #31
 800a31e:	4413      	add	r3, r2
 800a320:	105b      	asrs	r3, r3, #1
 800a322:	b29a      	uxth	r2, r3
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	801a      	strh	r2, [r3, #0]
        return true;
 800a328:	2301      	movs	r3, #1
 800a32a:	e000      	b.n	800a32e <TP_Read_TwiceADC+0xa0>
    }

    //The ADC error used twice is less than ERR_RANGE returns failed
    return false;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <TP_Scan>:
		chCoordType:
					1 : calibration
					0 : relative position
*******************************************************************************/
static uint8_t TP_Scan(uint8_t chCoordType)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	71fb      	strb	r3, [r7, #7]
    //In X, Y coordinate measurement, IRQ is disabled and output is low
    if (!GET_TP_IRQ) {//Press the button to press
 800a342:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a346:	48a9      	ldr	r0, [pc, #676]	@ (800a5ec <TP_Scan+0x2b4>)
 800a348:	f7f7 f8da 	bl	8001500 <HAL_GPIO_ReadPin>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f040 8128 	bne.w	800a5a4 <TP_Scan+0x26c>
        //Read the physical coordinates
        if (chCoordType) {
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d004      	beq.n	800a364 <TP_Scan+0x2c>
            TP_Read_TwiceADC(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint);
 800a35a:	49a5      	ldr	r1, [pc, #660]	@ (800a5f0 <TP_Scan+0x2b8>)
 800a35c:	48a5      	ldr	r0, [pc, #660]	@ (800a5f4 <TP_Scan+0x2bc>)
 800a35e:	f7ff ff96 	bl	800a28e <TP_Read_TwiceADC>
 800a362:	e10e      	b.n	800a582 <TP_Scan+0x24a>
            //Read the screen coordinates
        } else if (TP_Read_TwiceADC(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint)) {
 800a364:	49a2      	ldr	r1, [pc, #648]	@ (800a5f0 <TP_Scan+0x2b8>)
 800a366:	48a3      	ldr	r0, [pc, #652]	@ (800a5f4 <TP_Scan+0x2bc>)
 800a368:	f7ff ff91 	bl	800a28e <TP_Read_TwiceADC>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 8107 	beq.w	800a582 <TP_Scan+0x24a>
//			DEBUG("(Xad,Yad) = %d,%d\r\n",sTP_DEV.Xpoint,sTP_DEV.Ypoint);
            if(sTP_DEV.TP_Scan_Dir == R2L_D2U) {		//Converts the result to screen coordinates
 800a374:	4ba0      	ldr	r3, [pc, #640]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a376:	7e1b      	ldrb	r3, [r3, #24]
 800a378:	2b03      	cmp	r3, #3
 800a37a:	d136      	bne.n	800a3ea <TP_Scan+0xb2>
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Xpoint +
 800a37c:	4b9e      	ldr	r3, [pc, #632]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a37e:	ed93 7a04 	vldr	s14, [r3, #16]
 800a382:	4b9d      	ldr	r3, [pc, #628]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a384:	889b      	ldrh	r3, [r3, #4]
 800a386:	ee07 3a90 	vmov	s15, r3
 800a38a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a38e:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a392:	4b99      	ldr	r3, [pc, #612]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a394:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Xpoint +
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3a8:	ee17 3a90 	vmov	r3, s15
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	4b93      	ldr	r3, [pc, #588]	@ (800a5fc <TP_Scan+0x2c4>)
 800a3b0:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Ypoint +
 800a3b2:	4b91      	ldr	r3, [pc, #580]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a3b4:	ed93 7a05 	vldr	s14, [r3, #20]
 800a3b8:	4b8f      	ldr	r3, [pc, #572]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a3ba:	88db      	ldrh	r3, [r3, #6]
 800a3bc:	ee07 3a90 	vmov	s15, r3
 800a3c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3c4:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a3c8:	4b8b      	ldr	r3, [pc, #556]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a3ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Ypoint +
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3de:	ee17 3a90 	vmov	r3, s15
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	4b85      	ldr	r3, [pc, #532]	@ (800a5fc <TP_Scan+0x2c4>)
 800a3e6:	805a      	strh	r2, [r3, #2]
 800a3e8:	e0cb      	b.n	800a582 <TP_Scan+0x24a>
            } else if(sTP_DEV.TP_Scan_Dir == L2R_U2D) {
 800a3ea:	4b83      	ldr	r3, [pc, #524]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a3ec:	7e1b      	ldrb	r3, [r3, #24]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d146      	bne.n	800a480 <TP_Scan+0x148>
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a3f2:	4b83      	ldr	r3, [pc, #524]	@ (800a600 <TP_Scan+0x2c8>)
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	ee07 3a90 	vmov	s15, r3
 800a3fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fXfac * sTP_DEV.Xpoint -
 800a3fe:	4b7e      	ldr	r3, [pc, #504]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a400:	edd3 6a04 	vldr	s13, [r3, #16]
 800a404:	4b7c      	ldr	r3, [pc, #496]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a406:	889b      	ldrh	r3, [r3, #4]
 800a408:	ee07 3a90 	vmov	s15, r3
 800a40c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a410:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a414:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a418:	4b77      	ldr	r3, [pc, #476]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a41a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                                  sTP_DEV.fXfac * sTP_DEV.Xpoint -
 800a41e:	ee07 3a90 	vmov	s15, r3
 800a422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a426:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a42a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a42e:	ee17 3a90 	vmov	r3, s15
 800a432:	b29a      	uxth	r2, r3
 800a434:	4b71      	ldr	r3, [pc, #452]	@ (800a5fc <TP_Scan+0x2c4>)
 800a436:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a438:	4b71      	ldr	r3, [pc, #452]	@ (800a600 <TP_Scan+0x2c8>)
 800a43a:	885b      	ldrh	r3, [r3, #2]
 800a43c:	ee07 3a90 	vmov	s15, r3
 800a440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fYfac * sTP_DEV.Ypoint -
 800a444:	4b6c      	ldr	r3, [pc, #432]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a446:	edd3 6a05 	vldr	s13, [r3, #20]
 800a44a:	4b6b      	ldr	r3, [pc, #428]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a44c:	88db      	ldrh	r3, [r3, #6]
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a456:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a45a:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a45e:	4b66      	ldr	r3, [pc, #408]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a460:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                                  sTP_DEV.fYfac * sTP_DEV.Ypoint -
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a46c:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a474:	ee17 3a90 	vmov	r3, s15
 800a478:	b29a      	uxth	r2, r3
 800a47a:	4b60      	ldr	r3, [pc, #384]	@ (800a5fc <TP_Scan+0x2c4>)
 800a47c:	805a      	strh	r2, [r3, #2]
 800a47e:	e080      	b.n	800a582 <TP_Scan+0x24a>
            } else if(sTP_DEV.TP_Scan_Dir == U2D_R2L) {
 800a480:	4b5d      	ldr	r3, [pc, #372]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a482:	7e1b      	ldrb	r3, [r3, #24]
 800a484:	2b05      	cmp	r3, #5
 800a486:	d136      	bne.n	800a4f6 <TP_Scan+0x1be>
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Ypoint +
 800a488:	4b5b      	ldr	r3, [pc, #364]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a48a:	ed93 7a04 	vldr	s14, [r3, #16]
 800a48e:	4b5a      	ldr	r3, [pc, #360]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a490:	88db      	ldrh	r3, [r3, #6]
 800a492:	ee07 3a90 	vmov	s15, r3
 800a496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a49a:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a49e:	4b56      	ldr	r3, [pc, #344]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a4a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Ypoint +
 800a4a4:	ee07 3a90 	vmov	s15, r3
 800a4a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4b4:	ee17 3a90 	vmov	r3, s15
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	4b50      	ldr	r3, [pc, #320]	@ (800a5fc <TP_Scan+0x2c4>)
 800a4bc:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Xpoint +
 800a4be:	4b4e      	ldr	r3, [pc, #312]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a4c0:	ed93 7a05 	vldr	s14, [r3, #20]
 800a4c4:	4b4c      	ldr	r3, [pc, #304]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a4c6:	889b      	ldrh	r3, [r3, #4]
 800a4c8:	ee07 3a90 	vmov	s15, r3
 800a4cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4d0:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a4d4:	4b48      	ldr	r3, [pc, #288]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a4d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Xpoint +
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ea:	ee17 3a90 	vmov	r3, s15
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	4b42      	ldr	r3, [pc, #264]	@ (800a5fc <TP_Scan+0x2c4>)
 800a4f2:	805a      	strh	r2, [r3, #2]
 800a4f4:	e045      	b.n	800a582 <TP_Scan+0x24a>
            } else {
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a4f6:	4b42      	ldr	r3, [pc, #264]	@ (800a600 <TP_Scan+0x2c8>)
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fXfac * sTP_DEV.Ypoint -
 800a502:	4b3d      	ldr	r3, [pc, #244]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a504:	edd3 6a04 	vldr	s13, [r3, #16]
 800a508:	4b3b      	ldr	r3, [pc, #236]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a50a:	88db      	ldrh	r3, [r3, #6]
 800a50c:	ee07 3a90 	vmov	s15, r3
 800a510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a514:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a518:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a51c:	4b36      	ldr	r3, [pc, #216]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a51e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                                  sTP_DEV.fXfac * sTP_DEV.Ypoint -
 800a522:	ee07 3a90 	vmov	s15, r3
 800a526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a52a:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a52e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a532:	ee17 3a90 	vmov	r3, s15
 800a536:	b29a      	uxth	r2, r3
 800a538:	4b30      	ldr	r3, [pc, #192]	@ (800a5fc <TP_Scan+0x2c4>)
 800a53a:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a53c:	4b30      	ldr	r3, [pc, #192]	@ (800a600 <TP_Scan+0x2c8>)
 800a53e:	885b      	ldrh	r3, [r3, #2]
 800a540:	ee07 3a90 	vmov	s15, r3
 800a544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fYfac * sTP_DEV.Xpoint -
 800a548:	4b2b      	ldr	r3, [pc, #172]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a54a:	edd3 6a05 	vldr	s13, [r3, #20]
 800a54e:	4b2a      	ldr	r3, [pc, #168]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a550:	889b      	ldrh	r3, [r3, #4]
 800a552:	ee07 3a90 	vmov	s15, r3
 800a556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a55a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a55e:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a562:	4b25      	ldr	r3, [pc, #148]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a564:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                                  sTP_DEV.fYfac * sTP_DEV.Xpoint -
 800a568:	ee07 3a90 	vmov	s15, r3
 800a56c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a570:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a578:	ee17 3a90 	vmov	r3, s15
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	4b1f      	ldr	r3, [pc, #124]	@ (800a5fc <TP_Scan+0x2c4>)
 800a580:	805a      	strh	r2, [r3, #2]
            }
//			DEBUG("( x , y ) = %d,%d\r\n",sTP_Draw.Xpoint,sTP_Draw.Ypoint);
        }
        if (0 == (sTP_DEV.chStatus & TP_PRESS_DOWN)) {	//Not being pressed
 800a582:	4b1d      	ldr	r3, [pc, #116]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a584:	7a1b      	ldrb	r3, [r3, #8]
 800a586:	b25b      	sxtb	r3, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	db26      	blt.n	800a5da <TP_Scan+0x2a2>
            sTP_DEV.chStatus = TP_PRESS_DOWN | TP_PRESSED;
 800a58c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a58e:	22c0      	movs	r2, #192	@ 0xc0
 800a590:	721a      	strb	r2, [r3, #8]
            sTP_DEV.Xpoint0 = sTP_DEV.Xpoint;
 800a592:	4b19      	ldr	r3, [pc, #100]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a594:	889a      	ldrh	r2, [r3, #4]
 800a596:	4b18      	ldr	r3, [pc, #96]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a598:	801a      	strh	r2, [r3, #0]
            sTP_DEV.Ypoint0 = sTP_DEV.Ypoint;
 800a59a:	4b17      	ldr	r3, [pc, #92]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a59c:	88da      	ldrh	r2, [r3, #6]
 800a59e:	4b16      	ldr	r3, [pc, #88]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a5a0:	805a      	strh	r2, [r3, #2]
 800a5a2:	e01a      	b.n	800a5da <TP_Scan+0x2a2>
        }
    } else {
        if (sTP_DEV.chStatus & TP_PRESS_DOWN) {	//0x80
 800a5a4:	4b14      	ldr	r3, [pc, #80]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a5a6:	7a1b      	ldrb	r3, [r3, #8]
 800a5a8:	b25b      	sxtb	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	da07      	bge.n	800a5be <TP_Scan+0x286>
            sTP_DEV.chStatus &= ~(1 << 7);		//0x00
 800a5ae:	4b12      	ldr	r3, [pc, #72]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a5b0:	7a1b      	ldrb	r3, [r3, #8]
 800a5b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a5ba:	721a      	strb	r2, [r3, #8]
 800a5bc:	e00d      	b.n	800a5da <TP_Scan+0x2a2>
        } else {
            sTP_DEV.Xpoint0 = 0;
 800a5be:	4b0e      	ldr	r3, [pc, #56]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	801a      	strh	r2, [r3, #0]
            sTP_DEV.Ypoint0 = 0;
 800a5c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	805a      	strh	r2, [r3, #2]
            sTP_DEV.Xpoint = 0xffff;
 800a5ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a5cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5d0:	809a      	strh	r2, [r3, #4]
            sTP_DEV.Ypoint = 0xffff;
 800a5d2:	4b09      	ldr	r3, [pc, #36]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a5d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5d8:	80da      	strh	r2, [r3, #6]
        }
    }

    return (sTP_DEV.chStatus & TP_PRESS_DOWN);
 800a5da:	4b07      	ldr	r3, [pc, #28]	@ (800a5f8 <TP_Scan+0x2c0>)
 800a5dc:	7a1b      	ldrb	r3, [r3, #8]
 800a5de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5e2:	b2db      	uxtb	r3, r3
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	40020000 	.word	0x40020000
 800a5f0:	20002122 	.word	0x20002122
 800a5f4:	20002120 	.word	0x20002120
 800a5f8:	2000211c 	.word	0x2000211c
 800a5fc:	20002138 	.word	0x20002138
 800a600:	20002110 	.word	0x20002110

0800a604 <TP_GetAdFac>:
/*******************************************************************************
function:
		Use the default calibration factor
*******************************************************************************/
void TP_GetAdFac(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af02      	add	r7, sp, #8
    if(	sTP_DEV.TP_Scan_Dir == D2U_L2R ) { //SCAN_DIR_DFT = D2U_L2R
 800a60a:	4b2f      	ldr	r3, [pc, #188]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a60c:	7e1b      	ldrb	r3, [r3, #24]
 800a60e:	2b06      	cmp	r3, #6
 800a610:	d10e      	bne.n	800a630 <TP_GetAdFac+0x2c>
        sTP_DEV.fXfac = -0.132443F ;
 800a612:	4b2d      	ldr	r3, [pc, #180]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a614:	4a2d      	ldr	r2, [pc, #180]	@ (800a6cc <TP_GetAdFac+0xc8>)
 800a616:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.089997F ;
 800a618:	4b2b      	ldr	r3, [pc, #172]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a61a:	4a2d      	ldr	r2, [pc, #180]	@ (800a6d0 <TP_GetAdFac+0xcc>)
 800a61c:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 516L ;
 800a61e:	4b2a      	ldr	r3, [pc, #168]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a620:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a624:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -22L ;
 800a626:	4b28      	ldr	r3, [pc, #160]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a628:	f64f 72ea 	movw	r2, #65514	@ 0xffea
 800a62c:	819a      	strh	r2, [r3, #12]
        LCD_Clear(LCD_BACKGROUND);
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
						calibration in this direction",
                         &Font16, FONT_BACKGROUND, RED);
    }
}
 800a62e:	e048      	b.n	800a6c2 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == L2R_U2D ) {
 800a630:	4b25      	ldr	r3, [pc, #148]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a632:	7e1b      	ldrb	r3, [r3, #24]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10e      	bne.n	800a656 <TP_GetAdFac+0x52>
        sTP_DEV.fXfac = 0.089697F ;
 800a638:	4b23      	ldr	r3, [pc, #140]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a63a:	4a26      	ldr	r2, [pc, #152]	@ (800a6d4 <TP_GetAdFac+0xd0>)
 800a63c:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.134792F ;
 800a63e:	4b22      	ldr	r3, [pc, #136]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a640:	4a25      	ldr	r2, [pc, #148]	@ (800a6d8 <TP_GetAdFac+0xd4>)
 800a642:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -21L ;
 800a644:	4b20      	ldr	r3, [pc, #128]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a646:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800a64a:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -39L ;
 800a64c:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a64e:	f64f 72d9 	movw	r2, #65497	@ 0xffd9
 800a652:	819a      	strh	r2, [r3, #12]
}
 800a654:	e035      	b.n	800a6c2 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == R2L_D2U ) {
 800a656:	4b1c      	ldr	r3, [pc, #112]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a658:	7e1b      	ldrb	r3, [r3, #24]
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d10e      	bne.n	800a67c <TP_GetAdFac+0x78>
        sTP_DEV.fXfac = 0.089915F ;
 800a65e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a660:	4a1e      	ldr	r2, [pc, #120]	@ (800a6dc <TP_GetAdFac+0xd8>)
 800a662:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac =  0.133178F ;
 800a664:	4b18      	ldr	r3, [pc, #96]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a666:	4a1e      	ldr	r2, [pc, #120]	@ (800a6e0 <TP_GetAdFac+0xdc>)
 800a668:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -22L ;
 800a66a:	4b17      	ldr	r3, [pc, #92]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a66c:	f64f 72ea 	movw	r2, #65514	@ 0xffea
 800a670:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -38L ;
 800a672:	4b15      	ldr	r3, [pc, #84]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a674:	f64f 72da 	movw	r2, #65498	@ 0xffda
 800a678:	819a      	strh	r2, [r3, #12]
}
 800a67a:	e022      	b.n	800a6c2 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == U2D_R2L ) {
 800a67c:	4b12      	ldr	r3, [pc, #72]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a67e:	7e1b      	ldrb	r3, [r3, #24]
 800a680:	2b05      	cmp	r3, #5
 800a682:	d10e      	bne.n	800a6a2 <TP_GetAdFac+0x9e>
        sTP_DEV.fXfac = -0.132906F ;
 800a684:	4b10      	ldr	r3, [pc, #64]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a686:	4a17      	ldr	r2, [pc, #92]	@ (800a6e4 <TP_GetAdFac+0xe0>)
 800a688:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.087964F ;
 800a68a:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a68c:	4a16      	ldr	r2, [pc, #88]	@ (800a6e8 <TP_GetAdFac+0xe4>)
 800a68e:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 517L ;
 800a690:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a692:	f240 2205 	movw	r2, #517	@ 0x205
 800a696:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -20L ;
 800a698:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c8 <TP_GetAdFac+0xc4>)
 800a69a:	f64f 72ec 	movw	r2, #65516	@ 0xffec
 800a69e:	819a      	strh	r2, [r3, #12]
}
 800a6a0:	e00f      	b.n	800a6c2 <TP_GetAdFac+0xbe>
        LCD_Clear(LCD_BACKGROUND);
 800a6a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a6a6:	f7fe fea1 	bl	80093ec <LCD_Clear>
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
 800a6aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800a6ae:	9301      	str	r3, [sp, #4]
 800a6b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ec <TP_GetAdFac+0xe8>)
 800a6b8:	4a0d      	ldr	r2, [pc, #52]	@ (800a6f0 <TP_GetAdFac+0xec>)
 800a6ba:	213c      	movs	r1, #60	@ 0x3c
 800a6bc:	2000      	movs	r0, #0
 800a6be:	f7ff f939 	bl	8009934 <GUI_DisString_EN>
}
 800a6c2:	bf00      	nop
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	2000211c 	.word	0x2000211c
 800a6cc:	be079f23 	.word	0xbe079f23
 800a6d0:	3db85059 	.word	0x3db85059
 800a6d4:	3db7b310 	.word	0x3db7b310
 800a6d8:	3e0a06ea 	.word	0x3e0a06ea
 800a6dc:	3db8255b 	.word	0x3db8255b
 800a6e0:	3e085fd0 	.word	0x3e085fd0
 800a6e4:	be081883 	.word	0xbe081883
 800a6e8:	3db42678 	.word	0x3db42678
 800a6ec:	20000104 	.word	0x20000104
 800a6f0:	0800c708 	.word	0x0800c708

0800a6f4 <TP_MenuDialog>:

/*******************************************************************************
function:
		Paint menu options
*******************************************************************************/
void TP_MenuDialog(void) {
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af04      	add	r7, sp, #16
    //LCD_Clear(LCD_BACKGROUND);
    DEBUG("Menu return ...\r\n");
 800a6fa:	485f      	ldr	r0, [pc, #380]	@ (800a878 <TP_MenuDialog+0x184>)
 800a6fc:	f000 fe76 	bl	800b3ec <puts>

    // Current show
	GUI_DrawRectangle(0, 20,
					  sLCD_DIS.LCD_Dis_Column/2, 220,
 800a700:	4b5e      	ldr	r3, [pc, #376]	@ (800a87c <TP_MenuDialog+0x188>)
 800a702:	881b      	ldrh	r3, [r3, #0]
	GUI_DrawRectangle(0, 20,
 800a704:	085b      	lsrs	r3, r3, #1
 800a706:	b29a      	uxth	r2, r3
 800a708:	2301      	movs	r3, #1
 800a70a:	9302      	str	r3, [sp, #8]
 800a70c:	2301      	movs	r3, #1
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	23dc      	movs	r3, #220	@ 0xdc
 800a718:	2114      	movs	r1, #20
 800a71a:	2000      	movs	r0, #0
 800a71c:	f7fe ffd2 	bl	80096c4 <GUI_DrawRectangle>
					  MAGENTA, DRAW_FULL, DOT_PIXEL_1X1);
	GUI_DisString_EN(10, 30, "Current:", &Font24, MAGENTA, BLACK);
 800a720:	2300      	movs	r3, #0
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	4b55      	ldr	r3, [pc, #340]	@ (800a880 <TP_MenuDialog+0x18c>)
 800a72c:	4a55      	ldr	r2, [pc, #340]	@ (800a884 <TP_MenuDialog+0x190>)
 800a72e:	211e      	movs	r1, #30
 800a730:	200a      	movs	r0, #10
 800a732:	f7ff f8ff 	bl	8009934 <GUI_DisString_EN>

	// Voltage show
	GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 20,
 800a736:	4b51      	ldr	r3, [pc, #324]	@ (800a87c <TP_MenuDialog+0x188>)
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	085b      	lsrs	r3, r3, #1
 800a73c:	b298      	uxth	r0, r3
 800a73e:	4b4f      	ldr	r3, [pc, #316]	@ (800a87c <TP_MenuDialog+0x188>)
 800a740:	881a      	ldrh	r2, [r3, #0]
 800a742:	2301      	movs	r3, #1
 800a744:	9302      	str	r3, [sp, #8]
 800a746:	2301      	movs	r3, #1
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	23dc      	movs	r3, #220	@ 0xdc
 800a752:	2114      	movs	r1, #20
 800a754:	f7fe ffb6 	bl	80096c4 <GUI_DrawRectangle>
					  sLCD_DIS.LCD_Dis_Column, 220,
					  GBLUE, DRAW_FULL, DOT_PIXEL_1X1);
	GUI_DisString_EN(250, 30, "Voltage:", &Font24, GBLUE, BLACK);
 800a758:	2300      	movs	r3, #0
 800a75a:	9301      	str	r3, [sp, #4]
 800a75c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	4b47      	ldr	r3, [pc, #284]	@ (800a880 <TP_MenuDialog+0x18c>)
 800a764:	4a48      	ldr	r2, [pc, #288]	@ (800a888 <TP_MenuDialog+0x194>)
 800a766:	211e      	movs	r1, #30
 800a768:	20fa      	movs	r0, #250	@ 0xfa
 800a76a:	f7ff f8e3 	bl	8009934 <GUI_DisString_EN>

	// AC/DC Switch (BRRED/YELLOW)
	if (sELECTONIC_LOAD_PARAMETERS.currentType) {
 800a76e:	4b47      	ldr	r3, [pc, #284]	@ (800a88c <TP_MenuDialog+0x198>)
 800a770:	785b      	ldrb	r3, [r3, #1]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d01f      	beq.n	800a7b6 <TP_MenuDialog+0xc2>
		GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 220,
 800a776:	4b41      	ldr	r3, [pc, #260]	@ (800a87c <TP_MenuDialog+0x188>)
 800a778:	881b      	ldrh	r3, [r3, #0]
 800a77a:	085b      	lsrs	r3, r3, #1
 800a77c:	b298      	uxth	r0, r3
 800a77e:	4b3f      	ldr	r3, [pc, #252]	@ (800a87c <TP_MenuDialog+0x188>)
 800a780:	881a      	ldrh	r2, [r3, #0]
 800a782:	4b3e      	ldr	r3, [pc, #248]	@ (800a87c <TP_MenuDialog+0x188>)
 800a784:	885b      	ldrh	r3, [r3, #2]
 800a786:	2101      	movs	r1, #1
 800a788:	9102      	str	r1, [sp, #8]
 800a78a:	2101      	movs	r1, #1
 800a78c:	9101      	str	r1, [sp, #4]
 800a78e:	f64f 4107 	movw	r1, #64519	@ 0xfc07
 800a792:	9100      	str	r1, [sp, #0]
 800a794:	21dc      	movs	r1, #220	@ 0xdc
 800a796:	f7fe ff95 	bl	80096c4 <GUI_DrawRectangle>
				sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page,
				BRRED, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(345, 260, "AC", &Font24, BRRED, BLACK);
 800a79a:	2300      	movs	r3, #0
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	4b36      	ldr	r3, [pc, #216]	@ (800a880 <TP_MenuDialog+0x18c>)
 800a7a6:	4a3a      	ldr	r2, [pc, #232]	@ (800a890 <TP_MenuDialog+0x19c>)
 800a7a8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a7ac:	f240 1059 	movw	r0, #345	@ 0x159
 800a7b0:	f7ff f8c0 	bl	8009934 <GUI_DisString_EN>
 800a7b4:	e01e      	b.n	800a7f4 <TP_MenuDialog+0x100>
	} else {
		GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 220,
 800a7b6:	4b31      	ldr	r3, [pc, #196]	@ (800a87c <TP_MenuDialog+0x188>)
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	085b      	lsrs	r3, r3, #1
 800a7bc:	b298      	uxth	r0, r3
 800a7be:	4b2f      	ldr	r3, [pc, #188]	@ (800a87c <TP_MenuDialog+0x188>)
 800a7c0:	881a      	ldrh	r2, [r3, #0]
 800a7c2:	4b2e      	ldr	r3, [pc, #184]	@ (800a87c <TP_MenuDialog+0x188>)
 800a7c4:	885b      	ldrh	r3, [r3, #2]
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	9102      	str	r1, [sp, #8]
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	9101      	str	r1, [sp, #4]
 800a7ce:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 800a7d2:	9100      	str	r1, [sp, #0]
 800a7d4:	21dc      	movs	r1, #220	@ 0xdc
 800a7d6:	f7fe ff75 	bl	80096c4 <GUI_DrawRectangle>
				sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page,
				YELLOW, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(345, 260, "DC", &Font24, YELLOW, BLACK);
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	4b26      	ldr	r3, [pc, #152]	@ (800a880 <TP_MenuDialog+0x18c>)
 800a7e6:	4a2b      	ldr	r2, [pc, #172]	@ (800a894 <TP_MenuDialog+0x1a0>)
 800a7e8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a7ec:	f240 1059 	movw	r0, #345	@ 0x159
 800a7f0:	f7ff f8a0 	bl	8009934 <GUI_DisString_EN>
	}

	// ON/OFF switch (GREEN/RED)
	if (sELECTONIC_LOAD_PARAMETERS.condition) {
 800a7f4:	4b25      	ldr	r3, [pc, #148]	@ (800a88c <TP_MenuDialog+0x198>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d01d      	beq.n	800a838 <TP_MenuDialog+0x144>
		GUI_DrawRectangle(0, 220,
			sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
 800a7fc:	4b1f      	ldr	r3, [pc, #124]	@ (800a87c <TP_MenuDialog+0x188>)
 800a7fe:	881b      	ldrh	r3, [r3, #0]
		GUI_DrawRectangle(0, 220,
 800a800:	085b      	lsrs	r3, r3, #1
 800a802:	b29a      	uxth	r2, r3
 800a804:	4b1d      	ldr	r3, [pc, #116]	@ (800a87c <TP_MenuDialog+0x188>)
 800a806:	885b      	ldrh	r3, [r3, #2]
 800a808:	2101      	movs	r1, #1
 800a80a:	9102      	str	r1, [sp, #8]
 800a80c:	2101      	movs	r1, #1
 800a80e:	9101      	str	r1, [sp, #4]
 800a810:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800a814:	9100      	str	r1, [sp, #0]
 800a816:	21dc      	movs	r1, #220	@ 0xdc
 800a818:	2000      	movs	r0, #0
 800a81a:	f7fe ff53 	bl	80096c4 <GUI_DrawRectangle>
			GREEN, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(103, 260, "ON", &Font24, GREEN, BLACK);
 800a81e:	2300      	movs	r3, #0
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4b15      	ldr	r3, [pc, #84]	@ (800a880 <TP_MenuDialog+0x18c>)
 800a82a:	4a1b      	ldr	r2, [pc, #108]	@ (800a898 <TP_MenuDialog+0x1a4>)
 800a82c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a830:	2067      	movs	r0, #103	@ 0x67
 800a832:	f7ff f87f 	bl	8009934 <GUI_DisString_EN>
		GUI_DrawRectangle(0, 220,
		sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
		RED, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(95, 260, "OFF", &Font24, RED, BLACK);
	}
}
 800a836:	e01c      	b.n	800a872 <TP_MenuDialog+0x17e>
		sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
 800a838:	4b10      	ldr	r3, [pc, #64]	@ (800a87c <TP_MenuDialog+0x188>)
 800a83a:	881b      	ldrh	r3, [r3, #0]
		GUI_DrawRectangle(0, 220,
 800a83c:	085b      	lsrs	r3, r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	4b0e      	ldr	r3, [pc, #56]	@ (800a87c <TP_MenuDialog+0x188>)
 800a842:	885b      	ldrh	r3, [r3, #2]
 800a844:	2101      	movs	r1, #1
 800a846:	9102      	str	r1, [sp, #8]
 800a848:	2101      	movs	r1, #1
 800a84a:	9101      	str	r1, [sp, #4]
 800a84c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800a850:	9100      	str	r1, [sp, #0]
 800a852:	21dc      	movs	r1, #220	@ 0xdc
 800a854:	2000      	movs	r0, #0
 800a856:	f7fe ff35 	bl	80096c4 <GUI_DrawRectangle>
		GUI_DisString_EN(95, 260, "OFF", &Font24, RED, BLACK);
 800a85a:	2300      	movs	r3, #0
 800a85c:	9301      	str	r3, [sp, #4]
 800a85e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	4b06      	ldr	r3, [pc, #24]	@ (800a880 <TP_MenuDialog+0x18c>)
 800a866:	4a0d      	ldr	r2, [pc, #52]	@ (800a89c <TP_MenuDialog+0x1a8>)
 800a868:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a86c:	205f      	movs	r0, #95	@ 0x5f
 800a86e:	f7ff f861 	bl	8009934 <GUI_DisString_EN>
}
 800a872:	bf00      	nop
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	0800c76c 	.word	0x0800c76c
 800a87c:	20002110 	.word	0x20002110
 800a880:	20000114 	.word	0x20000114
 800a884:	0800c788 	.word	0x0800c788
 800a888:	0800c794 	.word	0x0800c794
 800a88c:	20002140 	.word	0x20002140
 800a890:	0800c7a0 	.word	0x0800c7a0
 800a894:	0800c7a4 	.word	0x0800c7a4
 800a898:	0800c7a8 	.word	0x0800c7a8
 800a89c:	0800c7ac 	.word	0x0800c7ac

0800a8a0 <TP_IndicationsUnit>:

/*******************************************************************************
function:
		Paint numbers
*******************************************************************************/
void TP_IndicationsUnit(void) {
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af02      	add	r7, sp, #8
	GUI_DisFloatNum(280, 120, 131.5487, &Font24, GBLUE, BLACK);
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a8ae:	4a16      	ldr	r2, [pc, #88]	@ (800a908 <TP_IndicationsUnit+0x68>)
 800a8b0:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800a90c <TP_IndicationsUnit+0x6c>
 800a8b4:	2178      	movs	r1, #120	@ 0x78
 800a8b6:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800a8ba:	f7ff f88f 	bl	80099dc <GUI_DisFloatNum>
	GUI_DisString_EN(400, 120, "Volt", &Font24, GBLUE, BLACK);
 800a8be:	2300      	movs	r3, #0
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a908 <TP_IndicationsUnit+0x68>)
 800a8ca:	4a11      	ldr	r2, [pc, #68]	@ (800a910 <TP_IndicationsUnit+0x70>)
 800a8cc:	2178      	movs	r1, #120	@ 0x78
 800a8ce:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800a8d2:	f7ff f82f 	bl	8009934 <GUI_DisString_EN>

	GUI_DisFloatNum(60, 120, 6.01647, &Font24, MAGENTA, BLACK);
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a8de:	4a0a      	ldr	r2, [pc, #40]	@ (800a908 <TP_IndicationsUnit+0x68>)
 800a8e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800a914 <TP_IndicationsUnit+0x74>
 800a8e4:	2178      	movs	r1, #120	@ 0x78
 800a8e6:	203c      	movs	r0, #60	@ 0x3c
 800a8e8:	f7ff f878 	bl	80099dc <GUI_DisFloatNum>
	GUI_DisString_EN(180, 120, "Amp", &Font24, MAGENTA, BLACK);
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	4b04      	ldr	r3, [pc, #16]	@ (800a908 <TP_IndicationsUnit+0x68>)
 800a8f8:	4a07      	ldr	r2, [pc, #28]	@ (800a918 <TP_IndicationsUnit+0x78>)
 800a8fa:	2178      	movs	r1, #120	@ 0x78
 800a8fc:	20b4      	movs	r0, #180	@ 0xb4
 800a8fe:	f7ff f819 	bl	8009934 <GUI_DisString_EN>
}
 800a902:	bf00      	nop
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	20000114 	.word	0x20000114
 800a90c:	43038c78 	.word	0x43038c78
 800a910:	0800c7b0 	.word	0x0800c7b0
 800a914:	40c086ec 	.word	0x40c086ec
 800a918:	0800c7b8 	.word	0x0800c7b8

0800a91c <TP_MenuTouch>:
/*******************************************************************************
function:
		Touch position on menu
*******************************************************************************/
void TP_MenuTouch(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
	sTP_Draw.Xpoint = 0;
 800a920:	4b37      	ldr	r3, [pc, #220]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a922:	2200      	movs	r2, #0
 800a924:	801a      	strh	r2, [r3, #0]
	sTP_Draw.Ypoint = 0;
 800a926:	4b36      	ldr	r3, [pc, #216]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a928:	2200      	movs	r2, #0
 800a92a:	805a      	strh	r2, [r3, #2]
    TP_Scan(0);
 800a92c:	2000      	movs	r0, #0
 800a92e:	f7ff fd03 	bl	800a338 <TP_Scan>
    if ((sTP_DEV.chStatus & TP_PRESS_DOWN) && (sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column && sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page)) {		//Press the button
 800a932:	4b34      	ldr	r3, [pc, #208]	@ (800aa04 <TP_MenuTouch+0xe8>)
 800a934:	7a1b      	ldrb	r3, [r3, #8]
 800a936:	b25b      	sxtb	r3, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	da5e      	bge.n	800a9fa <TP_MenuTouch+0xde>
 800a93c:	4b30      	ldr	r3, [pc, #192]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a93e:	881a      	ldrh	r2, [r3, #0]
 800a940:	4b31      	ldr	r3, [pc, #196]	@ (800aa08 <TP_MenuTouch+0xec>)
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d258      	bcs.n	800a9fa <TP_MenuTouch+0xde>
 800a948:	4b2d      	ldr	r3, [pc, #180]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a94a:	885a      	ldrh	r2, [r3, #2]
 800a94c:	4b2e      	ldr	r3, [pc, #184]	@ (800aa08 <TP_MenuTouch+0xec>)
 800a94e:	885b      	ldrh	r3, [r3, #2]
 800a950:	429a      	cmp	r2, r3
 800a952:	d252      	bcs.n	800a9fa <TP_MenuTouch+0xde>
		// ON/OFF Switch
		if (sTP_Draw.Xpoint > 0 &&
 800a954:	4b2a      	ldr	r3, [pc, #168]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d025      	beq.n	800a9a8 <TP_MenuTouch+0x8c>
				sTP_Draw.Xpoint < (sLCD_DIS.LCD_Dis_Column/2 - 1) &&
 800a95c:	4b28      	ldr	r3, [pc, #160]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	4b29      	ldr	r3, [pc, #164]	@ (800aa08 <TP_MenuTouch+0xec>)
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	085b      	lsrs	r3, r3, #1
 800a968:	b29b      	uxth	r3, r3
 800a96a:	3b01      	subs	r3, #1
		if (sTP_Draw.Xpoint > 0 &&
 800a96c:	429a      	cmp	r2, r3
 800a96e:	da1b      	bge.n	800a9a8 <TP_MenuTouch+0x8c>
				sTP_Draw.Ypoint > 220 &&
 800a970:	4b23      	ldr	r3, [pc, #140]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a972:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Xpoint < (sLCD_DIS.LCD_Dis_Column/2 - 1) &&
 800a974:	2bdc      	cmp	r3, #220	@ 0xdc
 800a976:	d917      	bls.n	800a9a8 <TP_MenuTouch+0x8c>
				sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page) {
 800a978:	4b21      	ldr	r3, [pc, #132]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a97a:	885a      	ldrh	r2, [r3, #2]
 800a97c:	4b22      	ldr	r3, [pc, #136]	@ (800aa08 <TP_MenuTouch+0xec>)
 800a97e:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Ypoint > 220 &&
 800a980:	429a      	cmp	r2, r3
 800a982:	d211      	bcs.n	800a9a8 <TP_MenuTouch+0x8c>
			sELECTONIC_LOAD_PARAMETERS.condition = !sELECTONIC_LOAD_PARAMETERS.condition;
 800a984:	4b21      	ldr	r3, [pc, #132]	@ (800aa0c <TP_MenuTouch+0xf0>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	bf14      	ite	ne
 800a98c:	2301      	movne	r3, #1
 800a98e:	2300      	moveq	r3, #0
 800a990:	b2db      	uxtb	r3, r3
 800a992:	f083 0301 	eor.w	r3, r3, #1
 800a996:	b2db      	uxtb	r3, r3
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	4b1b      	ldr	r3, [pc, #108]	@ (800aa0c <TP_MenuTouch+0xf0>)
 800a9a0:	701a      	strb	r2, [r3, #0]
			TP_MenuDialog();
 800a9a2:	f7ff fea7 	bl	800a6f4 <TP_MenuDialog>
			TP_MenuDialog();
		} else {
			//TP_MenuDialog(); // можно использовать как костыль
		}
    }
}
 800a9a6:	e028      	b.n	800a9fa <TP_MenuTouch+0xde>
		} else if(sTP_Draw.Xpoint > sLCD_DIS.LCD_Dis_Column/2 &&
 800a9a8:	4b15      	ldr	r3, [pc, #84]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a9aa:	881a      	ldrh	r2, [r3, #0]
 800a9ac:	4b16      	ldr	r3, [pc, #88]	@ (800aa08 <TP_MenuTouch+0xec>)
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	085b      	lsrs	r3, r3, #1
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d920      	bls.n	800a9fa <TP_MenuTouch+0xde>
				sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column &&
 800a9b8:	4b11      	ldr	r3, [pc, #68]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a9ba:	881a      	ldrh	r2, [r3, #0]
 800a9bc:	4b12      	ldr	r3, [pc, #72]	@ (800aa08 <TP_MenuTouch+0xec>)
 800a9be:	881b      	ldrh	r3, [r3, #0]
		} else if(sTP_Draw.Xpoint > sLCD_DIS.LCD_Dis_Column/2 &&
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d21a      	bcs.n	800a9fa <TP_MenuTouch+0xde>
				sTP_Draw.Ypoint > 220 &&
 800a9c4:	4b0e      	ldr	r3, [pc, #56]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a9c6:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column &&
 800a9c8:	2bdc      	cmp	r3, #220	@ 0xdc
 800a9ca:	d916      	bls.n	800a9fa <TP_MenuTouch+0xde>
				sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page) {
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	@ (800aa00 <TP_MenuTouch+0xe4>)
 800a9ce:	885a      	ldrh	r2, [r3, #2]
 800a9d0:	4b0d      	ldr	r3, [pc, #52]	@ (800aa08 <TP_MenuTouch+0xec>)
 800a9d2:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Ypoint > 220 &&
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d210      	bcs.n	800a9fa <TP_MenuTouch+0xde>
			sELECTONIC_LOAD_PARAMETERS.currentType = !sELECTONIC_LOAD_PARAMETERS.currentType;
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	@ (800aa0c <TP_MenuTouch+0xf0>)
 800a9da:	785b      	ldrb	r3, [r3, #1]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	bf14      	ite	ne
 800a9e0:	2301      	movne	r3, #1
 800a9e2:	2300      	moveq	r3, #0
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	f083 0301 	eor.w	r3, r3, #1
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	4b06      	ldr	r3, [pc, #24]	@ (800aa0c <TP_MenuTouch+0xf0>)
 800a9f4:	705a      	strb	r2, [r3, #1]
			TP_MenuDialog();
 800a9f6:	f7ff fe7d 	bl	800a6f4 <TP_MenuDialog>
}
 800a9fa:	bf00      	nop
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20002138 	.word	0x20002138
 800aa04:	2000211c 	.word	0x2000211c
 800aa08:	20002110 	.word	0x20002110
 800aa0c:	20002140 	.word	0x20002140

0800aa10 <TP_Init>:
/*******************************************************************************
function:
		Touch pad initialization
*******************************************************************************/
void TP_Init( LCD_SCAN_DIR Lcd_ScanDir )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	71fb      	strb	r3, [r7, #7]
    TP_CS_1;
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	2180      	movs	r1, #128	@ 0x80
 800aa1e:	4807      	ldr	r0, [pc, #28]	@ (800aa3c <TP_Init+0x2c>)
 800aa20:	f7f6 fd86 	bl	8001530 <HAL_GPIO_WritePin>

    sTP_DEV.TP_Scan_Dir = Lcd_ScanDir;
 800aa24:	4a06      	ldr	r2, [pc, #24]	@ (800aa40 <TP_Init+0x30>)
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	7613      	strb	r3, [r2, #24]

    TP_Read_ADC_XY(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint);
 800aa2a:	4906      	ldr	r1, [pc, #24]	@ (800aa44 <TP_Init+0x34>)
 800aa2c:	4806      	ldr	r0, [pc, #24]	@ (800aa48 <TP_Init+0x38>)
 800aa2e:	f7ff fc17 	bl	800a260 <TP_Read_ADC_XY>
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	40020400 	.word	0x40020400
 800aa40:	2000211c 	.word	0x2000211c
 800aa44:	20002122 	.word	0x20002122
 800aa48:	20002120 	.word	0x20002120

0800aa4c <LOAD_Init>:

void LOAD_Init(void)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	af00      	add	r7, sp, #0
    sELECTONIC_LOAD_PARAMETERS.condition = 1;
 800aa50:	4b09      	ldr	r3, [pc, #36]	@ (800aa78 <LOAD_Init+0x2c>)
 800aa52:	2201      	movs	r2, #1
 800aa54:	701a      	strb	r2, [r3, #0]

    sELECTONIC_LOAD_PARAMETERS.currentType = 1;
 800aa56:	4b08      	ldr	r3, [pc, #32]	@ (800aa78 <LOAD_Init+0x2c>)
 800aa58:	2201      	movs	r2, #1
 800aa5a:	705a      	strb	r2, [r3, #1]

    sELECTONIC_LOAD_PARAMETERS.currentValue = 0;
 800aa5c:	4b06      	ldr	r3, [pc, #24]	@ (800aa78 <LOAD_Init+0x2c>)
 800aa5e:	f04f 0200 	mov.w	r2, #0
 800aa62:	605a      	str	r2, [r3, #4]

    sELECTONIC_LOAD_PARAMETERS.voltageValue = 0;
 800aa64:	4b04      	ldr	r3, [pc, #16]	@ (800aa78 <LOAD_Init+0x2c>)
 800aa66:	f04f 0200 	mov.w	r2, #0
 800aa6a:	609a      	str	r2, [r3, #8]
}
 800aa6c:	bf00      	nop
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	20002140 	.word	0x20002140

0800aa7c <SD_SPI_ReadWriteByte>:
unsigned char  SD_Type=0;  //version of the sd card

//data: data to be written to sd card.
//return: data read from sd card.
unsigned char SD_SPI_ReadWriteByte(unsigned char CMD)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	71fb      	strb	r3, [r7, #7]
	return SPI4W_Write_Byte(CMD);
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fd fc3f 	bl	800830c <SPI4W_Write_Byte>
 800aa8e:	4603      	mov	r3, r0
//	return SPI_Read_Byte();
}	  
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <SD_SPI_SpeedLow>:

//set spi in low speed mode.
void SD_SPI_SpeedLow(void)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	af00      	add	r7, sp, #0
//	SPI1->CR1&=0XFFC7; 
//	SPI1->CR1|=SPI_BaudRatePrescaler_256;
//	SPI_Cmd(SPI1,ENABLE); 
}
 800aa9c:	bf00      	nop
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <SD_SPI_SpeedHigh>:


//set spi in high speed mode.
void SD_SPI_SpeedHigh(void)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	af00      	add	r7, sp, #0
//	SPI1->CR1&=0XFFC7; 
//	SPI1->CR1|=SPI_BaudRatePrescaler_32;
//	SPI_Cmd(SPI1,ENABLE); 
}
 800aaaa:	bf00      	nop
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <SD_DisSelect>:


//released spi bus
void SD_DisSelect(void)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	af00      	add	r7, sp, #0
	SD_CS_1;
 800aab8:	2201      	movs	r2, #1
 800aaba:	2110      	movs	r1, #16
 800aabc:	4803      	ldr	r0, [pc, #12]	@ (800aacc <SD_DisSelect+0x18>)
 800aabe:	f7f6 fd37 	bl	8001530 <HAL_GPIO_WritePin>
 	SD_SPI_ReadWriteByte(0xff);//providing extra 8 clocks  
 800aac2:	20ff      	movs	r0, #255	@ 0xff
 800aac4:	f7ff ffda 	bl	800aa7c <SD_SPI_ReadWriteByte>
}
 800aac8:	bf00      	nop
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	40020400 	.word	0x40020400

0800aad0 <SD_Select>:

//pick sd card and waiting until until it's ready
//return: 0: succed 1: failure
unsigned char SD_Select(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	af00      	add	r7, sp, #0
	SD_CS_0;
 800aad4:	2200      	movs	r2, #0
 800aad6:	2110      	movs	r1, #16
 800aad8:	4807      	ldr	r0, [pc, #28]	@ (800aaf8 <SD_Select+0x28>)
 800aada:	f7f6 fd29 	bl	8001530 <HAL_GPIO_WritePin>
	if(SD_WaitReady()==0)return 0; 
 800aade:	f000 f80d 	bl	800aafc <SD_WaitReady>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <SD_Select+0x1c>
 800aae8:	2300      	movs	r3, #0
 800aaea:	e002      	b.n	800aaf2 <SD_Select+0x22>
	SD_DisSelect();
 800aaec:	f7ff ffe2 	bl	800aab4 <SD_DisSelect>
	return 1;
 800aaf0:	2301      	movs	r3, #1
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	40020400 	.word	0x40020400

0800aafc <SD_WaitReady>:

//waiting for sd card until it's ready
unsigned char SD_WaitReady(void)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
	unsigned int t=0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	607b      	str	r3, [r7, #4]
	do{
		if(SD_SPI_ReadWriteByte(0XFF) == 0XFF)
 800ab06:	20ff      	movs	r0, #255	@ 0xff
 800ab08:	f7ff ffb8 	bl	800aa7c <SD_SPI_ReadWriteByte>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2bff      	cmp	r3, #255	@ 0xff
 800ab10:	d101      	bne.n	800ab16 <SD_WaitReady+0x1a>
			return 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	e008      	b.n	800ab28 <SD_WaitReady+0x2c>
		t++;		  	
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	607b      	str	r3, [r7, #4]
	}while(t<0XFFFFFF);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d3ef      	bcc.n	800ab06 <SD_WaitReady+0xa>
	return 1;
 800ab26:	2301      	movs	r3, #1
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <SD_GetResponse>:
//waiting for response from sd card.
//Response: expect from sd card.
//return: succeed for 0, fail for other else 
//return: 0 for success, other for failure.   
unsigned char SD_GetResponse(unsigned char Response)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	71fb      	strb	r3, [r7, #7]
	unsigned short Count=0xFFFF;	   						  
 800ab3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab3e:	81fb      	strh	r3, [r7, #14]
	while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)
 800ab40:	e002      	b.n	800ab48 <SD_GetResponse+0x18>
		Count--; 	  
 800ab42:	89fb      	ldrh	r3, [r7, #14]
 800ab44:	3b01      	subs	r3, #1
 800ab46:	81fb      	strh	r3, [r7, #14]
	while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)
 800ab48:	20ff      	movs	r0, #255	@ 0xff
 800ab4a:	f7ff ff97 	bl	800aa7c <SD_SPI_ReadWriteByte>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	461a      	mov	r2, r3
 800ab52:	79fb      	ldrb	r3, [r7, #7]
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d002      	beq.n	800ab5e <SD_GetResponse+0x2e>
 800ab58:	89fb      	ldrh	r3, [r7, #14]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1f1      	bne.n	800ab42 <SD_GetResponse+0x12>
	if (Count==0)
 800ab5e:	89fb      	ldrh	r3, [r7, #14]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <SD_GetResponse+0x38>
		return MSD_RESPONSE_FAILURE;  
 800ab64:	23ff      	movs	r3, #255	@ 0xff
 800ab66:	e000      	b.n	800ab6a <SD_GetResponse+0x3a>
	else 
		return MSD_RESPONSE_NO_ERROR;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <SD_RecvData>:
//read a buffer from sd card.
//*buf: pointer to a buffer.
//len: length of the buffer.
//return: 0 for success, other for failure.   
unsigned char SD_RecvData(unsigned char *buf,unsigned short len)
{			  	  
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b082      	sub	sp, #8
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	807b      	strh	r3, [r7, #2]
	if(SD_GetResponse(0xFE))
 800ab7e:	20fe      	movs	r0, #254	@ 0xfe
 800ab80:	f7ff ffd6 	bl	800ab30 <SD_GetResponse>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00b      	beq.n	800aba2 <SD_RecvData+0x30>
		return 1;//waiting for start command send back from sd card.
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e015      	b.n	800abba <SD_RecvData+0x48>
    while(len--){//receiving data...
        *buf = SD_SPI_ReadWriteByte(0xFF);
 800ab8e:	20ff      	movs	r0, #255	@ 0xff
 800ab90:	f7ff ff74 	bl	800aa7c <SD_SPI_ReadWriteByte>
 800ab94:	4603      	mov	r3, r0
 800ab96:	461a      	mov	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	701a      	strb	r2, [r3, #0]
        buf++;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	607b      	str	r3, [r7, #4]
    while(len--){//receiving data...
 800aba2:	887b      	ldrh	r3, [r7, #2]
 800aba4:	1e5a      	subs	r2, r3, #1
 800aba6:	807a      	strh	r2, [r7, #2]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1f0      	bne.n	800ab8e <SD_RecvData+0x1c>
    }

    //send 2 dummy write (dummy CRC)
    SD_SPI_ReadWriteByte(0xFF);
 800abac:	20ff      	movs	r0, #255	@ 0xff
 800abae:	f7ff ff65 	bl	800aa7c <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(0xFF);									  					    
 800abb2:	20ff      	movs	r0, #255	@ 0xff
 800abb4:	f7ff ff62 	bl	800aa7c <SD_SPI_ReadWriteByte>
    return 0;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <SD_SendBlock>:
//write a buffer containing 512 bytes to sd card.
//buf: data buffer
//cmd: command
//return: 0 for success, other for failure.   
unsigned char SD_SendBlock(unsigned char*buf,unsigned char cmd)
{	
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	460b      	mov	r3, r1
 800abcc:	70fb      	strb	r3, [r7, #3]
	unsigned short t;		  	  
	if(SD_WaitReady())return 1;
 800abce:	f7ff ff95 	bl	800aafc <SD_WaitReady>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <SD_SendBlock+0x1a>
 800abd8:	2301      	movs	r3, #1
 800abda:	e02a      	b.n	800ac32 <SD_SendBlock+0x70>
	SD_SPI_ReadWriteByte(cmd);
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff ff4c 	bl	800aa7c <SD_SPI_ReadWriteByte>
	if(cmd!=0XFD){
 800abe4:	78fb      	ldrb	r3, [r7, #3]
 800abe6:	2bfd      	cmp	r3, #253	@ 0xfd
 800abe8:	d022      	beq.n	800ac30 <SD_SendBlock+0x6e>
		for(t=0;t<512;t++)
 800abea:	2300      	movs	r3, #0
 800abec:	81fb      	strh	r3, [r7, #14]
 800abee:	e009      	b.n	800ac04 <SD_SendBlock+0x42>
			SD_SPI_ReadWriteByte(buf[t]);
 800abf0:	89fb      	ldrh	r3, [r7, #14]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	4413      	add	r3, r2
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff ff3f 	bl	800aa7c <SD_SPI_ReadWriteByte>
		for(t=0;t<512;t++)
 800abfe:	89fb      	ldrh	r3, [r7, #14]
 800ac00:	3301      	adds	r3, #1
 800ac02:	81fb      	strh	r3, [r7, #14]
 800ac04:	89fb      	ldrh	r3, [r7, #14]
 800ac06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac0a:	d3f1      	bcc.n	800abf0 <SD_SendBlock+0x2e>
	    SD_SPI_ReadWriteByte(0xFF);//ignoring CRC
 800ac0c:	20ff      	movs	r0, #255	@ 0xff
 800ac0e:	f7ff ff35 	bl	800aa7c <SD_SPI_ReadWriteByte>
	    SD_SPI_ReadWriteByte(0xFF);
 800ac12:	20ff      	movs	r0, #255	@ 0xff
 800ac14:	f7ff ff32 	bl	800aa7c <SD_SPI_ReadWriteByte>
		t = SD_SPI_ReadWriteByte(0xFF);
 800ac18:	20ff      	movs	r0, #255	@ 0xff
 800ac1a:	f7ff ff2f 	bl	800aa7c <SD_SPI_ReadWriteByte>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	81fb      	strh	r3, [r7, #14]
		if((t&0x1F)!=0x05)
 800ac22:	89fb      	ldrh	r3, [r7, #14]
 800ac24:	f003 031f 	and.w	r3, r3, #31
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	d001      	beq.n	800ac30 <SD_SendBlock+0x6e>
			return 2;								  					    
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	e000      	b.n	800ac32 <SD_SendBlock+0x70>
	}						 									  					    
    return 0;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <SD_SendCmd>:
//cmd��command
//arg: parameter
//crc: crc
//return: response sent back from sd card.
unsigned char SD_SendCmd(unsigned char cmd, unsigned int arg, unsigned char crc)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	4603      	mov	r3, r0
 800ac42:	6039      	str	r1, [r7, #0]
 800ac44:	71fb      	strb	r3, [r7, #7]
 800ac46:	4613      	mov	r3, r2
 800ac48:	71bb      	strb	r3, [r7, #6]
    unsigned char r1;	
	unsigned char Retry=0; 
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]
	SD_DisSelect();
 800ac4e:	f7ff ff31 	bl	800aab4 <SD_DisSelect>
	if(SD_Select())return 0XFF;
 800ac52:	f7ff ff3d 	bl	800aad0 <SD_Select>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <SD_SendCmd+0x26>
 800ac5c:	23ff      	movs	r3, #255	@ 0xff
 800ac5e:	e038      	b.n	800acd2 <SD_SendCmd+0x98>

    SD_SPI_ReadWriteByte(cmd | 0x40);
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7ff ff07 	bl	800aa7c <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 24);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	0e1b      	lsrs	r3, r3, #24
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff ff01 	bl	800aa7c <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 16);
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	0c1b      	lsrs	r3, r3, #16
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff fefb 	bl	800aa7c <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 8);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	0a1b      	lsrs	r3, r3, #8
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7ff fef5 	bl	800aa7c <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg);	  
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff fef0 	bl	800aa7c <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(crc); 
 800ac9c:	79bb      	ldrb	r3, [r7, #6]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7ff feec 	bl	800aa7c <SD_SPI_ReadWriteByte>
	if(cmd == CMD12)SD_SPI_ReadWriteByte(0xff); //Skip a stuff byte when stop reading
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	2b0c      	cmp	r3, #12
 800aca8:	d102      	bne.n	800acb0 <SD_SendCmd+0x76>
 800acaa:	20ff      	movs	r0, #255	@ 0xff
 800acac:	f7ff fee6 	bl	800aa7c <SD_SPI_ReadWriteByte>
	Retry = 0X1F;
 800acb0:	231f      	movs	r3, #31
 800acb2:	73fb      	strb	r3, [r7, #15]
	do{
		r1 = SD_SPI_ReadWriteByte(0xFF);
 800acb4:	20ff      	movs	r0, #255	@ 0xff
 800acb6:	f7ff fee1 	bl	800aa7c <SD_SPI_ReadWriteByte>
 800acba:	4603      	mov	r3, r0
 800acbc:	73bb      	strb	r3, [r7, #14]
	}while((r1&0X80) && Retry--);	 
 800acbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	da04      	bge.n	800acd0 <SD_SendCmd+0x96>
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	1e5a      	subs	r2, r3, #1
 800acca:	73fa      	strb	r2, [r7, #15]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1f1      	bne.n	800acb4 <SD_SendCmd+0x7a>

    return r1;
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <SD_Initialize>:
    return Capacity;
}

//initialize sd card 
unsigned char SD_Initialize(void)
{
 800acdc:	b590      	push	{r4, r7, lr}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
    unsigned char r1;      
    unsigned short retry;  
    unsigned char buf[4];  
	unsigned short i;
    
    SD_CS_1;
 800ace2:	2201      	movs	r2, #1
 800ace4:	2110      	movs	r1, #16
 800ace6:	487a      	ldr	r0, [pc, #488]	@ (800aed0 <SD_Initialize+0x1f4>)
 800ace8:	f7f6 fc22 	bl	8001530 <HAL_GPIO_WritePin>
 	SD_SPI_SpeedLow();	
 800acec:	f7ff fed4 	bl	800aa98 <SD_SPI_SpeedLow>
 	for(i=0;i<10;i++)SD_SPI_ReadWriteByte(0XFF);
 800acf0:	2300      	movs	r3, #0
 800acf2:	817b      	strh	r3, [r7, #10]
 800acf4:	e005      	b.n	800ad02 <SD_Initialize+0x26>
 800acf6:	20ff      	movs	r0, #255	@ 0xff
 800acf8:	f7ff fec0 	bl	800aa7c <SD_SPI_ReadWriteByte>
 800acfc:	897b      	ldrh	r3, [r7, #10]
 800acfe:	3301      	adds	r3, #1
 800ad00:	817b      	strh	r3, [r7, #10]
 800ad02:	897b      	ldrh	r3, [r7, #10]
 800ad04:	2b09      	cmp	r3, #9
 800ad06:	d9f6      	bls.n	800acf6 <SD_Initialize+0x1a>
	retry=20;
 800ad08:	2314      	movs	r3, #20
 800ad0a:	81bb      	strh	r3, [r7, #12]
	do
	{
		r1=SD_SendCmd(CMD0,0,0x95);//enter to idle state
 800ad0c:	2295      	movs	r2, #149	@ 0x95
 800ad0e:	2100      	movs	r1, #0
 800ad10:	2000      	movs	r0, #0
 800ad12:	f7ff ff92 	bl	800ac3a <SD_SendCmd>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73fb      	strb	r3, [r7, #15]
	}while((r1!=0X01) && retry--);
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d004      	beq.n	800ad2a <SD_Initialize+0x4e>
 800ad20:	89bb      	ldrh	r3, [r7, #12]
 800ad22:	1e5a      	subs	r2, r3, #1
 800ad24:	81ba      	strh	r2, [r7, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1f0      	bne.n	800ad0c <SD_Initialize+0x30>
 	SD_Type=0;
 800ad2a:	4b6a      	ldr	r3, [pc, #424]	@ (800aed4 <SD_Initialize+0x1f8>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
    
	if(r1==0X01)
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	f040 80b7 	bne.w	800aea6 <SD_Initialize+0x1ca>
	{
		if(SD_SendCmd(CMD8,0x1AA,0x87)==1)//SD V2.0
 800ad38:	2287      	movs	r2, #135	@ 0x87
 800ad3a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800ad3e:	2008      	movs	r0, #8
 800ad40:	f7ff ff7b 	bl	800ac3a <SD_SendCmd>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d15f      	bne.n	800ae0a <SD_Initialize+0x12e>
		{
			for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);	//Get trailing return value of R7 resp
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	817b      	strh	r3, [r7, #10]
 800ad4e:	e00d      	b.n	800ad6c <SD_Initialize+0x90>
 800ad50:	897c      	ldrh	r4, [r7, #10]
 800ad52:	20ff      	movs	r0, #255	@ 0xff
 800ad54:	f7ff fe92 	bl	800aa7c <SD_SPI_ReadWriteByte>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	f104 0310 	add.w	r3, r4, #16
 800ad60:	443b      	add	r3, r7
 800ad62:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800ad66:	897b      	ldrh	r3, [r7, #10]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	817b      	strh	r3, [r7, #10]
 800ad6c:	897b      	ldrh	r3, [r7, #10]
 800ad6e:	2b03      	cmp	r3, #3
 800ad70:	d9ee      	bls.n	800ad50 <SD_Initialize+0x74>
			if(buf[2]==0X01&&buf[3]==0XAA)//is it support of 2.7~3.6V 
 800ad72:	79bb      	ldrb	r3, [r7, #6]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	f040 8096 	bne.w	800aea6 <SD_Initialize+0x1ca>
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	2baa      	cmp	r3, #170	@ 0xaa
 800ad7e:	f040 8092 	bne.w	800aea6 <SD_Initialize+0x1ca>
			{
				retry=0XFFFE;
 800ad82:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800ad86:	81bb      	strh	r3, [r7, #12]
				do
				{
					SD_SendCmd(CMD55,0,0X01);	
 800ad88:	2201      	movs	r2, #1
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	2037      	movs	r0, #55	@ 0x37
 800ad8e:	f7ff ff54 	bl	800ac3a <SD_SendCmd>
					r1=SD_SendCmd(CMD41,0x40000000,0X01);
 800ad92:	2201      	movs	r2, #1
 800ad94:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ad98:	2029      	movs	r0, #41	@ 0x29
 800ad9a:	f7ff ff4e 	bl	800ac3a <SD_SendCmd>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d004      	beq.n	800adb2 <SD_Initialize+0xd6>
 800ada8:	89bb      	ldrh	r3, [r7, #12]
 800adaa:	1e5a      	subs	r2, r3, #1
 800adac:	81ba      	strh	r2, [r7, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1ea      	bne.n	800ad88 <SD_Initialize+0xac>
				if(retry&&SD_SendCmd(CMD58,0,0X01)==0) //start to identify the SD2.0 version of sd card.
 800adb2:	89bb      	ldrh	r3, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d076      	beq.n	800aea6 <SD_Initialize+0x1ca>
 800adb8:	2201      	movs	r2, #1
 800adba:	2100      	movs	r1, #0
 800adbc:	203a      	movs	r0, #58	@ 0x3a
 800adbe:	f7ff ff3c 	bl	800ac3a <SD_SendCmd>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d16e      	bne.n	800aea6 <SD_Initialize+0x1ca>
				{
					for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);//get OCR
 800adc8:	2300      	movs	r3, #0
 800adca:	817b      	strh	r3, [r7, #10]
 800adcc:	e00d      	b.n	800adea <SD_Initialize+0x10e>
 800adce:	897c      	ldrh	r4, [r7, #10]
 800add0:	20ff      	movs	r0, #255	@ 0xff
 800add2:	f7ff fe53 	bl	800aa7c <SD_SPI_ReadWriteByte>
 800add6:	4603      	mov	r3, r0
 800add8:	461a      	mov	r2, r3
 800adda:	f104 0310 	add.w	r3, r4, #16
 800adde:	443b      	add	r3, r7
 800ade0:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800ade4:	897b      	ldrh	r3, [r7, #10]
 800ade6:	3301      	adds	r3, #1
 800ade8:	817b      	strh	r3, [r7, #10]
 800adea:	897b      	ldrh	r3, [r7, #10]
 800adec:	2b03      	cmp	r3, #3
 800adee:	d9ee      	bls.n	800adce <SD_Initialize+0xf2>
					if(buf[0]&0x40)SD_Type=SD_TYPE_V2HC;    //check CCS
 800adf0:	793b      	ldrb	r3, [r7, #4]
 800adf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d003      	beq.n	800ae02 <SD_Initialize+0x126>
 800adfa:	4b36      	ldr	r3, [pc, #216]	@ (800aed4 <SD_Initialize+0x1f8>)
 800adfc:	2206      	movs	r2, #6
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e051      	b.n	800aea6 <SD_Initialize+0x1ca>
					else SD_Type=SD_TYPE_V2;   
 800ae02:	4b34      	ldr	r3, [pc, #208]	@ (800aed4 <SD_Initialize+0x1f8>)
 800ae04:	2204      	movs	r2, #4
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	e04d      	b.n	800aea6 <SD_Initialize+0x1ca>
				}
			}
		}else//SD V1.x/ MMC	V3
		{
			SD_SendCmd(CMD55,0,0X01);		
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	2037      	movs	r0, #55	@ 0x37
 800ae10:	f7ff ff13 	bl	800ac3a <SD_SendCmd>
			r1=SD_SendCmd(CMD41,0,0X01);	
 800ae14:	2201      	movs	r2, #1
 800ae16:	2100      	movs	r1, #0
 800ae18:	2029      	movs	r0, #41	@ 0x29
 800ae1a:	f7ff ff0e 	bl	800ac3a <SD_SendCmd>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	73fb      	strb	r3, [r7, #15]
			if(r1<=1)
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d81a      	bhi.n	800ae5e <SD_Initialize+0x182>
			{		
				SD_Type=SD_TYPE_V1;
 800ae28:	4b2a      	ldr	r3, [pc, #168]	@ (800aed4 <SD_Initialize+0x1f8>)
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	701a      	strb	r2, [r3, #0]
				retry=0XFFFE;
 800ae2e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800ae32:	81bb      	strh	r3, [r7, #12]
				do //exit idle state
				{
					SD_SendCmd(CMD55,0,0X01);	
 800ae34:	2201      	movs	r2, #1
 800ae36:	2100      	movs	r1, #0
 800ae38:	2037      	movs	r0, #55	@ 0x37
 800ae3a:	f7ff fefe 	bl	800ac3a <SD_SendCmd>
					r1=SD_SendCmd(CMD41,0,0X01);
 800ae3e:	2201      	movs	r2, #1
 800ae40:	2100      	movs	r1, #0
 800ae42:	2029      	movs	r0, #41	@ 0x29
 800ae44:	f7ff fef9 	bl	800ac3a <SD_SendCmd>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d01a      	beq.n	800ae88 <SD_Initialize+0x1ac>
 800ae52:	89bb      	ldrh	r3, [r7, #12]
 800ae54:	1e5a      	subs	r2, r3, #1
 800ae56:	81ba      	strh	r2, [r7, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1eb      	bne.n	800ae34 <SD_Initialize+0x158>
 800ae5c:	e014      	b.n	800ae88 <SD_Initialize+0x1ac>
			}else
			{
				SD_Type=SD_TYPE_MMC;//MMC V3
 800ae5e:	4b1d      	ldr	r3, [pc, #116]	@ (800aed4 <SD_Initialize+0x1f8>)
 800ae60:	2201      	movs	r2, #1
 800ae62:	701a      	strb	r2, [r3, #0]
				retry=0XFFFE;
 800ae64:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800ae68:	81bb      	strh	r3, [r7, #12]
				do 
				{											    
					r1=SD_SendCmd(CMD1,0,0X01);
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	2001      	movs	r0, #1
 800ae70:	f7ff fee3 	bl	800ac3a <SD_SendCmd>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);  
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d004      	beq.n	800ae88 <SD_Initialize+0x1ac>
 800ae7e:	89bb      	ldrh	r3, [r7, #12]
 800ae80:	1e5a      	subs	r2, r3, #1
 800ae82:	81ba      	strh	r2, [r7, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1f0      	bne.n	800ae6a <SD_Initialize+0x18e>
			}
			if(retry==0||SD_SendCmd(CMD16,512,0X01)!=0)SD_Type=SD_TYPE_ERR;
 800ae88:	89bb      	ldrh	r3, [r7, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d008      	beq.n	800aea0 <SD_Initialize+0x1c4>
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ae94:	2010      	movs	r0, #16
 800ae96:	f7ff fed0 	bl	800ac3a <SD_SendCmd>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <SD_Initialize+0x1ca>
 800aea0:	4b0c      	ldr	r3, [pc, #48]	@ (800aed4 <SD_Initialize+0x1f8>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	701a      	strb	r2, [r3, #0]
		}
	}
	SD_DisSelect();
 800aea6:	f7ff fe05 	bl	800aab4 <SD_DisSelect>
	SD_SPI_SpeedHigh();
 800aeaa:	f7ff fdfc 	bl	800aaa6 <SD_SPI_SpeedHigh>
	if(SD_Type)return 0;
 800aeae:	4b09      	ldr	r3, [pc, #36]	@ (800aed4 <SD_Initialize+0x1f8>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <SD_Initialize+0x1de>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e005      	b.n	800aec6 <SD_Initialize+0x1ea>
	else if(r1)return r1; 	   
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <SD_Initialize+0x1e8>
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	e000      	b.n	800aec6 <SD_Initialize+0x1ea>
	return 0xaa;
 800aec4:	23aa      	movs	r3, #170	@ 0xaa
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd90      	pop	{r4, r7, pc}
 800aece:	bf00      	nop
 800aed0:	40020400 	.word	0x40020400
 800aed4:	2000214c 	.word	0x2000214c

0800aed8 <SD_ReadDisk>:
//buf: data buffer
//sector: sector
//cnt: totals of sectors]
//return: 0 ok, other for failure
unsigned char SD_ReadDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	4613      	mov	r3, r2
 800aee4:	71fb      	strb	r3, [r7, #7]
	unsigned char r1;
	if(SD_Type!=SD_TYPE_V2HC)sector <<= 9;
 800aee6:	4b21      	ldr	r3, [pc, #132]	@ (800af6c <SD_ReadDisk+0x94>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b06      	cmp	r3, #6
 800aeec:	d002      	beq.n	800aef4 <SD_ReadDisk+0x1c>
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	025b      	lsls	r3, r3, #9
 800aef2:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800aef4:	79fb      	ldrb	r3, [r7, #7]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d111      	bne.n	800af1e <SD_ReadDisk+0x46>
	{
		r1=SD_SendCmd(CMD17,sector,0X01);
 800aefa:	2201      	movs	r2, #1
 800aefc:	68b9      	ldr	r1, [r7, #8]
 800aefe:	2011      	movs	r0, #17
 800af00:	f7ff fe9b 	bl	800ac3a <SD_SendCmd>
 800af04:	4603      	mov	r3, r0
 800af06:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800af08:	7dfb      	ldrb	r3, [r7, #23]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d127      	bne.n	800af5e <SD_ReadDisk+0x86>
		{
			r1=SD_RecvData(buf,512);   
 800af0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff fe2d 	bl	800ab72 <SD_RecvData>
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]
 800af1c:	e01f      	b.n	800af5e <SD_ReadDisk+0x86>
		}
	}else
	{
		r1=SD_SendCmd(CMD18,sector,0X01);
 800af1e:	2201      	movs	r2, #1
 800af20:	68b9      	ldr	r1, [r7, #8]
 800af22:	2012      	movs	r0, #18
 800af24:	f7ff fe89 	bl	800ac3a <SD_SendCmd>
 800af28:	4603      	mov	r3, r0
 800af2a:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_RecvData(buf,512);
 800af2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7ff fe1e 	bl	800ab72 <SD_RecvData>
 800af36:	4603      	mov	r3, r0
 800af38:	75fb      	strb	r3, [r7, #23]
			buf+=512;  
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800af40:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0); 	
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	3b01      	subs	r3, #1
 800af46:	71fb      	strb	r3, [r7, #7]
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d002      	beq.n	800af54 <SD_ReadDisk+0x7c>
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d0eb      	beq.n	800af2c <SD_ReadDisk+0x54>
		SD_SendCmd(CMD12,0,0X01);	
 800af54:	2201      	movs	r2, #1
 800af56:	2100      	movs	r1, #0
 800af58:	200c      	movs	r0, #12
 800af5a:	f7ff fe6e 	bl	800ac3a <SD_SendCmd>
	}   
	SD_DisSelect();
 800af5e:	f7ff fda9 	bl	800aab4 <SD_DisSelect>
	return r1;//
 800af62:	7dfb      	ldrb	r3, [r7, #23]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	2000214c 	.word	0x2000214c

0800af70 <SD_WriteDisk>:
//buf: data buffer
//sector: start sector
//cnt: totals of sectors]
//return: 0 ok, other for failure
unsigned char SD_WriteDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	4613      	mov	r3, r2
 800af7c:	71fb      	strb	r3, [r7, #7]
	unsigned char r1;
	if(SD_Type!=SD_TYPE_V2HC)sector *= 512;
 800af7e:	4b2a      	ldr	r3, [pc, #168]	@ (800b028 <SD_WriteDisk+0xb8>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b06      	cmp	r3, #6
 800af84:	d002      	beq.n	800af8c <SD_WriteDisk+0x1c>
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	025b      	lsls	r3, r3, #9
 800af8a:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800af8c:	79fb      	ldrb	r3, [r7, #7]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d110      	bne.n	800afb4 <SD_WriteDisk+0x44>
	{
		r1=SD_SendCmd(CMD24,sector,0X01);
 800af92:	2201      	movs	r2, #1
 800af94:	68b9      	ldr	r1, [r7, #8]
 800af96:	2018      	movs	r0, #24
 800af98:	f7ff fe4f 	bl	800ac3a <SD_SendCmd>
 800af9c:	4603      	mov	r3, r0
 800af9e:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d138      	bne.n	800b018 <SD_WriteDisk+0xa8>
		{
			r1=SD_SendBlock(buf,0xFE); 
 800afa6:	21fe      	movs	r1, #254	@ 0xfe
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f7ff fe0a 	bl	800abc2 <SD_SendBlock>
 800afae:	4603      	mov	r3, r0
 800afb0:	75fb      	strb	r3, [r7, #23]
 800afb2:	e031      	b.n	800b018 <SD_WriteDisk+0xa8>
		}
	}else
	{
		if(SD_Type!=SD_TYPE_MMC)
 800afb4:	4b1c      	ldr	r3, [pc, #112]	@ (800b028 <SD_WriteDisk+0xb8>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d00a      	beq.n	800afd2 <SD_WriteDisk+0x62>
		{
			SD_SendCmd(CMD55,0,0X01);	
 800afbc:	2201      	movs	r2, #1
 800afbe:	2100      	movs	r1, #0
 800afc0:	2037      	movs	r0, #55	@ 0x37
 800afc2:	f7ff fe3a 	bl	800ac3a <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0X01);	
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	2201      	movs	r2, #1
 800afca:	4619      	mov	r1, r3
 800afcc:	2017      	movs	r0, #23
 800afce:	f7ff fe34 	bl	800ac3a <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0X01);
 800afd2:	2201      	movs	r2, #1
 800afd4:	68b9      	ldr	r1, [r7, #8]
 800afd6:	2019      	movs	r0, #25
 800afd8:	f7ff fe2f 	bl	800ac3a <SD_SendCmd>
 800afdc:	4603      	mov	r3, r0
 800afde:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800afe0:	7dfb      	ldrb	r3, [r7, #23]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d118      	bne.n	800b018 <SD_WriteDisk+0xa8>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); 
 800afe6:	21fc      	movs	r1, #252	@ 0xfc
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fdea 	bl	800abc2 <SD_SendBlock>
 800afee:	4603      	mov	r3, r0
 800aff0:	75fb      	strb	r3, [r7, #23]
				buf+=512;  
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800aff8:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	3b01      	subs	r3, #1
 800affe:	71fb      	strb	r3, [r7, #7]
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d002      	beq.n	800b00c <SD_WriteDisk+0x9c>
 800b006:	7dfb      	ldrb	r3, [r7, #23]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0ec      	beq.n	800afe6 <SD_WriteDisk+0x76>
			r1=SD_SendBlock(0,0xFD);
 800b00c:	21fd      	movs	r1, #253	@ 0xfd
 800b00e:	2000      	movs	r0, #0
 800b010:	f7ff fdd7 	bl	800abc2 <SD_SendBlock>
 800b014:	4603      	mov	r3, r0
 800b016:	75fb      	strb	r3, [r7, #23]
		}
	}   
	SD_DisSelect();
 800b018:	f7ff fd4c 	bl	800aab4 <SD_DisSelect>
	return r1;
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
}	   
 800b01e:	4618      	mov	r0, r3
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	2000214c 	.word	0x2000214c

0800b02c <malloc>:
 800b02c:	4b02      	ldr	r3, [pc, #8]	@ (800b038 <malloc+0xc>)
 800b02e:	4601      	mov	r1, r0
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	f000 b825 	b.w	800b080 <_malloc_r>
 800b036:	bf00      	nop
 800b038:	20000130 	.word	0x20000130

0800b03c <sbrk_aligned>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	4e0f      	ldr	r6, [pc, #60]	@ (800b07c <sbrk_aligned+0x40>)
 800b040:	460c      	mov	r4, r1
 800b042:	6831      	ldr	r1, [r6, #0]
 800b044:	4605      	mov	r5, r0
 800b046:	b911      	cbnz	r1, 800b04e <sbrk_aligned+0x12>
 800b048:	f000 faec 	bl	800b624 <_sbrk_r>
 800b04c:	6030      	str	r0, [r6, #0]
 800b04e:	4621      	mov	r1, r4
 800b050:	4628      	mov	r0, r5
 800b052:	f000 fae7 	bl	800b624 <_sbrk_r>
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	d103      	bne.n	800b062 <sbrk_aligned+0x26>
 800b05a:	f04f 34ff 	mov.w	r4, #4294967295
 800b05e:	4620      	mov	r0, r4
 800b060:	bd70      	pop	{r4, r5, r6, pc}
 800b062:	1cc4      	adds	r4, r0, #3
 800b064:	f024 0403 	bic.w	r4, r4, #3
 800b068:	42a0      	cmp	r0, r4
 800b06a:	d0f8      	beq.n	800b05e <sbrk_aligned+0x22>
 800b06c:	1a21      	subs	r1, r4, r0
 800b06e:	4628      	mov	r0, r5
 800b070:	f000 fad8 	bl	800b624 <_sbrk_r>
 800b074:	3001      	adds	r0, #1
 800b076:	d1f2      	bne.n	800b05e <sbrk_aligned+0x22>
 800b078:	e7ef      	b.n	800b05a <sbrk_aligned+0x1e>
 800b07a:	bf00      	nop
 800b07c:	20002150 	.word	0x20002150

0800b080 <_malloc_r>:
 800b080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b084:	1ccd      	adds	r5, r1, #3
 800b086:	f025 0503 	bic.w	r5, r5, #3
 800b08a:	3508      	adds	r5, #8
 800b08c:	2d0c      	cmp	r5, #12
 800b08e:	bf38      	it	cc
 800b090:	250c      	movcc	r5, #12
 800b092:	2d00      	cmp	r5, #0
 800b094:	4606      	mov	r6, r0
 800b096:	db01      	blt.n	800b09c <_malloc_r+0x1c>
 800b098:	42a9      	cmp	r1, r5
 800b09a:	d904      	bls.n	800b0a6 <_malloc_r+0x26>
 800b09c:	230c      	movs	r3, #12
 800b09e:	6033      	str	r3, [r6, #0]
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b17c <_malloc_r+0xfc>
 800b0aa:	f000 f869 	bl	800b180 <__malloc_lock>
 800b0ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b0b2:	461c      	mov	r4, r3
 800b0b4:	bb44      	cbnz	r4, 800b108 <_malloc_r+0x88>
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff ffbf 	bl	800b03c <sbrk_aligned>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	d158      	bne.n	800b176 <_malloc_r+0xf6>
 800b0c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b0c8:	4627      	mov	r7, r4
 800b0ca:	2f00      	cmp	r7, #0
 800b0cc:	d143      	bne.n	800b156 <_malloc_r+0xd6>
 800b0ce:	2c00      	cmp	r4, #0
 800b0d0:	d04b      	beq.n	800b16a <_malloc_r+0xea>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	eb04 0903 	add.w	r9, r4, r3
 800b0dc:	f000 faa2 	bl	800b624 <_sbrk_r>
 800b0e0:	4581      	cmp	r9, r0
 800b0e2:	d142      	bne.n	800b16a <_malloc_r+0xea>
 800b0e4:	6821      	ldr	r1, [r4, #0]
 800b0e6:	1a6d      	subs	r5, r5, r1
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ffa6 	bl	800b03c <sbrk_aligned>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d03a      	beq.n	800b16a <_malloc_r+0xea>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	442b      	add	r3, r5
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	bb62      	cbnz	r2, 800b15c <_malloc_r+0xdc>
 800b102:	f8c8 7000 	str.w	r7, [r8]
 800b106:	e00f      	b.n	800b128 <_malloc_r+0xa8>
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	1b52      	subs	r2, r2, r5
 800b10c:	d420      	bmi.n	800b150 <_malloc_r+0xd0>
 800b10e:	2a0b      	cmp	r2, #11
 800b110:	d917      	bls.n	800b142 <_malloc_r+0xc2>
 800b112:	1961      	adds	r1, r4, r5
 800b114:	42a3      	cmp	r3, r4
 800b116:	6025      	str	r5, [r4, #0]
 800b118:	bf18      	it	ne
 800b11a:	6059      	strne	r1, [r3, #4]
 800b11c:	6863      	ldr	r3, [r4, #4]
 800b11e:	bf08      	it	eq
 800b120:	f8c8 1000 	streq.w	r1, [r8]
 800b124:	5162      	str	r2, [r4, r5]
 800b126:	604b      	str	r3, [r1, #4]
 800b128:	4630      	mov	r0, r6
 800b12a:	f000 f82f 	bl	800b18c <__malloc_unlock>
 800b12e:	f104 000b 	add.w	r0, r4, #11
 800b132:	1d23      	adds	r3, r4, #4
 800b134:	f020 0007 	bic.w	r0, r0, #7
 800b138:	1ac2      	subs	r2, r0, r3
 800b13a:	bf1c      	itt	ne
 800b13c:	1a1b      	subne	r3, r3, r0
 800b13e:	50a3      	strne	r3, [r4, r2]
 800b140:	e7af      	b.n	800b0a2 <_malloc_r+0x22>
 800b142:	6862      	ldr	r2, [r4, #4]
 800b144:	42a3      	cmp	r3, r4
 800b146:	bf0c      	ite	eq
 800b148:	f8c8 2000 	streq.w	r2, [r8]
 800b14c:	605a      	strne	r2, [r3, #4]
 800b14e:	e7eb      	b.n	800b128 <_malloc_r+0xa8>
 800b150:	4623      	mov	r3, r4
 800b152:	6864      	ldr	r4, [r4, #4]
 800b154:	e7ae      	b.n	800b0b4 <_malloc_r+0x34>
 800b156:	463c      	mov	r4, r7
 800b158:	687f      	ldr	r7, [r7, #4]
 800b15a:	e7b6      	b.n	800b0ca <_malloc_r+0x4a>
 800b15c:	461a      	mov	r2, r3
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	42a3      	cmp	r3, r4
 800b162:	d1fb      	bne.n	800b15c <_malloc_r+0xdc>
 800b164:	2300      	movs	r3, #0
 800b166:	6053      	str	r3, [r2, #4]
 800b168:	e7de      	b.n	800b128 <_malloc_r+0xa8>
 800b16a:	230c      	movs	r3, #12
 800b16c:	6033      	str	r3, [r6, #0]
 800b16e:	4630      	mov	r0, r6
 800b170:	f000 f80c 	bl	800b18c <__malloc_unlock>
 800b174:	e794      	b.n	800b0a0 <_malloc_r+0x20>
 800b176:	6005      	str	r5, [r0, #0]
 800b178:	e7d6      	b.n	800b128 <_malloc_r+0xa8>
 800b17a:	bf00      	nop
 800b17c:	20002154 	.word	0x20002154

0800b180 <__malloc_lock>:
 800b180:	4801      	ldr	r0, [pc, #4]	@ (800b188 <__malloc_lock+0x8>)
 800b182:	f000 ba9c 	b.w	800b6be <__retarget_lock_acquire_recursive>
 800b186:	bf00      	nop
 800b188:	20002298 	.word	0x20002298

0800b18c <__malloc_unlock>:
 800b18c:	4801      	ldr	r0, [pc, #4]	@ (800b194 <__malloc_unlock+0x8>)
 800b18e:	f000 ba97 	b.w	800b6c0 <__retarget_lock_release_recursive>
 800b192:	bf00      	nop
 800b194:	20002298 	.word	0x20002298

0800b198 <std>:
 800b198:	2300      	movs	r3, #0
 800b19a:	b510      	push	{r4, lr}
 800b19c:	4604      	mov	r4, r0
 800b19e:	e9c0 3300 	strd	r3, r3, [r0]
 800b1a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1a6:	6083      	str	r3, [r0, #8]
 800b1a8:	8181      	strh	r1, [r0, #12]
 800b1aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800b1ac:	81c2      	strh	r2, [r0, #14]
 800b1ae:	6183      	str	r3, [r0, #24]
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	2208      	movs	r2, #8
 800b1b4:	305c      	adds	r0, #92	@ 0x5c
 800b1b6:	f000 f9f9 	bl	800b5ac <memset>
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f0 <std+0x58>)
 800b1bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1be:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f4 <std+0x5c>)
 800b1c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f8 <std+0x60>)
 800b1c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <std+0x64>)
 800b1c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b200 <std+0x68>)
 800b1cc:	6224      	str	r4, [r4, #32]
 800b1ce:	429c      	cmp	r4, r3
 800b1d0:	d006      	beq.n	800b1e0 <std+0x48>
 800b1d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1d6:	4294      	cmp	r4, r2
 800b1d8:	d002      	beq.n	800b1e0 <std+0x48>
 800b1da:	33d0      	adds	r3, #208	@ 0xd0
 800b1dc:	429c      	cmp	r4, r3
 800b1de:	d105      	bne.n	800b1ec <std+0x54>
 800b1e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e8:	f000 ba68 	b.w	800b6bc <__retarget_lock_init_recursive>
 800b1ec:	bd10      	pop	{r4, pc}
 800b1ee:	bf00      	nop
 800b1f0:	0800b3fd 	.word	0x0800b3fd
 800b1f4:	0800b41f 	.word	0x0800b41f
 800b1f8:	0800b457 	.word	0x0800b457
 800b1fc:	0800b47b 	.word	0x0800b47b
 800b200:	20002158 	.word	0x20002158

0800b204 <stdio_exit_handler>:
 800b204:	4a02      	ldr	r2, [pc, #8]	@ (800b210 <stdio_exit_handler+0xc>)
 800b206:	4903      	ldr	r1, [pc, #12]	@ (800b214 <stdio_exit_handler+0x10>)
 800b208:	4803      	ldr	r0, [pc, #12]	@ (800b218 <stdio_exit_handler+0x14>)
 800b20a:	f000 b869 	b.w	800b2e0 <_fwalk_sglue>
 800b20e:	bf00      	nop
 800b210:	20000124 	.word	0x20000124
 800b214:	0800bdfd 	.word	0x0800bdfd
 800b218:	20000134 	.word	0x20000134

0800b21c <cleanup_stdio>:
 800b21c:	6841      	ldr	r1, [r0, #4]
 800b21e:	4b0c      	ldr	r3, [pc, #48]	@ (800b250 <cleanup_stdio+0x34>)
 800b220:	4299      	cmp	r1, r3
 800b222:	b510      	push	{r4, lr}
 800b224:	4604      	mov	r4, r0
 800b226:	d001      	beq.n	800b22c <cleanup_stdio+0x10>
 800b228:	f000 fde8 	bl	800bdfc <_fflush_r>
 800b22c:	68a1      	ldr	r1, [r4, #8]
 800b22e:	4b09      	ldr	r3, [pc, #36]	@ (800b254 <cleanup_stdio+0x38>)
 800b230:	4299      	cmp	r1, r3
 800b232:	d002      	beq.n	800b23a <cleanup_stdio+0x1e>
 800b234:	4620      	mov	r0, r4
 800b236:	f000 fde1 	bl	800bdfc <_fflush_r>
 800b23a:	68e1      	ldr	r1, [r4, #12]
 800b23c:	4b06      	ldr	r3, [pc, #24]	@ (800b258 <cleanup_stdio+0x3c>)
 800b23e:	4299      	cmp	r1, r3
 800b240:	d004      	beq.n	800b24c <cleanup_stdio+0x30>
 800b242:	4620      	mov	r0, r4
 800b244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b248:	f000 bdd8 	b.w	800bdfc <_fflush_r>
 800b24c:	bd10      	pop	{r4, pc}
 800b24e:	bf00      	nop
 800b250:	20002158 	.word	0x20002158
 800b254:	200021c0 	.word	0x200021c0
 800b258:	20002228 	.word	0x20002228

0800b25c <global_stdio_init.part.0>:
 800b25c:	b510      	push	{r4, lr}
 800b25e:	4b0b      	ldr	r3, [pc, #44]	@ (800b28c <global_stdio_init.part.0+0x30>)
 800b260:	4c0b      	ldr	r4, [pc, #44]	@ (800b290 <global_stdio_init.part.0+0x34>)
 800b262:	4a0c      	ldr	r2, [pc, #48]	@ (800b294 <global_stdio_init.part.0+0x38>)
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	4620      	mov	r0, r4
 800b268:	2200      	movs	r2, #0
 800b26a:	2104      	movs	r1, #4
 800b26c:	f7ff ff94 	bl	800b198 <std>
 800b270:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b274:	2201      	movs	r2, #1
 800b276:	2109      	movs	r1, #9
 800b278:	f7ff ff8e 	bl	800b198 <std>
 800b27c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b280:	2202      	movs	r2, #2
 800b282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b286:	2112      	movs	r1, #18
 800b288:	f7ff bf86 	b.w	800b198 <std>
 800b28c:	20002290 	.word	0x20002290
 800b290:	20002158 	.word	0x20002158
 800b294:	0800b205 	.word	0x0800b205

0800b298 <__sfp_lock_acquire>:
 800b298:	4801      	ldr	r0, [pc, #4]	@ (800b2a0 <__sfp_lock_acquire+0x8>)
 800b29a:	f000 ba10 	b.w	800b6be <__retarget_lock_acquire_recursive>
 800b29e:	bf00      	nop
 800b2a0:	20002299 	.word	0x20002299

0800b2a4 <__sfp_lock_release>:
 800b2a4:	4801      	ldr	r0, [pc, #4]	@ (800b2ac <__sfp_lock_release+0x8>)
 800b2a6:	f000 ba0b 	b.w	800b6c0 <__retarget_lock_release_recursive>
 800b2aa:	bf00      	nop
 800b2ac:	20002299 	.word	0x20002299

0800b2b0 <__sinit>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	f7ff fff0 	bl	800b298 <__sfp_lock_acquire>
 800b2b8:	6a23      	ldr	r3, [r4, #32]
 800b2ba:	b11b      	cbz	r3, 800b2c4 <__sinit+0x14>
 800b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c0:	f7ff bff0 	b.w	800b2a4 <__sfp_lock_release>
 800b2c4:	4b04      	ldr	r3, [pc, #16]	@ (800b2d8 <__sinit+0x28>)
 800b2c6:	6223      	str	r3, [r4, #32]
 800b2c8:	4b04      	ldr	r3, [pc, #16]	@ (800b2dc <__sinit+0x2c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1f5      	bne.n	800b2bc <__sinit+0xc>
 800b2d0:	f7ff ffc4 	bl	800b25c <global_stdio_init.part.0>
 800b2d4:	e7f2      	b.n	800b2bc <__sinit+0xc>
 800b2d6:	bf00      	nop
 800b2d8:	0800b21d 	.word	0x0800b21d
 800b2dc:	20002290 	.word	0x20002290

0800b2e0 <_fwalk_sglue>:
 800b2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	4688      	mov	r8, r1
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	2600      	movs	r6, #0
 800b2ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2f0:	f1b9 0901 	subs.w	r9, r9, #1
 800b2f4:	d505      	bpl.n	800b302 <_fwalk_sglue+0x22>
 800b2f6:	6824      	ldr	r4, [r4, #0]
 800b2f8:	2c00      	cmp	r4, #0
 800b2fa:	d1f7      	bne.n	800b2ec <_fwalk_sglue+0xc>
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b302:	89ab      	ldrh	r3, [r5, #12]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d907      	bls.n	800b318 <_fwalk_sglue+0x38>
 800b308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b30c:	3301      	adds	r3, #1
 800b30e:	d003      	beq.n	800b318 <_fwalk_sglue+0x38>
 800b310:	4629      	mov	r1, r5
 800b312:	4638      	mov	r0, r7
 800b314:	47c0      	blx	r8
 800b316:	4306      	orrs	r6, r0
 800b318:	3568      	adds	r5, #104	@ 0x68
 800b31a:	e7e9      	b.n	800b2f0 <_fwalk_sglue+0x10>

0800b31c <iprintf>:
 800b31c:	b40f      	push	{r0, r1, r2, r3}
 800b31e:	b507      	push	{r0, r1, r2, lr}
 800b320:	4906      	ldr	r1, [pc, #24]	@ (800b33c <iprintf+0x20>)
 800b322:	ab04      	add	r3, sp, #16
 800b324:	6808      	ldr	r0, [r1, #0]
 800b326:	f853 2b04 	ldr.w	r2, [r3], #4
 800b32a:	6881      	ldr	r1, [r0, #8]
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	f000 fa3d 	bl	800b7ac <_vfiprintf_r>
 800b332:	b003      	add	sp, #12
 800b334:	f85d eb04 	ldr.w	lr, [sp], #4
 800b338:	b004      	add	sp, #16
 800b33a:	4770      	bx	lr
 800b33c:	20000130 	.word	0x20000130

0800b340 <_puts_r>:
 800b340:	6a03      	ldr	r3, [r0, #32]
 800b342:	b570      	push	{r4, r5, r6, lr}
 800b344:	6884      	ldr	r4, [r0, #8]
 800b346:	4605      	mov	r5, r0
 800b348:	460e      	mov	r6, r1
 800b34a:	b90b      	cbnz	r3, 800b350 <_puts_r+0x10>
 800b34c:	f7ff ffb0 	bl	800b2b0 <__sinit>
 800b350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b352:	07db      	lsls	r3, r3, #31
 800b354:	d405      	bmi.n	800b362 <_puts_r+0x22>
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	0598      	lsls	r0, r3, #22
 800b35a:	d402      	bmi.n	800b362 <_puts_r+0x22>
 800b35c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b35e:	f000 f9ae 	bl	800b6be <__retarget_lock_acquire_recursive>
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	0719      	lsls	r1, r3, #28
 800b366:	d502      	bpl.n	800b36e <_puts_r+0x2e>
 800b368:	6923      	ldr	r3, [r4, #16]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d135      	bne.n	800b3da <_puts_r+0x9a>
 800b36e:	4621      	mov	r1, r4
 800b370:	4628      	mov	r0, r5
 800b372:	f000 f8c5 	bl	800b500 <__swsetup_r>
 800b376:	b380      	cbz	r0, 800b3da <_puts_r+0x9a>
 800b378:	f04f 35ff 	mov.w	r5, #4294967295
 800b37c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b37e:	07da      	lsls	r2, r3, #31
 800b380:	d405      	bmi.n	800b38e <_puts_r+0x4e>
 800b382:	89a3      	ldrh	r3, [r4, #12]
 800b384:	059b      	lsls	r3, r3, #22
 800b386:	d402      	bmi.n	800b38e <_puts_r+0x4e>
 800b388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b38a:	f000 f999 	bl	800b6c0 <__retarget_lock_release_recursive>
 800b38e:	4628      	mov	r0, r5
 800b390:	bd70      	pop	{r4, r5, r6, pc}
 800b392:	2b00      	cmp	r3, #0
 800b394:	da04      	bge.n	800b3a0 <_puts_r+0x60>
 800b396:	69a2      	ldr	r2, [r4, #24]
 800b398:	429a      	cmp	r2, r3
 800b39a:	dc17      	bgt.n	800b3cc <_puts_r+0x8c>
 800b39c:	290a      	cmp	r1, #10
 800b39e:	d015      	beq.n	800b3cc <_puts_r+0x8c>
 800b3a0:	6823      	ldr	r3, [r4, #0]
 800b3a2:	1c5a      	adds	r2, r3, #1
 800b3a4:	6022      	str	r2, [r4, #0]
 800b3a6:	7019      	strb	r1, [r3, #0]
 800b3a8:	68a3      	ldr	r3, [r4, #8]
 800b3aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	60a3      	str	r3, [r4, #8]
 800b3b2:	2900      	cmp	r1, #0
 800b3b4:	d1ed      	bne.n	800b392 <_puts_r+0x52>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da11      	bge.n	800b3de <_puts_r+0x9e>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	210a      	movs	r1, #10
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 f85f 	bl	800b482 <__swbuf_r>
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d0d7      	beq.n	800b378 <_puts_r+0x38>
 800b3c8:	250a      	movs	r5, #10
 800b3ca:	e7d7      	b.n	800b37c <_puts_r+0x3c>
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f000 f857 	bl	800b482 <__swbuf_r>
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	d1e7      	bne.n	800b3a8 <_puts_r+0x68>
 800b3d8:	e7ce      	b.n	800b378 <_puts_r+0x38>
 800b3da:	3e01      	subs	r6, #1
 800b3dc:	e7e4      	b.n	800b3a8 <_puts_r+0x68>
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	6022      	str	r2, [r4, #0]
 800b3e4:	220a      	movs	r2, #10
 800b3e6:	701a      	strb	r2, [r3, #0]
 800b3e8:	e7ee      	b.n	800b3c8 <_puts_r+0x88>
	...

0800b3ec <puts>:
 800b3ec:	4b02      	ldr	r3, [pc, #8]	@ (800b3f8 <puts+0xc>)
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	f7ff bfa5 	b.w	800b340 <_puts_r>
 800b3f6:	bf00      	nop
 800b3f8:	20000130 	.word	0x20000130

0800b3fc <__sread>:
 800b3fc:	b510      	push	{r4, lr}
 800b3fe:	460c      	mov	r4, r1
 800b400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b404:	f000 f8fc 	bl	800b600 <_read_r>
 800b408:	2800      	cmp	r0, #0
 800b40a:	bfab      	itete	ge
 800b40c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b40e:	89a3      	ldrhlt	r3, [r4, #12]
 800b410:	181b      	addge	r3, r3, r0
 800b412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b416:	bfac      	ite	ge
 800b418:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b41a:	81a3      	strhlt	r3, [r4, #12]
 800b41c:	bd10      	pop	{r4, pc}

0800b41e <__swrite>:
 800b41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b422:	461f      	mov	r7, r3
 800b424:	898b      	ldrh	r3, [r1, #12]
 800b426:	05db      	lsls	r3, r3, #23
 800b428:	4605      	mov	r5, r0
 800b42a:	460c      	mov	r4, r1
 800b42c:	4616      	mov	r6, r2
 800b42e:	d505      	bpl.n	800b43c <__swrite+0x1e>
 800b430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b434:	2302      	movs	r3, #2
 800b436:	2200      	movs	r2, #0
 800b438:	f000 f8d0 	bl	800b5dc <_lseek_r>
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b446:	81a3      	strh	r3, [r4, #12]
 800b448:	4632      	mov	r2, r6
 800b44a:	463b      	mov	r3, r7
 800b44c:	4628      	mov	r0, r5
 800b44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b452:	f000 b8f7 	b.w	800b644 <_write_r>

0800b456 <__sseek>:
 800b456:	b510      	push	{r4, lr}
 800b458:	460c      	mov	r4, r1
 800b45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b45e:	f000 f8bd 	bl	800b5dc <_lseek_r>
 800b462:	1c43      	adds	r3, r0, #1
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	bf15      	itete	ne
 800b468:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b46a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b46e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b472:	81a3      	strheq	r3, [r4, #12]
 800b474:	bf18      	it	ne
 800b476:	81a3      	strhne	r3, [r4, #12]
 800b478:	bd10      	pop	{r4, pc}

0800b47a <__sclose>:
 800b47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b47e:	f000 b89d 	b.w	800b5bc <_close_r>

0800b482 <__swbuf_r>:
 800b482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b484:	460e      	mov	r6, r1
 800b486:	4614      	mov	r4, r2
 800b488:	4605      	mov	r5, r0
 800b48a:	b118      	cbz	r0, 800b494 <__swbuf_r+0x12>
 800b48c:	6a03      	ldr	r3, [r0, #32]
 800b48e:	b90b      	cbnz	r3, 800b494 <__swbuf_r+0x12>
 800b490:	f7ff ff0e 	bl	800b2b0 <__sinit>
 800b494:	69a3      	ldr	r3, [r4, #24]
 800b496:	60a3      	str	r3, [r4, #8]
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	071a      	lsls	r2, r3, #28
 800b49c:	d501      	bpl.n	800b4a2 <__swbuf_r+0x20>
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	b943      	cbnz	r3, 800b4b4 <__swbuf_r+0x32>
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f000 f82b 	bl	800b500 <__swsetup_r>
 800b4aa:	b118      	cbz	r0, 800b4b4 <__swbuf_r+0x32>
 800b4ac:	f04f 37ff 	mov.w	r7, #4294967295
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	6922      	ldr	r2, [r4, #16]
 800b4b8:	1a98      	subs	r0, r3, r2
 800b4ba:	6963      	ldr	r3, [r4, #20]
 800b4bc:	b2f6      	uxtb	r6, r6
 800b4be:	4283      	cmp	r3, r0
 800b4c0:	4637      	mov	r7, r6
 800b4c2:	dc05      	bgt.n	800b4d0 <__swbuf_r+0x4e>
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f000 fc98 	bl	800bdfc <_fflush_r>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d1ed      	bne.n	800b4ac <__swbuf_r+0x2a>
 800b4d0:	68a3      	ldr	r3, [r4, #8]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	60a3      	str	r3, [r4, #8]
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	1c5a      	adds	r2, r3, #1
 800b4da:	6022      	str	r2, [r4, #0]
 800b4dc:	701e      	strb	r6, [r3, #0]
 800b4de:	6962      	ldr	r2, [r4, #20]
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d004      	beq.n	800b4f0 <__swbuf_r+0x6e>
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	07db      	lsls	r3, r3, #31
 800b4ea:	d5e1      	bpl.n	800b4b0 <__swbuf_r+0x2e>
 800b4ec:	2e0a      	cmp	r6, #10
 800b4ee:	d1df      	bne.n	800b4b0 <__swbuf_r+0x2e>
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f000 fc82 	bl	800bdfc <_fflush_r>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0d9      	beq.n	800b4b0 <__swbuf_r+0x2e>
 800b4fc:	e7d6      	b.n	800b4ac <__swbuf_r+0x2a>
	...

0800b500 <__swsetup_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4b29      	ldr	r3, [pc, #164]	@ (800b5a8 <__swsetup_r+0xa8>)
 800b504:	4605      	mov	r5, r0
 800b506:	6818      	ldr	r0, [r3, #0]
 800b508:	460c      	mov	r4, r1
 800b50a:	b118      	cbz	r0, 800b514 <__swsetup_r+0x14>
 800b50c:	6a03      	ldr	r3, [r0, #32]
 800b50e:	b90b      	cbnz	r3, 800b514 <__swsetup_r+0x14>
 800b510:	f7ff fece 	bl	800b2b0 <__sinit>
 800b514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b518:	0719      	lsls	r1, r3, #28
 800b51a:	d422      	bmi.n	800b562 <__swsetup_r+0x62>
 800b51c:	06da      	lsls	r2, r3, #27
 800b51e:	d407      	bmi.n	800b530 <__swsetup_r+0x30>
 800b520:	2209      	movs	r2, #9
 800b522:	602a      	str	r2, [r5, #0]
 800b524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	e033      	b.n	800b598 <__swsetup_r+0x98>
 800b530:	0758      	lsls	r0, r3, #29
 800b532:	d512      	bpl.n	800b55a <__swsetup_r+0x5a>
 800b534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b536:	b141      	cbz	r1, 800b54a <__swsetup_r+0x4a>
 800b538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b53c:	4299      	cmp	r1, r3
 800b53e:	d002      	beq.n	800b546 <__swsetup_r+0x46>
 800b540:	4628      	mov	r0, r5
 800b542:	f000 f8bf 	bl	800b6c4 <_free_r>
 800b546:	2300      	movs	r3, #0
 800b548:	6363      	str	r3, [r4, #52]	@ 0x34
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	2300      	movs	r3, #0
 800b554:	6063      	str	r3, [r4, #4]
 800b556:	6923      	ldr	r3, [r4, #16]
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f043 0308 	orr.w	r3, r3, #8
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	b94b      	cbnz	r3, 800b57a <__swsetup_r+0x7a>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b56c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b570:	d003      	beq.n	800b57a <__swsetup_r+0x7a>
 800b572:	4621      	mov	r1, r4
 800b574:	4628      	mov	r0, r5
 800b576:	f000 fc8f 	bl	800be98 <__smakebuf_r>
 800b57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b57e:	f013 0201 	ands.w	r2, r3, #1
 800b582:	d00a      	beq.n	800b59a <__swsetup_r+0x9a>
 800b584:	2200      	movs	r2, #0
 800b586:	60a2      	str	r2, [r4, #8]
 800b588:	6962      	ldr	r2, [r4, #20]
 800b58a:	4252      	negs	r2, r2
 800b58c:	61a2      	str	r2, [r4, #24]
 800b58e:	6922      	ldr	r2, [r4, #16]
 800b590:	b942      	cbnz	r2, 800b5a4 <__swsetup_r+0xa4>
 800b592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b596:	d1c5      	bne.n	800b524 <__swsetup_r+0x24>
 800b598:	bd38      	pop	{r3, r4, r5, pc}
 800b59a:	0799      	lsls	r1, r3, #30
 800b59c:	bf58      	it	pl
 800b59e:	6962      	ldrpl	r2, [r4, #20]
 800b5a0:	60a2      	str	r2, [r4, #8]
 800b5a2:	e7f4      	b.n	800b58e <__swsetup_r+0x8e>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e7f7      	b.n	800b598 <__swsetup_r+0x98>
 800b5a8:	20000130 	.word	0x20000130

0800b5ac <memset>:
 800b5ac:	4402      	add	r2, r0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d100      	bne.n	800b5b6 <memset+0xa>
 800b5b4:	4770      	bx	lr
 800b5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5ba:	e7f9      	b.n	800b5b0 <memset+0x4>

0800b5bc <_close_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d06      	ldr	r5, [pc, #24]	@ (800b5d8 <_close_r+0x1c>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	f7f5 fa9f 	bl	8000b0a <_close>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_close_r+0x1a>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_close_r+0x1a>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20002294 	.word	0x20002294

0800b5dc <_lseek_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d07      	ldr	r5, [pc, #28]	@ (800b5fc <_lseek_r+0x20>)
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	4608      	mov	r0, r1
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	602a      	str	r2, [r5, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f7f5 fab4 	bl	8000b58 <_lseek>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_lseek_r+0x1e>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_lseek_r+0x1e>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	20002294 	.word	0x20002294

0800b600 <_read_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4d07      	ldr	r5, [pc, #28]	@ (800b620 <_read_r+0x20>)
 800b604:	4604      	mov	r4, r0
 800b606:	4608      	mov	r0, r1
 800b608:	4611      	mov	r1, r2
 800b60a:	2200      	movs	r2, #0
 800b60c:	602a      	str	r2, [r5, #0]
 800b60e:	461a      	mov	r2, r3
 800b610:	f7f5 fa5e 	bl	8000ad0 <_read>
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	d102      	bne.n	800b61e <_read_r+0x1e>
 800b618:	682b      	ldr	r3, [r5, #0]
 800b61a:	b103      	cbz	r3, 800b61e <_read_r+0x1e>
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	20002294 	.word	0x20002294

0800b624 <_sbrk_r>:
 800b624:	b538      	push	{r3, r4, r5, lr}
 800b626:	4d06      	ldr	r5, [pc, #24]	@ (800b640 <_sbrk_r+0x1c>)
 800b628:	2300      	movs	r3, #0
 800b62a:	4604      	mov	r4, r0
 800b62c:	4608      	mov	r0, r1
 800b62e:	602b      	str	r3, [r5, #0]
 800b630:	f7f5 faa0 	bl	8000b74 <_sbrk>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	d102      	bne.n	800b63e <_sbrk_r+0x1a>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b103      	cbz	r3, 800b63e <_sbrk_r+0x1a>
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	20002294 	.word	0x20002294

0800b644 <_write_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4d07      	ldr	r5, [pc, #28]	@ (800b664 <_write_r+0x20>)
 800b648:	4604      	mov	r4, r0
 800b64a:	4608      	mov	r0, r1
 800b64c:	4611      	mov	r1, r2
 800b64e:	2200      	movs	r2, #0
 800b650:	602a      	str	r2, [r5, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	f7f5 f939 	bl	80008ca <_write>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d102      	bne.n	800b662 <_write_r+0x1e>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	b103      	cbz	r3, 800b662 <_write_r+0x1e>
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	20002294 	.word	0x20002294

0800b668 <__errno>:
 800b668:	4b01      	ldr	r3, [pc, #4]	@ (800b670 <__errno+0x8>)
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	20000130 	.word	0x20000130

0800b674 <__libc_init_array>:
 800b674:	b570      	push	{r4, r5, r6, lr}
 800b676:	4d0d      	ldr	r5, [pc, #52]	@ (800b6ac <__libc_init_array+0x38>)
 800b678:	4c0d      	ldr	r4, [pc, #52]	@ (800b6b0 <__libc_init_array+0x3c>)
 800b67a:	1b64      	subs	r4, r4, r5
 800b67c:	10a4      	asrs	r4, r4, #2
 800b67e:	2600      	movs	r6, #0
 800b680:	42a6      	cmp	r6, r4
 800b682:	d109      	bne.n	800b698 <__libc_init_array+0x24>
 800b684:	4d0b      	ldr	r5, [pc, #44]	@ (800b6b4 <__libc_init_array+0x40>)
 800b686:	4c0c      	ldr	r4, [pc, #48]	@ (800b6b8 <__libc_init_array+0x44>)
 800b688:	f000 fc64 	bl	800bf54 <_init>
 800b68c:	1b64      	subs	r4, r4, r5
 800b68e:	10a4      	asrs	r4, r4, #2
 800b690:	2600      	movs	r6, #0
 800b692:	42a6      	cmp	r6, r4
 800b694:	d105      	bne.n	800b6a2 <__libc_init_array+0x2e>
 800b696:	bd70      	pop	{r4, r5, r6, pc}
 800b698:	f855 3b04 	ldr.w	r3, [r5], #4
 800b69c:	4798      	blx	r3
 800b69e:	3601      	adds	r6, #1
 800b6a0:	e7ee      	b.n	800b680 <__libc_init_array+0xc>
 800b6a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a6:	4798      	blx	r3
 800b6a8:	3601      	adds	r6, #1
 800b6aa:	e7f2      	b.n	800b692 <__libc_init_array+0x1e>
 800b6ac:	080104ec 	.word	0x080104ec
 800b6b0:	080104ec 	.word	0x080104ec
 800b6b4:	080104ec 	.word	0x080104ec
 800b6b8:	080104f0 	.word	0x080104f0

0800b6bc <__retarget_lock_init_recursive>:
 800b6bc:	4770      	bx	lr

0800b6be <__retarget_lock_acquire_recursive>:
 800b6be:	4770      	bx	lr

0800b6c0 <__retarget_lock_release_recursive>:
 800b6c0:	4770      	bx	lr
	...

0800b6c4 <_free_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	2900      	cmp	r1, #0
 800b6ca:	d041      	beq.n	800b750 <_free_r+0x8c>
 800b6cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d0:	1f0c      	subs	r4, r1, #4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	bfb8      	it	lt
 800b6d6:	18e4      	addlt	r4, r4, r3
 800b6d8:	f7ff fd52 	bl	800b180 <__malloc_lock>
 800b6dc:	4a1d      	ldr	r2, [pc, #116]	@ (800b754 <_free_r+0x90>)
 800b6de:	6813      	ldr	r3, [r2, #0]
 800b6e0:	b933      	cbnz	r3, 800b6f0 <_free_r+0x2c>
 800b6e2:	6063      	str	r3, [r4, #4]
 800b6e4:	6014      	str	r4, [r2, #0]
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6ec:	f7ff bd4e 	b.w	800b18c <__malloc_unlock>
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	d908      	bls.n	800b706 <_free_r+0x42>
 800b6f4:	6820      	ldr	r0, [r4, #0]
 800b6f6:	1821      	adds	r1, r4, r0
 800b6f8:	428b      	cmp	r3, r1
 800b6fa:	bf01      	itttt	eq
 800b6fc:	6819      	ldreq	r1, [r3, #0]
 800b6fe:	685b      	ldreq	r3, [r3, #4]
 800b700:	1809      	addeq	r1, r1, r0
 800b702:	6021      	streq	r1, [r4, #0]
 800b704:	e7ed      	b.n	800b6e2 <_free_r+0x1e>
 800b706:	461a      	mov	r2, r3
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	b10b      	cbz	r3, 800b710 <_free_r+0x4c>
 800b70c:	42a3      	cmp	r3, r4
 800b70e:	d9fa      	bls.n	800b706 <_free_r+0x42>
 800b710:	6811      	ldr	r1, [r2, #0]
 800b712:	1850      	adds	r0, r2, r1
 800b714:	42a0      	cmp	r0, r4
 800b716:	d10b      	bne.n	800b730 <_free_r+0x6c>
 800b718:	6820      	ldr	r0, [r4, #0]
 800b71a:	4401      	add	r1, r0
 800b71c:	1850      	adds	r0, r2, r1
 800b71e:	4283      	cmp	r3, r0
 800b720:	6011      	str	r1, [r2, #0]
 800b722:	d1e0      	bne.n	800b6e6 <_free_r+0x22>
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	6053      	str	r3, [r2, #4]
 800b72a:	4408      	add	r0, r1
 800b72c:	6010      	str	r0, [r2, #0]
 800b72e:	e7da      	b.n	800b6e6 <_free_r+0x22>
 800b730:	d902      	bls.n	800b738 <_free_r+0x74>
 800b732:	230c      	movs	r3, #12
 800b734:	602b      	str	r3, [r5, #0]
 800b736:	e7d6      	b.n	800b6e6 <_free_r+0x22>
 800b738:	6820      	ldr	r0, [r4, #0]
 800b73a:	1821      	adds	r1, r4, r0
 800b73c:	428b      	cmp	r3, r1
 800b73e:	bf04      	itt	eq
 800b740:	6819      	ldreq	r1, [r3, #0]
 800b742:	685b      	ldreq	r3, [r3, #4]
 800b744:	6063      	str	r3, [r4, #4]
 800b746:	bf04      	itt	eq
 800b748:	1809      	addeq	r1, r1, r0
 800b74a:	6021      	streq	r1, [r4, #0]
 800b74c:	6054      	str	r4, [r2, #4]
 800b74e:	e7ca      	b.n	800b6e6 <_free_r+0x22>
 800b750:	bd38      	pop	{r3, r4, r5, pc}
 800b752:	bf00      	nop
 800b754:	20002154 	.word	0x20002154

0800b758 <__sfputc_r>:
 800b758:	6893      	ldr	r3, [r2, #8]
 800b75a:	3b01      	subs	r3, #1
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	b410      	push	{r4}
 800b760:	6093      	str	r3, [r2, #8]
 800b762:	da08      	bge.n	800b776 <__sfputc_r+0x1e>
 800b764:	6994      	ldr	r4, [r2, #24]
 800b766:	42a3      	cmp	r3, r4
 800b768:	db01      	blt.n	800b76e <__sfputc_r+0x16>
 800b76a:	290a      	cmp	r1, #10
 800b76c:	d103      	bne.n	800b776 <__sfputc_r+0x1e>
 800b76e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b772:	f7ff be86 	b.w	800b482 <__swbuf_r>
 800b776:	6813      	ldr	r3, [r2, #0]
 800b778:	1c58      	adds	r0, r3, #1
 800b77a:	6010      	str	r0, [r2, #0]
 800b77c:	7019      	strb	r1, [r3, #0]
 800b77e:	4608      	mov	r0, r1
 800b780:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <__sfputs_r>:
 800b786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b788:	4606      	mov	r6, r0
 800b78a:	460f      	mov	r7, r1
 800b78c:	4614      	mov	r4, r2
 800b78e:	18d5      	adds	r5, r2, r3
 800b790:	42ac      	cmp	r4, r5
 800b792:	d101      	bne.n	800b798 <__sfputs_r+0x12>
 800b794:	2000      	movs	r0, #0
 800b796:	e007      	b.n	800b7a8 <__sfputs_r+0x22>
 800b798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79c:	463a      	mov	r2, r7
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f7ff ffda 	bl	800b758 <__sfputc_r>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d1f3      	bne.n	800b790 <__sfputs_r+0xa>
 800b7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7ac <_vfiprintf_r>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	460d      	mov	r5, r1
 800b7b2:	b09d      	sub	sp, #116	@ 0x74
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	4698      	mov	r8, r3
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	b118      	cbz	r0, 800b7c4 <_vfiprintf_r+0x18>
 800b7bc:	6a03      	ldr	r3, [r0, #32]
 800b7be:	b90b      	cbnz	r3, 800b7c4 <_vfiprintf_r+0x18>
 800b7c0:	f7ff fd76 	bl	800b2b0 <__sinit>
 800b7c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7c6:	07d9      	lsls	r1, r3, #31
 800b7c8:	d405      	bmi.n	800b7d6 <_vfiprintf_r+0x2a>
 800b7ca:	89ab      	ldrh	r3, [r5, #12]
 800b7cc:	059a      	lsls	r2, r3, #22
 800b7ce:	d402      	bmi.n	800b7d6 <_vfiprintf_r+0x2a>
 800b7d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7d2:	f7ff ff74 	bl	800b6be <__retarget_lock_acquire_recursive>
 800b7d6:	89ab      	ldrh	r3, [r5, #12]
 800b7d8:	071b      	lsls	r3, r3, #28
 800b7da:	d501      	bpl.n	800b7e0 <_vfiprintf_r+0x34>
 800b7dc:	692b      	ldr	r3, [r5, #16]
 800b7de:	b99b      	cbnz	r3, 800b808 <_vfiprintf_r+0x5c>
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f7ff fe8c 	bl	800b500 <__swsetup_r>
 800b7e8:	b170      	cbz	r0, 800b808 <_vfiprintf_r+0x5c>
 800b7ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7ec:	07dc      	lsls	r4, r3, #31
 800b7ee:	d504      	bpl.n	800b7fa <_vfiprintf_r+0x4e>
 800b7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f4:	b01d      	add	sp, #116	@ 0x74
 800b7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fa:	89ab      	ldrh	r3, [r5, #12]
 800b7fc:	0598      	lsls	r0, r3, #22
 800b7fe:	d4f7      	bmi.n	800b7f0 <_vfiprintf_r+0x44>
 800b800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b802:	f7ff ff5d 	bl	800b6c0 <__retarget_lock_release_recursive>
 800b806:	e7f3      	b.n	800b7f0 <_vfiprintf_r+0x44>
 800b808:	2300      	movs	r3, #0
 800b80a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b80c:	2320      	movs	r3, #32
 800b80e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b812:	f8cd 800c 	str.w	r8, [sp, #12]
 800b816:	2330      	movs	r3, #48	@ 0x30
 800b818:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b9c8 <_vfiprintf_r+0x21c>
 800b81c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b820:	f04f 0901 	mov.w	r9, #1
 800b824:	4623      	mov	r3, r4
 800b826:	469a      	mov	sl, r3
 800b828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b82c:	b10a      	cbz	r2, 800b832 <_vfiprintf_r+0x86>
 800b82e:	2a25      	cmp	r2, #37	@ 0x25
 800b830:	d1f9      	bne.n	800b826 <_vfiprintf_r+0x7a>
 800b832:	ebba 0b04 	subs.w	fp, sl, r4
 800b836:	d00b      	beq.n	800b850 <_vfiprintf_r+0xa4>
 800b838:	465b      	mov	r3, fp
 800b83a:	4622      	mov	r2, r4
 800b83c:	4629      	mov	r1, r5
 800b83e:	4630      	mov	r0, r6
 800b840:	f7ff ffa1 	bl	800b786 <__sfputs_r>
 800b844:	3001      	adds	r0, #1
 800b846:	f000 80a7 	beq.w	800b998 <_vfiprintf_r+0x1ec>
 800b84a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b84c:	445a      	add	r2, fp
 800b84e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b850:	f89a 3000 	ldrb.w	r3, [sl]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 809f 	beq.w	800b998 <_vfiprintf_r+0x1ec>
 800b85a:	2300      	movs	r3, #0
 800b85c:	f04f 32ff 	mov.w	r2, #4294967295
 800b860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b864:	f10a 0a01 	add.w	sl, sl, #1
 800b868:	9304      	str	r3, [sp, #16]
 800b86a:	9307      	str	r3, [sp, #28]
 800b86c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b870:	931a      	str	r3, [sp, #104]	@ 0x68
 800b872:	4654      	mov	r4, sl
 800b874:	2205      	movs	r2, #5
 800b876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87a:	4853      	ldr	r0, [pc, #332]	@ (800b9c8 <_vfiprintf_r+0x21c>)
 800b87c:	f7f4 fcb8 	bl	80001f0 <memchr>
 800b880:	9a04      	ldr	r2, [sp, #16]
 800b882:	b9d8      	cbnz	r0, 800b8bc <_vfiprintf_r+0x110>
 800b884:	06d1      	lsls	r1, r2, #27
 800b886:	bf44      	itt	mi
 800b888:	2320      	movmi	r3, #32
 800b88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b88e:	0713      	lsls	r3, r2, #28
 800b890:	bf44      	itt	mi
 800b892:	232b      	movmi	r3, #43	@ 0x2b
 800b894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b898:	f89a 3000 	ldrb.w	r3, [sl]
 800b89c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b89e:	d015      	beq.n	800b8cc <_vfiprintf_r+0x120>
 800b8a0:	9a07      	ldr	r2, [sp, #28]
 800b8a2:	4654      	mov	r4, sl
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	f04f 0c0a 	mov.w	ip, #10
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8b0:	3b30      	subs	r3, #48	@ 0x30
 800b8b2:	2b09      	cmp	r3, #9
 800b8b4:	d94b      	bls.n	800b94e <_vfiprintf_r+0x1a2>
 800b8b6:	b1b0      	cbz	r0, 800b8e6 <_vfiprintf_r+0x13a>
 800b8b8:	9207      	str	r2, [sp, #28]
 800b8ba:	e014      	b.n	800b8e6 <_vfiprintf_r+0x13a>
 800b8bc:	eba0 0308 	sub.w	r3, r0, r8
 800b8c0:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	9304      	str	r3, [sp, #16]
 800b8c8:	46a2      	mov	sl, r4
 800b8ca:	e7d2      	b.n	800b872 <_vfiprintf_r+0xc6>
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	1d19      	adds	r1, r3, #4
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	9103      	str	r1, [sp, #12]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	bfbb      	ittet	lt
 800b8d8:	425b      	neglt	r3, r3
 800b8da:	f042 0202 	orrlt.w	r2, r2, #2
 800b8de:	9307      	strge	r3, [sp, #28]
 800b8e0:	9307      	strlt	r3, [sp, #28]
 800b8e2:	bfb8      	it	lt
 800b8e4:	9204      	strlt	r2, [sp, #16]
 800b8e6:	7823      	ldrb	r3, [r4, #0]
 800b8e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ea:	d10a      	bne.n	800b902 <_vfiprintf_r+0x156>
 800b8ec:	7863      	ldrb	r3, [r4, #1]
 800b8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8f0:	d132      	bne.n	800b958 <_vfiprintf_r+0x1ac>
 800b8f2:	9b03      	ldr	r3, [sp, #12]
 800b8f4:	1d1a      	adds	r2, r3, #4
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	9203      	str	r2, [sp, #12]
 800b8fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8fe:	3402      	adds	r4, #2
 800b900:	9305      	str	r3, [sp, #20]
 800b902:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9d8 <_vfiprintf_r+0x22c>
 800b906:	7821      	ldrb	r1, [r4, #0]
 800b908:	2203      	movs	r2, #3
 800b90a:	4650      	mov	r0, sl
 800b90c:	f7f4 fc70 	bl	80001f0 <memchr>
 800b910:	b138      	cbz	r0, 800b922 <_vfiprintf_r+0x176>
 800b912:	9b04      	ldr	r3, [sp, #16]
 800b914:	eba0 000a 	sub.w	r0, r0, sl
 800b918:	2240      	movs	r2, #64	@ 0x40
 800b91a:	4082      	lsls	r2, r0
 800b91c:	4313      	orrs	r3, r2
 800b91e:	3401      	adds	r4, #1
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b926:	4829      	ldr	r0, [pc, #164]	@ (800b9cc <_vfiprintf_r+0x220>)
 800b928:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b92c:	2206      	movs	r2, #6
 800b92e:	f7f4 fc5f 	bl	80001f0 <memchr>
 800b932:	2800      	cmp	r0, #0
 800b934:	d03f      	beq.n	800b9b6 <_vfiprintf_r+0x20a>
 800b936:	4b26      	ldr	r3, [pc, #152]	@ (800b9d0 <_vfiprintf_r+0x224>)
 800b938:	bb1b      	cbnz	r3, 800b982 <_vfiprintf_r+0x1d6>
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	3307      	adds	r3, #7
 800b93e:	f023 0307 	bic.w	r3, r3, #7
 800b942:	3308      	adds	r3, #8
 800b944:	9303      	str	r3, [sp, #12]
 800b946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b948:	443b      	add	r3, r7
 800b94a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b94c:	e76a      	b.n	800b824 <_vfiprintf_r+0x78>
 800b94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b952:	460c      	mov	r4, r1
 800b954:	2001      	movs	r0, #1
 800b956:	e7a8      	b.n	800b8aa <_vfiprintf_r+0xfe>
 800b958:	2300      	movs	r3, #0
 800b95a:	3401      	adds	r4, #1
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	4619      	mov	r1, r3
 800b960:	f04f 0c0a 	mov.w	ip, #10
 800b964:	4620      	mov	r0, r4
 800b966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b96a:	3a30      	subs	r2, #48	@ 0x30
 800b96c:	2a09      	cmp	r2, #9
 800b96e:	d903      	bls.n	800b978 <_vfiprintf_r+0x1cc>
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0c6      	beq.n	800b902 <_vfiprintf_r+0x156>
 800b974:	9105      	str	r1, [sp, #20]
 800b976:	e7c4      	b.n	800b902 <_vfiprintf_r+0x156>
 800b978:	fb0c 2101 	mla	r1, ip, r1, r2
 800b97c:	4604      	mov	r4, r0
 800b97e:	2301      	movs	r3, #1
 800b980:	e7f0      	b.n	800b964 <_vfiprintf_r+0x1b8>
 800b982:	ab03      	add	r3, sp, #12
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	462a      	mov	r2, r5
 800b988:	4b12      	ldr	r3, [pc, #72]	@ (800b9d4 <_vfiprintf_r+0x228>)
 800b98a:	a904      	add	r1, sp, #16
 800b98c:	4630      	mov	r0, r6
 800b98e:	f3af 8000 	nop.w
 800b992:	4607      	mov	r7, r0
 800b994:	1c78      	adds	r0, r7, #1
 800b996:	d1d6      	bne.n	800b946 <_vfiprintf_r+0x19a>
 800b998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b99a:	07d9      	lsls	r1, r3, #31
 800b99c:	d405      	bmi.n	800b9aa <_vfiprintf_r+0x1fe>
 800b99e:	89ab      	ldrh	r3, [r5, #12]
 800b9a0:	059a      	lsls	r2, r3, #22
 800b9a2:	d402      	bmi.n	800b9aa <_vfiprintf_r+0x1fe>
 800b9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9a6:	f7ff fe8b 	bl	800b6c0 <__retarget_lock_release_recursive>
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	065b      	lsls	r3, r3, #25
 800b9ae:	f53f af1f 	bmi.w	800b7f0 <_vfiprintf_r+0x44>
 800b9b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9b4:	e71e      	b.n	800b7f4 <_vfiprintf_r+0x48>
 800b9b6:	ab03      	add	r3, sp, #12
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	462a      	mov	r2, r5
 800b9bc:	4b05      	ldr	r3, [pc, #20]	@ (800b9d4 <_vfiprintf_r+0x228>)
 800b9be:	a904      	add	r1, sp, #16
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f000 f879 	bl	800bab8 <_printf_i>
 800b9c6:	e7e4      	b.n	800b992 <_vfiprintf_r+0x1e6>
 800b9c8:	080104b0 	.word	0x080104b0
 800b9cc:	080104ba 	.word	0x080104ba
 800b9d0:	00000000 	.word	0x00000000
 800b9d4:	0800b787 	.word	0x0800b787
 800b9d8:	080104b6 	.word	0x080104b6

0800b9dc <_printf_common>:
 800b9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e0:	4616      	mov	r6, r2
 800b9e2:	4698      	mov	r8, r3
 800b9e4:	688a      	ldr	r2, [r1, #8]
 800b9e6:	690b      	ldr	r3, [r1, #16]
 800b9e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	bfb8      	it	lt
 800b9f0:	4613      	movlt	r3, r2
 800b9f2:	6033      	str	r3, [r6, #0]
 800b9f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9f8:	4607      	mov	r7, r0
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	b10a      	cbz	r2, 800ba02 <_printf_common+0x26>
 800b9fe:	3301      	adds	r3, #1
 800ba00:	6033      	str	r3, [r6, #0]
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	0699      	lsls	r1, r3, #26
 800ba06:	bf42      	ittt	mi
 800ba08:	6833      	ldrmi	r3, [r6, #0]
 800ba0a:	3302      	addmi	r3, #2
 800ba0c:	6033      	strmi	r3, [r6, #0]
 800ba0e:	6825      	ldr	r5, [r4, #0]
 800ba10:	f015 0506 	ands.w	r5, r5, #6
 800ba14:	d106      	bne.n	800ba24 <_printf_common+0x48>
 800ba16:	f104 0a19 	add.w	sl, r4, #25
 800ba1a:	68e3      	ldr	r3, [r4, #12]
 800ba1c:	6832      	ldr	r2, [r6, #0]
 800ba1e:	1a9b      	subs	r3, r3, r2
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	dc26      	bgt.n	800ba72 <_printf_common+0x96>
 800ba24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba28:	6822      	ldr	r2, [r4, #0]
 800ba2a:	3b00      	subs	r3, #0
 800ba2c:	bf18      	it	ne
 800ba2e:	2301      	movne	r3, #1
 800ba30:	0692      	lsls	r2, r2, #26
 800ba32:	d42b      	bmi.n	800ba8c <_printf_common+0xb0>
 800ba34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba38:	4641      	mov	r1, r8
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	47c8      	blx	r9
 800ba3e:	3001      	adds	r0, #1
 800ba40:	d01e      	beq.n	800ba80 <_printf_common+0xa4>
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	6922      	ldr	r2, [r4, #16]
 800ba46:	f003 0306 	and.w	r3, r3, #6
 800ba4a:	2b04      	cmp	r3, #4
 800ba4c:	bf02      	ittt	eq
 800ba4e:	68e5      	ldreq	r5, [r4, #12]
 800ba50:	6833      	ldreq	r3, [r6, #0]
 800ba52:	1aed      	subeq	r5, r5, r3
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	bf0c      	ite	eq
 800ba58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba5c:	2500      	movne	r5, #0
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	bfc4      	itt	gt
 800ba62:	1a9b      	subgt	r3, r3, r2
 800ba64:	18ed      	addgt	r5, r5, r3
 800ba66:	2600      	movs	r6, #0
 800ba68:	341a      	adds	r4, #26
 800ba6a:	42b5      	cmp	r5, r6
 800ba6c:	d11a      	bne.n	800baa4 <_printf_common+0xc8>
 800ba6e:	2000      	movs	r0, #0
 800ba70:	e008      	b.n	800ba84 <_printf_common+0xa8>
 800ba72:	2301      	movs	r3, #1
 800ba74:	4652      	mov	r2, sl
 800ba76:	4641      	mov	r1, r8
 800ba78:	4638      	mov	r0, r7
 800ba7a:	47c8      	blx	r9
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d103      	bne.n	800ba88 <_printf_common+0xac>
 800ba80:	f04f 30ff 	mov.w	r0, #4294967295
 800ba84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba88:	3501      	adds	r5, #1
 800ba8a:	e7c6      	b.n	800ba1a <_printf_common+0x3e>
 800ba8c:	18e1      	adds	r1, r4, r3
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	2030      	movs	r0, #48	@ 0x30
 800ba92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba96:	4422      	add	r2, r4
 800ba98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800baa0:	3302      	adds	r3, #2
 800baa2:	e7c7      	b.n	800ba34 <_printf_common+0x58>
 800baa4:	2301      	movs	r3, #1
 800baa6:	4622      	mov	r2, r4
 800baa8:	4641      	mov	r1, r8
 800baaa:	4638      	mov	r0, r7
 800baac:	47c8      	blx	r9
 800baae:	3001      	adds	r0, #1
 800bab0:	d0e6      	beq.n	800ba80 <_printf_common+0xa4>
 800bab2:	3601      	adds	r6, #1
 800bab4:	e7d9      	b.n	800ba6a <_printf_common+0x8e>
	...

0800bab8 <_printf_i>:
 800bab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800babc:	7e0f      	ldrb	r7, [r1, #24]
 800babe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bac0:	2f78      	cmp	r7, #120	@ 0x78
 800bac2:	4691      	mov	r9, r2
 800bac4:	4680      	mov	r8, r0
 800bac6:	460c      	mov	r4, r1
 800bac8:	469a      	mov	sl, r3
 800baca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bace:	d807      	bhi.n	800bae0 <_printf_i+0x28>
 800bad0:	2f62      	cmp	r7, #98	@ 0x62
 800bad2:	d80a      	bhi.n	800baea <_printf_i+0x32>
 800bad4:	2f00      	cmp	r7, #0
 800bad6:	f000 80d1 	beq.w	800bc7c <_printf_i+0x1c4>
 800bada:	2f58      	cmp	r7, #88	@ 0x58
 800badc:	f000 80b8 	beq.w	800bc50 <_printf_i+0x198>
 800bae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bae8:	e03a      	b.n	800bb60 <_printf_i+0xa8>
 800baea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800baee:	2b15      	cmp	r3, #21
 800baf0:	d8f6      	bhi.n	800bae0 <_printf_i+0x28>
 800baf2:	a101      	add	r1, pc, #4	@ (adr r1, 800baf8 <_printf_i+0x40>)
 800baf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baf8:	0800bb51 	.word	0x0800bb51
 800bafc:	0800bb65 	.word	0x0800bb65
 800bb00:	0800bae1 	.word	0x0800bae1
 800bb04:	0800bae1 	.word	0x0800bae1
 800bb08:	0800bae1 	.word	0x0800bae1
 800bb0c:	0800bae1 	.word	0x0800bae1
 800bb10:	0800bb65 	.word	0x0800bb65
 800bb14:	0800bae1 	.word	0x0800bae1
 800bb18:	0800bae1 	.word	0x0800bae1
 800bb1c:	0800bae1 	.word	0x0800bae1
 800bb20:	0800bae1 	.word	0x0800bae1
 800bb24:	0800bc63 	.word	0x0800bc63
 800bb28:	0800bb8f 	.word	0x0800bb8f
 800bb2c:	0800bc1d 	.word	0x0800bc1d
 800bb30:	0800bae1 	.word	0x0800bae1
 800bb34:	0800bae1 	.word	0x0800bae1
 800bb38:	0800bc85 	.word	0x0800bc85
 800bb3c:	0800bae1 	.word	0x0800bae1
 800bb40:	0800bb8f 	.word	0x0800bb8f
 800bb44:	0800bae1 	.word	0x0800bae1
 800bb48:	0800bae1 	.word	0x0800bae1
 800bb4c:	0800bc25 	.word	0x0800bc25
 800bb50:	6833      	ldr	r3, [r6, #0]
 800bb52:	1d1a      	adds	r2, r3, #4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	6032      	str	r2, [r6, #0]
 800bb58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb60:	2301      	movs	r3, #1
 800bb62:	e09c      	b.n	800bc9e <_printf_i+0x1e6>
 800bb64:	6833      	ldr	r3, [r6, #0]
 800bb66:	6820      	ldr	r0, [r4, #0]
 800bb68:	1d19      	adds	r1, r3, #4
 800bb6a:	6031      	str	r1, [r6, #0]
 800bb6c:	0606      	lsls	r6, r0, #24
 800bb6e:	d501      	bpl.n	800bb74 <_printf_i+0xbc>
 800bb70:	681d      	ldr	r5, [r3, #0]
 800bb72:	e003      	b.n	800bb7c <_printf_i+0xc4>
 800bb74:	0645      	lsls	r5, r0, #25
 800bb76:	d5fb      	bpl.n	800bb70 <_printf_i+0xb8>
 800bb78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb7c:	2d00      	cmp	r5, #0
 800bb7e:	da03      	bge.n	800bb88 <_printf_i+0xd0>
 800bb80:	232d      	movs	r3, #45	@ 0x2d
 800bb82:	426d      	negs	r5, r5
 800bb84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb88:	4858      	ldr	r0, [pc, #352]	@ (800bcec <_printf_i+0x234>)
 800bb8a:	230a      	movs	r3, #10
 800bb8c:	e011      	b.n	800bbb2 <_printf_i+0xfa>
 800bb8e:	6821      	ldr	r1, [r4, #0]
 800bb90:	6833      	ldr	r3, [r6, #0]
 800bb92:	0608      	lsls	r0, r1, #24
 800bb94:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb98:	d402      	bmi.n	800bba0 <_printf_i+0xe8>
 800bb9a:	0649      	lsls	r1, r1, #25
 800bb9c:	bf48      	it	mi
 800bb9e:	b2ad      	uxthmi	r5, r5
 800bba0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bba2:	4852      	ldr	r0, [pc, #328]	@ (800bcec <_printf_i+0x234>)
 800bba4:	6033      	str	r3, [r6, #0]
 800bba6:	bf14      	ite	ne
 800bba8:	230a      	movne	r3, #10
 800bbaa:	2308      	moveq	r3, #8
 800bbac:	2100      	movs	r1, #0
 800bbae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbb2:	6866      	ldr	r6, [r4, #4]
 800bbb4:	60a6      	str	r6, [r4, #8]
 800bbb6:	2e00      	cmp	r6, #0
 800bbb8:	db05      	blt.n	800bbc6 <_printf_i+0x10e>
 800bbba:	6821      	ldr	r1, [r4, #0]
 800bbbc:	432e      	orrs	r6, r5
 800bbbe:	f021 0104 	bic.w	r1, r1, #4
 800bbc2:	6021      	str	r1, [r4, #0]
 800bbc4:	d04b      	beq.n	800bc5e <_printf_i+0x1a6>
 800bbc6:	4616      	mov	r6, r2
 800bbc8:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbcc:	fb03 5711 	mls	r7, r3, r1, r5
 800bbd0:	5dc7      	ldrb	r7, [r0, r7]
 800bbd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbd6:	462f      	mov	r7, r5
 800bbd8:	42bb      	cmp	r3, r7
 800bbda:	460d      	mov	r5, r1
 800bbdc:	d9f4      	bls.n	800bbc8 <_printf_i+0x110>
 800bbde:	2b08      	cmp	r3, #8
 800bbe0:	d10b      	bne.n	800bbfa <_printf_i+0x142>
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	07df      	lsls	r7, r3, #31
 800bbe6:	d508      	bpl.n	800bbfa <_printf_i+0x142>
 800bbe8:	6923      	ldr	r3, [r4, #16]
 800bbea:	6861      	ldr	r1, [r4, #4]
 800bbec:	4299      	cmp	r1, r3
 800bbee:	bfde      	ittt	le
 800bbf0:	2330      	movle	r3, #48	@ 0x30
 800bbf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbfa:	1b92      	subs	r2, r2, r6
 800bbfc:	6122      	str	r2, [r4, #16]
 800bbfe:	f8cd a000 	str.w	sl, [sp]
 800bc02:	464b      	mov	r3, r9
 800bc04:	aa03      	add	r2, sp, #12
 800bc06:	4621      	mov	r1, r4
 800bc08:	4640      	mov	r0, r8
 800bc0a:	f7ff fee7 	bl	800b9dc <_printf_common>
 800bc0e:	3001      	adds	r0, #1
 800bc10:	d14a      	bne.n	800bca8 <_printf_i+0x1f0>
 800bc12:	f04f 30ff 	mov.w	r0, #4294967295
 800bc16:	b004      	add	sp, #16
 800bc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	f043 0320 	orr.w	r3, r3, #32
 800bc22:	6023      	str	r3, [r4, #0]
 800bc24:	4832      	ldr	r0, [pc, #200]	@ (800bcf0 <_printf_i+0x238>)
 800bc26:	2778      	movs	r7, #120	@ 0x78
 800bc28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc2c:	6823      	ldr	r3, [r4, #0]
 800bc2e:	6831      	ldr	r1, [r6, #0]
 800bc30:	061f      	lsls	r7, r3, #24
 800bc32:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc36:	d402      	bmi.n	800bc3e <_printf_i+0x186>
 800bc38:	065f      	lsls	r7, r3, #25
 800bc3a:	bf48      	it	mi
 800bc3c:	b2ad      	uxthmi	r5, r5
 800bc3e:	6031      	str	r1, [r6, #0]
 800bc40:	07d9      	lsls	r1, r3, #31
 800bc42:	bf44      	itt	mi
 800bc44:	f043 0320 	orrmi.w	r3, r3, #32
 800bc48:	6023      	strmi	r3, [r4, #0]
 800bc4a:	b11d      	cbz	r5, 800bc54 <_printf_i+0x19c>
 800bc4c:	2310      	movs	r3, #16
 800bc4e:	e7ad      	b.n	800bbac <_printf_i+0xf4>
 800bc50:	4826      	ldr	r0, [pc, #152]	@ (800bcec <_printf_i+0x234>)
 800bc52:	e7e9      	b.n	800bc28 <_printf_i+0x170>
 800bc54:	6823      	ldr	r3, [r4, #0]
 800bc56:	f023 0320 	bic.w	r3, r3, #32
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	e7f6      	b.n	800bc4c <_printf_i+0x194>
 800bc5e:	4616      	mov	r6, r2
 800bc60:	e7bd      	b.n	800bbde <_printf_i+0x126>
 800bc62:	6833      	ldr	r3, [r6, #0]
 800bc64:	6825      	ldr	r5, [r4, #0]
 800bc66:	6961      	ldr	r1, [r4, #20]
 800bc68:	1d18      	adds	r0, r3, #4
 800bc6a:	6030      	str	r0, [r6, #0]
 800bc6c:	062e      	lsls	r6, r5, #24
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	d501      	bpl.n	800bc76 <_printf_i+0x1be>
 800bc72:	6019      	str	r1, [r3, #0]
 800bc74:	e002      	b.n	800bc7c <_printf_i+0x1c4>
 800bc76:	0668      	lsls	r0, r5, #25
 800bc78:	d5fb      	bpl.n	800bc72 <_printf_i+0x1ba>
 800bc7a:	8019      	strh	r1, [r3, #0]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	6123      	str	r3, [r4, #16]
 800bc80:	4616      	mov	r6, r2
 800bc82:	e7bc      	b.n	800bbfe <_printf_i+0x146>
 800bc84:	6833      	ldr	r3, [r6, #0]
 800bc86:	1d1a      	adds	r2, r3, #4
 800bc88:	6032      	str	r2, [r6, #0]
 800bc8a:	681e      	ldr	r6, [r3, #0]
 800bc8c:	6862      	ldr	r2, [r4, #4]
 800bc8e:	2100      	movs	r1, #0
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7f4 faad 	bl	80001f0 <memchr>
 800bc96:	b108      	cbz	r0, 800bc9c <_printf_i+0x1e4>
 800bc98:	1b80      	subs	r0, r0, r6
 800bc9a:	6060      	str	r0, [r4, #4]
 800bc9c:	6863      	ldr	r3, [r4, #4]
 800bc9e:	6123      	str	r3, [r4, #16]
 800bca0:	2300      	movs	r3, #0
 800bca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bca6:	e7aa      	b.n	800bbfe <_printf_i+0x146>
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	4632      	mov	r2, r6
 800bcac:	4649      	mov	r1, r9
 800bcae:	4640      	mov	r0, r8
 800bcb0:	47d0      	blx	sl
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	d0ad      	beq.n	800bc12 <_printf_i+0x15a>
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	079b      	lsls	r3, r3, #30
 800bcba:	d413      	bmi.n	800bce4 <_printf_i+0x22c>
 800bcbc:	68e0      	ldr	r0, [r4, #12]
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	4298      	cmp	r0, r3
 800bcc2:	bfb8      	it	lt
 800bcc4:	4618      	movlt	r0, r3
 800bcc6:	e7a6      	b.n	800bc16 <_printf_i+0x15e>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	4632      	mov	r2, r6
 800bccc:	4649      	mov	r1, r9
 800bcce:	4640      	mov	r0, r8
 800bcd0:	47d0      	blx	sl
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	d09d      	beq.n	800bc12 <_printf_i+0x15a>
 800bcd6:	3501      	adds	r5, #1
 800bcd8:	68e3      	ldr	r3, [r4, #12]
 800bcda:	9903      	ldr	r1, [sp, #12]
 800bcdc:	1a5b      	subs	r3, r3, r1
 800bcde:	42ab      	cmp	r3, r5
 800bce0:	dcf2      	bgt.n	800bcc8 <_printf_i+0x210>
 800bce2:	e7eb      	b.n	800bcbc <_printf_i+0x204>
 800bce4:	2500      	movs	r5, #0
 800bce6:	f104 0619 	add.w	r6, r4, #25
 800bcea:	e7f5      	b.n	800bcd8 <_printf_i+0x220>
 800bcec:	080104c1 	.word	0x080104c1
 800bcf0:	080104d2 	.word	0x080104d2

0800bcf4 <__sflush_r>:
 800bcf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfc:	0716      	lsls	r6, r2, #28
 800bcfe:	4605      	mov	r5, r0
 800bd00:	460c      	mov	r4, r1
 800bd02:	d454      	bmi.n	800bdae <__sflush_r+0xba>
 800bd04:	684b      	ldr	r3, [r1, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dc02      	bgt.n	800bd10 <__sflush_r+0x1c>
 800bd0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dd48      	ble.n	800bda2 <__sflush_r+0xae>
 800bd10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd12:	2e00      	cmp	r6, #0
 800bd14:	d045      	beq.n	800bda2 <__sflush_r+0xae>
 800bd16:	2300      	movs	r3, #0
 800bd18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd1c:	682f      	ldr	r7, [r5, #0]
 800bd1e:	6a21      	ldr	r1, [r4, #32]
 800bd20:	602b      	str	r3, [r5, #0]
 800bd22:	d030      	beq.n	800bd86 <__sflush_r+0x92>
 800bd24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	0759      	lsls	r1, r3, #29
 800bd2a:	d505      	bpl.n	800bd38 <__sflush_r+0x44>
 800bd2c:	6863      	ldr	r3, [r4, #4]
 800bd2e:	1ad2      	subs	r2, r2, r3
 800bd30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd32:	b10b      	cbz	r3, 800bd38 <__sflush_r+0x44>
 800bd34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd36:	1ad2      	subs	r2, r2, r3
 800bd38:	2300      	movs	r3, #0
 800bd3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd3c:	6a21      	ldr	r1, [r4, #32]
 800bd3e:	4628      	mov	r0, r5
 800bd40:	47b0      	blx	r6
 800bd42:	1c43      	adds	r3, r0, #1
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	d106      	bne.n	800bd56 <__sflush_r+0x62>
 800bd48:	6829      	ldr	r1, [r5, #0]
 800bd4a:	291d      	cmp	r1, #29
 800bd4c:	d82b      	bhi.n	800bda6 <__sflush_r+0xb2>
 800bd4e:	4a2a      	ldr	r2, [pc, #168]	@ (800bdf8 <__sflush_r+0x104>)
 800bd50:	40ca      	lsrs	r2, r1
 800bd52:	07d6      	lsls	r6, r2, #31
 800bd54:	d527      	bpl.n	800bda6 <__sflush_r+0xb2>
 800bd56:	2200      	movs	r2, #0
 800bd58:	6062      	str	r2, [r4, #4]
 800bd5a:	04d9      	lsls	r1, r3, #19
 800bd5c:	6922      	ldr	r2, [r4, #16]
 800bd5e:	6022      	str	r2, [r4, #0]
 800bd60:	d504      	bpl.n	800bd6c <__sflush_r+0x78>
 800bd62:	1c42      	adds	r2, r0, #1
 800bd64:	d101      	bne.n	800bd6a <__sflush_r+0x76>
 800bd66:	682b      	ldr	r3, [r5, #0]
 800bd68:	b903      	cbnz	r3, 800bd6c <__sflush_r+0x78>
 800bd6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd6e:	602f      	str	r7, [r5, #0]
 800bd70:	b1b9      	cbz	r1, 800bda2 <__sflush_r+0xae>
 800bd72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd76:	4299      	cmp	r1, r3
 800bd78:	d002      	beq.n	800bd80 <__sflush_r+0x8c>
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f7ff fca2 	bl	800b6c4 <_free_r>
 800bd80:	2300      	movs	r3, #0
 800bd82:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd84:	e00d      	b.n	800bda2 <__sflush_r+0xae>
 800bd86:	2301      	movs	r3, #1
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b0      	blx	r6
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	1c50      	adds	r0, r2, #1
 800bd90:	d1c9      	bne.n	800bd26 <__sflush_r+0x32>
 800bd92:	682b      	ldr	r3, [r5, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d0c6      	beq.n	800bd26 <__sflush_r+0x32>
 800bd98:	2b1d      	cmp	r3, #29
 800bd9a:	d001      	beq.n	800bda0 <__sflush_r+0xac>
 800bd9c:	2b16      	cmp	r3, #22
 800bd9e:	d11e      	bne.n	800bdde <__sflush_r+0xea>
 800bda0:	602f      	str	r7, [r5, #0]
 800bda2:	2000      	movs	r0, #0
 800bda4:	e022      	b.n	800bdec <__sflush_r+0xf8>
 800bda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdaa:	b21b      	sxth	r3, r3
 800bdac:	e01b      	b.n	800bde6 <__sflush_r+0xf2>
 800bdae:	690f      	ldr	r7, [r1, #16]
 800bdb0:	2f00      	cmp	r7, #0
 800bdb2:	d0f6      	beq.n	800bda2 <__sflush_r+0xae>
 800bdb4:	0793      	lsls	r3, r2, #30
 800bdb6:	680e      	ldr	r6, [r1, #0]
 800bdb8:	bf08      	it	eq
 800bdba:	694b      	ldreq	r3, [r1, #20]
 800bdbc:	600f      	str	r7, [r1, #0]
 800bdbe:	bf18      	it	ne
 800bdc0:	2300      	movne	r3, #0
 800bdc2:	eba6 0807 	sub.w	r8, r6, r7
 800bdc6:	608b      	str	r3, [r1, #8]
 800bdc8:	f1b8 0f00 	cmp.w	r8, #0
 800bdcc:	dde9      	ble.n	800bda2 <__sflush_r+0xae>
 800bdce:	6a21      	ldr	r1, [r4, #32]
 800bdd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdd2:	4643      	mov	r3, r8
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	47b0      	blx	r6
 800bdda:	2800      	cmp	r0, #0
 800bddc:	dc08      	bgt.n	800bdf0 <__sflush_r+0xfc>
 800bdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bde2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bde6:	81a3      	strh	r3, [r4, #12]
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf0:	4407      	add	r7, r0
 800bdf2:	eba8 0800 	sub.w	r8, r8, r0
 800bdf6:	e7e7      	b.n	800bdc8 <__sflush_r+0xd4>
 800bdf8:	20400001 	.word	0x20400001

0800bdfc <_fflush_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	690b      	ldr	r3, [r1, #16]
 800be00:	4605      	mov	r5, r0
 800be02:	460c      	mov	r4, r1
 800be04:	b913      	cbnz	r3, 800be0c <_fflush_r+0x10>
 800be06:	2500      	movs	r5, #0
 800be08:	4628      	mov	r0, r5
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	b118      	cbz	r0, 800be16 <_fflush_r+0x1a>
 800be0e:	6a03      	ldr	r3, [r0, #32]
 800be10:	b90b      	cbnz	r3, 800be16 <_fflush_r+0x1a>
 800be12:	f7ff fa4d 	bl	800b2b0 <__sinit>
 800be16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d0f3      	beq.n	800be06 <_fflush_r+0xa>
 800be1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be20:	07d0      	lsls	r0, r2, #31
 800be22:	d404      	bmi.n	800be2e <_fflush_r+0x32>
 800be24:	0599      	lsls	r1, r3, #22
 800be26:	d402      	bmi.n	800be2e <_fflush_r+0x32>
 800be28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be2a:	f7ff fc48 	bl	800b6be <__retarget_lock_acquire_recursive>
 800be2e:	4628      	mov	r0, r5
 800be30:	4621      	mov	r1, r4
 800be32:	f7ff ff5f 	bl	800bcf4 <__sflush_r>
 800be36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be38:	07da      	lsls	r2, r3, #31
 800be3a:	4605      	mov	r5, r0
 800be3c:	d4e4      	bmi.n	800be08 <_fflush_r+0xc>
 800be3e:	89a3      	ldrh	r3, [r4, #12]
 800be40:	059b      	lsls	r3, r3, #22
 800be42:	d4e1      	bmi.n	800be08 <_fflush_r+0xc>
 800be44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be46:	f7ff fc3b 	bl	800b6c0 <__retarget_lock_release_recursive>
 800be4a:	e7dd      	b.n	800be08 <_fflush_r+0xc>

0800be4c <__swhatbuf_r>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	460c      	mov	r4, r1
 800be50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be54:	2900      	cmp	r1, #0
 800be56:	b096      	sub	sp, #88	@ 0x58
 800be58:	4615      	mov	r5, r2
 800be5a:	461e      	mov	r6, r3
 800be5c:	da0d      	bge.n	800be7a <__swhatbuf_r+0x2e>
 800be5e:	89a3      	ldrh	r3, [r4, #12]
 800be60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be64:	f04f 0100 	mov.w	r1, #0
 800be68:	bf14      	ite	ne
 800be6a:	2340      	movne	r3, #64	@ 0x40
 800be6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be70:	2000      	movs	r0, #0
 800be72:	6031      	str	r1, [r6, #0]
 800be74:	602b      	str	r3, [r5, #0]
 800be76:	b016      	add	sp, #88	@ 0x58
 800be78:	bd70      	pop	{r4, r5, r6, pc}
 800be7a:	466a      	mov	r2, sp
 800be7c:	f000 f848 	bl	800bf10 <_fstat_r>
 800be80:	2800      	cmp	r0, #0
 800be82:	dbec      	blt.n	800be5e <__swhatbuf_r+0x12>
 800be84:	9901      	ldr	r1, [sp, #4]
 800be86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be8e:	4259      	negs	r1, r3
 800be90:	4159      	adcs	r1, r3
 800be92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be96:	e7eb      	b.n	800be70 <__swhatbuf_r+0x24>

0800be98 <__smakebuf_r>:
 800be98:	898b      	ldrh	r3, [r1, #12]
 800be9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be9c:	079d      	lsls	r5, r3, #30
 800be9e:	4606      	mov	r6, r0
 800bea0:	460c      	mov	r4, r1
 800bea2:	d507      	bpl.n	800beb4 <__smakebuf_r+0x1c>
 800bea4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	6123      	str	r3, [r4, #16]
 800beac:	2301      	movs	r3, #1
 800beae:	6163      	str	r3, [r4, #20]
 800beb0:	b003      	add	sp, #12
 800beb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beb4:	ab01      	add	r3, sp, #4
 800beb6:	466a      	mov	r2, sp
 800beb8:	f7ff ffc8 	bl	800be4c <__swhatbuf_r>
 800bebc:	9f00      	ldr	r7, [sp, #0]
 800bebe:	4605      	mov	r5, r0
 800bec0:	4639      	mov	r1, r7
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff f8dc 	bl	800b080 <_malloc_r>
 800bec8:	b948      	cbnz	r0, 800bede <__smakebuf_r+0x46>
 800beca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bece:	059a      	lsls	r2, r3, #22
 800bed0:	d4ee      	bmi.n	800beb0 <__smakebuf_r+0x18>
 800bed2:	f023 0303 	bic.w	r3, r3, #3
 800bed6:	f043 0302 	orr.w	r3, r3, #2
 800beda:	81a3      	strh	r3, [r4, #12]
 800bedc:	e7e2      	b.n	800bea4 <__smakebuf_r+0xc>
 800bede:	89a3      	ldrh	r3, [r4, #12]
 800bee0:	6020      	str	r0, [r4, #0]
 800bee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	9b01      	ldr	r3, [sp, #4]
 800beea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800beee:	b15b      	cbz	r3, 800bf08 <__smakebuf_r+0x70>
 800bef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bef4:	4630      	mov	r0, r6
 800bef6:	f000 f81d 	bl	800bf34 <_isatty_r>
 800befa:	b128      	cbz	r0, 800bf08 <__smakebuf_r+0x70>
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	f023 0303 	bic.w	r3, r3, #3
 800bf02:	f043 0301 	orr.w	r3, r3, #1
 800bf06:	81a3      	strh	r3, [r4, #12]
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	431d      	orrs	r5, r3
 800bf0c:	81a5      	strh	r5, [r4, #12]
 800bf0e:	e7cf      	b.n	800beb0 <__smakebuf_r+0x18>

0800bf10 <_fstat_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d07      	ldr	r5, [pc, #28]	@ (800bf30 <_fstat_r+0x20>)
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	f7f4 fe00 	bl	8000b22 <_fstat>
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	d102      	bne.n	800bf2c <_fstat_r+0x1c>
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	b103      	cbz	r3, 800bf2c <_fstat_r+0x1c>
 800bf2a:	6023      	str	r3, [r4, #0]
 800bf2c:	bd38      	pop	{r3, r4, r5, pc}
 800bf2e:	bf00      	nop
 800bf30:	20002294 	.word	0x20002294

0800bf34 <_isatty_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4d06      	ldr	r5, [pc, #24]	@ (800bf50 <_isatty_r+0x1c>)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	602b      	str	r3, [r5, #0]
 800bf40:	f7f4 fdff 	bl	8000b42 <_isatty>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d102      	bne.n	800bf4e <_isatty_r+0x1a>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	b103      	cbz	r3, 800bf4e <_isatty_r+0x1a>
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	20002294 	.word	0x20002294

0800bf54 <_init>:
 800bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf56:	bf00      	nop
 800bf58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf5a:	bc08      	pop	{r3}
 800bf5c:	469e      	mov	lr, r3
 800bf5e:	4770      	bx	lr

0800bf60 <_fini>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	bf00      	nop
 800bf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf66:	bc08      	pop	{r3}
 800bf68:	469e      	mov	lr, r3
 800bf6a:	4770      	bx	lr
