
LCD_by_myself_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbb0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000459c  0800cd50  0800cd50  0000dd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112ec  080112ec  00013180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080112ec  080112ec  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112f4  080112f4  00013180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112f4  080112f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080112f8  080112f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  080112fc  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000211c  20000180  0801147c  00013180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000229c  0801147c  0001329c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6b2  00000000  00000000  000131b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000572a  00000000  00000000  00032862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  00037f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014fe  00000000  00000000  00039b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5ab  00000000  00000000  0003b05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026d61  00000000  00000000  00058609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099475  00000000  00000000  0007f36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001187df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078ec  00000000  00000000  00118824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00120110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd38 	.word	0x0800cd38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800cd38 	.word	0x0800cd38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a2f      	ldr	r2, [pc, #188]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a28      	ldr	r2, [pc, #160]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_GPIO_Init+0xdc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800062c:	481b      	ldr	r0, [pc, #108]	@ (800069c <MX_GPIO_Init+0xe0>)
 800062e:	f001 f887 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin|TP_CS_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	21d0      	movs	r1, #208	@ 0xd0
 8000636:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 8000638:	f001 f882 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 800063c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	4811      	ldr	r0, [pc, #68]	@ (800069c <MX_GPIO_Init+0xe0>)
 8000656:	f000 fed7 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800065a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	480b      	ldr	r0, [pc, #44]	@ (800069c <MX_GPIO_Init+0xe0>)
 8000670:	f000 feca 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LCD_CS_Pin TP_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin|TP_CS_Pin;
 8000674:	23d0      	movs	r3, #208	@ 0xd0
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 800068c:	f000 febc 	bl	8001408 <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400

080006a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d013      	beq.n	80006e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80006c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00b      	beq.n	80006e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006cc:	e000      	b.n	80006d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f9      	beq.n	80006ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006da:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	@ 0x58
 80006f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fc4b 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f883 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f7ff ff5b 	bl	80005bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000706:	f000 f91d 	bl	8000944 <MX_SPI1_Init>
  MX_TIM3_Init();
 800070a:	f000 fa9f 	bl	8000c4c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800070e:	f000 fb53 	bl	8000db8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000712:	f007 ffb5 	bl	8008680 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  printf("3.5inch TFT Touch Shield Demo\r\n");
 8000716:	4834      	ldr	r0, [pc, #208]	@ (80007e8 <main+0xf4>)
 8000718:	f00b fd5a 	bl	800c1d0 <puts>
  System_Init();
 800071c:	f008 fcc0 	bl	80090a0 <System_Init>

  LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;//SCAN_DIR_DFT = D2U_L2R направление отрисовки?
 8000720:	2306      	movs	r3, #6
 8000722:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  printf("Init LCD...\r\n");
 8000726:	4831      	ldr	r0, [pc, #196]	@ (80007ec <main+0xf8>)
 8000728:	f00b fd52 	bl	800c1d0 <puts>
  LCD_Init(Lcd_ScanDir, 64000); // управление яркостью
 800072c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000730:	f44f 417a 	mov.w	r1, #64000	@ 0xfa00
 8000734:	4618      	mov	r0, r3
 8000736:	f009 fc5b 	bl	8009ff0 <LCD_Init>
  printf("Init TouchPad...\r\n");
 800073a:	482d      	ldr	r0, [pc, #180]	@ (80007f0 <main+0xfc>)
 800073c:	f00b fd48 	bl	800c1d0 <puts>
  TP_Init(Lcd_ScanDir);
 8000740:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000744:	4618      	mov	r0, r3
 8000746:	f00b f855 	bl	800b7f4 <TP_Init>
  printf("Init SDcard...\r\n");
 800074a:	482a      	ldr	r0, [pc, #168]	@ (80007f4 <main+0x100>)
 800074c:	f00b fd40 	bl	800c1d0 <puts>
  SD_Init();
 8000750:	f009 f9be 	bl	8009ad0 <SD_Init>
  printf("Install factory TP set...\r\n");
 8000754:	4828      	ldr	r0, [pc, #160]	@ (80007f8 <main+0x104>)
 8000756:	f00b fd3b 	bl	800c1d0 <puts>
  TP_GetAdFac();//Get the default calibration factor
 800075a:	f00a fe45 	bl	800b3e8 <TP_GetAdFac>
  printf("Initialization for Electronic load \r\n");
 800075e:	4827      	ldr	r0, [pc, #156]	@ (80007fc <main+0x108>)
 8000760:	f00b fd36 	bl	800c1d0 <puts>
  LOAD_Init();
 8000764:	f00b f864 	bl	800b830 <LOAD_Init>
	printf("**********Touch Draw Board**********\r\n");
	TP_GetAdFac();//Get the default calibration factor
	TP_Dialog();//initialize the drawing board
*/

	uint32_t previousTick = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	64fb      	str	r3, [r7, #76]	@ 0x4c

	DEV_TIME sDev_time;
	sDev_time.Hour = 00;
 800076c:	2300      	movs	r3, #0
 800076e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	sDev_time.Min = 00;
 8000772:	2300      	movs	r3, #0
 8000774:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	sDev_time.Sec = 00;
 8000778:	2300      	movs	r3, #0
 800077a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	LCD_Clear(LCD_BACKGROUND);
 800077e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000782:	f009 fd25 	bl	800a1d0 <LCD_Clear>
	TP_MenuDialog();
 8000786:	f00a fea7 	bl	800b4d8 <TP_MenuDialog>
	  //GUI_Show();
	  //LCD_Show_bmp(Bmp_ScanDir , Lcd_ScanDir);
	  //TP_DrawBoard();
	  //GUI_DisGrayMap(0, 0, gImage_ninja);

	  TP_MenuTouch();
 800078a:	f00a ffb9 	bl	800b700 <TP_MenuTouch>
	  TP_IndicationsUnit();
 800078e:	f00a ff79 	bl	800b684 <TP_IndicationsUnit>

	  if (HAL_GetTick() - previousTick >= 1000) {
 8000792:	f000 fc65 	bl	8001060 <HAL_GetTick>
 8000796:	4602      	mov	r2, r0
 8000798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007a0:	d3f3      	bcc.n	800078a <main+0x96>
		  previousTick = HAL_GetTick();
 80007a2:	f000 fc5d 	bl	8001060 <HAL_GetTick>
 80007a6:	64f8      	str	r0, [r7, #76]	@ 0x4c


		  UART_Send("Input something:\r\n");
 80007a8:	4815      	ldr	r0, [pc, #84]	@ (8000800 <main+0x10c>)
 80007aa:	f000 fb7f 	bl	8000eac <UART_Send>

		  char rxBuffer[64];
		  UART_ReceiveString(rxBuffer, sizeof(rxBuffer));
 80007ae:	463b      	mov	r3, r7
 80007b0:	2140      	movs	r1, #64	@ 0x40
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fb90 	bl	8000ed8 <UART_ReceiveString>
		  printf("Received: %s\r\n", rxBuffer);
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4811      	ldr	r0, [pc, #68]	@ (8000804 <main+0x110>)
 80007be:	f00b fc9f 	bl	800c100 <iprintf>


		  sDev_time.Sec++;
 80007c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80007c6:	3301      	adds	r3, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		  GUI_Showtime(0, 0, 126, 25, &sDev_time, BLUE);
 80007ce:	231f      	movs	r3, #31
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2319      	movs	r3, #25
 80007da:	227e      	movs	r2, #126	@ 0x7e
 80007dc:	2100      	movs	r1, #0
 80007de:	2000      	movs	r0, #0
 80007e0:	f00a f988 	bl	800aaf4 <GUI_Showtime>
	  TP_MenuTouch();
 80007e4:	e7d1      	b.n	800078a <main+0x96>
 80007e6:	bf00      	nop
 80007e8:	0800cd50 	.word	0x0800cd50
 80007ec:	0800cd70 	.word	0x0800cd70
 80007f0:	0800cd80 	.word	0x0800cd80
 80007f4:	0800cd94 	.word	0x0800cd94
 80007f8:	0800cda4 	.word	0x0800cda4
 80007fc:	0800cdc0 	.word	0x0800cdc0
 8000800:	0800cde8 	.word	0x0800cde8
 8000804:	0800cdfc 	.word	0x0800cdfc

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	@ 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	@ 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00b fdba 	bl	800c390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <SystemClock_Config+0xc8>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	4a26      	ldr	r2, [pc, #152]	@ (80008d0 <SystemClock_Config+0xc8>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	@ 0x40
 800083c:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <SystemClock_Config+0xc8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <SystemClock_Config+0xcc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a20      	ldr	r2, [pc, #128]	@ (80008d4 <SystemClock_Config+0xcc>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <SystemClock_Config+0xcc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000878:	2310      	movs	r3, #16
 800087a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 123;
 800087c:	237b      	movs	r3, #123	@ 0x7b
 800087e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000880:	2302      	movs	r3, #2
 8000882:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4618      	mov	r0, r3
 800088e:	f002 f9c3 	bl	8002c18 <HAL_RCC_OscConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000898:	f000 f84e 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089c:	230f      	movs	r3, #15
 800089e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a0:	2302      	movs	r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2103      	movs	r1, #3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fc25 	bl	8003108 <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c4:	f000 f838 	bl	8000938 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	@ 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <USB_Send_Message>:

/* USER CODE BEGIN 4 */
void USB_Send_Message(const char *msg) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fc7d 	bl	80001e0 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	4619      	mov	r1, r3
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f007 ff85 	bl	80087fc <CDC_Transmit_FS>
	HAL_Delay(10);
 80008f2:	200a      	movs	r0, #10
 80008f4:	f000 fbc0 	bl	8001078 <HAL_Delay>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_write>:

// Опционально: перенаправляем printf на SWO (удобно для отладки)
int _write(int file, char *ptr, int len) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e009      	b.n	8000926 <_write+0x26>
        ITM_SendChar(ptr[i]);
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	4413      	add	r3, r2
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fec2 	bl	80006a4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3301      	adds	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	429a      	cmp	r2, r3
 800092c:	dbf1      	blt.n	8000912 <_write+0x12>
    }
    return len;
 800092e:	687b      	ldr	r3, [r7, #4]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	@ (80009ac <MX_SPI1_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000950:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000974:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000978:	2210      	movs	r2, #16
 800097a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000990:	220a      	movs	r2, #10
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000996:	f002 fd97 	bl	80034c8 <HAL_SPI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a0:	f7ff ffca 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000019c 	.word	0x2000019c
 80009ac:	40013000 	.word	0x40013000

080009b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	@ (8000a34 <HAL_SPI_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12b      	bne.n	8000a2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <HAL_SPI_MspInit+0x88>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	4a17      	ldr	r2, [pc, #92]	@ (8000a38 <HAL_SPI_MspInit+0x88>)
 80009dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_SPI_MspInit+0x88>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <HAL_SPI_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a10      	ldr	r2, [pc, #64]	@ (8000a38 <HAL_SPI_MspInit+0x88>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <HAL_SPI_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a0a:	23e0      	movs	r3, #224	@ 0xe0
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <HAL_SPI_MspInit+0x8c>)
 8000a26:	f000 fcef 	bl	8001408 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	@ 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40013000 	.word	0x40013000
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 faa7 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <USART2_IRQHandler+0x10>)
 8000af6:	f003 fb49 	bl	800418c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000240 	.word	0x20000240

08000b04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b08:	4802      	ldr	r0, [pc, #8]	@ (8000b14 <OTG_FS_IRQHandler+0x10>)
 8000b0a:	f000 ff76 	bl	80019fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000176c 	.word	0x2000176c

08000b18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e00a      	b.n	8000b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	4601      	mov	r1, r0
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf0      	blt.n	8000b2a <_read+0x12>
  }

  return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_isatty>:

int _isatty(int file)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc4:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <_sbrk+0x5c>)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <_sbrk+0x60>)
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <_sbrk+0x64>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <_sbrk+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d207      	bcs.n	8000bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bec:	f00b fc2e 	bl	800c44c <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	e009      	b.n	8000c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c02:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <_sbrk+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20020000 	.word	0x20020000
 8000c1c:	00000400 	.word	0x00000400
 8000c20:	200001f4 	.word	0x200001f4
 8000c24:	200022a0 	.word	0x200022a0

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c52:	f107 0320 	add.w	r3, r7, #32
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	615a      	str	r2, [r3, #20]
 8000c6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c6e:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000c70:	4a22      	ldr	r2, [pc, #136]	@ (8000cfc <MX_TIM3_Init+0xb0>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c74:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c94:	4818      	ldr	r0, [pc, #96]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000c96:	f002 fca0 	bl	80035da <HAL_TIM_PWM_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f7ff fe4a 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4811      	ldr	r0, [pc, #68]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000cb4:	f003 f88a 	bl	8003dcc <HAL_TIMEx_MasterConfigSynchronization>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000cbe:	f7ff fe3b 	bl	8000938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc2:	2360      	movs	r3, #96	@ 0x60
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000cda:	f002 fd7d 	bl	80037d8 <HAL_TIM_PWM_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ce4:	f7ff fe28 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <MX_TIM3_Init+0xac>)
 8000cea:	f000 f82b 	bl	8000d44 <HAL_TIM_MspPostInit>

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	@ 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001f8 	.word	0x200001f8
 8000cfc:	40000400 	.word	0x40000400

08000d00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x3c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d10d      	bne.n	8000d2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_TIM_PWM_MspInit+0x40>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	4a09      	ldr	r2, [pc, #36]	@ (8000d40 <HAL_TIM_PWM_MspInit+0x40>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <HAL_TIM_PWM_MspInit+0x40>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40000400 	.word	0x40000400
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <HAL_TIM_MspPostInit+0x68>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d11d      	bne.n	8000da2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <HAL_TIM_MspPostInit+0x6c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	@ (8000db0 <HAL_TIM_MspPostInit+0x6c>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_TIM_MspPostInit+0x6c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000d82:	2320      	movs	r3, #32
 8000d84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <HAL_TIM_MspPostInit+0x70>)
 8000d9e:	f000 fb33 	bl	8001408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40000400 	.word	0x40000400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400

08000db8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <MX_USART2_UART_Init+0x50>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f003 f85a 	bl	8003ea8 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfa:	f7ff fd9d 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000240 	.word	0x20000240
 8000e08:	40004400 	.word	0x40004400

08000e0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea0 <HAL_UART_MspInit+0x94>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d133      	bne.n	8000e96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e66:	230c      	movs	r3, #12
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e76:	2307      	movs	r3, #7
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <HAL_UART_MspInit+0x9c>)
 8000e82:	f000 fac1 	bl	8001408 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2026      	movs	r0, #38	@ 0x26
 8000e8c:	f000 f9f3 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e90:	2026      	movs	r0, #38	@ 0x26
 8000e92:	f000 fa0c 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	@ 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000

08000eac <UART_Send>:
  }
}

/* USER CODE BEGIN 1 */

void UART_Send(const char *msg) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	//  В *NIX перевод на начало следующей строки обеспечивается символом «\n» (LF), в Windows — комбинацией символов «\r\n»
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff f993 	bl	80001e0 <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <UART_Send+0x28>)
 8000ec6:	f003 f83f 	bl	8003f48 <HAL_UART_Transmit>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000240 	.word	0x20000240

08000ed8 <UART_ReceiveString>:

void UART_ReceiveString(char *buffer, uint16_t maxLen) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
    uint16_t i = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	81fb      	strh	r3, [r7, #14]
    char ch;
    while (i < (maxLen - 1)) {
 8000ee8:	e017      	b.n	8000f1a <UART_ReceiveString+0x42>
        if (HAL_UART_Receive(&huart2, (uint8_t *)&ch, 2, 10) == HAL_OK) { // таймаут 10 мс
 8000eea:	f107 010d 	add.w	r1, r7, #13
 8000eee:	230a      	movs	r3, #10
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4812      	ldr	r0, [pc, #72]	@ (8000f3c <UART_ReceiveString+0x64>)
 8000ef4:	f003 f8b3 	bl	800405e <HAL_UART_Receive>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d113      	bne.n	8000f26 <UART_ReceiveString+0x4e>
            if (ch == '\r' || ch == '\n') {
 8000efe:	7b7b      	ldrb	r3, [r7, #13]
 8000f00:	2b0d      	cmp	r3, #13
 8000f02:	d011      	beq.n	8000f28 <UART_ReceiveString+0x50>
 8000f04:	7b7b      	ldrb	r3, [r7, #13]
 8000f06:	2b0a      	cmp	r3, #10
 8000f08:	d00e      	beq.n	8000f28 <UART_ReceiveString+0x50>
                break;
            }
            buffer[i++] = ch;
 8000f0a:	89fb      	ldrh	r3, [r7, #14]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	81fa      	strh	r2, [r7, #14]
 8000f10:	461a      	mov	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	7b7a      	ldrb	r2, [r7, #13]
 8000f18:	701a      	strb	r2, [r3, #0]
    while (i < (maxLen - 1)) {
 8000f1a:	89fa      	ldrh	r2, [r7, #14]
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbe2      	blt.n	8000eea <UART_ReceiveString+0x12>
 8000f24:	e000      	b.n	8000f28 <UART_ReceiveString+0x50>
        } else {
            break; // нет данных — выходим
 8000f26:	bf00      	nop
        }
    }
    buffer[i] = '\0';
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000240 	.word	0x20000240

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f44:	f7ff fe70 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	@ (8000f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f00b fa73 	bl	800c458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fbbf 	bl	80006f4 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000f84:	080112fc 	.word	0x080112fc
  ldr r2, =_sbss
 8000f88:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000f8c:	2000229c 	.word	0x2000229c

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	@ (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f94f 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fd3a 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f967 	bl	80012ca <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 f92f 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	@ (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	@ (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	20000288 	.word	0x20000288

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	@ (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000288 	.word	0x20000288

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008

080010c0 <__NVIC_SetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	@ (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff3e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff8e 	bl	80011b4 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5d 	bl	8001160 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff31 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa2 	bl	800121c <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff feb6 	bl	8001060 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d008      	beq.n	8001314 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2280      	movs	r2, #128	@ 0x80
 8001306:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e052      	b.n	80013ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0216 	bic.w	r2, r2, #22
 8001322:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001332:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	2b00      	cmp	r3, #0
 800133a:	d103      	bne.n	8001344 <HAL_DMA_Abort+0x62>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0208 	bic.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001364:	e013      	b.n	800138e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001366:	f7ff fe7b 	bl	8001060 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b05      	cmp	r3, #5
 8001372:	d90c      	bls.n	800138e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2220      	movs	r2, #32
 8001378:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2203      	movs	r2, #3
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e015      	b.n	80013ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e4      	bne.n	8001366 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a0:	223f      	movs	r2, #63	@ 0x3f
 80013a2:	409a      	lsls	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d004      	beq.n	80013e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e00c      	b.n	80013fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2205      	movs	r2, #5
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e159      	b.n	80016d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8148 	bne.w	80016d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d005      	beq.n	800145a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	2b02      	cmp	r3, #2
 8001458:	d130      	bne.n	80014bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d017      	beq.n	80014f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a2 	beq.w	80016d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b57      	ldr	r3, [pc, #348]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a56      	ldr	r2, [pc, #344]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b54      	ldr	r3, [pc, #336]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015aa:	4a52      	ldr	r2, [pc, #328]	@ (80016f4 <HAL_GPIO_Init+0x2ec>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a49      	ldr	r2, [pc, #292]	@ (80016f8 <HAL_GPIO_Init+0x2f0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x202>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a48      	ldr	r2, [pc, #288]	@ (80016fc <HAL_GPIO_Init+0x2f4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x1fe>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a47      	ldr	r2, [pc, #284]	@ (8001700 <HAL_GPIO_Init+0x2f8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x1fa>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a46      	ldr	r2, [pc, #280]	@ (8001704 <HAL_GPIO_Init+0x2fc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x1f6>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a45      	ldr	r2, [pc, #276]	@ (8001708 <HAL_GPIO_Init+0x300>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x1f2>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e008      	b.n	800160c <HAL_GPIO_Init+0x204>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x204>
 80015fe:	2303      	movs	r3, #3
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x204>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x204>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x204>
 800160a:	2300      	movs	r3, #0
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	f002 0203 	and.w	r2, r2, #3
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800161c:	4935      	ldr	r1, [pc, #212]	@ (80016f4 <HAL_GPIO_Init+0x2ec>)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b38      	ldr	r3, [pc, #224]	@ (800170c <HAL_GPIO_Init+0x304>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800164e:	4a2f      	ldr	r2, [pc, #188]	@ (800170c <HAL_GPIO_Init+0x304>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001654:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <HAL_GPIO_Init+0x304>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001678:	4a24      	ldr	r2, [pc, #144]	@ (800170c <HAL_GPIO_Init+0x304>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800167e:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_GPIO_Init+0x304>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a2:	4a1a      	ldr	r2, [pc, #104]	@ (800170c <HAL_GPIO_Init+0x304>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_GPIO_Init+0x304>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <HAL_GPIO_Init+0x304>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3301      	adds	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	f67f aea2 	bls.w	8001424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3724      	adds	r7, #36	@ 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40013800 	.word	0x40013800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40020800 	.word	0x40020800
 8001704:	40020c00 	.word	0x40020c00
 8001708:	40021000 	.word	0x40021000
 800170c:	40013c00 	.word	0x40013c00

08001710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e001      	b.n	8001732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800175c:	e003      	b.n	8001766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	041a      	lsls	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af02      	add	r7, sp, #8
 8001778:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e101      	b.n	8001988 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f007 f974 	bl	8008a8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2203      	movs	r2, #3
 80017a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017b2:	d102      	bne.n	80017ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fd37 	bl	8005232 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7c1a      	ldrb	r2, [r3, #16]
 80017cc:	f88d 2000 	strb.w	r2, [sp]
 80017d0:	3304      	adds	r3, #4
 80017d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d4:	f003 fc16 	bl	8005004 <USB_CoreInit>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2202      	movs	r2, #2
 80017e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0ce      	b.n	8001988 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fd2f 	bl	8005254 <USB_SetCurrentMode>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0bf      	b.n	8001988 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e04a      	b.n	80018a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3315      	adds	r3, #21
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	3314      	adds	r3, #20
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	b298      	uxth	r0, r3
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	332e      	adds	r3, #46	@ 0x2e
 800184a:	4602      	mov	r2, r0
 800184c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3318      	adds	r3, #24
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	331c      	adds	r3, #28
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	3320      	adds	r3, #32
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3324      	adds	r3, #36	@ 0x24
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	3301      	adds	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	791b      	ldrb	r3, [r3, #4]
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d3af      	bcc.n	800180e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	e044      	b.n	800193e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3301      	adds	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	791b      	ldrb	r3, [r3, #4]
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	429a      	cmp	r2, r3
 8001946:	d3b5      	bcc.n	80018b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7c1a      	ldrb	r2, [r3, #16]
 8001950:	f88d 2000 	strb.w	r2, [sp]
 8001954:	3304      	adds	r3, #4
 8001956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001958:	f003 fcc8 	bl	80052ec <USB_DevInit>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2202      	movs	r2, #2
 8001966:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00c      	b.n	8001988 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f004 fd12 	bl	80063aa <USB_DevDisconnect>

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_PCD_Start+0x1c>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e022      	b.n	80019f2 <HAL_PCD_Start+0x62>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d009      	beq.n	80019d4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fc19 	bl	8005210 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f004 fcc0 	bl	8006368 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019fa:	b590      	push	{r4, r7, lr}
 80019fc:	b08d      	sub	sp, #52	@ 0x34
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 fd7e 	bl	8006512 <USB_GetMode>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 848c 	bne.w	8002336 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fce2 	bl	80063ec <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8482 	beq.w	8002334 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 fccf 	bl	80063ec <USB_ReadInterrupts>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d107      	bne.n	8001a68 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f002 0202 	and.w	r2, r2, #2
 8001a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f004 fcbd 	bl	80063ec <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b10      	cmp	r3, #16
 8001a7a:	d161      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0210 	bic.w	r2, r2, #16
 8001a8a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 020f 	and.w	r2, r3, #15
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001ab6:	d124      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d035      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6a38      	ldr	r0, [r7, #32]
 8001ad8:	f004 faf4 	bl	80060c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae8:	441a      	add	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001afa:	441a      	add	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	e016      	b.n	8001b30 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001b08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001b0c:	d110      	bne.n	8001b30 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001b14:	2208      	movs	r2, #8
 8001b16:	4619      	mov	r1, r3
 8001b18:	6a38      	ldr	r0, [r7, #32]
 8001b1a:	f004 fad3 	bl	80060c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b2a:	441a      	add	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0210 	orr.w	r2, r2, #16
 8001b3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fc51 	bl	80063ec <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001b54:	f040 80a7 	bne.w	8001ca6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 fc56 	bl	8006412 <USB_ReadDevAllOutEpInterrupt>
 8001b66:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001b68:	e099      	b.n	8001c9e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 808e 	beq.w	8001c92 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f004 fc7a 	bl	800647a <USB_ReadDevOutEPInterrupt>
 8001b86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00c      	beq.n	8001bac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fea4 	bl	80028f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 ff7a 	bl	8002ac4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001be6:	461a      	mov	r2, r3
 8001be8:	2310      	movs	r3, #16
 8001bea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d030      	beq.n	8001c58 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfe:	2b80      	cmp	r3, #128	@ 0x80
 8001c00:	d109      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c14:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	78db      	ldrb	r3, [r3, #3]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d108      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2200      	movs	r2, #0
 8001c38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f007 f81f 	bl	8008c84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c52:	461a      	mov	r2, r3
 8001c54:	2302      	movs	r3, #2
 8001c56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d008      	beq.n	8001c74 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2320      	movs	r3, #32
 8001c72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	3301      	adds	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f47f af62 	bne.w	8001b6a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fb9e 	bl	80063ec <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cba:	f040 80db 	bne.w	8001e74 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 fbbf 	bl	8006446 <USB_ReadDevAllInEpInterrupt>
 8001cc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001cce:	e0cd      	b.n	8001e6c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80c2 	beq.w	8001e60 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fbe5 	bl	80064b6 <USB_ReadDevInEPInterrupt>
 8001cec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d057      	beq.n	8001da8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	2201      	movs	r2, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69f9      	ldr	r1, [r7, #28]
 8001d14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001d18:	4013      	ands	r3, r2
 8001d1a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	799b      	ldrb	r3, [r3, #6]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d132      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	3320      	adds	r3, #32
 8001d46:	6819      	ldr	r1, [r3, #0]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4403      	add	r3, r0
 8001d56:	331c      	adds	r3, #28
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4419      	add	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4403      	add	r3, r0
 8001d6a:	3320      	adds	r3, #32
 8001d6c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d113      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x3a2>
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3324      	adds	r3, #36	@ 0x24
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d108      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d94:	461a      	mov	r2, r3
 8001d96:	2101      	movs	r1, #1
 8001d98:	f004 fbec 	bl	8006574 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f006 fef3 	bl	8008b8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2310      	movs	r3, #16
 8001dde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001df6:	461a      	mov	r2, r3
 8001df8:	2340      	movs	r3, #64	@ 0x40
 8001dfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d023      	beq.n	8001e4e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e08:	6a38      	ldr	r0, [r7, #32]
 8001e0a:	f003 fbd3 	bl	80055b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3310      	adds	r3, #16
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	78db      	ldrb	r3, [r3, #3]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f006 ff36 	bl	8008ca8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fcbd 	bl	80027da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	3301      	adds	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f47f af2e 	bne.w	8001cd0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 fab7 	bl	80063ec <USB_ReadInterrupts>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e88:	d122      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d108      	bne.n	8001eba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fea4 	bl	8002c00 <HAL_PCDEx_LPM_Callback>
 8001eb8:	e002      	b.n	8001ec0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f006 fed4 	bl	8008c68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 fa89 	bl	80063ec <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ee4:	d112      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f006 fe90 	bl	8008c1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001f0a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fa6b 	bl	80063ec <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f20:	f040 80b7 	bne.w	8002092 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fb38 	bl	80055b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f48:	e046      	b.n	8001fd8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f56:	461a      	mov	r2, r3
 8001f58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6e:	0151      	lsls	r1, r2, #5
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	440a      	add	r2, r1
 8001f74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001f78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fa2:	0151      	lsls	r1, r2, #5
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	440a      	add	r2, r1
 8001fa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001fac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fc2:	0151      	lsls	r1, r2, #5
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	440a      	add	r2, r1
 8001fc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001fcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001fd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	791b      	ldrb	r3, [r3, #4]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d3b2      	bcc.n	8001f4a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ff2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001ff6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7bdb      	ldrb	r3, [r3, #15]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d016      	beq.n	800202e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002010:	f043 030b 	orr.w	r3, r3, #11
 8002014:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002026:	f043 030b 	orr.w	r3, r3, #11
 800202a:	6453      	str	r3, [r2, #68]	@ 0x44
 800202c:	e015      	b.n	800205a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800203c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002040:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002044:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002054:	f043 030b 	orr.w	r3, r3, #11
 8002058:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002068:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800206c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800207c:	461a      	mov	r2, r3
 800207e:	f004 fa79 	bl	8006574 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 f9a8 	bl	80063ec <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020a6:	d123      	bne.n	80020f0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f004 fa3e 	bl	800652e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 faf5 	bl	80056a6 <USB_GetDevSpeed>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681c      	ldr	r4, [r3, #0]
 80020c8:	f001 f9ca 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 80020cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020d2:	461a      	mov	r2, r3
 80020d4:	4620      	mov	r0, r4
 80020d6:	f002 fff9 	bl	80050cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f006 fd7f 	bl	8008bde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80020ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 f979 	bl	80063ec <USB_ReadInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b08      	cmp	r3, #8
 8002102:	d10a      	bne.n	800211a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f006 fd5c 	bl	8008bc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f002 0208 	and.w	r2, r2, #8
 8002118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f004 f964 	bl	80063ec <USB_ReadInterrupts>
 8002124:	4603      	mov	r3, r0
 8002126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212a:	2b80      	cmp	r3, #128	@ 0x80
 800212c:	d123      	bne.n	8002176 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800213a:	2301      	movs	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
 800213e:	e014      	b.n	800216a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4619      	mov	r1, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fb0a 	bl	8002778 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3301      	adds	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	791b      	ldrb	r3, [r3, #4]
 800216e:	461a      	mov	r2, r3
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	4293      	cmp	r3, r2
 8002174:	d3e4      	bcc.n	8002140 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f004 f936 	bl	80063ec <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800218a:	d13c      	bne.n	8002206 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800218c:	2301      	movs	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002190:	e02b      	b.n	80021ea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3318      	adds	r3, #24
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d115      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80021b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da12      	bge.n	80021e4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	3317      	adds	r3, #23
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 faca 	bl	8002778 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	3301      	adds	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	791b      	ldrb	r3, [r3, #4]
 80021ee:	461a      	mov	r2, r3
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d3cd      	bcc.n	8002192 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f004 f8ee 	bl	80063ec <USB_ReadInterrupts>
 8002210:	4603      	mov	r3, r0
 8002212:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800221a:	d156      	bne.n	80022ca <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800221c:	2301      	movs	r3, #1
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002220:	e045      	b.n	80022ae <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d12e      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800224a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800224c:	2b00      	cmp	r3, #0
 800224e:	da2b      	bge.n	80022a8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	0c1a      	lsrs	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800225a:	4053      	eors	r3, r2
 800225c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	d121      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022a4:	6053      	str	r3, [r2, #4]
            break;
 80022a6:	e008      	b.n	80022ba <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	3301      	adds	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	791b      	ldrb	r3, [r3, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d3b3      	bcc.n	8002222 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80022c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 f88c 	bl	80063ec <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022de:	d10a      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f006 fcf3 	bl	8008ccc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80022f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f004 f876 	bl	80063ec <USB_ReadInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d115      	bne.n	8002336 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f006 fce3 	bl	8008ce8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	e000      	b.n	8002336 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002334:	bf00      	nop
    }
  }
}
 8002336:	3734      	adds	r7, #52	@ 0x34
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}

0800233c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_PCD_SetAddress+0x1a>
 8002352:	2302      	movs	r3, #2
 8002354:	e012      	b.n	800237c <HAL_PCD_SetAddress+0x40>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f003 ffd5 	bl	800631c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4603      	mov	r3, r0
 8002394:	70fb      	strb	r3, [r7, #3]
 8002396:	460b      	mov	r3, r1
 8002398:	803b      	strh	r3, [r7, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	da0f      	bge.n	80023ca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	f003 020f 	and.w	r2, r3, #15
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	3310      	adds	r3, #16
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	3304      	adds	r3, #4
 80023c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	705a      	strb	r2, [r3, #1]
 80023c8:	e00f      	b.n	80023ea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 020f 	and.w	r2, r3, #15
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	3304      	adds	r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80023f6:	883b      	ldrh	r3, [r7, #0]
 80023f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	78ba      	ldrb	r2, [r7, #2]
 8002404:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d004      	beq.n	8002418 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002418:	78bb      	ldrb	r3, [r7, #2]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d102      	bne.n	8002424 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_PCD_EP_Open+0xae>
 800242e:	2302      	movs	r3, #2
 8002430:	e00e      	b.n	8002450 <HAL_PCD_EP_Open+0xcc>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68f9      	ldr	r1, [r7, #12]
 8002440:	4618      	mov	r0, r3
 8002442:	f003 f955 	bl	80056f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800244e:	7afb      	ldrb	r3, [r7, #11]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002468:	2b00      	cmp	r3, #0
 800246a:	da0f      	bge.n	800248c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 020f 	and.w	r2, r3, #15
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	3310      	adds	r3, #16
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	705a      	strb	r2, [r3, #1]
 800248a:	e00f      	b.n	80024ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 020f 	and.w	r2, r3, #15
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	3304      	adds	r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_EP_Close+0x6e>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e00e      	b.n	80024e4 <HAL_PCD_EP_Close+0x8c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 f993 	bl	8005800 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	460b      	mov	r3, r1
 80024fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024fc:	7afb      	ldrb	r3, [r7, #11]
 80024fe:	f003 020f 	and.w	r2, r3, #15
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	3304      	adds	r3, #4
 8002514:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2200      	movs	r2, #0
 800252c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252e:	7afb      	ldrb	r3, [r7, #11]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	b2da      	uxtb	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	799b      	ldrb	r3, [r3, #6]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	799b      	ldrb	r3, [r3, #6]
 8002550:	461a      	mov	r2, r3
 8002552:	6979      	ldr	r1, [r7, #20]
 8002554:	f003 fa30 	bl	80059b8 <USB_EPStartXfer>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	f003 020f 	and.w	r2, r3, #15
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002584:	681b      	ldr	r3, [r3, #0]
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	460b      	mov	r3, r1
 80025a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a2:	7afb      	ldrb	r3, [r7, #11]
 80025a4:	f003 020f 	and.w	r2, r3, #15
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	3310      	adds	r3, #16
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	3304      	adds	r3, #4
 80025b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2201      	movs	r2, #1
 80025d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	799b      	ldrb	r3, [r3, #6]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d102      	bne.n	80025ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	799b      	ldrb	r3, [r3, #6]
 80025f4:	461a      	mov	r2, r3
 80025f6:	6979      	ldr	r1, [r7, #20]
 80025f8:	f003 f9de 	bl	80059b8 <USB_EPStartXfer>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	7912      	ldrb	r2, [r2, #4]
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04f      	b.n	80026c4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002628:	2b00      	cmp	r3, #0
 800262a:	da0f      	bge.n	800264c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	f003 020f 	and.w	r2, r3, #15
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	3310      	adds	r3, #16
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	3304      	adds	r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	705a      	strb	r2, [r3, #1]
 800264a:	e00d      	b.n	8002668 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	3304      	adds	r3, #4
 8002660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_PCD_EP_SetStall+0x82>
 8002684:	2302      	movs	r3, #2
 8002686:	e01d      	b.n	80026c4 <HAL_PCD_EP_SetStall+0xbe>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fd6c 	bl	8006174 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7999      	ldrb	r1, [r3, #6]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026b4:	461a      	mov	r2, r3
 80026b6:	f003 ff5d 	bl	8006574 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	7912      	ldrb	r2, [r2, #4]
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e042      	b.n	8002770 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	da0f      	bge.n	8002712 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 020f 	and.w	r2, r3, #15
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	3310      	adds	r3, #16
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	705a      	strb	r2, [r3, #1]
 8002710:	e00f      	b.n	8002732 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_PCD_EP_ClrStall+0x86>
 800274e:	2302      	movs	r3, #2
 8002750:	e00e      	b.n	8002770 <HAL_PCD_EP_ClrStall+0xa4>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68f9      	ldr	r1, [r7, #12]
 8002760:	4618      	mov	r0, r3
 8002762:	f003 fd75 	bl	8006250 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002788:	2b00      	cmp	r3, #0
 800278a:	da0c      	bge.n	80027a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	3310      	adds	r3, #16
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	3304      	adds	r3, #4
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e00c      	b.n	80027c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	3304      	adds	r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 fb94 	bl	8005ef4 <USB_EPStopXfer>
 80027cc:	4603      	mov	r3, r0
 80027ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027d0:	7afb      	ldrb	r3, [r7, #11]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b08a      	sub	sp, #40	@ 0x28
 80027de:	af02      	add	r7, sp, #8
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	3310      	adds	r3, #16
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	3304      	adds	r3, #4
 8002800:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	429a      	cmp	r2, r3
 800280c:	d901      	bls.n	8002812 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06b      	b.n	80028ea <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	429a      	cmp	r2, r3
 8002826:	d902      	bls.n	800282e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3303      	adds	r3, #3
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002836:	e02a      	b.n	800288e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	429a      	cmp	r2, r3
 800284c:	d902      	bls.n	8002854 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3303      	adds	r3, #3
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	68d9      	ldr	r1, [r3, #12]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	4603      	mov	r3, r0
 8002870:	6978      	ldr	r0, [r7, #20]
 8002872:	f003 fbe9 	bl	8006048 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	441a      	add	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	441a      	add	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d809      	bhi.n	80028b8 <PCD_WriteEmptyTxFifo+0xde>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d203      	bcs.n	80028b8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1bf      	bne.n	8002838 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d811      	bhi.n	80028e8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	2201      	movs	r2, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	43db      	mvns	r3, r3
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028e4:	4013      	ands	r3, r2
 80028e6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	333c      	adds	r3, #60	@ 0x3c
 800290c:	3304      	adds	r3, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	799b      	ldrb	r3, [r3, #6]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d17b      	bne.n	8002a22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	4a61      	ldr	r2, [pc, #388]	@ (8002abc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	f240 80b9 	bls.w	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80b3 	beq.w	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002956:	461a      	mov	r2, r3
 8002958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800295c:	6093      	str	r3, [r2, #8]
 800295e:	e0a7      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002976:	461a      	mov	r2, r3
 8002978:	2320      	movs	r3, #32
 800297a:	6093      	str	r3, [r2, #8]
 800297c:	e098      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002984:	2b00      	cmp	r3, #0
 8002986:	f040 8093 	bne.w	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	4a4b      	ldr	r2, [pc, #300]	@ (8002abc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d90f      	bls.n	80029b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a8:	461a      	mov	r2, r3
 80029aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029ae:	6093      	str	r3, [r2, #8]
 80029b0:	e07e      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	3304      	adds	r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	0159      	lsls	r1, r3, #5
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d114      	bne.n	8002a14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029fc:	461a      	mov	r2, r3
 80029fe:	2101      	movs	r1, #1
 8002a00:	f003 fdb8 	bl	8006574 <USB_EP0_OutStart>
 8002a04:	e006      	b.n	8002a14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	441a      	add	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f006 f89c 	bl	8008b58 <HAL_PCD_DataOutStageCallback>
 8002a20:	e046      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	4a26      	ldr	r2, [pc, #152]	@ (8002ac0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d124      	bne.n	8002a74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a40:	461a      	mov	r2, r3
 8002a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a46:	6093      	str	r3, [r2, #8]
 8002a48:	e032      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a60:	461a      	mov	r2, r3
 8002a62:	2320      	movs	r3, #32
 8002a64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f006 f873 	bl	8008b58 <HAL_PCD_DataOutStageCallback>
 8002a72:	e01d      	b.n	8002ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d114      	bne.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d108      	bne.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	f003 fd68 	bl	8006574 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f006 f854 	bl	8008b58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	4f54300a 	.word	0x4f54300a
 8002ac0:	4f54310a 	.word	0x4f54310a

08002ac4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	333c      	adds	r3, #60	@ 0x3c
 8002adc:	3304      	adds	r3, #4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4a15      	ldr	r2, [pc, #84]	@ (8002b4c <PCD_EP_OutSetupPacket_int+0x88>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d90e      	bls.n	8002b18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b10:	461a      	mov	r2, r3
 8002b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f006 f80b 	bl	8008b34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	@ (8002b4c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d90c      	bls.n	8002b40 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	799b      	ldrb	r3, [r3, #6]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d108      	bne.n	8002b40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	f003 fd1a 	bl	8006574 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	4f54300a 	.word	0x4f54300a

08002b50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b6e:	883b      	ldrh	r3, [r7, #0]
 8002b70:	0419      	lsls	r1, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b7c:	e028      	b.n	8002bd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4413      	add	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e00d      	b.n	8002bae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	3340      	adds	r3, #64	@ 0x40
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	3301      	adds	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d3ec      	bcc.n	8002b92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bb8:	883b      	ldrh	r3, [r7, #0]
 8002bba:	0418      	lsls	r0, r3, #16
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6819      	ldr	r1, [r3, #0]
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	4302      	orrs	r2, r0
 8002bc8:	3340      	adds	r3, #64	@ 0x40
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e267      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d075      	beq.n	8002d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c36:	4b88      	ldr	r3, [pc, #544]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d00c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4b85      	ldr	r3, [pc, #532]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b82      	ldr	r3, [pc, #520]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05b      	beq.n	8002d20 <HAL_RCC_OscConfig+0x108>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d157      	bne.n	8002d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e242      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x74>
 8002c7e:	4b76      	ldr	r3, [pc, #472]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a75      	ldr	r2, [pc, #468]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b70      	ldr	r3, [pc, #448]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6c      	ldr	r2, [pc, #432]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002cb0:	4b69      	ldr	r3, [pc, #420]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a68      	ldr	r2, [pc, #416]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b66      	ldr	r3, [pc, #408]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a65      	ldr	r2, [pc, #404]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f9c6 	bl	8001060 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe f9c2 	bl	8001060 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	@ 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e207      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b5b      	ldr	r3, [pc, #364]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xc0>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f9b2 	bl	8001060 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe f9ae 	bl	8001060 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e1f3      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b51      	ldr	r3, [pc, #324]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0xe8>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b47      	ldr	r3, [pc, #284]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b44      	ldr	r3, [pc, #272]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b41      	ldr	r3, [pc, #260]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1c7      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4937      	ldr	r1, [pc, #220]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e03a      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b34      	ldr	r3, [pc, #208]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe f967 	bl	8001060 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe f963 	bl	8001060 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e1a8      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b28      	ldr	r3, [pc, #160]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4925      	ldr	r1, [pc, #148]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <HAL_RCC_OscConfig+0x244>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe f946 	bl	8001060 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7fe f942 	bl	8001060 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e187      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	4b1b      	ldr	r3, [pc, #108]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d036      	beq.n	8002e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0a:	4b15      	ldr	r3, [pc, #84]	@ (8002e60 <HAL_RCC_OscConfig+0x248>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe f926 	bl	8001060 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fe f922 	bl	8001060 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e167      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x200>
 8002e36:	e01b      	b.n	8002e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e38:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <HAL_RCC_OscConfig+0x248>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe f90f 	bl	8001060 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	e00e      	b.n	8002e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fe f90b 	bl	8001060 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d907      	bls.n	8002e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e150      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	42470000 	.word	0x42470000
 8002e60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b88      	ldr	r3, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ea      	bne.n	8002e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8097 	beq.w	8002fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b81      	ldr	r3, [pc, #516]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b7d      	ldr	r3, [pc, #500]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	4a7c      	ldr	r2, [pc, #496]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b77      	ldr	r3, [pc, #476]	@ (800308c <HAL_RCC_OscConfig+0x474>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d118      	bne.n	8002eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eba:	4b74      	ldr	r3, [pc, #464]	@ (800308c <HAL_RCC_OscConfig+0x474>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a73      	ldr	r2, [pc, #460]	@ (800308c <HAL_RCC_OscConfig+0x474>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7fe f8cb 	bl	8001060 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ece:	f7fe f8c7 	bl	8001060 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e10c      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800308c <HAL_RCC_OscConfig+0x474>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x2ea>
 8002ef4:	4b64      	ldr	r3, [pc, #400]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef8:	4a63      	ldr	r2, [pc, #396]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f00:	e01c      	b.n	8002f3c <HAL_RCC_OscConfig+0x324>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x30c>
 8002f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f16:	4b5c      	ldr	r3, [pc, #368]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0x324>
 8002f24:	4b58      	ldr	r3, [pc, #352]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f28:	4a57      	ldr	r2, [pc, #348]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f30:	4b55      	ldr	r3, [pc, #340]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f34:	4a54      	ldr	r2, [pc, #336]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f36:	f023 0304 	bic.w	r3, r3, #4
 8002f3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe f88c 	bl	8001060 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe f888 	bl	8001060 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0cb      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	4b49      	ldr	r3, [pc, #292]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ee      	beq.n	8002f4c <HAL_RCC_OscConfig+0x334>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fe f876 	bl	8001060 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fe f872 	bl	8001060 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0b5      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ee      	bne.n	8002f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4b39      	ldr	r3, [pc, #228]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	4a38      	ldr	r2, [pc, #224]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a1 	beq.w	80030f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb6:	4b34      	ldr	r3, [pc, #208]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d05c      	beq.n	800307c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d141      	bne.n	800304e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b31      	ldr	r3, [pc, #196]	@ (8003090 <HAL_RCC_OscConfig+0x478>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f846 	bl	8001060 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe f842 	bl	8001060 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e087      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b27      	ldr	r3, [pc, #156]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	3b01      	subs	r3, #1
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	491b      	ldr	r1, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x478>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe f81b 	bl	8001060 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe f817 	bl	8001060 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e05c      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x416>
 800304c:	e054      	b.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_RCC_OscConfig+0x478>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe f804 	bl	8001060 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe f800 	bl	8001060 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e045      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_OscConfig+0x470>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x444>
 800307a:	e03d      	b.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e038      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
 8003090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003094:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_RCC_OscConfig+0x4ec>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d028      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d121      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d11a      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d111      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	3b01      	subs	r3, #1
 80030de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0cc      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b68      	ldr	r3, [pc, #416]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d90c      	bls.n	8003144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b65      	ldr	r3, [pc, #404]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b63      	ldr	r3, [pc, #396]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0b8      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800315c:	4b59      	ldr	r3, [pc, #356]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a58      	ldr	r2, [pc, #352]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003166:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003174:	4b53      	ldr	r3, [pc, #332]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a52      	ldr	r2, [pc, #328]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800317e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b50      	ldr	r3, [pc, #320]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	494d      	ldr	r1, [pc, #308]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d044      	beq.n	8003228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d119      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e07f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b3f      	ldr	r3, [pc, #252]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	4b3b      	ldr	r3, [pc, #236]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e067      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e6:	4b37      	ldr	r3, [pc, #220]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4934      	ldr	r1, [pc, #208]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f8:	f7fd ff32 	bl	8001060 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fd ff2e 	bl	8001060 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e04f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 020c 	and.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1eb      	bne.n	8003200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b25      	ldr	r3, [pc, #148]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d20c      	bcs.n	8003250 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b22      	ldr	r3, [pc, #136]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e032      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800325c:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4916      	ldr	r1, [pc, #88]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	490e      	ldr	r1, [pc, #56]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328e:	f000 f821 	bl	80032d4 <HAL_RCC_GetSysClockFreq>
 8003292:	4602      	mov	r2, r0
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	490a      	ldr	r1, [pc, #40]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c0>)
 80032a0:	5ccb      	ldrb	r3, [r1, r3]
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	4a09      	ldr	r2, [pc, #36]	@ (80032cc <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fe92 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023c00 	.word	0x40023c00
 80032c4:	40023800 	.word	0x40023800
 80032c8:	0800d5c4 	.word	0x0800d5c4
 80032cc:	20000000 	.word	0x20000000
 80032d0:	20000004 	.word	0x20000004

080032d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d8:	b090      	sub	sp, #64	@ 0x40
 80032da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ec:	4b59      	ldr	r3, [pc, #356]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d00d      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x40>
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	f200 80a1 	bhi.w	8003440 <HAL_RCC_GetSysClockFreq+0x16c>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x34>
 8003302:	2b04      	cmp	r3, #4
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x3a>
 8003306:	e09b      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x184>)
 800330a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800330c:	e09b      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330e:	4b53      	ldr	r3, [pc, #332]	@ (800345c <HAL_RCC_GetSysClockFreq+0x188>)
 8003310:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003312:	e098      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003314:	4b4f      	ldr	r3, [pc, #316]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800331c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331e:	4b4d      	ldr	r3, [pc, #308]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d028      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332a:	4b4a      	ldr	r3, [pc, #296]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	2200      	movs	r2, #0
 8003332:	623b      	str	r3, [r7, #32]
 8003334:	627a      	str	r2, [r7, #36]	@ 0x24
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800333c:	2100      	movs	r1, #0
 800333e:	4b47      	ldr	r3, [pc, #284]	@ (800345c <HAL_RCC_GetSysClockFreq+0x188>)
 8003340:	fb03 f201 	mul.w	r2, r3, r1
 8003344:	2300      	movs	r3, #0
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	4413      	add	r3, r2
 800334c:	4a43      	ldr	r2, [pc, #268]	@ (800345c <HAL_RCC_GetSysClockFreq+0x188>)
 800334e:	fba0 1202 	umull	r1, r2, r0, r2
 8003352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003354:	460a      	mov	r2, r1
 8003356:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800335a:	4413      	add	r3, r2
 800335c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800335e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003360:	2200      	movs	r2, #0
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	61fa      	str	r2, [r7, #28]
 8003366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800336e:	f7fc ff8f 	bl	8000290 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4613      	mov	r3, r2
 8003378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800337a:	e053      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337c:	4b35      	ldr	r3, [pc, #212]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	2200      	movs	r2, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	617a      	str	r2, [r7, #20]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800338e:	f04f 0b00 	mov.w	fp, #0
 8003392:	4652      	mov	r2, sl
 8003394:	465b      	mov	r3, fp
 8003396:	f04f 0000 	mov.w	r0, #0
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	0159      	lsls	r1, r3, #5
 80033a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a4:	0150      	lsls	r0, r2, #5
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	ebb2 080a 	subs.w	r8, r2, sl
 80033ae:	eb63 090b 	sbc.w	r9, r3, fp
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033c6:	ebb2 0408 	subs.w	r4, r2, r8
 80033ca:	eb63 0509 	sbc.w	r5, r3, r9
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	00eb      	lsls	r3, r5, #3
 80033d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033dc:	00e2      	lsls	r2, r4, #3
 80033de:	4614      	mov	r4, r2
 80033e0:	461d      	mov	r5, r3
 80033e2:	eb14 030a 	adds.w	r3, r4, sl
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	eb45 030b 	adc.w	r3, r5, fp
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033fa:	4629      	mov	r1, r5
 80033fc:	028b      	lsls	r3, r1, #10
 80033fe:	4621      	mov	r1, r4
 8003400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003404:	4621      	mov	r1, r4
 8003406:	028a      	lsls	r2, r1, #10
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340e:	2200      	movs	r2, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	60fa      	str	r2, [r7, #12]
 8003414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003418:	f7fc ff3a 	bl	8000290 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4613      	mov	r3, r2
 8003422:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x180>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	3301      	adds	r3, #1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003434:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800343e:	e002      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x184>)
 8003442:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003448:	4618      	mov	r0, r3
 800344a:	3740      	adds	r7, #64	@ 0x40
 800344c:	46bd      	mov	sp, r7
 800344e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	00f42400 	.word	0x00f42400
 800345c:	017d7840 	.word	0x017d7840

08003460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003464:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <HAL_RCC_GetHCLKFreq+0x14>)
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000000 	.word	0x20000000

08003478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800347c:	f7ff fff0 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	0a9b      	lsrs	r3, r3, #10
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4903      	ldr	r1, [pc, #12]	@ (800349c <HAL_RCC_GetPCLK1Freq+0x24>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40023800 	.word	0x40023800
 800349c:	0800d5d4 	.word	0x0800d5d4

080034a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a4:	f7ff ffdc 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0b5b      	lsrs	r3, r3, #13
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	@ (80034c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	0800d5d4 	.word	0x0800d5d4

080034c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07b      	b.n	80035d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d108      	bne.n	80034f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ea:	d009      	beq.n	8003500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
 80034f2:	e005      	b.n	8003500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fa48 	bl	80009b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003584:	ea42 0103 	orr.w	r1, r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	f003 0104 	and.w	r1, r3, #4
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f003 0210 	and.w	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e041      	b.n	8003670 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fd fb7d 	bl	8000d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f000 f99f 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_TIM_PWM_Start+0x24>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e022      	b.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d109      	bne.n	80036b6 <HAL_TIM_PWM_Start+0x3e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e015      	b.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d109      	bne.n	80036d0 <HAL_TIM_PWM_Start+0x58>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e008      	b.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e068      	b.n	80037bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_PWM_Start+0x82>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036f8:	e013      	b.n	8003722 <HAL_TIM_PWM_Start+0xaa>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d104      	bne.n	800370a <HAL_TIM_PWM_Start+0x92>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003708:	e00b      	b.n	8003722 <HAL_TIM_PWM_Start+0xaa>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d104      	bne.n	800371a <HAL_TIM_PWM_Start+0xa2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003718:	e003      	b.n	8003722 <HAL_TIM_PWM_Start+0xaa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fb28 	bl	8003d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a23      	ldr	r2, [pc, #140]	@ (80037c4 <HAL_TIM_PWM_Start+0x14c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d107      	bne.n	800374a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003748:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1d      	ldr	r2, [pc, #116]	@ (80037c4 <HAL_TIM_PWM_Start+0x14c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d018      	beq.n	8003786 <HAL_TIM_PWM_Start+0x10e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375c:	d013      	beq.n	8003786 <HAL_TIM_PWM_Start+0x10e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a19      	ldr	r2, [pc, #100]	@ (80037c8 <HAL_TIM_PWM_Start+0x150>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00e      	beq.n	8003786 <HAL_TIM_PWM_Start+0x10e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a17      	ldr	r2, [pc, #92]	@ (80037cc <HAL_TIM_PWM_Start+0x154>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_TIM_PWM_Start+0x10e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <HAL_TIM_PWM_Start+0x158>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_TIM_PWM_Start+0x10e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a14      	ldr	r2, [pc, #80]	@ (80037d4 <HAL_TIM_PWM_Start+0x15c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d111      	bne.n	80037aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b06      	cmp	r3, #6
 8003796:	d010      	beq.n	80037ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a8:	e007      	b.n	80037ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40010000 	.word	0x40010000
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800
 80037d0:	40000c00 	.word	0x40000c00
 80037d4:	40014000 	.word	0x40014000

080037d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0ae      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	f200 809f 	bhi.w	8003944 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003806:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003841 	.word	0x08003841
 8003810:	08003945 	.word	0x08003945
 8003814:	08003945 	.word	0x08003945
 8003818:	08003945 	.word	0x08003945
 800381c:	08003881 	.word	0x08003881
 8003820:	08003945 	.word	0x08003945
 8003824:	08003945 	.word	0x08003945
 8003828:	08003945 	.word	0x08003945
 800382c:	080038c3 	.word	0x080038c3
 8003830:	08003945 	.word	0x08003945
 8003834:	08003945 	.word	0x08003945
 8003838:	08003945 	.word	0x08003945
 800383c:	08003903 	.word	0x08003903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f90e 	bl	8003a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6999      	ldr	r1, [r3, #24]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	619a      	str	r2, [r3, #24]
      break;
 800387e:	e064      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f954 	bl	8003b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800389a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	619a      	str	r2, [r3, #24]
      break;
 80038c0:	e043      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f99f 	bl	8003c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0208 	orr.w	r2, r2, #8
 80038dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0204 	bic.w	r2, r2, #4
 80038ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	61da      	str	r2, [r3, #28]
      break;
 8003900:	e023      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f9e9 	bl	8003ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69d9      	ldr	r1, [r3, #28]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	61da      	str	r2, [r3, #28]
      break;
 8003942:	e002      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	75fb      	strb	r3, [r7, #23]
      break;
 8003948:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003952:	7dfb      	ldrb	r3, [r7, #23]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a37      	ldr	r2, [pc, #220]	@ (8003a4c <TIM_Base_SetConfig+0xf0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00f      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397a:	d00b      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a34      	ldr	r2, [pc, #208]	@ (8003a50 <TIM_Base_SetConfig+0xf4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a33      	ldr	r2, [pc, #204]	@ (8003a54 <TIM_Base_SetConfig+0xf8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a32      	ldr	r2, [pc, #200]	@ (8003a58 <TIM_Base_SetConfig+0xfc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d108      	bne.n	80039a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a28      	ldr	r2, [pc, #160]	@ (8003a4c <TIM_Base_SetConfig+0xf0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a25      	ldr	r2, [pc, #148]	@ (8003a50 <TIM_Base_SetConfig+0xf4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a24      	ldr	r2, [pc, #144]	@ (8003a54 <TIM_Base_SetConfig+0xf8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a23      	ldr	r2, [pc, #140]	@ (8003a58 <TIM_Base_SetConfig+0xfc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a22      	ldr	r2, [pc, #136]	@ (8003a5c <TIM_Base_SetConfig+0x100>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a21      	ldr	r2, [pc, #132]	@ (8003a60 <TIM_Base_SetConfig+0x104>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a20      	ldr	r2, [pc, #128]	@ (8003a64 <TIM_Base_SetConfig+0x108>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a0c      	ldr	r2, [pc, #48]	@ (8003a4c <TIM_Base_SetConfig+0xf0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d103      	bne.n	8003a26 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	601a      	str	r2, [r3, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800
 8003a58:	40000c00 	.word	0x40000c00
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800

08003a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f023 0201 	bic.w	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 0302 	bic.w	r3, r3, #2
 8003ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	@ (8003b30 <TIM_OC1_SetConfig+0xc8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10c      	bne.n	8003ade <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0308 	bic.w	r3, r3, #8
 8003aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	@ (8003b30 <TIM_OC1_SetConfig+0xc8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d111      	bne.n	8003b0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	40010000 	.word	0x40010000

08003b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f023 0210 	bic.w	r2, r3, #16
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0320 	bic.w	r3, r3, #32
 8003b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003c08 <TIM_OC2_SetConfig+0xd4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d10d      	bne.n	8003bb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a15      	ldr	r2, [pc, #84]	@ (8003c08 <TIM_OC2_SetConfig+0xd4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d113      	bne.n	8003be0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40010000 	.word	0x40010000

08003c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1d      	ldr	r2, [pc, #116]	@ (8003cdc <TIM_OC3_SetConfig+0xd0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10d      	bne.n	8003c86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <TIM_OC3_SetConfig+0xd0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d113      	bne.n	8003cb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	621a      	str	r2, [r3, #32]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40010000 	.word	0x40010000

08003ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a10      	ldr	r2, [pc, #64]	@ (8003d7c <TIM_OC4_SetConfig+0x9c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d109      	bne.n	8003d54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010000 	.word	0x40010000

08003d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2201      	movs	r2, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	401a      	ands	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e050      	b.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1c      	ldr	r2, [pc, #112]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d018      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e30:	d013      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a18      	ldr	r2, [pc, #96]	@ (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a16      	ldr	r2, [pc, #88]	@ (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10c      	bne.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40014000 	.word	0x40014000

08003ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e042      	b.n	8003f40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fc ff9c 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	@ 0x24
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fe15 	bl	8004b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d175      	bne.n	8004054 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_UART_Transmit+0x2c>
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e06e      	b.n	8004056 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2221      	movs	r2, #33	@ 0x21
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f86:	f7fd f86b 	bl	8001060 <HAL_GetTick>
 8003f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	88fa      	ldrh	r2, [r7, #6]
 8003f96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa0:	d108      	bne.n	8003fb4 <HAL_UART_Transmit+0x6c>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e003      	b.n	8003fbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fbc:	e02e      	b.n	800401c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2180      	movs	r1, #128	@ 0x80
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fbb3 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e03a      	b.n	8004056 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	e007      	b.n	800400e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3301      	adds	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1cb      	bne.n	8003fbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2200      	movs	r2, #0
 800402e:	2140      	movs	r1, #64	@ 0x40
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fb7f 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e006      	b.n	8004056 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08a      	sub	sp, #40	@ 0x28
 8004062:	af02      	add	r7, sp, #8
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	f040 8081 	bne.w	8004182 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_UART_Receive+0x2e>
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e079      	b.n	8004184 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2222      	movs	r2, #34	@ 0x22
 800409a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a4:	f7fc ffdc 	bl	8001060 <HAL_GetTick>
 80040a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040be:	d108      	bne.n	80040d2 <HAL_UART_Receive+0x74>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e003      	b.n	80040da <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80040da:	e047      	b.n	800416c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	2120      	movs	r1, #32
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fb24 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e042      	b.n	8004184 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10c      	bne.n	800411e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	b29a      	uxth	r2, r3
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	3302      	adds	r3, #2
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	e01f      	b.n	800415e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004126:	d007      	beq.n	8004138 <HAL_UART_Receive+0xda>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <HAL_UART_Receive+0xe8>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	b2da      	uxtb	r2, r3
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e008      	b.n	8004158 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004152:	b2da      	uxtb	r2, r3
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1b2      	bne.n	80040dc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b0ba      	sub	sp, #232	@ 0xe8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
 80041de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fbd7 	bl	800499e <UART_Receive_IT>
      return;
 80041f0:	e273      	b.n	80046da <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80de 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800420c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80d1 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
 800426a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	f043 0204 	orr.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800429a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f043 0208 	orr.w	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 820a 	beq.w	80046d0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb62 	bl	800499e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <HAL_UART_IRQHandler+0x17a>
 80042fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04f      	beq.n	80043a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa6d 	bl	80047e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004316:	2b40      	cmp	r3, #64	@ 0x40
 8004318:	d141      	bne.n	800439e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004330:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004346:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800434a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800435e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1d9      	bne.n	800431a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d013      	beq.n	8004396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004372:	4a8a      	ldr	r2, [pc, #552]	@ (800459c <HAL_UART_IRQHandler+0x410>)
 8004374:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd f821 	bl	80013c2 <HAL_DMA_Abort_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004390:	4610      	mov	r0, r2
 8004392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e00e      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f9b6 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	e00a      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f9b2 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e006      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9ae 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043b2:	e18d      	b.n	80046d0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	bf00      	nop
    return;
 80043b6:	e18b      	b.n	80046d0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	2b01      	cmp	r3, #1
 80043be:	f040 8167 	bne.w	8004690 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8160 	beq.w	8004690 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8159 	beq.w	8004690 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	f040 80ce 	bne.w	80045a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80a9 	beq.w	800456c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800441e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004422:	429a      	cmp	r2, r3
 8004424:	f080 80a2 	bcs.w	800456c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800442e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800443a:	f000 8088 	beq.w	800454e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800445c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800446a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800446e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004476:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1d9      	bne.n	800443e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800449a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e1      	bne.n	800448a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3314      	adds	r3, #20
 80044e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e3      	bne.n	80044c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800451c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800451e:	f023 0310 	bic.w	r3, r3, #16
 8004522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004530:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004532:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800453e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e3      	bne.n	800450c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	4618      	mov	r0, r3
 800454a:	f7fc feca 	bl	80012e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800455c:	b29b      	uxth	r3, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	b29b      	uxth	r3, r3
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f8d9 	bl	800471c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800456a:	e0b3      	b.n	80046d4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004574:	429a      	cmp	r2, r3
 8004576:	f040 80ad 	bne.w	80046d4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004584:	f040 80a6 	bne.w	80046d4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8c1 	bl	800471c <HAL_UARTEx_RxEventCallback>
      return;
 800459a:	e09b      	b.n	80046d4 <HAL_UART_IRQHandler+0x548>
 800459c:	080048ad 	.word	0x080048ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 808e 	beq.w	80046d8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80045bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8089 	beq.w	80046d8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80045ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e3      	bne.n	80045c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3314      	adds	r3, #20
 8004604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	623b      	str	r3, [r7, #32]
   return(result);
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004622:	633a      	str	r2, [r7, #48]	@ 0x30
 8004624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e3      	bne.n	80045fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	60fb      	str	r3, [r7, #12]
   return(result);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0310 	bic.w	r3, r3, #16
 800465a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004668:	61fa      	str	r2, [r7, #28]
 800466a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	617b      	str	r3, [r7, #20]
   return(result);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e3      	bne.n	8004644 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004686:	4619      	mov	r1, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f847 	bl	800471c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800468e:	e023      	b.n	80046d8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d009      	beq.n	80046b0 <HAL_UART_IRQHandler+0x524>
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f910 	bl	80048ce <UART_Transmit_IT>
    return;
 80046ae:	e014      	b.n	80046da <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <HAL_UART_IRQHandler+0x54e>
 80046bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f950 	bl	800496e <UART_EndTransmit_IT>
    return;
 80046ce:	e004      	b.n	80046da <HAL_UART_IRQHandler+0x54e>
    return;
 80046d0:	bf00      	nop
 80046d2:	e002      	b.n	80046da <HAL_UART_IRQHandler+0x54e>
      return;
 80046d4:	bf00      	nop
 80046d6:	e000      	b.n	80046da <HAL_UART_IRQHandler+0x54e>
      return;
 80046d8:	bf00      	nop
  }
}
 80046da:	37e8      	adds	r7, #232	@ 0xe8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004744:	e03b      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d037      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7fc fc87 	bl	8001060 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <UART_WaitOnFlagUntilTimeout+0x30>
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e03a      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d023      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b80      	cmp	r3, #128	@ 0x80
 800477a:	d020      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b40      	cmp	r3, #64	@ 0x40
 8004780:	d01d      	beq.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b08      	cmp	r3, #8
 800478e:	d116      	bne.n	80047be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f81d 	bl	80047e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2208      	movs	r2, #8
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00f      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4013      	ands	r3, r2
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	bf0c      	ite	eq
 80047ce:	2301      	moveq	r3, #1
 80047d0:	2300      	movne	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d0b4      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b095      	sub	sp, #84	@ 0x54
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800480e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e5      	bne.n	80047ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3314      	adds	r3, #20
 8004828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	61fb      	str	r3, [r7, #28]
   return(result);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3314      	adds	r3, #20
 8004840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	2b01      	cmp	r3, #1
 800485c:	d119      	bne.n	8004892 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	60bb      	str	r3, [r7, #8]
   return(result);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	647b      	str	r3, [r7, #68]	@ 0x44
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800487e:	61ba      	str	r2, [r7, #24]
 8004880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	613b      	str	r3, [r7, #16]
   return(result);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048a0:	bf00      	nop
 80048a2:	3754      	adds	r7, #84	@ 0x54
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff ff21 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b21      	cmp	r3, #33	@ 0x21
 80048e0:	d13e      	bne.n	8004960 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ea:	d114      	bne.n	8004916 <UART_Transmit_IT+0x48>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d110      	bne.n	8004916 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004908:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	621a      	str	r2, [r3, #32]
 8004914:	e008      	b.n	8004928 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6211      	str	r1, [r2, #32]
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4619      	mov	r1, r3
 8004936:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10f      	bne.n	800495c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800494a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800495a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004984:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fea6 	bl	80046e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08c      	sub	sp, #48	@ 0x30
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b22      	cmp	r3, #34	@ 0x22
 80049b8:	f040 80aa 	bne.w	8004b10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c4:	d115      	bne.n	80049f2 <UART_Receive_IT+0x54>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d111      	bne.n	80049f2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	1c9a      	adds	r2, r3, #2
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80049f0:	e024      	b.n	8004a3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a00:	d007      	beq.n	8004a12 <UART_Receive_IT+0x74>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <UART_Receive_IT+0x82>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e008      	b.n	8004a32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d15d      	bne.n	8004b0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0220 	bic.w	r2, r2, #32
 8004a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
 8004a7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d135      	bne.n	8004b02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f023 0310 	bic.w	r3, r3, #16
 8004ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abc:	623a      	str	r2, [r7, #32]
 8004abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	69f9      	ldr	r1, [r7, #28]
 8004ac2:	6a3a      	ldr	r2, [r7, #32]
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e5      	bne.n	8004a9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b10      	cmp	r3, #16
 8004adc:	d10a      	bne.n	8004af4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fe0e 	bl	800471c <HAL_UARTEx_RxEventCallback>
 8004b00:	e002      	b.n	8004b08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff fdf6 	bl	80046f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e002      	b.n	8004b12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3730      	adds	r7, #48	@ 0x30
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b20:	b0c0      	sub	sp, #256	@ 0x100
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	68d9      	ldr	r1, [r3, #12]
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	ea40 0301 	orr.w	r3, r0, r1
 8004b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b74:	f021 010c 	bic.w	r1, r1, #12
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b82:	430b      	orrs	r3, r1
 8004b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b96:	6999      	ldr	r1, [r3, #24]
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	ea40 0301 	orr.w	r3, r0, r1
 8004ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b8f      	ldr	r3, [pc, #572]	@ (8004de8 <UART_SetConfig+0x2cc>)
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d005      	beq.n	8004bbc <UART_SetConfig+0xa0>
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8004dec <UART_SetConfig+0x2d0>)
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d104      	bne.n	8004bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7fe fc70 	bl	80034a0 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bc4:	e003      	b.n	8004bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bc6:	f7fe fc57 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 8004bca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd8:	f040 810c 	bne.w	8004df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004be6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bee:	4622      	mov	r2, r4
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	1891      	adds	r1, r2, r2
 8004bf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bf6:	415b      	adcs	r3, r3
 8004bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bfe:	4621      	mov	r1, r4
 8004c00:	eb12 0801 	adds.w	r8, r2, r1
 8004c04:	4629      	mov	r1, r5
 8004c06:	eb43 0901 	adc.w	r9, r3, r1
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c1e:	4690      	mov	r8, r2
 8004c20:	4699      	mov	r9, r3
 8004c22:	4623      	mov	r3, r4
 8004c24:	eb18 0303 	adds.w	r3, r8, r3
 8004c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	eb49 0303 	adc.w	r3, r9, r3
 8004c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	18db      	adds	r3, r3, r3
 8004c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c50:	4613      	mov	r3, r2
 8004c52:	eb42 0303 	adc.w	r3, r2, r3
 8004c56:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c60:	f7fb fb16 	bl	8000290 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4b61      	ldr	r3, [pc, #388]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	011c      	lsls	r4, r3, #4
 8004c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c84:	4642      	mov	r2, r8
 8004c86:	464b      	mov	r3, r9
 8004c88:	1891      	adds	r1, r2, r2
 8004c8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c8c:	415b      	adcs	r3, r3
 8004c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c94:	4641      	mov	r1, r8
 8004c96:	eb12 0a01 	adds.w	sl, r2, r1
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb4:	4692      	mov	sl, r2
 8004cb6:	469b      	mov	fp, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	eb1a 0303 	adds.w	r3, sl, r3
 8004cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	18db      	adds	r3, r3, r3
 8004ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cf6:	f7fb facb 	bl	8000290 <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4b3b      	ldr	r3, [pc, #236]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004d02:	fba3 2301 	umull	r2, r3, r3, r1
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2264      	movs	r2, #100	@ 0x64
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	1acb      	subs	r3, r1, r3
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d16:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004d18:	fba3 2302 	umull	r2, r3, r3, r2
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d24:	441c      	add	r4, r3
 8004d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	1891      	adds	r1, r2, r2
 8004d3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d40:	415b      	adcs	r3, r3
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d48:	4641      	mov	r1, r8
 8004d4a:	1851      	adds	r1, r2, r1
 8004d4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d4e:	4649      	mov	r1, r9
 8004d50:	414b      	adcs	r3, r1
 8004d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d60:	4659      	mov	r1, fp
 8004d62:	00cb      	lsls	r3, r1, #3
 8004d64:	4651      	mov	r1, sl
 8004d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	00ca      	lsls	r2, r1, #3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4619      	mov	r1, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	4642      	mov	r2, r8
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	460a      	mov	r2, r1
 8004d80:	eb42 0303 	adc.w	r3, r2, r3
 8004d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	18db      	adds	r3, r3, r3
 8004da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004da2:	4613      	mov	r3, r2
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004db2:	f7fb fa6d 	bl	8000290 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	2164      	movs	r1, #100	@ 0x64
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	3332      	adds	r3, #50	@ 0x32
 8004dce:	4a08      	ldr	r2, [pc, #32]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	f003 0207 	and.w	r2, r3, #7
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4422      	add	r2, r4
 8004de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004de4:	e106      	b.n	8004ff4 <UART_SetConfig+0x4d8>
 8004de6:	bf00      	nop
 8004de8:	40011000 	.word	0x40011000
 8004dec:	40011400 	.word	0x40011400
 8004df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e06:	4642      	mov	r2, r8
 8004e08:	464b      	mov	r3, r9
 8004e0a:	1891      	adds	r1, r2, r2
 8004e0c:	6239      	str	r1, [r7, #32]
 8004e0e:	415b      	adcs	r3, r3
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e16:	4641      	mov	r1, r8
 8004e18:	1854      	adds	r4, r2, r1
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	eb43 0501 	adc.w	r5, r3, r1
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	00eb      	lsls	r3, r5, #3
 8004e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e2e:	00e2      	lsls	r2, r4, #3
 8004e30:	4614      	mov	r4, r2
 8004e32:	461d      	mov	r5, r3
 8004e34:	4643      	mov	r3, r8
 8004e36:	18e3      	adds	r3, r4, r3
 8004e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	eb45 0303 	adc.w	r3, r5, r3
 8004e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e62:	4629      	mov	r1, r5
 8004e64:	008b      	lsls	r3, r1, #2
 8004e66:	4621      	mov	r1, r4
 8004e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	008a      	lsls	r2, r1, #2
 8004e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e74:	f7fb fa0c 	bl	8000290 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4b60      	ldr	r3, [pc, #384]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	011c      	lsls	r4, r3, #4
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	1891      	adds	r1, r2, r2
 8004e9e:	61b9      	str	r1, [r7, #24]
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	1851      	adds	r1, r2, r1
 8004eac:	6139      	str	r1, [r7, #16]
 8004eae:	4649      	mov	r1, r9
 8004eb0:	414b      	adcs	r3, r1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	00cb      	lsls	r3, r1, #3
 8004ec4:	4651      	mov	r1, sl
 8004ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eca:	4651      	mov	r1, sl
 8004ecc:	00ca      	lsls	r2, r1, #3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004edc:	464b      	mov	r3, r9
 8004ede:	460a      	mov	r2, r1
 8004ee0:	eb42 0303 	adc.w	r3, r2, r3
 8004ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ef2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f00:	4649      	mov	r1, r9
 8004f02:	008b      	lsls	r3, r1, #2
 8004f04:	4641      	mov	r1, r8
 8004f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	008a      	lsls	r2, r1, #2
 8004f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f12:	f7fb f9bd 	bl	8000290 <__aeabi_uldivmod>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4b38      	ldr	r3, [pc, #224]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	2264      	movs	r2, #100	@ 0x64
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	1acb      	subs	r3, r1, r3
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	3332      	adds	r3, #50	@ 0x32
 8004f30:	4a33      	ldr	r2, [pc, #204]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f3c:	441c      	add	r4, r3
 8004f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f42:	2200      	movs	r2, #0
 8004f44:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f46:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	415b      	adcs	r3, r3
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	1851      	adds	r1, r2, r1
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	4649      	mov	r1, r9
 8004f64:	414b      	adcs	r3, r1
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f74:	4659      	mov	r1, fp
 8004f76:	00cb      	lsls	r3, r1, #3
 8004f78:	4651      	mov	r1, sl
 8004f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7e:	4651      	mov	r1, sl
 8004f80:	00ca      	lsls	r2, r1, #3
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	4642      	mov	r2, r8
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f8e:	464b      	mov	r3, r9
 8004f90:	460a      	mov	r2, r1
 8004f92:	eb42 0303 	adc.w	r3, r2, r3
 8004f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fa2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	008b      	lsls	r3, r1, #2
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fba:	4641      	mov	r1, r8
 8004fbc:	008a      	lsls	r2, r1, #2
 8004fbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fc2:	f7fb f965 	bl	8000290 <__aeabi_uldivmod>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	2164      	movs	r1, #100	@ 0x64
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	3332      	adds	r3, #50	@ 0x32
 8004fde:	4a08      	ldr	r2, [pc, #32]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 020f 	and.w	r2, r3, #15
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4422      	add	r2, r4
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005000:	51eb851f 	.word	0x51eb851f

08005004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005004:	b084      	sub	sp, #16
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	f107 001c 	add.w	r0, r7, #28
 8005012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005016:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800501a:	2b01      	cmp	r3, #1
 800501c:	d123      	bne.n	8005066 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005022:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005046:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800504a:	2b01      	cmp	r3, #1
 800504c:	d105      	bne.n	800505a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 fae8 	bl	8006630 <USB_CoreReset>
 8005060:	4603      	mov	r3, r0
 8005062:	73fb      	strb	r3, [r7, #15]
 8005064:	e01b      	b.n	800509e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 fadc 	bl	8006630 <USB_CoreReset>
 8005078:	4603      	mov	r3, r0
 800507a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800507c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005088:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005090:	e005      	b.n	800509e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800509e:	7fbb      	ldrb	r3, [r7, #30]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10b      	bne.n	80050bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f043 0206 	orr.w	r2, r3, #6
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050c8:	b004      	add	sp, #16
 80050ca:	4770      	bx	lr

080050cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d165      	bne.n	80051ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4a41      	ldr	r2, [pc, #260]	@ (80051e8 <USB_SetTurnaroundTime+0x11c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d906      	bls.n	80050f6 <USB_SetTurnaroundTime+0x2a>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4a40      	ldr	r2, [pc, #256]	@ (80051ec <USB_SetTurnaroundTime+0x120>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d202      	bcs.n	80050f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050f0:	230f      	movs	r3, #15
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e062      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4a3c      	ldr	r2, [pc, #240]	@ (80051ec <USB_SetTurnaroundTime+0x120>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d306      	bcc.n	800510c <USB_SetTurnaroundTime+0x40>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4a3b      	ldr	r2, [pc, #236]	@ (80051f0 <USB_SetTurnaroundTime+0x124>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d202      	bcs.n	800510c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005106:	230e      	movs	r3, #14
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e057      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4a38      	ldr	r2, [pc, #224]	@ (80051f0 <USB_SetTurnaroundTime+0x124>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d306      	bcc.n	8005122 <USB_SetTurnaroundTime+0x56>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4a37      	ldr	r2, [pc, #220]	@ (80051f4 <USB_SetTurnaroundTime+0x128>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d202      	bcs.n	8005122 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800511c:	230d      	movs	r3, #13
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e04c      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4a33      	ldr	r2, [pc, #204]	@ (80051f4 <USB_SetTurnaroundTime+0x128>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d306      	bcc.n	8005138 <USB_SetTurnaroundTime+0x6c>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4a32      	ldr	r2, [pc, #200]	@ (80051f8 <USB_SetTurnaroundTime+0x12c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d802      	bhi.n	8005138 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005132:	230c      	movs	r3, #12
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	e041      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4a2f      	ldr	r2, [pc, #188]	@ (80051f8 <USB_SetTurnaroundTime+0x12c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d906      	bls.n	800514e <USB_SetTurnaroundTime+0x82>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4a2e      	ldr	r2, [pc, #184]	@ (80051fc <USB_SetTurnaroundTime+0x130>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d802      	bhi.n	800514e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005148:	230b      	movs	r3, #11
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e036      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4a2a      	ldr	r2, [pc, #168]	@ (80051fc <USB_SetTurnaroundTime+0x130>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d906      	bls.n	8005164 <USB_SetTurnaroundTime+0x98>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4a29      	ldr	r2, [pc, #164]	@ (8005200 <USB_SetTurnaroundTime+0x134>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d802      	bhi.n	8005164 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800515e:	230a      	movs	r3, #10
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e02b      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4a26      	ldr	r2, [pc, #152]	@ (8005200 <USB_SetTurnaroundTime+0x134>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d906      	bls.n	800517a <USB_SetTurnaroundTime+0xae>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4a25      	ldr	r2, [pc, #148]	@ (8005204 <USB_SetTurnaroundTime+0x138>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d202      	bcs.n	800517a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005174:	2309      	movs	r3, #9
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	e020      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4a21      	ldr	r2, [pc, #132]	@ (8005204 <USB_SetTurnaroundTime+0x138>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d306      	bcc.n	8005190 <USB_SetTurnaroundTime+0xc4>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a20      	ldr	r2, [pc, #128]	@ (8005208 <USB_SetTurnaroundTime+0x13c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d802      	bhi.n	8005190 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800518a:	2308      	movs	r3, #8
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e015      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a1d      	ldr	r2, [pc, #116]	@ (8005208 <USB_SetTurnaroundTime+0x13c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d906      	bls.n	80051a6 <USB_SetTurnaroundTime+0xda>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a1c      	ldr	r2, [pc, #112]	@ (800520c <USB_SetTurnaroundTime+0x140>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d202      	bcs.n	80051a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80051a0:	2307      	movs	r3, #7
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e00a      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80051a6:	2306      	movs	r3, #6
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	e007      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80051b2:	2309      	movs	r3, #9
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e001      	b.n	80051bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80051b8:	2309      	movs	r3, #9
 80051ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	029b      	lsls	r3, r3, #10
 80051d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	00d8acbf 	.word	0x00d8acbf
 80051ec:	00e4e1c0 	.word	0x00e4e1c0
 80051f0:	00f42400 	.word	0x00f42400
 80051f4:	01067380 	.word	0x01067380
 80051f8:	011a499f 	.word	0x011a499f
 80051fc:	01312cff 	.word	0x01312cff
 8005200:	014ca43f 	.word	0x014ca43f
 8005204:	016e3600 	.word	0x016e3600
 8005208:	01a6ab1f 	.word	0x01a6ab1f
 800520c:	01e84800 	.word	0x01e84800

08005210 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f043 0201 	orr.w	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 0201 	bic.w	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d115      	bne.n	80052a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005282:	200a      	movs	r0, #10
 8005284:	f7fb fef8 	bl	8001078 <HAL_Delay>
      ms += 10U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	330a      	adds	r3, #10
 800528c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f001 f93f 	bl	8006512 <USB_GetMode>
 8005294:	4603      	mov	r3, r0
 8005296:	2b01      	cmp	r3, #1
 8005298:	d01e      	beq.n	80052d8 <USB_SetCurrentMode+0x84>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2bc7      	cmp	r3, #199	@ 0xc7
 800529e:	d9f0      	bls.n	8005282 <USB_SetCurrentMode+0x2e>
 80052a0:	e01a      	b.n	80052d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d115      	bne.n	80052d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052b4:	200a      	movs	r0, #10
 80052b6:	f7fb fedf 	bl	8001078 <HAL_Delay>
      ms += 10U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	330a      	adds	r3, #10
 80052be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 f926 	bl	8006512 <USB_GetMode>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <USB_SetCurrentMode+0x84>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80052d0:	d9f0      	bls.n	80052b4 <USB_SetCurrentMode+0x60>
 80052d2:	e001      	b.n	80052d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e005      	b.n	80052e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2bc8      	cmp	r3, #200	@ 0xc8
 80052dc:	d101      	bne.n	80052e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052ec:	b084      	sub	sp, #16
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b086      	sub	sp, #24
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80052fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005306:	2300      	movs	r3, #0
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	e009      	b.n	8005320 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3340      	adds	r3, #64	@ 0x40
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	2200      	movs	r2, #0
 8005318:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	3301      	adds	r3, #1
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b0e      	cmp	r3, #14
 8005324:	d9f2      	bls.n	800530c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005326:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800532a:	2b00      	cmp	r3, #0
 800532c:	d11c      	bne.n	8005368 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005346:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	@ 0x38
 8005366:	e00b      	b.n	8005380 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005378:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005386:	461a      	mov	r2, r3
 8005388:	2300      	movs	r3, #0
 800538a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800538c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005390:	2b01      	cmp	r3, #1
 8005392:	d10d      	bne.n	80053b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800539c:	2100      	movs	r1, #0
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f968 	bl	8005674 <USB_SetDevSpeed>
 80053a4:	e008      	b.n	80053b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053a6:	2101      	movs	r1, #1
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f963 	bl	8005674 <USB_SetDevSpeed>
 80053ae:	e003      	b.n	80053b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053b0:	2103      	movs	r1, #3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f95e 	bl	8005674 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053b8:	2110      	movs	r1, #16
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f8fa 	bl	80055b4 <USB_FlushTxFifo>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f924 	bl	8005618 <USB_FlushRxFifo>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e0:	461a      	mov	r2, r3
 80053e2:	2300      	movs	r3, #0
 80053e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ec:	461a      	mov	r2, r3
 80053ee:	2300      	movs	r3, #0
 80053f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f8:	461a      	mov	r2, r3
 80053fa:	2300      	movs	r3, #0
 80053fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e043      	b.n	800548c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005416:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800541a:	d118      	bne.n	800544e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800542e:	461a      	mov	r2, r3
 8005430:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e013      	b.n	8005460 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005444:	461a      	mov	r2, r3
 8005446:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	e008      	b.n	8005460 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800545a:	461a      	mov	r2, r3
 800545c:	2300      	movs	r3, #0
 800545e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	2300      	movs	r3, #0
 8005470:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800547e:	461a      	mov	r2, r3
 8005480:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005484:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	3301      	adds	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005490:	461a      	mov	r2, r3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4293      	cmp	r3, r2
 8005496:	d3b5      	bcc.n	8005404 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	e043      	b.n	8005526 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054b4:	d118      	bne.n	80054e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c8:	461a      	mov	r2, r3
 80054ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	e013      	b.n	80054fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054de:	461a      	mov	r2, r3
 80054e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e008      	b.n	80054fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	2300      	movs	r3, #0
 800550a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005518:	461a      	mov	r2, r3
 800551a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800551e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	3301      	adds	r3, #1
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800552a:	461a      	mov	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4293      	cmp	r3, r2
 8005530:	d3b5      	bcc.n	800549e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005544:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005552:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005554:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f043 0210 	orr.w	r2, r3, #16
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	4b10      	ldr	r3, [pc, #64]	@ (80055b0 <USB_DevInit+0x2c4>)
 800556e:	4313      	orrs	r3, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005574:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f043 0208 	orr.w	r2, r3, #8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005588:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800558c:	2b01      	cmp	r3, #1
 800558e:	d107      	bne.n	80055a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005598:	f043 0304 	orr.w	r3, r3, #4
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ac:	b004      	add	sp, #16
 80055ae:	4770      	bx	lr
 80055b0:	803c3800 	.word	0x803c3800

080055b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3301      	adds	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055ce:	d901      	bls.n	80055d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e01b      	b.n	800560c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	daf2      	bge.n	80055c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	019b      	lsls	r3, r3, #6
 80055e4:	f043 0220 	orr.w	r2, r3, #32
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055f8:	d901      	bls.n	80055fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e006      	b.n	800560c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b20      	cmp	r3, #32
 8005608:	d0f0      	beq.n	80055ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3301      	adds	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005630:	d901      	bls.n	8005636 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e018      	b.n	8005668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	daf2      	bge.n	8005624 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2210      	movs	r2, #16
 8005646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005654:	d901      	bls.n	800565a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e006      	b.n	8005668 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b10      	cmp	r3, #16
 8005664:	d0f0      	beq.n	8005648 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005694:	4313      	orrs	r3, r2
 8005696:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b087      	sub	sp, #28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 0306 	and.w	r3, r3, #6
 80056be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056c6:	2300      	movs	r3, #0
 80056c8:	75fb      	strb	r3, [r7, #23]
 80056ca:	e00a      	b.n	80056e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d002      	beq.n	80056d8 <USB_GetDevSpeed+0x32>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b06      	cmp	r3, #6
 80056d6:	d102      	bne.n	80056de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056d8:	2302      	movs	r3, #2
 80056da:	75fb      	strb	r3, [r7, #23]
 80056dc:	e001      	b.n	80056e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056de:	230f      	movs	r3, #15
 80056e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	371c      	adds	r7, #28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	785b      	ldrb	r3, [r3, #1]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d13a      	bne.n	8005782 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	2101      	movs	r1, #1
 800571e:	fa01 f303 	lsl.w	r3, r1, r3
 8005722:	b29b      	uxth	r3, r3
 8005724:	68f9      	ldr	r1, [r7, #12]
 8005726:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800572a:	4313      	orrs	r3, r2
 800572c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d155      	bne.n	80057f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	791b      	ldrb	r3, [r3, #4]
 800575e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005760:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	059b      	lsls	r3, r3, #22
 8005766:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005768:	4313      	orrs	r3, r2
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	440a      	add	r2, r1
 8005772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800577a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	e036      	b.n	80057f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005788:	69da      	ldr	r2, [r3, #28]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	2101      	movs	r1, #1
 8005794:	fa01 f303 	lsl.w	r3, r1, r3
 8005798:	041b      	lsls	r3, r3, #16
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11a      	bne.n	80057f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	791b      	ldrb	r3, [r3, #4]
 80057d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057d6:	430b      	orrs	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d161      	bne.n	80058e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800582e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005832:	d11f      	bne.n	8005874 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800584e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005852:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800586e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005872:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800587a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	2101      	movs	r1, #1
 8005886:	fa01 f303 	lsl.w	r3, r1, r3
 800588a:	b29b      	uxth	r3, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005894:	4013      	ands	r3, r2
 8005896:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	2101      	movs	r1, #1
 80058aa:	fa01 f303 	lsl.w	r3, r1, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058b8:	4013      	ands	r3, r2
 80058ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	0159      	lsls	r1, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	440b      	add	r3, r1
 80058d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d6:	4619      	mov	r1, r3
 80058d8:	4b35      	ldr	r3, [pc, #212]	@ (80059b0 <USB_DeactivateEndpoint+0x1b0>)
 80058da:	4013      	ands	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
 80058de:	e060      	b.n	80059a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f6:	d11f      	bne.n	8005938 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005912:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005916:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005932:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005936:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800593e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	2101      	movs	r1, #1
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	041b      	lsls	r3, r3, #16
 8005950:	43db      	mvns	r3, r3
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005958:	4013      	ands	r3, r2
 800595a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f303 	lsl.w	r3, r1, r3
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	43db      	mvns	r3, r3
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800597c:	4013      	ands	r3, r2
 800597e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	0159      	lsls	r1, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	440b      	add	r3, r1
 8005996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599a:	4619      	mov	r1, r3
 800599c:	4b05      	ldr	r3, [pc, #20]	@ (80059b4 <USB_DeactivateEndpoint+0x1b4>)
 800599e:	4013      	ands	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	ec337800 	.word	0xec337800
 80059b4:	eff37800 	.word	0xeff37800

080059b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	@ 0x28
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	4613      	mov	r3, r2
 80059c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	f040 817f 	bne.w	8005cd8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d132      	bne.n	8005a48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a00:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a40:	0cdb      	lsrs	r3, r3, #19
 8005a42:	04db      	lsls	r3, r3, #19
 8005a44:	6113      	str	r3, [r2, #16]
 8005a46:	e097      	b.n	8005b78 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a62:	0cdb      	lsrs	r3, r3, #19
 8005a64:	04db      	lsls	r3, r3, #19
 8005a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a82:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a86:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a8a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d11a      	bne.n	8005ac8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d903      	bls.n	8005aa6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ac4:	6113      	str	r3, [r2, #16]
 8005ac6:	e044      	b.n	8005b52 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	1e5a      	subs	r2, r3, #1
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	8afb      	ldrh	r3, [r7, #22]
 8005aee:	04d9      	lsls	r1, r3, #19
 8005af0:	4ba4      	ldr	r3, [pc, #656]	@ (8005d84 <USB_EPStartXfer+0x3cc>)
 8005af2:	400b      	ands	r3, r1
 8005af4:	69b9      	ldr	r1, [r7, #24]
 8005af6:	0148      	lsls	r0, r1, #5
 8005af8:	69f9      	ldr	r1, [r7, #28]
 8005afa:	4401      	add	r1, r0
 8005afc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b00:	4313      	orrs	r3, r2
 8005b02:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	791b      	ldrb	r3, [r3, #4]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d122      	bne.n	8005b52 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b26:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005b2a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	8afb      	ldrh	r3, [r7, #22]
 8005b3c:	075b      	lsls	r3, r3, #29
 8005b3e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005b42:	69b9      	ldr	r1, [r7, #24]
 8005b44:	0148      	lsls	r0, r1, #5
 8005b46:	69f9      	ldr	r1, [r7, #28]
 8005b48:	4401      	add	r1, r0
 8005b4a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b68:	69b9      	ldr	r1, [r7, #24]
 8005b6a:	0148      	lsls	r0, r1, #5
 8005b6c:	69f9      	ldr	r1, [r7, #28]
 8005b6e:	4401      	add	r1, r0
 8005b70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005b74:	4313      	orrs	r3, r2
 8005b76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d14b      	bne.n	8005c16 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b92:	461a      	mov	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	791b      	ldrb	r3, [r3, #4]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d128      	bne.n	8005bf4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d110      	bne.n	8005bd4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e00f      	b.n	8005bf4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c0e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	e166      	b.n	8005ee4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c30:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c34:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	791b      	ldrb	r3, [r3, #4]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d015      	beq.n	8005c6a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 814e 	beq.w	8005ee4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	2101      	movs	r1, #1
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	69f9      	ldr	r1, [r7, #28]
 8005c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c64:	4313      	orrs	r3, r2
 8005c66:	634b      	str	r3, [r1, #52]	@ 0x34
 8005c68:	e13c      	b.n	8005ee4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d110      	bne.n	8005c9c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e00f      	b.n	8005cbc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	68d9      	ldr	r1, [r3, #12]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	781a      	ldrb	r2, [r3, #0]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	b298      	uxth	r0, r3
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	4603      	mov	r3, r0
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f9b9 	bl	8006048 <USB_WritePacket>
 8005cd6:	e105      	b.n	8005ee4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cf2:	0cdb      	lsrs	r3, r3, #19
 8005cf4:	04db      	lsls	r3, r3, #19
 8005cf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d1a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d132      	bne.n	8005d88 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d50:	69b9      	ldr	r1, [r7, #24]
 8005d52:	0148      	lsls	r0, r1, #5
 8005d54:	69f9      	ldr	r1, [r7, #28]
 8005d56:	4401      	add	r1, r0
 8005d58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d7e:	6113      	str	r3, [r2, #16]
 8005d80:	e062      	b.n	8005e48 <USB_EPStartXfer+0x490>
 8005d82:	bf00      	nop
 8005d84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d123      	bne.n	8005dd8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005da6:	69b9      	ldr	r1, [r7, #24]
 8005da8:	0148      	lsls	r0, r1, #5
 8005daa:	69f9      	ldr	r1, [r7, #28]
 8005dac:	4401      	add	r1, r0
 8005dae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005db2:	4313      	orrs	r3, r2
 8005db4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005dd4:	6113      	str	r3, [r2, #16]
 8005dd6:	e037      	b.n	8005e48 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4413      	add	r3, r2
 8005de2:	1e5a      	subs	r2, r3, #1
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	8afa      	ldrh	r2, [r7, #22]
 8005df4:	fb03 f202 	mul.w	r2, r3, r2
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	8afb      	ldrh	r3, [r7, #22]
 8005e0c:	04d9      	lsls	r1, r3, #19
 8005e0e:	4b38      	ldr	r3, [pc, #224]	@ (8005ef0 <USB_EPStartXfer+0x538>)
 8005e10:	400b      	ands	r3, r1
 8005e12:	69b9      	ldr	r1, [r7, #24]
 8005e14:	0148      	lsls	r0, r1, #5
 8005e16:	69f9      	ldr	r1, [r7, #28]
 8005e18:	4401      	add	r1, r0
 8005e1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e38:	69b9      	ldr	r1, [r7, #24]
 8005e3a:	0148      	lsls	r0, r1, #5
 8005e3c:	69f9      	ldr	r1, [r7, #28]
 8005e3e:	4401      	add	r1, r0
 8005e40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e44:	4313      	orrs	r3, r2
 8005e46:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d10d      	bne.n	8005e6a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	68d9      	ldr	r1, [r3, #12]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e66:	460a      	mov	r2, r1
 8005e68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	791b      	ldrb	r3, [r3, #4]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d128      	bne.n	8005ec4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d110      	bne.n	8005ea4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e00f      	b.n	8005ec4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ec2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ede:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	1ff80000 	.word	0x1ff80000

08005ef4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d14a      	bne.n	8005fa8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f2a:	f040 8086 	bne.w	800603a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	7812      	ldrb	r2, [r2, #0]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	7812      	ldrb	r2, [r2, #0]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d902      	bls.n	8005f8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	75fb      	strb	r3, [r7, #23]
          break;
 8005f8a:	e056      	b.n	800603a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa4:	d0e7      	beq.n	8005f76 <USB_EPStopXfer+0x82>
 8005fa6:	e048      	b.n	800603a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fc0:	d13b      	bne.n	800603a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fe4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006004:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006008:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3301      	adds	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006016:	4293      	cmp	r3, r2
 8006018:	d902      	bls.n	8006020 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	75fb      	strb	r3, [r7, #23]
          break;
 800601e:	e00c      	b.n	800603a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006038:	d0e7      	beq.n	800600a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800603a:	7dfb      	ldrb	r3, [r7, #23]
}
 800603c:	4618      	mov	r0, r3
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006048:	b480      	push	{r7}
 800604a:	b089      	sub	sp, #36	@ 0x24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	4611      	mov	r1, r2
 8006054:	461a      	mov	r2, r3
 8006056:	460b      	mov	r3, r1
 8006058:	71fb      	strb	r3, [r7, #7]
 800605a:	4613      	mov	r3, r2
 800605c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006066:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800606a:	2b00      	cmp	r3, #0
 800606c:	d123      	bne.n	80060b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800606e:	88bb      	ldrh	r3, [r7, #4]
 8006070:	3303      	adds	r3, #3
 8006072:	089b      	lsrs	r3, r3, #2
 8006074:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006076:	2300      	movs	r3, #0
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	e018      	b.n	80060ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800607c:	79fb      	ldrb	r3, [r7, #7]
 800607e:	031a      	lsls	r2, r3, #12
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	4413      	add	r3, r2
 8006084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006088:	461a      	mov	r2, r3
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	3301      	adds	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	3301      	adds	r3, #1
 800609a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	3301      	adds	r3, #1
 80060a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	3301      	adds	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	3301      	adds	r3, #1
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d3e2      	bcc.n	800607c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3724      	adds	r7, #36	@ 0x24
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b08b      	sub	sp, #44	@ 0x2c
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	089b      	lsrs	r3, r3, #2
 80060de:	b29b      	uxth	r3, r3
 80060e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	f003 0303 	and.w	r3, r3, #3
 80060e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060ea:	2300      	movs	r3, #0
 80060ec:	623b      	str	r3, [r7, #32]
 80060ee:	e014      	b.n	800611a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	3301      	adds	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	3301      	adds	r3, #1
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	3301      	adds	r3, #1
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	3301      	adds	r3, #1
 8006112:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	3301      	adds	r3, #1
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	6a3a      	ldr	r2, [r7, #32]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	429a      	cmp	r2, r3
 8006120:	d3e6      	bcc.n	80060f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006122:	8bfb      	ldrh	r3, [r7, #30]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01e      	beq.n	8006166 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006132:	461a      	mov	r2, r3
 8006134:	f107 0310 	add.w	r3, r7, #16
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
 8006148:	b2da      	uxtb	r2, r3
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	701a      	strb	r2, [r3, #0]
      i++;
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	3301      	adds	r3, #1
 8006152:	623b      	str	r3, [r7, #32]
      pDest++;
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	3301      	adds	r3, #1
 8006158:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800615a:	8bfb      	ldrh	r3, [r7, #30]
 800615c:	3b01      	subs	r3, #1
 800615e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006160:	8bfb      	ldrh	r3, [r7, #30]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1ea      	bne.n	800613c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006168:	4618      	mov	r0, r3
 800616a:	372c      	adds	r7, #44	@ 0x2c
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d12c      	bne.n	80061ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	db12      	blt.n	80061c8 <USB_EPSetStall+0x54>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00f      	beq.n	80061c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	e02b      	b.n	8006242 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	db12      	blt.n	8006222 <USB_EPSetStall+0xae>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00f      	beq.n	8006222 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	0151      	lsls	r1, r2, #5
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	440a      	add	r2, r1
 8006218:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800621c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006220:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	440a      	add	r2, r1
 8006238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800623c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006240:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d128      	bne.n	80062be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006286:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800628a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	791b      	ldrb	r3, [r3, #4]
 8006290:	2b03      	cmp	r3, #3
 8006292:	d003      	beq.n	800629c <USB_EPClearStall+0x4c>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	791b      	ldrb	r3, [r3, #4]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d138      	bne.n	800630e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	e027      	b.n	800630e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	791b      	ldrb	r3, [r3, #4]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d003      	beq.n	80062ee <USB_EPClearStall+0x9e>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	791b      	ldrb	r3, [r3, #4]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d10f      	bne.n	800630e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800630c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800633a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800633e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006356:	4313      	orrs	r3, r2
 8006358:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006396:	f023 0302 	bic.w	r3, r3, #2
 800639a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063c4:	f023 0303 	bic.w	r3, r3, #3
 80063c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006404:	68fb      	ldr	r3, [r7, #12]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	4013      	ands	r3, r2
 8006434:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	0c1b      	lsrs	r3, r3, #16
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	b29b      	uxth	r3, r3
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	4013      	ands	r3, r2
 80064a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064a8:	68bb      	ldr	r3, [r7, #8]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	fa22 f303 	lsr.w	r3, r2, r3
 80064e6:	01db      	lsls	r3, r3, #7
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4013      	ands	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006504:	68bb      	ldr	r3, [r7, #8]
}
 8006506:	4618      	mov	r0, r3
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0301 	and.w	r3, r3, #1
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006548:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800654c:	f023 0307 	bic.w	r3, r3, #7
 8006550:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006564:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	460b      	mov	r3, r1
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	333c      	adds	r3, #60	@ 0x3c
 800658a:	3304      	adds	r3, #4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4a26      	ldr	r2, [pc, #152]	@ (800662c <USB_EP0_OutStart+0xb8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d90a      	bls.n	80065ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065a8:	d101      	bne.n	80065ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	e037      	b.n	800661e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b4:	461a      	mov	r2, r3
 80065b6:	2300      	movs	r3, #0
 80065b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065dc:	f043 0318 	orr.w	r3, r3, #24
 80065e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80065f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065f6:	7afb      	ldrb	r3, [r7, #11]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d10f      	bne.n	800661c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006602:	461a      	mov	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006616:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800661a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	4f54300a 	.word	0x4f54300a

08006630 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3301      	adds	r3, #1
 8006640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006648:	d901      	bls.n	800664e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e022      	b.n	8006694 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	daf2      	bge.n	800663c <USB_CoreReset+0xc>

  count = 10U;
 8006656:	230a      	movs	r3, #10
 8006658:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800665a:	e002      	b.n	8006662 <USB_CoreReset+0x32>
  {
    count--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3b01      	subs	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f9      	bne.n	800665c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f043 0201 	orr.w	r2, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006680:	d901      	bls.n	8006686 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e006      	b.n	8006694 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b01      	cmp	r3, #1
 8006690:	d0f0      	beq.n	8006674 <USB_CoreReset+0x44>

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80066b0:	f002 fcb2 	bl	8009018 <USBD_static_malloc>
 80066b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	32b0      	adds	r2, #176	@ 0xb0
 80066c6:	2100      	movs	r1, #0
 80066c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0d4      	b.n	800687a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80066d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80066d4:	2100      	movs	r1, #0
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f005 fe5a 	bl	800c390 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	32b0      	adds	r2, #176	@ 0xb0
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32b0      	adds	r2, #176	@ 0xb0
 80066f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7c1b      	ldrb	r3, [r3, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d138      	bne.n	800677a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006708:	4b5e      	ldr	r3, [pc, #376]	@ (8006884 <USBD_CDC_Init+0x1e4>)
 800670a:	7819      	ldrb	r1, [r3, #0]
 800670c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006710:	2202      	movs	r2, #2
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f002 fb5d 	bl	8008dd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006718:	4b5a      	ldr	r3, [pc, #360]	@ (8006884 <USBD_CDC_Init+0x1e4>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	3323      	adds	r3, #35	@ 0x23
 800672e:	2201      	movs	r2, #1
 8006730:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006732:	4b55      	ldr	r3, [pc, #340]	@ (8006888 <USBD_CDC_Init+0x1e8>)
 8006734:	7819      	ldrb	r1, [r3, #0]
 8006736:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800673a:	2202      	movs	r2, #2
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f002 fb48 	bl	8008dd2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006742:	4b51      	ldr	r3, [pc, #324]	@ (8006888 <USBD_CDC_Init+0x1e8>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f003 020f 	and.w	r2, r3, #15
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800675a:	2201      	movs	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800675e:	4b4b      	ldr	r3, [pc, #300]	@ (800688c <USBD_CDC_Init+0x1ec>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	f003 020f 	and.w	r2, r3, #15
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	331c      	adds	r3, #28
 8006774:	2210      	movs	r2, #16
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e035      	b.n	80067e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800677a:	4b42      	ldr	r3, [pc, #264]	@ (8006884 <USBD_CDC_Init+0x1e4>)
 800677c:	7819      	ldrb	r1, [r3, #0]
 800677e:	2340      	movs	r3, #64	@ 0x40
 8006780:	2202      	movs	r2, #2
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f002 fb25 	bl	8008dd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006788:	4b3e      	ldr	r3, [pc, #248]	@ (8006884 <USBD_CDC_Init+0x1e4>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	f003 020f 	and.w	r2, r3, #15
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	3323      	adds	r3, #35	@ 0x23
 800679e:	2201      	movs	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80067a2:	4b39      	ldr	r3, [pc, #228]	@ (8006888 <USBD_CDC_Init+0x1e8>)
 80067a4:	7819      	ldrb	r1, [r3, #0]
 80067a6:	2340      	movs	r3, #64	@ 0x40
 80067a8:	2202      	movs	r2, #2
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f002 fb11 	bl	8008dd2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80067b0:	4b35      	ldr	r3, [pc, #212]	@ (8006888 <USBD_CDC_Init+0x1e8>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80067c8:	2201      	movs	r2, #1
 80067ca:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067cc:	4b2f      	ldr	r3, [pc, #188]	@ (800688c <USBD_CDC_Init+0x1ec>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f003 020f 	and.w	r2, r3, #15
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	331c      	adds	r3, #28
 80067e2:	2210      	movs	r2, #16
 80067e4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067e6:	4b29      	ldr	r3, [pc, #164]	@ (800688c <USBD_CDC_Init+0x1ec>)
 80067e8:	7819      	ldrb	r1, [r3, #0]
 80067ea:	2308      	movs	r3, #8
 80067ec:	2203      	movs	r2, #3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f002 faef 	bl	8008dd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067f4:	4b25      	ldr	r3, [pc, #148]	@ (800688c <USBD_CDC_Init+0x1ec>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f003 020f 	and.w	r2, r3, #15
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	3323      	adds	r3, #35	@ 0x23
 800680a:	2201      	movs	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	33b0      	adds	r3, #176	@ 0xb0
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006844:	2302      	movs	r3, #2
 8006846:	e018      	b.n	800687a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	7c1b      	ldrb	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006850:	4b0d      	ldr	r3, [pc, #52]	@ (8006888 <USBD_CDC_Init+0x1e8>)
 8006852:	7819      	ldrb	r1, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800685a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f002 fba6 	bl	8008fb0 <USBD_LL_PrepareReceive>
 8006864:	e008      	b.n	8006878 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006866:	4b08      	ldr	r3, [pc, #32]	@ (8006888 <USBD_CDC_Init+0x1e8>)
 8006868:	7819      	ldrb	r1, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006870:	2340      	movs	r3, #64	@ 0x40
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f002 fb9c 	bl	8008fb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000093 	.word	0x20000093
 8006888:	20000094 	.word	0x20000094
 800688c:	20000095 	.word	0x20000095

08006890 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800689c:	4b3a      	ldr	r3, [pc, #232]	@ (8006988 <USBD_CDC_DeInit+0xf8>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f002 fabb 	bl	8008e1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80068a8:	4b37      	ldr	r3, [pc, #220]	@ (8006988 <USBD_CDC_DeInit+0xf8>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f003 020f 	and.w	r2, r3, #15
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	3323      	adds	r3, #35	@ 0x23
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80068c2:	4b32      	ldr	r3, [pc, #200]	@ (800698c <USBD_CDC_DeInit+0xfc>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f002 faa8 	bl	8008e1e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80068ce:	4b2f      	ldr	r3, [pc, #188]	@ (800698c <USBD_CDC_DeInit+0xfc>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	f003 020f 	and.w	r2, r3, #15
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80068ea:	4b29      	ldr	r3, [pc, #164]	@ (8006990 <USBD_CDC_DeInit+0x100>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f002 fa94 	bl	8008e1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068f6:	4b26      	ldr	r3, [pc, #152]	@ (8006990 <USBD_CDC_DeInit+0x100>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	f003 020f 	and.w	r2, r3, #15
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3323      	adds	r3, #35	@ 0x23
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006910:	4b1f      	ldr	r3, [pc, #124]	@ (8006990 <USBD_CDC_DeInit+0x100>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 020f 	and.w	r2, r3, #15
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	331c      	adds	r3, #28
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	32b0      	adds	r2, #176	@ 0xb0
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01f      	beq.n	800697c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	33b0      	adds	r3, #176	@ 0xb0
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	32b0      	adds	r2, #176	@ 0xb0
 800695a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695e:	4618      	mov	r0, r3
 8006960:	f002 fb68 	bl	8009034 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	32b0      	adds	r2, #176	@ 0xb0
 800696e:	2100      	movs	r1, #0
 8006970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000093 	.word	0x20000093
 800698c:	20000094 	.word	0x20000094
 8006990:	20000095 	.word	0x20000095

08006994 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	32b0      	adds	r2, #176	@ 0xb0
 80069a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e0bf      	b.n	8006b44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d050      	beq.n	8006a72 <USBD_CDC_Setup+0xde>
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	f040 80af 	bne.w	8006b34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	88db      	ldrh	r3, [r3, #6]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d03a      	beq.n	8006a54 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da1b      	bge.n	8006a20 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	33b0      	adds	r3, #176	@ 0xb0
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	88d2      	ldrh	r2, [r2, #6]
 8006a04:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	88db      	ldrh	r3, [r3, #6]
 8006a0a:	2b07      	cmp	r3, #7
 8006a0c:	bf28      	it	cs
 8006a0e:	2307      	movcs	r3, #7
 8006a10:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	89fa      	ldrh	r2, [r7, #14]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fda9 	bl	8008570 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006a1e:	e090      	b.n	8006b42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785a      	ldrb	r2, [r3, #1]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	88db      	ldrh	r3, [r3, #6]
 8006a2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a30:	d803      	bhi.n	8006a3a <USBD_CDC_Setup+0xa6>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	88db      	ldrh	r3, [r3, #6]
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	e000      	b.n	8006a3c <USBD_CDC_Setup+0xa8>
 8006a3a:	2240      	movs	r2, #64	@ 0x40
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a42:	6939      	ldr	r1, [r7, #16]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fdbe 	bl	80085ce <USBD_CtlPrepareRx>
      break;
 8006a52:	e076      	b.n	8006b42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	33b0      	adds	r3, #176	@ 0xb0
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	7850      	ldrb	r0, [r2, #1]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	4798      	blx	r3
      break;
 8006a70:	e067      	b.n	8006b42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b0b      	cmp	r3, #11
 8006a78:	d851      	bhi.n	8006b1e <USBD_CDC_Setup+0x18a>
 8006a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <USBD_CDC_Setup+0xec>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006ab1 	.word	0x08006ab1
 8006a84:	08006b2d 	.word	0x08006b2d
 8006a88:	08006b1f 	.word	0x08006b1f
 8006a8c:	08006b1f 	.word	0x08006b1f
 8006a90:	08006b1f 	.word	0x08006b1f
 8006a94:	08006b1f 	.word	0x08006b1f
 8006a98:	08006b1f 	.word	0x08006b1f
 8006a9c:	08006b1f 	.word	0x08006b1f
 8006aa0:	08006b1f 	.word	0x08006b1f
 8006aa4:	08006b1f 	.word	0x08006b1f
 8006aa8:	08006adb 	.word	0x08006adb
 8006aac:	08006b05 	.word	0x08006b05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d107      	bne.n	8006acc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006abc:	f107 030a 	add.w	r3, r7, #10
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fd53 	bl	8008570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aca:	e032      	b.n	8006b32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fcd1 	bl	8008476 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ad8:	e02b      	b.n	8006b32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d107      	bne.n	8006af6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ae6:	f107 030d 	add.w	r3, r7, #13
 8006aea:	2201      	movs	r2, #1
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fd3e 	bl	8008570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006af4:	e01d      	b.n	8006b32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 fcbc 	bl	8008476 <USBD_CtlError>
            ret = USBD_FAIL;
 8006afe:	2303      	movs	r3, #3
 8006b00:	75fb      	strb	r3, [r7, #23]
          break;
 8006b02:	e016      	b.n	8006b32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d00f      	beq.n	8006b30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fcaf 	bl	8008476 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b1c:	e008      	b.n	8006b30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 fca8 	bl	8008476 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b26:	2303      	movs	r3, #3
 8006b28:	75fb      	strb	r3, [r7, #23]
          break;
 8006b2a:	e002      	b.n	8006b32 <USBD_CDC_Setup+0x19e>
          break;
 8006b2c:	bf00      	nop
 8006b2e:	e008      	b.n	8006b42 <USBD_CDC_Setup+0x1ae>
          break;
 8006b30:	bf00      	nop
      }
      break;
 8006b32:	e006      	b.n	8006b42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 fc9d 	bl	8008476 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b40:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	32b0      	adds	r2, #176	@ 0xb0
 8006b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e065      	b.n	8006c42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	32b0      	adds	r2, #176	@ 0xb0
 8006b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	f003 020f 	and.w	r2, r3, #15
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	3314      	adds	r3, #20
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d02f      	beq.n	8006c00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	f003 020f 	and.w	r2, r3, #15
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	3314      	adds	r3, #20
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	f003 010f 	and.w	r1, r3, #15
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	440b      	add	r3, r1
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4403      	add	r3, r0
 8006bc8:	331c      	adds	r3, #28
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bd0:	fb01 f303 	mul.w	r3, r1, r3
 8006bd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d112      	bne.n	8006c00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	3314      	adds	r3, #20
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bf2:	78f9      	ldrb	r1, [r7, #3]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f002 f9b8 	bl	8008f6e <USBD_LL_Transmit>
 8006bfe:	e01f      	b.n	8006c40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	33b0      	adds	r3, #176	@ 0xb0
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d010      	beq.n	8006c40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	33b0      	adds	r3, #176	@ 0xb0
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	32b0      	adds	r2, #176	@ 0xb0
 8006c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	32b0      	adds	r2, #176	@ 0xb0
 8006c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e01a      	b.n	8006cb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f002 f9b6 	bl	8008ff2 <USBD_LL_GetRxDataSize>
 8006c86:	4602      	mov	r2, r0
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	33b0      	adds	r3, #176	@ 0xb0
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006cac:	4611      	mov	r1, r2
 8006cae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	32b0      	adds	r2, #176	@ 0xb0
 8006ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e024      	b.n	8006d26 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	33b0      	adds	r3, #176	@ 0xb0
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d019      	beq.n	8006d24 <USBD_CDC_EP0_RxReady+0x6a>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006cf6:	2bff      	cmp	r3, #255	@ 0xff
 8006cf8:	d014      	beq.n	8006d24 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	33b0      	adds	r3, #176	@ 0xb0
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006d12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	22ff      	movs	r2, #255	@ 0xff
 8006d20:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d38:	2182      	movs	r1, #130	@ 0x82
 8006d3a:	4818      	ldr	r0, [pc, #96]	@ (8006d9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d3c:	f000 fd62 	bl	8007804 <USBD_GetEpDesc>
 8006d40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d42:	2101      	movs	r1, #1
 8006d44:	4815      	ldr	r0, [pc, #84]	@ (8006d9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d46:	f000 fd5d 	bl	8007804 <USBD_GetEpDesc>
 8006d4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d4c:	2181      	movs	r1, #129	@ 0x81
 8006d4e:	4813      	ldr	r0, [pc, #76]	@ (8006d9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d50:	f000 fd58 	bl	8007804 <USBD_GetEpDesc>
 8006d54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2210      	movs	r2, #16
 8006d60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d006      	beq.n	8006d76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d70:	711a      	strb	r2, [r3, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d006      	beq.n	8006d8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d84:	711a      	strb	r2, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2243      	movs	r2, #67	@ 0x43
 8006d8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d90:	4b02      	ldr	r3, [pc, #8]	@ (8006d9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000050 	.word	0x20000050

08006da0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006da8:	2182      	movs	r1, #130	@ 0x82
 8006daa:	4818      	ldr	r0, [pc, #96]	@ (8006e0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006dac:	f000 fd2a 	bl	8007804 <USBD_GetEpDesc>
 8006db0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006db2:	2101      	movs	r1, #1
 8006db4:	4815      	ldr	r0, [pc, #84]	@ (8006e0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006db6:	f000 fd25 	bl	8007804 <USBD_GetEpDesc>
 8006dba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006dbc:	2181      	movs	r1, #129	@ 0x81
 8006dbe:	4813      	ldr	r0, [pc, #76]	@ (8006e0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006dc0:	f000 fd20 	bl	8007804 <USBD_GetEpDesc>
 8006dc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2210      	movs	r2, #16
 8006dd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d006      	beq.n	8006de6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	711a      	strb	r2, [r3, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f042 0202 	orr.w	r2, r2, #2
 8006de4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d006      	beq.n	8006dfa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	711a      	strb	r2, [r3, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f042 0202 	orr.w	r2, r2, #2
 8006df8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2243      	movs	r2, #67	@ 0x43
 8006dfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e00:	4b02      	ldr	r3, [pc, #8]	@ (8006e0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000050 	.word	0x20000050

08006e10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e18:	2182      	movs	r1, #130	@ 0x82
 8006e1a:	4818      	ldr	r0, [pc, #96]	@ (8006e7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e1c:	f000 fcf2 	bl	8007804 <USBD_GetEpDesc>
 8006e20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e22:	2101      	movs	r1, #1
 8006e24:	4815      	ldr	r0, [pc, #84]	@ (8006e7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e26:	f000 fced 	bl	8007804 <USBD_GetEpDesc>
 8006e2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e2c:	2181      	movs	r1, #129	@ 0x81
 8006e2e:	4813      	ldr	r0, [pc, #76]	@ (8006e7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e30:	f000 fce8 	bl	8007804 <USBD_GetEpDesc>
 8006e34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2210      	movs	r2, #16
 8006e40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d006      	beq.n	8006e56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e50:	711a      	strb	r2, [r3, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d006      	beq.n	8006e6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e64:	711a      	strb	r2, [r3, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2243      	movs	r2, #67	@ 0x43
 8006e6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e70:	4b02      	ldr	r3, [pc, #8]	@ (8006e7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000050 	.word	0x20000050

08006e80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	220a      	movs	r2, #10
 8006e8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e8e:	4b03      	ldr	r3, [pc, #12]	@ (8006e9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	2000000c 	.word	0x2000000c

08006ea0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e009      	b.n	8006ec8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	33b0      	adds	r3, #176	@ 0xb0
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	32b0      	adds	r2, #176	@ 0xb0
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e008      	b.n	8006f0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	32b0      	adds	r2, #176	@ 0xb0
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e004      	b.n	8006f46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	32b0      	adds	r2, #176	@ 0xb0
 8006f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e025      	b.n	8006fc6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d11f      	bne.n	8006fc4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f8c:	4b10      	ldr	r3, [pc, #64]	@ (8006fd0 <USBD_CDC_TransmitPacket+0x7c>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 020f 	and.w	r2, r3, #15
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4403      	add	r3, r0
 8006fa6:	3314      	adds	r3, #20
 8006fa8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006faa:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <USBD_CDC_TransmitPacket+0x7c>)
 8006fac:	7819      	ldrb	r1, [r3, #0]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 ffd7 	bl	8008f6e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000093 	.word	0x20000093

08006fd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	32b0      	adds	r2, #176	@ 0xb0
 8006fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32b0      	adds	r2, #176	@ 0xb0
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e018      	b.n	8007034 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7c1b      	ldrb	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800700a:	4b0c      	ldr	r3, [pc, #48]	@ (800703c <USBD_CDC_ReceivePacket+0x68>)
 800700c:	7819      	ldrb	r1, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 ffc9 	bl	8008fb0 <USBD_LL_PrepareReceive>
 800701e:	e008      	b.n	8007032 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007020:	4b06      	ldr	r3, [pc, #24]	@ (800703c <USBD_CDC_ReceivePacket+0x68>)
 8007022:	7819      	ldrb	r1, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800702a:	2340      	movs	r3, #64	@ 0x40
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 ffbf 	bl	8008fb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20000094 	.word	0x20000094

08007040 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	4613      	mov	r3, r2
 800704c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007054:	2303      	movs	r3, #3
 8007056:	e01f      	b.n	8007098 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	79fa      	ldrb	r2, [r7, #7]
 800708a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f001 fe39 	bl	8008d04 <USBD_LL_Init>
 8007092:	4603      	mov	r3, r0
 8007094:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e025      	b.n	8007104 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	32ae      	adds	r2, #174	@ 0xae
 80070ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00f      	beq.n	80070f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	32ae      	adds	r2, #174	@ 0xae
 80070de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e4:	f107 020e 	add.w	r2, r7, #14
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	4602      	mov	r2, r0
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fe41 	bl	8008d9c <USBD_LL_Start>
 800711a:	4603      	mov	r3, r0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800712c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	78fa      	ldrb	r2, [r7, #3]
 800715e:	4611      	mov	r1, r2
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4798      	blx	r3
 8007164:	4603      	mov	r3, r0
 8007166:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007168:	7bfb      	ldrb	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	460b      	mov	r3, r1
 800717c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	4611      	mov	r1, r2
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 f922 	bl	8008402 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80071cc:	461a      	mov	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d01a      	beq.n	8007218 <USBD_LL_SetupStage+0x72>
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d822      	bhi.n	800722c <USBD_LL_SetupStage+0x86>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <USBD_LL_SetupStage+0x4a>
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d00a      	beq.n	8007204 <USBD_LL_SetupStage+0x5e>
 80071ee:	e01d      	b.n	800722c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fb77 	bl	80078ec <USBD_StdDevReq>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
      break;
 8007202:	e020      	b.n	8007246 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fbdf 	bl	80079d0 <USBD_StdItfReq>
 8007212:	4603      	mov	r3, r0
 8007214:	73fb      	strb	r3, [r7, #15]
      break;
 8007216:	e016      	b.n	8007246 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fc41 	bl	8007aa8 <USBD_StdEPReq>
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
      break;
 800722a:	e00c      	b.n	8007246 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007232:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007236:	b2db      	uxtb	r3, r3
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fe0e 	bl	8008e5c <USBD_LL_StallEP>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
      break;
 8007244:	bf00      	nop
  }

  return ret;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	460b      	mov	r3, r1
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d177      	bne.n	8007358 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800726e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007276:	2b03      	cmp	r3, #3
 8007278:	f040 80a1 	bne.w	80073be <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	8992      	ldrh	r2, [r2, #12]
 8007284:	4293      	cmp	r3, r2
 8007286:	d91c      	bls.n	80072c2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	8992      	ldrh	r2, [r2, #12]
 8007290:	1a9a      	subs	r2, r3, r2
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	8992      	ldrh	r2, [r2, #12]
 800729e:	441a      	add	r2, r3
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	6919      	ldr	r1, [r3, #16]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	899b      	ldrh	r3, [r3, #12]
 80072ac:	461a      	mov	r2, r3
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	4293      	cmp	r3, r2
 80072b4:	bf38      	it	cc
 80072b6:	4613      	movcc	r3, r2
 80072b8:	461a      	mov	r2, r3
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f001 f9a8 	bl	8008610 <USBD_CtlContinueRx>
 80072c0:	e07d      	b.n	80073be <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d014      	beq.n	80072fa <USBD_LL_DataOutStage+0xaa>
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d81d      	bhi.n	8007310 <USBD_LL_DataOutStage+0xc0>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <USBD_LL_DataOutStage+0x8e>
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d003      	beq.n	80072e4 <USBD_LL_DataOutStage+0x94>
 80072dc:	e018      	b.n	8007310 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	75bb      	strb	r3, [r7, #22]
            break;
 80072e2:	e018      	b.n	8007316 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	4619      	mov	r1, r3
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fa6e 	bl	80077d0 <USBD_CoreFindIF>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75bb      	strb	r3, [r7, #22]
            break;
 80072f8:	e00d      	b.n	8007316 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007300:	b2db      	uxtb	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fa70 	bl	80077ea <USBD_CoreFindEP>
 800730a:	4603      	mov	r3, r0
 800730c:	75bb      	strb	r3, [r7, #22]
            break;
 800730e:	e002      	b.n	8007316 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	75bb      	strb	r3, [r7, #22]
            break;
 8007314:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007316:	7dbb      	ldrb	r3, [r7, #22]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d119      	bne.n	8007350 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b03      	cmp	r3, #3
 8007326:	d113      	bne.n	8007350 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007328:	7dba      	ldrb	r2, [r7, #22]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	32ae      	adds	r2, #174	@ 0xae
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007338:	7dba      	ldrb	r2, [r7, #22]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007340:	7dba      	ldrb	r2, [r7, #22]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	32ae      	adds	r2, #174	@ 0xae
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f001 f96e 	bl	8008632 <USBD_CtlSendStatus>
 8007356:	e032      	b.n	80073be <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4619      	mov	r1, r3
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 fa41 	bl	80077ea <USBD_CoreFindEP>
 8007368:	4603      	mov	r3, r0
 800736a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800736c:	7dbb      	ldrb	r3, [r7, #22]
 800736e:	2bff      	cmp	r3, #255	@ 0xff
 8007370:	d025      	beq.n	80073be <USBD_LL_DataOutStage+0x16e>
 8007372:	7dbb      	ldrb	r3, [r7, #22]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d122      	bne.n	80073be <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b03      	cmp	r3, #3
 8007382:	d117      	bne.n	80073b4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007384:	7dba      	ldrb	r2, [r7, #22]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	32ae      	adds	r2, #174	@ 0xae
 800738a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00f      	beq.n	80073b4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007394:	7dba      	ldrb	r2, [r7, #22]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800739c:	7dba      	ldrb	r2, [r7, #22]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	32ae      	adds	r2, #174	@ 0xae
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	7afa      	ldrb	r2, [r7, #11]
 80073aa:	4611      	mov	r1, r2
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	4798      	blx	r3
 80073b0:	4603      	mov	r3, r0
 80073b2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	e000      	b.n	80073c0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	460b      	mov	r3, r1
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d178      	bne.n	80074ce <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3314      	adds	r3, #20
 80073e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d163      	bne.n	80074b4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	8992      	ldrh	r2, [r2, #12]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d91c      	bls.n	8007432 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	8992      	ldrh	r2, [r2, #12]
 8007400:	1a9a      	subs	r2, r3, r2
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	8992      	ldrh	r2, [r2, #12]
 800740e:	441a      	add	r2, r3
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6919      	ldr	r1, [r3, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	461a      	mov	r2, r3
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f001 f8c4 	bl	80085ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007424:	2300      	movs	r3, #0
 8007426:	2200      	movs	r2, #0
 8007428:	2100      	movs	r1, #0
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f001 fdc0 	bl	8008fb0 <USBD_LL_PrepareReceive>
 8007430:	e040      	b.n	80074b4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	899b      	ldrh	r3, [r3, #12]
 8007436:	461a      	mov	r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d11c      	bne.n	800747a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007448:	4293      	cmp	r3, r2
 800744a:	d316      	bcc.n	800747a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007456:	429a      	cmp	r2, r3
 8007458:	d20f      	bcs.n	800747a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800745a:	2200      	movs	r2, #0
 800745c:	2100      	movs	r1, #0
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f001 f8a4 	bl	80085ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800746c:	2300      	movs	r3, #0
 800746e:	2200      	movs	r2, #0
 8007470:	2100      	movs	r1, #0
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f001 fd9c 	bl	8008fb0 <USBD_LL_PrepareReceive>
 8007478:	e01c      	b.n	80074b4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b03      	cmp	r3, #3
 8007484:	d10f      	bne.n	80074a6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074a6:	2180      	movs	r1, #128	@ 0x80
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f001 fcd7 	bl	8008e5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f001 f8d2 	bl	8008658 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d03a      	beq.n	8007534 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f7ff fe30 	bl	8007124 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80074cc:	e032      	b.n	8007534 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f986 	bl	80077ea <USBD_CoreFindEP>
 80074de:	4603      	mov	r3, r0
 80074e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	2bff      	cmp	r3, #255	@ 0xff
 80074e6:	d025      	beq.n	8007534 <USBD_LL_DataInStage+0x16c>
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d122      	bne.n	8007534 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d11c      	bne.n	8007534 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80074fa:	7dfa      	ldrb	r2, [r7, #23]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	32ae      	adds	r2, #174	@ 0xae
 8007500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d014      	beq.n	8007534 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800750a:	7dfa      	ldrb	r2, [r7, #23]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007512:	7dfa      	ldrb	r2, [r7, #23]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	32ae      	adds	r2, #174	@ 0xae
 8007518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	7afa      	ldrb	r2, [r7, #11]
 8007520:	4611      	mov	r1, r2
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	4798      	blx	r3
 8007526:	4603      	mov	r3, r0
 8007528:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800752a:	7dbb      	ldrb	r3, [r7, #22]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007530:	7dbb      	ldrb	r3, [r7, #22]
 8007532:	e000      	b.n	8007536 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d014      	beq.n	80075a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00e      	beq.n	80075a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6852      	ldr	r2, [r2, #4]
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	4611      	mov	r1, r2
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80075a0:	2303      	movs	r3, #3
 80075a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075a4:	2340      	movs	r3, #64	@ 0x40
 80075a6:	2200      	movs	r2, #0
 80075a8:	2100      	movs	r1, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 fc11 	bl	8008dd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2240      	movs	r2, #64	@ 0x40
 80075bc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c0:	2340      	movs	r3, #64	@ 0x40
 80075c2:	2200      	movs	r2, #0
 80075c4:	2180      	movs	r1, #128	@ 0x80
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fc03 	bl	8008dd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2240      	movs	r2, #64	@ 0x40
 80075d8:	841a      	strh	r2, [r3, #32]

  return ret;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	78fa      	ldrb	r2, [r7, #3]
 80075f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b04      	cmp	r3, #4
 8007616:	d006      	beq.n	8007626 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800761e:	b2da      	uxtb	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2204      	movs	r2, #4
 800762a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b04      	cmp	r3, #4
 800764e:	d106      	bne.n	800765e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007656:	b2da      	uxtb	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b03      	cmp	r3, #3
 800767e:	d110      	bne.n	80076a2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00b      	beq.n	80076a2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d005      	beq.n	80076a2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	32ae      	adds	r2, #174	@ 0xae
 80076c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e01c      	b.n	8007708 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d115      	bne.n	8007706 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	32ae      	adds	r2, #174	@ 0xae
 80076e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00b      	beq.n	8007706 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	32ae      	adds	r2, #174	@ 0xae
 80076f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	4611      	mov	r1, r2
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	32ae      	adds	r2, #174	@ 0xae
 8007726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800772e:	2303      	movs	r3, #3
 8007730:	e01c      	b.n	800776c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d115      	bne.n	800776a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	32ae      	adds	r2, #174	@ 0xae
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	32ae      	adds	r2, #174	@ 0xae
 800775c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007762:	78fa      	ldrb	r2, [r7, #3]
 8007764:	4611      	mov	r1, r2
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00e      	beq.n	80077c6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6852      	ldr	r2, [r2, #4]
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	4611      	mov	r1, r2
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80077c2:	2303      	movs	r3, #3
 80077c4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	885b      	ldrh	r3, [r3, #2]
 8007820:	b29b      	uxth	r3, r3
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	7812      	ldrb	r2, [r2, #0]
 8007826:	4293      	cmp	r3, r2
 8007828:	d91f      	bls.n	800786a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007830:	e013      	b.n	800785a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007832:	f107 030a 	add.w	r3, r7, #10
 8007836:	4619      	mov	r1, r3
 8007838:	6978      	ldr	r0, [r7, #20]
 800783a:	f000 f81b 	bl	8007874 <USBD_GetNextDesc>
 800783e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	785b      	ldrb	r3, [r3, #1]
 8007844:	2b05      	cmp	r3, #5
 8007846:	d108      	bne.n	800785a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	789b      	ldrb	r3, [r3, #2]
 8007850:	78fa      	ldrb	r2, [r7, #3]
 8007852:	429a      	cmp	r2, r3
 8007854:	d008      	beq.n	8007868 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	885b      	ldrh	r3, [r3, #2]
 800785e:	b29a      	uxth	r2, r3
 8007860:	897b      	ldrh	r3, [r7, #10]
 8007862:	429a      	cmp	r2, r3
 8007864:	d8e5      	bhi.n	8007832 <USBD_GetEpDesc+0x2e>
 8007866:	e000      	b.n	800786a <USBD_GetEpDesc+0x66>
          break;
 8007868:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800786a:	693b      	ldr	r3, [r7, #16]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	7812      	ldrb	r2, [r2, #0]
 800788a:	4413      	add	r3, r2
 800788c:	b29a      	uxth	r2, r3
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4413      	add	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800789e:	68fb      	ldr	r3, [r7, #12]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	3301      	adds	r3, #1
 80078c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80078ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	b21a      	sxth	r2, r3
 80078d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	b21b      	sxth	r3, r3
 80078da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078dc:	89fb      	ldrh	r3, [r7, #14]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
	...

080078ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007902:	2b40      	cmp	r3, #64	@ 0x40
 8007904:	d005      	beq.n	8007912 <USBD_StdDevReq+0x26>
 8007906:	2b40      	cmp	r3, #64	@ 0x40
 8007908:	d857      	bhi.n	80079ba <USBD_StdDevReq+0xce>
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00f      	beq.n	800792e <USBD_StdDevReq+0x42>
 800790e:	2b20      	cmp	r3, #32
 8007910:	d153      	bne.n	80079ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	32ae      	adds	r2, #174	@ 0xae
 800791c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]
      break;
 800792c:	e04a      	b.n	80079c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	785b      	ldrb	r3, [r3, #1]
 8007932:	2b09      	cmp	r3, #9
 8007934:	d83b      	bhi.n	80079ae <USBD_StdDevReq+0xc2>
 8007936:	a201      	add	r2, pc, #4	@ (adr r2, 800793c <USBD_StdDevReq+0x50>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007991 	.word	0x08007991
 8007940:	080079a5 	.word	0x080079a5
 8007944:	080079af 	.word	0x080079af
 8007948:	0800799b 	.word	0x0800799b
 800794c:	080079af 	.word	0x080079af
 8007950:	0800796f 	.word	0x0800796f
 8007954:	08007965 	.word	0x08007965
 8007958:	080079af 	.word	0x080079af
 800795c:	08007987 	.word	0x08007987
 8007960:	08007979 	.word	0x08007979
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa3e 	bl	8007de8 <USBD_GetDescriptor>
          break;
 800796c:	e024      	b.n	80079b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fba3 	bl	80080bc <USBD_SetAddress>
          break;
 8007976:	e01f      	b.n	80079b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fbe2 	bl	8008144 <USBD_SetConfig>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
          break;
 8007984:	e018      	b.n	80079b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc85 	bl	8008298 <USBD_GetConfig>
          break;
 800798e:	e013      	b.n	80079b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fcb6 	bl	8008304 <USBD_GetStatus>
          break;
 8007998:	e00e      	b.n	80079b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fce5 	bl	800836c <USBD_SetFeature>
          break;
 80079a2:	e009      	b.n	80079b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fd09 	bl	80083be <USBD_ClrFeature>
          break;
 80079ac:	e004      	b.n	80079b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fd60 	bl	8008476 <USBD_CtlError>
          break;
 80079b6:	bf00      	nop
      }
      break;
 80079b8:	e004      	b.n	80079c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fd5a 	bl	8008476 <USBD_CtlError>
      break;
 80079c2:	bf00      	nop
  }

  return ret;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop

080079d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079e6:	2b40      	cmp	r3, #64	@ 0x40
 80079e8:	d005      	beq.n	80079f6 <USBD_StdItfReq+0x26>
 80079ea:	2b40      	cmp	r3, #64	@ 0x40
 80079ec:	d852      	bhi.n	8007a94 <USBD_StdItfReq+0xc4>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <USBD_StdItfReq+0x26>
 80079f2:	2b20      	cmp	r3, #32
 80079f4:	d14e      	bne.n	8007a94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d840      	bhi.n	8007a86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	889b      	ldrh	r3, [r3, #4]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d836      	bhi.n	8007a7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	889b      	ldrh	r3, [r3, #4]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff feda 	bl	80077d0 <USBD_CoreFindIF>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2bff      	cmp	r3, #255	@ 0xff
 8007a24:	d01d      	beq.n	8007a62 <USBD_StdItfReq+0x92>
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d11a      	bne.n	8007a62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007a2c:	7bba      	ldrb	r2, [r7, #14]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	32ae      	adds	r2, #174	@ 0xae
 8007a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00f      	beq.n	8007a5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007a3c:	7bba      	ldrb	r2, [r7, #14]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a44:	7bba      	ldrb	r2, [r7, #14]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	32ae      	adds	r2, #174	@ 0xae
 8007a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a5a:	e004      	b.n	8007a66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a60:	e001      	b.n	8007a66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007a62:	2303      	movs	r3, #3
 8007a64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88db      	ldrh	r3, [r3, #6]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d110      	bne.n	8007a90 <USBD_StdItfReq+0xc0>
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10d      	bne.n	8007a90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fddc 	bl	8008632 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a7a:	e009      	b.n	8007a90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fcf9 	bl	8008476 <USBD_CtlError>
          break;
 8007a84:	e004      	b.n	8007a90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fcf4 	bl	8008476 <USBD_CtlError>
          break;
 8007a8e:	e000      	b.n	8007a92 <USBD_StdItfReq+0xc2>
          break;
 8007a90:	bf00      	nop
      }
      break;
 8007a92:	e004      	b.n	8007a9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fced 	bl	8008476 <USBD_CtlError>
      break;
 8007a9c:	bf00      	nop
  }

  return ret;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	889b      	ldrh	r3, [r3, #4]
 8007aba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ac4:	2b40      	cmp	r3, #64	@ 0x40
 8007ac6:	d007      	beq.n	8007ad8 <USBD_StdEPReq+0x30>
 8007ac8:	2b40      	cmp	r3, #64	@ 0x40
 8007aca:	f200 8181 	bhi.w	8007dd0 <USBD_StdEPReq+0x328>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d02a      	beq.n	8007b28 <USBD_StdEPReq+0x80>
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	f040 817c 	bne.w	8007dd0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff fe84 	bl	80077ea <USBD_CoreFindEP>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ae6:	7b7b      	ldrb	r3, [r7, #13]
 8007ae8:	2bff      	cmp	r3, #255	@ 0xff
 8007aea:	f000 8176 	beq.w	8007dda <USBD_StdEPReq+0x332>
 8007aee:	7b7b      	ldrb	r3, [r7, #13]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f040 8172 	bne.w	8007dda <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007af6:	7b7a      	ldrb	r2, [r7, #13]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007afe:	7b7a      	ldrb	r2, [r7, #13]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	32ae      	adds	r2, #174	@ 0xae
 8007b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 8165 	beq.w	8007dda <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b10:	7b7a      	ldrb	r2, [r7, #13]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	32ae      	adds	r2, #174	@ 0xae
 8007b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b26:	e158      	b.n	8007dda <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d008      	beq.n	8007b42 <USBD_StdEPReq+0x9a>
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	f300 8147 	bgt.w	8007dc4 <USBD_StdEPReq+0x31c>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 809b 	beq.w	8007c72 <USBD_StdEPReq+0x1ca>
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d03c      	beq.n	8007bba <USBD_StdEPReq+0x112>
 8007b40:	e140      	b.n	8007dc4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d002      	beq.n	8007b54 <USBD_StdEPReq+0xac>
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d016      	beq.n	8007b80 <USBD_StdEPReq+0xd8>
 8007b52:	e02c      	b.n	8007bae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00d      	beq.n	8007b76 <USBD_StdEPReq+0xce>
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b80      	cmp	r3, #128	@ 0x80
 8007b5e:	d00a      	beq.n	8007b76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f979 	bl	8008e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b6a:	2180      	movs	r1, #128	@ 0x80
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f975 	bl	8008e5c <USBD_LL_StallEP>
 8007b72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b74:	e020      	b.n	8007bb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fc7c 	bl	8008476 <USBD_CtlError>
              break;
 8007b7e:	e01b      	b.n	8007bb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	885b      	ldrh	r3, [r3, #2]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10e      	bne.n	8007ba6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <USBD_StdEPReq+0xfe>
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	2b80      	cmp	r3, #128	@ 0x80
 8007b92:	d008      	beq.n	8007ba6 <USBD_StdEPReq+0xfe>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	88db      	ldrh	r3, [r3, #6]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d104      	bne.n	8007ba6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 f95b 	bl	8008e5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fd43 	bl	8008632 <USBD_CtlSendStatus>

              break;
 8007bac:	e004      	b.n	8007bb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fc60 	bl	8008476 <USBD_CtlError>
              break;
 8007bb6:	bf00      	nop
          }
          break;
 8007bb8:	e109      	b.n	8007dce <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d002      	beq.n	8007bcc <USBD_StdEPReq+0x124>
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d016      	beq.n	8007bf8 <USBD_StdEPReq+0x150>
 8007bca:	e04b      	b.n	8007c64 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00d      	beq.n	8007bee <USBD_StdEPReq+0x146>
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b80      	cmp	r3, #128	@ 0x80
 8007bd6:	d00a      	beq.n	8007bee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f93d 	bl	8008e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007be2:	2180      	movs	r1, #128	@ 0x80
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 f939 	bl	8008e5c <USBD_LL_StallEP>
 8007bea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bec:	e040      	b.n	8007c70 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fc40 	bl	8008476 <USBD_CtlError>
              break;
 8007bf6:	e03b      	b.n	8007c70 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	885b      	ldrh	r3, [r3, #2]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d136      	bne.n	8007c6e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 f943 	bl	8008e9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fd0c 	bl	8008632 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fde3 	bl	80077ea <USBD_CoreFindEP>
 8007c24:	4603      	mov	r3, r0
 8007c26:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c28:	7b7b      	ldrb	r3, [r7, #13]
 8007c2a:	2bff      	cmp	r3, #255	@ 0xff
 8007c2c:	d01f      	beq.n	8007c6e <USBD_StdEPReq+0x1c6>
 8007c2e:	7b7b      	ldrb	r3, [r7, #13]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d11c      	bne.n	8007c6e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007c34:	7b7a      	ldrb	r2, [r7, #13]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007c3c:	7b7a      	ldrb	r2, [r7, #13]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	32ae      	adds	r2, #174	@ 0xae
 8007c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d010      	beq.n	8007c6e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c4c:	7b7a      	ldrb	r2, [r7, #13]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	32ae      	adds	r2, #174	@ 0xae
 8007c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4798      	blx	r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007c62:	e004      	b.n	8007c6e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fc05 	bl	8008476 <USBD_CtlError>
              break;
 8007c6c:	e000      	b.n	8007c70 <USBD_StdEPReq+0x1c8>
              break;
 8007c6e:	bf00      	nop
          }
          break;
 8007c70:	e0ad      	b.n	8007dce <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d002      	beq.n	8007c84 <USBD_StdEPReq+0x1dc>
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d033      	beq.n	8007cea <USBD_StdEPReq+0x242>
 8007c82:	e099      	b.n	8007db8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <USBD_StdEPReq+0x1f2>
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
 8007c8c:	2b80      	cmp	r3, #128	@ 0x80
 8007c8e:	d004      	beq.n	8007c9a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fbef 	bl	8008476 <USBD_CtlError>
                break;
 8007c98:	e093      	b.n	8007dc2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	da0b      	bge.n	8007cba <USBD_StdEPReq+0x212>
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	3310      	adds	r3, #16
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	e00b      	b.n	8007cd2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	330e      	adds	r3, #14
 8007cde:	2202      	movs	r2, #2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fc44 	bl	8008570 <USBD_CtlSendData>
              break;
 8007ce8:	e06b      	b.n	8007dc2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	da11      	bge.n	8007d16 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	f003 020f 	and.w	r2, r3, #15
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	440b      	add	r3, r1
 8007d04:	3323      	adds	r3, #35	@ 0x23
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d117      	bne.n	8007d3c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fbb1 	bl	8008476 <USBD_CtlError>
                  break;
 8007d14:	e055      	b.n	8007dc2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	f003 020f 	and.w	r2, r3, #15
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d104      	bne.n	8007d3c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fb9e 	bl	8008476 <USBD_CtlError>
                  break;
 8007d3a:	e042      	b.n	8007dc2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	da0b      	bge.n	8007d5c <USBD_StdEPReq+0x2b4>
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	3310      	adds	r3, #16
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	4413      	add	r3, r2
 8007d58:	3304      	adds	r3, #4
 8007d5a:	e00b      	b.n	8007d74 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d62:	4613      	mov	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	4413      	add	r3, r2
 8007d72:	3304      	adds	r3, #4
 8007d74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <USBD_StdEPReq+0x2da>
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	2b80      	cmp	r3, #128	@ 0x80
 8007d80:	d103      	bne.n	8007d8a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	739a      	strb	r2, [r3, #14]
 8007d88:	e00e      	b.n	8007da8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 f8a2 	bl	8008ed8 <USBD_LL_IsStallEP>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	739a      	strb	r2, [r3, #14]
 8007da0:	e002      	b.n	8007da8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2200      	movs	r2, #0
 8007da6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	330e      	adds	r3, #14
 8007dac:	2202      	movs	r2, #2
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fbdd 	bl	8008570 <USBD_CtlSendData>
              break;
 8007db6:	e004      	b.n	8007dc2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fb5b 	bl	8008476 <USBD_CtlError>
              break;
 8007dc0:	bf00      	nop
          }
          break;
 8007dc2:	e004      	b.n	8007dce <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fb55 	bl	8008476 <USBD_CtlError>
          break;
 8007dcc:	bf00      	nop
      }
      break;
 8007dce:	e005      	b.n	8007ddc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fb4f 	bl	8008476 <USBD_CtlError>
      break;
 8007dd8:	e000      	b.n	8007ddc <USBD_StdEPReq+0x334>
      break;
 8007dda:	bf00      	nop
  }

  return ret;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	885b      	ldrh	r3, [r3, #2]
 8007e02:	0a1b      	lsrs	r3, r3, #8
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	2b06      	cmp	r3, #6
 8007e0a:	f200 8128 	bhi.w	800805e <USBD_GetDescriptor+0x276>
 8007e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <USBD_GetDescriptor+0x2c>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e31 	.word	0x08007e31
 8007e18:	08007e49 	.word	0x08007e49
 8007e1c:	08007e89 	.word	0x08007e89
 8007e20:	0800805f 	.word	0x0800805f
 8007e24:	0800805f 	.word	0x0800805f
 8007e28:	08007fff 	.word	0x08007fff
 8007e2c:	0800802b 	.word	0x0800802b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
      break;
 8007e46:	e112      	b.n	800806e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	7c1b      	ldrb	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10d      	bne.n	8007e6c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	f107 0208 	add.w	r2, r7, #8
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4798      	blx	r3
 8007e60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	2202      	movs	r2, #2
 8007e68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e6a:	e100      	b.n	800806e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e74:	f107 0208 	add.w	r2, r7, #8
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4798      	blx	r3
 8007e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3301      	adds	r3, #1
 8007e82:	2202      	movs	r2, #2
 8007e84:	701a      	strb	r2, [r3, #0]
      break;
 8007e86:	e0f2      	b.n	800806e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	885b      	ldrh	r3, [r3, #2]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	f200 80ac 	bhi.w	8007fec <USBD_GetDescriptor+0x204>
 8007e94:	a201      	add	r2, pc, #4	@ (adr r2, 8007e9c <USBD_GetDescriptor+0xb4>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007eb5 	.word	0x08007eb5
 8007ea0:	08007ee9 	.word	0x08007ee9
 8007ea4:	08007f1d 	.word	0x08007f1d
 8007ea8:	08007f51 	.word	0x08007f51
 8007eac:	08007f85 	.word	0x08007f85
 8007eb0:	08007fb9 	.word	0x08007fb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	7c12      	ldrb	r2, [r2, #16]
 8007ecc:	f107 0108 	add.w	r1, r7, #8
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed6:	e091      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 facb 	bl	8008476 <USBD_CtlError>
            err++;
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee6:	e089      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	7c12      	ldrb	r2, [r2, #16]
 8007f00:	f107 0108 	add.w	r1, r7, #8
 8007f04:	4610      	mov	r0, r2
 8007f06:	4798      	blx	r3
 8007f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f0a:	e077      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fab1 	bl	8008476 <USBD_CtlError>
            err++;
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	3301      	adds	r3, #1
 8007f18:	72fb      	strb	r3, [r7, #11]
          break;
 8007f1a:	e06f      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	7c12      	ldrb	r2, [r2, #16]
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4798      	blx	r3
 8007f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f3e:	e05d      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa97 	bl	8008476 <USBD_CtlError>
            err++;
 8007f48:	7afb      	ldrb	r3, [r7, #11]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f4e:	e055      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	7c12      	ldrb	r2, [r2, #16]
 8007f68:	f107 0108 	add.w	r1, r7, #8
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4798      	blx	r3
 8007f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f72:	e043      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa7d 	bl	8008476 <USBD_CtlError>
            err++;
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	72fb      	strb	r3, [r7, #11]
          break;
 8007f82:	e03b      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	7c12      	ldrb	r2, [r2, #16]
 8007f9c:	f107 0108 	add.w	r1, r7, #8
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4798      	blx	r3
 8007fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fa6:	e029      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa63 	bl	8008476 <USBD_CtlError>
            err++;
 8007fb0:	7afb      	ldrb	r3, [r7, #11]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fb6:	e021      	b.n	8007ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	7c12      	ldrb	r2, [r2, #16]
 8007fd0:	f107 0108 	add.w	r1, r7, #8
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4798      	blx	r3
 8007fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fda:	e00f      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa49 	bl	8008476 <USBD_CtlError>
            err++;
 8007fe4:	7afb      	ldrb	r3, [r7, #11]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fea:	e007      	b.n	8007ffc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa41 	bl	8008476 <USBD_CtlError>
          err++;
 8007ff4:	7afb      	ldrb	r3, [r7, #11]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ffa:	bf00      	nop
      }
      break;
 8007ffc:	e037      	b.n	800806e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7c1b      	ldrb	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800800c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800800e:	f107 0208 	add.w	r2, r7, #8
 8008012:	4610      	mov	r0, r2
 8008014:	4798      	blx	r3
 8008016:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008018:	e029      	b.n	800806e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fa2a 	bl	8008476 <USBD_CtlError>
        err++;
 8008022:	7afb      	ldrb	r3, [r7, #11]
 8008024:	3301      	adds	r3, #1
 8008026:	72fb      	strb	r3, [r7, #11]
      break;
 8008028:	e021      	b.n	800806e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	7c1b      	ldrb	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10d      	bne.n	800804e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803a:	f107 0208 	add.w	r2, r7, #8
 800803e:	4610      	mov	r0, r2
 8008040:	4798      	blx	r3
 8008042:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3301      	adds	r3, #1
 8008048:	2207      	movs	r2, #7
 800804a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800804c:	e00f      	b.n	800806e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fa10 	bl	8008476 <USBD_CtlError>
        err++;
 8008056:	7afb      	ldrb	r3, [r7, #11]
 8008058:	3301      	adds	r3, #1
 800805a:	72fb      	strb	r3, [r7, #11]
      break;
 800805c:	e007      	b.n	800806e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa08 	bl	8008476 <USBD_CtlError>
      err++;
 8008066:	7afb      	ldrb	r3, [r7, #11]
 8008068:	3301      	adds	r3, #1
 800806a:	72fb      	strb	r3, [r7, #11]
      break;
 800806c:	bf00      	nop
  }

  if (err != 0U)
 800806e:	7afb      	ldrb	r3, [r7, #11]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11e      	bne.n	80080b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	88db      	ldrh	r3, [r3, #6]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d016      	beq.n	80080aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800807c:	893b      	ldrh	r3, [r7, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00e      	beq.n	80080a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	88da      	ldrh	r2, [r3, #6]
 8008086:	893b      	ldrh	r3, [r7, #8]
 8008088:	4293      	cmp	r3, r2
 800808a:	bf28      	it	cs
 800808c:	4613      	movcs	r3, r2
 800808e:	b29b      	uxth	r3, r3
 8008090:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008092:	893b      	ldrh	r3, [r7, #8]
 8008094:	461a      	mov	r2, r3
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fa69 	bl	8008570 <USBD_CtlSendData>
 800809e:	e009      	b.n	80080b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f9e7 	bl	8008476 <USBD_CtlError>
 80080a8:	e004      	b.n	80080b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fac1 	bl	8008632 <USBD_CtlSendStatus>
 80080b0:	e000      	b.n	80080b4 <USBD_GetDescriptor+0x2cc>
    return;
 80080b2:	bf00      	nop
  }
}
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop

080080bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	889b      	ldrh	r3, [r3, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d131      	bne.n	8008132 <USBD_SetAddress+0x76>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	88db      	ldrh	r3, [r3, #6]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d12d      	bne.n	8008132 <USBD_SetAddress+0x76>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	885b      	ldrh	r3, [r3, #2]
 80080da:	2b7f      	cmp	r3, #127	@ 0x7f
 80080dc:	d829      	bhi.n	8008132 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	885b      	ldrh	r3, [r3, #2]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d104      	bne.n	8008100 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f9bc 	bl	8008476 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fe:	e01d      	b.n	800813c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	7bfa      	ldrb	r2, [r7, #15]
 8008104:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 ff0f 	bl	8008f30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa8d 	bl	8008632 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2202      	movs	r2, #2
 8008122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008126:	e009      	b.n	800813c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008130:	e004      	b.n	800813c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f99e 	bl	8008476 <USBD_CtlError>
  }
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	4b4e      	ldr	r3, [pc, #312]	@ (8008294 <USBD_SetConfig+0x150>)
 800815a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800815c:	4b4d      	ldr	r3, [pc, #308]	@ (8008294 <USBD_SetConfig+0x150>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d905      	bls.n	8008170 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f985 	bl	8008476 <USBD_CtlError>
    return USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	e08c      	b.n	800828a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d002      	beq.n	8008182 <USBD_SetConfig+0x3e>
 800817c:	2b03      	cmp	r3, #3
 800817e:	d029      	beq.n	80081d4 <USBD_SetConfig+0x90>
 8008180:	e075      	b.n	800826e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008182:	4b44      	ldr	r3, [pc, #272]	@ (8008294 <USBD_SetConfig+0x150>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d020      	beq.n	80081cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800818a:	4b42      	ldr	r3, [pc, #264]	@ (8008294 <USBD_SetConfig+0x150>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008194:	4b3f      	ldr	r3, [pc, #252]	@ (8008294 <USBD_SetConfig+0x150>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fe ffcd 	bl	800713a <USBD_SetClassConfig>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d008      	beq.n	80081bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f962 	bl	8008476 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2202      	movs	r2, #2
 80081b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081ba:	e065      	b.n	8008288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fa38 	bl	8008632 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2203      	movs	r2, #3
 80081c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80081ca:	e05d      	b.n	8008288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa30 	bl	8008632 <USBD_CtlSendStatus>
      break;
 80081d2:	e059      	b.n	8008288 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008294 <USBD_SetConfig+0x150>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d112      	bne.n	8008202 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80081e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008294 <USBD_SetConfig+0x150>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081ee:	4b29      	ldr	r3, [pc, #164]	@ (8008294 <USBD_SetConfig+0x150>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fe ffbc 	bl	8007172 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fa19 	bl	8008632 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008200:	e042      	b.n	8008288 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008202:	4b24      	ldr	r3, [pc, #144]	@ (8008294 <USBD_SetConfig+0x150>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d02a      	beq.n	8008266 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fe ffaa 	bl	8007172 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800821e:	4b1d      	ldr	r3, [pc, #116]	@ (8008294 <USBD_SetConfig+0x150>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008228:	4b1a      	ldr	r3, [pc, #104]	@ (8008294 <USBD_SetConfig+0x150>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fe ff83 	bl	800713a <USBD_SetClassConfig>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00f      	beq.n	800825e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f918 	bl	8008476 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7fe ff8f 	bl	8007172 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800825c:	e014      	b.n	8008288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f9e7 	bl	8008632 <USBD_CtlSendStatus>
      break;
 8008264:	e010      	b.n	8008288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f9e3 	bl	8008632 <USBD_CtlSendStatus>
      break;
 800826c:	e00c      	b.n	8008288 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f900 	bl	8008476 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008276:	4b07      	ldr	r3, [pc, #28]	@ (8008294 <USBD_SetConfig+0x150>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7fe ff78 	bl	8007172 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008282:	2303      	movs	r3, #3
 8008284:	73fb      	strb	r3, [r7, #15]
      break;
 8008286:	bf00      	nop
  }

  return ret;
 8008288:	7bfb      	ldrb	r3, [r7, #15]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	2000028c 	.word	0x2000028c

08008298 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	88db      	ldrh	r3, [r3, #6]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d004      	beq.n	80082b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f8e2 	bl	8008476 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80082b2:	e023      	b.n	80082fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	dc02      	bgt.n	80082c6 <USBD_GetConfig+0x2e>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc03      	bgt.n	80082cc <USBD_GetConfig+0x34>
 80082c4:	e015      	b.n	80082f2 <USBD_GetConfig+0x5a>
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d00b      	beq.n	80082e2 <USBD_GetConfig+0x4a>
 80082ca:	e012      	b.n	80082f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	3308      	adds	r3, #8
 80082d6:	2201      	movs	r2, #1
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f948 	bl	8008570 <USBD_CtlSendData>
        break;
 80082e0:	e00c      	b.n	80082fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3304      	adds	r3, #4
 80082e6:	2201      	movs	r2, #1
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f940 	bl	8008570 <USBD_CtlSendData>
        break;
 80082f0:	e004      	b.n	80082fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f8be 	bl	8008476 <USBD_CtlError>
        break;
 80082fa:	bf00      	nop
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008314:	b2db      	uxtb	r3, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	2b02      	cmp	r3, #2
 800831a:	d81e      	bhi.n	800835a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	88db      	ldrh	r3, [r3, #6]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d004      	beq.n	800832e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f8a5 	bl	8008476 <USBD_CtlError>
        break;
 800832c:	e01a      	b.n	8008364 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800833a:	2b00      	cmp	r3, #0
 800833c:	d005      	beq.n	800834a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f043 0202 	orr.w	r2, r3, #2
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	330c      	adds	r3, #12
 800834e:	2202      	movs	r2, #2
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f90c 	bl	8008570 <USBD_CtlSendData>
      break;
 8008358:	e004      	b.n	8008364 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f88a 	bl	8008476 <USBD_CtlError>
      break;
 8008362:	bf00      	nop
  }
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	885b      	ldrh	r3, [r3, #2]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d107      	bne.n	800838e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f953 	bl	8008632 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800838c:	e013      	b.n	80083b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	885b      	ldrh	r3, [r3, #2]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d10b      	bne.n	80083ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	889b      	ldrh	r3, [r3, #4]
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	b29b      	uxth	r3, r3
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f943 	bl	8008632 <USBD_CtlSendStatus>
}
 80083ac:	e003      	b.n	80083b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f860 	bl	8008476 <USBD_CtlError>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	3b01      	subs	r3, #1
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d80b      	bhi.n	80083ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	885b      	ldrh	r3, [r3, #2]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d10c      	bne.n	80083f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f923 	bl	8008632 <USBD_CtlSendStatus>
      }
      break;
 80083ec:	e004      	b.n	80083f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f840 	bl	8008476 <USBD_CtlError>
      break;
 80083f6:	e000      	b.n	80083fa <USBD_ClrFeature+0x3c>
      break;
 80083f8:	bf00      	nop
  }
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	781a      	ldrb	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3301      	adds	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f7ff fa3d 	bl	80078ac <SWAPBYTE>
 8008432:	4603      	mov	r3, r0
 8008434:	461a      	mov	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3301      	adds	r3, #1
 800843e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3301      	adds	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff fa30 	bl	80078ac <SWAPBYTE>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3301      	adds	r3, #1
 8008458:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f7ff fa23 	bl	80078ac <SWAPBYTE>
 8008466:	4603      	mov	r3, r0
 8008468:	461a      	mov	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	80da      	strh	r2, [r3, #6]
}
 800846e:	bf00      	nop
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008480:	2180      	movs	r1, #128	@ 0x80
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fcea 	bl	8008e5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008488:	2100      	movs	r1, #0
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fce6 	bl	8008e5c <USBD_LL_StallEP>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d042      	beq.n	8008534 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80084b2:	6938      	ldr	r0, [r7, #16]
 80084b4:	f000 f842 	bl	800853c <USBD_GetLen>
 80084b8:	4603      	mov	r3, r0
 80084ba:	3301      	adds	r3, #1
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084c2:	d808      	bhi.n	80084d6 <USBD_GetString+0x3e>
 80084c4:	6938      	ldr	r0, [r7, #16]
 80084c6:	f000 f839 	bl	800853c <USBD_GetLen>
 80084ca:	4603      	mov	r3, r0
 80084cc:	3301      	adds	r3, #1
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	e001      	b.n	80084da <USBD_GetString+0x42>
 80084d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	4413      	add	r3, r2
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	7812      	ldrb	r2, [r2, #0]
 80084e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	3301      	adds	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	4413      	add	r3, r2
 80084f6:	2203      	movs	r2, #3
 80084f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	3301      	adds	r3, #1
 80084fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008500:	e013      	b.n	800852a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	4413      	add	r3, r2
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	3301      	adds	r3, #1
 8008512:	613b      	str	r3, [r7, #16]
    idx++;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	3301      	adds	r3, #1
 8008518:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	4413      	add	r3, r2
 8008520:	2200      	movs	r2, #0
 8008522:	701a      	strb	r2, [r3, #0]
    idx++;
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	3301      	adds	r3, #1
 8008528:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e7      	bne.n	8008502 <USBD_GetString+0x6a>
 8008532:	e000      	b.n	8008536 <USBD_GetString+0x9e>
    return;
 8008534:	bf00      	nop
  }
}
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800854c:	e005      	b.n	800855a <USBD_GetLen+0x1e>
  {
    len++;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	3301      	adds	r3, #1
 8008552:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	3301      	adds	r3, #1
 8008558:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1f5      	bne.n	800854e <USBD_GetLen+0x12>
  }

  return len;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2202      	movs	r2, #2
 8008580:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	2100      	movs	r1, #0
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 fce6 	bl	8008f6e <USBD_LL_Transmit>

  return USBD_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	2100      	movs	r1, #0
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 fcd5 	bl	8008f6e <USBD_LL_Transmit>

  return USBD_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2203      	movs	r2, #3
 80085de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	2100      	movs	r1, #0
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fcd5 	bl	8008fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	2100      	movs	r1, #0
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 fcc4 	bl	8008fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2204      	movs	r2, #4
 800863e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008642:	2300      	movs	r3, #0
 8008644:	2200      	movs	r2, #0
 8008646:	2100      	movs	r1, #0
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fc90 	bl	8008f6e <USBD_LL_Transmit>

  return USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2205      	movs	r2, #5
 8008664:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008668:	2300      	movs	r3, #0
 800866a:	2200      	movs	r2, #0
 800866c:	2100      	movs	r1, #0
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fc9e 	bl	8008fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008684:	2200      	movs	r2, #0
 8008686:	4912      	ldr	r1, [pc, #72]	@ (80086d0 <MX_USB_DEVICE_Init+0x50>)
 8008688:	4812      	ldr	r0, [pc, #72]	@ (80086d4 <MX_USB_DEVICE_Init+0x54>)
 800868a:	f7fe fcd9 	bl	8007040 <USBD_Init>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008694:	f7f8 f950 	bl	8000938 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008698:	490f      	ldr	r1, [pc, #60]	@ (80086d8 <MX_USB_DEVICE_Init+0x58>)
 800869a:	480e      	ldr	r0, [pc, #56]	@ (80086d4 <MX_USB_DEVICE_Init+0x54>)
 800869c:	f7fe fd00 	bl	80070a0 <USBD_RegisterClass>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086a6:	f7f8 f947 	bl	8000938 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80086aa:	490c      	ldr	r1, [pc, #48]	@ (80086dc <MX_USB_DEVICE_Init+0x5c>)
 80086ac:	4809      	ldr	r0, [pc, #36]	@ (80086d4 <MX_USB_DEVICE_Init+0x54>)
 80086ae:	f7fe fbf7 	bl	8006ea0 <USBD_CDC_RegisterInterface>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80086b8:	f7f8 f93e 	bl	8000938 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086bc:	4805      	ldr	r0, [pc, #20]	@ (80086d4 <MX_USB_DEVICE_Init+0x54>)
 80086be:	f7fe fd25 	bl	800710c <USBD_Start>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80086c8:	f7f8 f936 	bl	8000938 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086cc:	bf00      	nop
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	200000ac 	.word	0x200000ac
 80086d4:	20000290 	.word	0x20000290
 80086d8:	20000018 	.word	0x20000018
 80086dc:	20000098 	.word	0x20000098

080086e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80086e4:	2200      	movs	r2, #0
 80086e6:	4905      	ldr	r1, [pc, #20]	@ (80086fc <CDC_Init_FS+0x1c>)
 80086e8:	4805      	ldr	r0, [pc, #20]	@ (8008700 <CDC_Init_FS+0x20>)
 80086ea:	f7fe fbf3 	bl	8006ed4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80086ee:	4905      	ldr	r1, [pc, #20]	@ (8008704 <CDC_Init_FS+0x24>)
 80086f0:	4803      	ldr	r0, [pc, #12]	@ (8008700 <CDC_Init_FS+0x20>)
 80086f2:	f7fe fc11 	bl	8006f18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80086f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20000d6c 	.word	0x20000d6c
 8008700:	20000290 	.word	0x20000290
 8008704:	2000056c 	.word	0x2000056c

08008708 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800870c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800870e:	4618      	mov	r0, r3
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	71fb      	strb	r3, [r7, #7]
 8008724:	4613      	mov	r3, r2
 8008726:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	2b23      	cmp	r3, #35	@ 0x23
 800872c:	d84a      	bhi.n	80087c4 <CDC_Control_FS+0xac>
 800872e:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <CDC_Control_FS+0x1c>)
 8008730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008734:	080087c5 	.word	0x080087c5
 8008738:	080087c5 	.word	0x080087c5
 800873c:	080087c5 	.word	0x080087c5
 8008740:	080087c5 	.word	0x080087c5
 8008744:	080087c5 	.word	0x080087c5
 8008748:	080087c5 	.word	0x080087c5
 800874c:	080087c5 	.word	0x080087c5
 8008750:	080087c5 	.word	0x080087c5
 8008754:	080087c5 	.word	0x080087c5
 8008758:	080087c5 	.word	0x080087c5
 800875c:	080087c5 	.word	0x080087c5
 8008760:	080087c5 	.word	0x080087c5
 8008764:	080087c5 	.word	0x080087c5
 8008768:	080087c5 	.word	0x080087c5
 800876c:	080087c5 	.word	0x080087c5
 8008770:	080087c5 	.word	0x080087c5
 8008774:	080087c5 	.word	0x080087c5
 8008778:	080087c5 	.word	0x080087c5
 800877c:	080087c5 	.word	0x080087c5
 8008780:	080087c5 	.word	0x080087c5
 8008784:	080087c5 	.word	0x080087c5
 8008788:	080087c5 	.word	0x080087c5
 800878c:	080087c5 	.word	0x080087c5
 8008790:	080087c5 	.word	0x080087c5
 8008794:	080087c5 	.word	0x080087c5
 8008798:	080087c5 	.word	0x080087c5
 800879c:	080087c5 	.word	0x080087c5
 80087a0:	080087c5 	.word	0x080087c5
 80087a4:	080087c5 	.word	0x080087c5
 80087a8:	080087c5 	.word	0x080087c5
 80087ac:	080087c5 	.word	0x080087c5
 80087b0:	080087c5 	.word	0x080087c5
 80087b4:	080087c5 	.word	0x080087c5
 80087b8:	080087c5 	.word	0x080087c5
 80087bc:	080087c5 	.word	0x080087c5
 80087c0:	080087c5 	.word	0x080087c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80087c4:	bf00      	nop
  }

  return (USBD_OK);
 80087c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4805      	ldr	r0, [pc, #20]	@ (80087f8 <CDC_Receive_FS+0x24>)
 80087e2:	f7fe fb99 	bl	8006f18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087e6:	4804      	ldr	r0, [pc, #16]	@ (80087f8 <CDC_Receive_FS+0x24>)
 80087e8:	f7fe fbf4 	bl	8006fd4 <USBD_CDC_ReceivePacket>
  //CDC_Transmit_FS(Buf, *Len); // ничего не получилось
  return (USBD_OK);
 80087ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000290 	.word	0x20000290

080087fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800880c:	4b0d      	ldr	r3, [pc, #52]	@ (8008844 <CDC_Transmit_FS+0x48>)
 800880e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008812:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800881e:	2301      	movs	r3, #1
 8008820:	e00b      	b.n	800883a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008822:	887b      	ldrh	r3, [r7, #2]
 8008824:	461a      	mov	r2, r3
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4806      	ldr	r0, [pc, #24]	@ (8008844 <CDC_Transmit_FS+0x48>)
 800882a:	f7fe fb53 	bl	8006ed4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800882e:	4805      	ldr	r0, [pc, #20]	@ (8008844 <CDC_Transmit_FS+0x48>)
 8008830:	f7fe fb90 	bl	8006f54 <USBD_CDC_TransmitPacket>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000290 	.word	0x20000290

08008848 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800885a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800885e:	4618      	mov	r0, r3
 8008860:	371c      	adds	r7, #28
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
	...

0800886c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	6039      	str	r1, [r7, #0]
 8008876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2212      	movs	r2, #18
 800887c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800887e:	4b03      	ldr	r3, [pc, #12]	@ (800888c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008880:	4618      	mov	r0, r3
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	200000c8 	.word	0x200000c8

08008890 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	6039      	str	r1, [r7, #0]
 800889a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	2204      	movs	r2, #4
 80088a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088a2:	4b03      	ldr	r3, [pc, #12]	@ (80088b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	200000dc 	.word	0x200000dc

080088b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d105      	bne.n	80088d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	4907      	ldr	r1, [pc, #28]	@ (80088e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80088ca:	4808      	ldr	r0, [pc, #32]	@ (80088ec <USBD_FS_ProductStrDescriptor+0x38>)
 80088cc:	f7ff fde4 	bl	8008498 <USBD_GetString>
 80088d0:	e004      	b.n	80088dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	4904      	ldr	r1, [pc, #16]	@ (80088e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80088d6:	4805      	ldr	r0, [pc, #20]	@ (80088ec <USBD_FS_ProductStrDescriptor+0x38>)
 80088d8:	f7ff fdde 	bl	8008498 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088dc:	4b02      	ldr	r3, [pc, #8]	@ (80088e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	2000156c 	.word	0x2000156c
 80088ec:	0800ce0c 	.word	0x0800ce0c

080088f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	4904      	ldr	r1, [pc, #16]	@ (8008910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008900:	4804      	ldr	r0, [pc, #16]	@ (8008914 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008902:	f7ff fdc9 	bl	8008498 <USBD_GetString>
  return USBD_StrDesc;
 8008906:	4b02      	ldr	r3, [pc, #8]	@ (8008910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	2000156c 	.word	0x2000156c
 8008914:	0800ce24 	.word	0x0800ce24

08008918 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	6039      	str	r1, [r7, #0]
 8008922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	221a      	movs	r2, #26
 8008928:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800892a:	f000 f843 	bl	80089b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800892e:	4b02      	ldr	r3, [pc, #8]	@ (8008938 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200000e0 	.word	0x200000e0

0800893c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	6039      	str	r1, [r7, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008948:	79fb      	ldrb	r3, [r7, #7]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d105      	bne.n	800895a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	4907      	ldr	r1, [pc, #28]	@ (8008970 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008952:	4808      	ldr	r0, [pc, #32]	@ (8008974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008954:	f7ff fda0 	bl	8008498 <USBD_GetString>
 8008958:	e004      	b.n	8008964 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	4904      	ldr	r1, [pc, #16]	@ (8008970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800895e:	4805      	ldr	r0, [pc, #20]	@ (8008974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008960:	f7ff fd9a 	bl	8008498 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008964:	4b02      	ldr	r3, [pc, #8]	@ (8008970 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	2000156c 	.word	0x2000156c
 8008974:	0800ce38 	.word	0x0800ce38

08008978 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	6039      	str	r1, [r7, #0]
 8008982:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d105      	bne.n	8008996 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	4907      	ldr	r1, [pc, #28]	@ (80089ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800898e:	4808      	ldr	r0, [pc, #32]	@ (80089b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008990:	f7ff fd82 	bl	8008498 <USBD_GetString>
 8008994:	e004      	b.n	80089a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	4904      	ldr	r1, [pc, #16]	@ (80089ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800899a:	4805      	ldr	r0, [pc, #20]	@ (80089b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800899c:	f7ff fd7c 	bl	8008498 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089a0:	4b02      	ldr	r3, [pc, #8]	@ (80089ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	2000156c 	.word	0x2000156c
 80089b0:	0800ce44 	.word	0x0800ce44

080089b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089ba:	4b0f      	ldr	r3, [pc, #60]	@ (80089f8 <Get_SerialNum+0x44>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80089c0:	4b0e      	ldr	r3, [pc, #56]	@ (80089fc <Get_SerialNum+0x48>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80089c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008a00 <Get_SerialNum+0x4c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4413      	add	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089da:	2208      	movs	r2, #8
 80089dc:	4909      	ldr	r1, [pc, #36]	@ (8008a04 <Get_SerialNum+0x50>)
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 f814 	bl	8008a0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089e4:	2204      	movs	r2, #4
 80089e6:	4908      	ldr	r1, [pc, #32]	@ (8008a08 <Get_SerialNum+0x54>)
 80089e8:	68b8      	ldr	r0, [r7, #8]
 80089ea:	f000 f80f 	bl	8008a0c <IntToUnicode>
  }
}
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	1fff7a10 	.word	0x1fff7a10
 80089fc:	1fff7a14 	.word	0x1fff7a14
 8008a00:	1fff7a18 	.word	0x1fff7a18
 8008a04:	200000e2 	.word	0x200000e2
 8008a08:	200000f2 	.word	0x200000f2

08008a0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4613      	mov	r3, r2
 8008a18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a1e:	2300      	movs	r3, #0
 8008a20:	75fb      	strb	r3, [r7, #23]
 8008a22:	e027      	b.n	8008a74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	0f1b      	lsrs	r3, r3, #28
 8008a28:	2b09      	cmp	r3, #9
 8008a2a:	d80b      	bhi.n	8008a44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	0f1b      	lsrs	r3, r3, #28
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	4619      	mov	r1, r3
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	440b      	add	r3, r1
 8008a3c:	3230      	adds	r2, #48	@ 0x30
 8008a3e:	b2d2      	uxtb	r2, r2
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	e00a      	b.n	8008a5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	0f1b      	lsrs	r3, r3, #28
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	4619      	mov	r1, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	440b      	add	r3, r1
 8008a54:	3237      	adds	r2, #55	@ 0x37
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	011b      	lsls	r3, r3, #4
 8008a5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	3301      	adds	r3, #1
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	4413      	add	r3, r2
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	3301      	adds	r3, #1
 8008a72:	75fb      	strb	r3, [r7, #23]
 8008a74:	7dfa      	ldrb	r2, [r7, #23]
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d3d3      	bcc.n	8008a24 <IntToUnicode+0x18>
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
	...

08008a8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	@ 0x28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a94:	f107 0314 	add.w	r3, r7, #20
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	605a      	str	r2, [r3, #4]
 8008a9e:	609a      	str	r2, [r3, #8]
 8008aa0:	60da      	str	r2, [r3, #12]
 8008aa2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008aac:	d13a      	bne.n	8008b24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aae:	2300      	movs	r3, #0
 8008ab0:	613b      	str	r3, [r7, #16]
 8008ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8008b2c <HAL_PCD_MspInit+0xa0>)
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8008b2c <HAL_PCD_MspInit+0xa0>)
 8008ab8:	f043 0301 	orr.w	r3, r3, #1
 8008abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8008abe:	4b1b      	ldr	r3, [pc, #108]	@ (8008b2c <HAL_PCD_MspInit+0xa0>)
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008aca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008adc:	230a      	movs	r3, #10
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ae0:	f107 0314 	add.w	r3, r7, #20
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4812      	ldr	r0, [pc, #72]	@ (8008b30 <HAL_PCD_MspInit+0xa4>)
 8008ae8:	f7f8 fc8e 	bl	8001408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008aec:	4b0f      	ldr	r3, [pc, #60]	@ (8008b2c <HAL_PCD_MspInit+0xa0>)
 8008aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af0:	4a0e      	ldr	r2, [pc, #56]	@ (8008b2c <HAL_PCD_MspInit+0xa0>)
 8008af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af6:	6353      	str	r3, [r2, #52]	@ 0x34
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	4b0b      	ldr	r3, [pc, #44]	@ (8008b2c <HAL_PCD_MspInit+0xa0>)
 8008afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b00:	4a0a      	ldr	r2, [pc, #40]	@ (8008b2c <HAL_PCD_MspInit+0xa0>)
 8008b02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b06:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b08:	4b08      	ldr	r3, [pc, #32]	@ (8008b2c <HAL_PCD_MspInit+0xa0>)
 8008b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b14:	2200      	movs	r2, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	2043      	movs	r0, #67	@ 0x43
 8008b1a:	f7f8 fbac 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b1e:	2043      	movs	r0, #67	@ 0x43
 8008b20:	f7f8 fbc5 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b24:	bf00      	nop
 8008b26:	3728      	adds	r7, #40	@ 0x28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	40020000 	.word	0x40020000

08008b34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7fe fb2b 	bl	80071a6 <USBD_LL_SetupStage>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008b6a:	78fa      	ldrb	r2, [r7, #3]
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	440b      	add	r3, r1
 8008b78:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	4619      	mov	r1, r3
 8008b82:	f7fe fb65 	bl	8007250 <USBD_LL_DataOutStage>
}
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008ba0:	78fa      	ldrb	r2, [r7, #3]
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	440b      	add	r3, r1
 8008bae:	3320      	adds	r3, #32
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	f7fe fc07 	bl	80073c8 <USBD_LL_DataInStage>
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe fd4b 	bl	800766c <USBD_LL_SOF>
}
 8008bd6:	bf00      	nop
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008be6:	2301      	movs	r3, #1
 8008be8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	79db      	ldrb	r3, [r3, #7]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d001      	beq.n	8008bf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008bf2:	f7f7 fea1 	bl	8000938 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bfc:	7bfa      	ldrb	r2, [r7, #15]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fe fcef 	bl	80075e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fe fc96 	bl	800753e <USBD_LL_Reset>
}
 8008c12:	bf00      	nop
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fcea 	bl	8007604 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6812      	ldr	r2, [r2, #0]
 8008c3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c42:	f043 0301 	orr.w	r3, r3, #1
 8008c46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	7adb      	ldrb	r3, [r3, #11]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d005      	beq.n	8008c5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c50:	4b04      	ldr	r3, [pc, #16]	@ (8008c64 <HAL_PCD_SuspendCallback+0x48>)
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	4a03      	ldr	r2, [pc, #12]	@ (8008c64 <HAL_PCD_SuspendCallback+0x48>)
 8008c56:	f043 0306 	orr.w	r3, r3, #6
 8008c5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	e000ed00 	.word	0xe000ed00

08008c68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fce0 	bl	800763c <USBD_LL_Resume>
}
 8008c7c:	bf00      	nop
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fd38 	bl	8007710 <USBD_LL_IsoOUTIncomplete>
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe fcf4 	bl	80076ac <USBD_LL_IsoINIncomplete>
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe fd4a 	bl	8007774 <USBD_LL_DevConnected>
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe fd47 	bl	800778a <USBD_LL_DevDisconnected>
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d13c      	bne.n	8008d8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008d14:	4a20      	ldr	r2, [pc, #128]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d20:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d24:	4b1c      	ldr	r3, [pc, #112]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008d2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d2e:	2204      	movs	r2, #4
 8008d30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d32:	4b19      	ldr	r3, [pc, #100]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d34:	2202      	movs	r2, #2
 8008d36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d38:	4b17      	ldr	r3, [pc, #92]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d3e:	4b16      	ldr	r3, [pc, #88]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d40:	2202      	movs	r2, #2
 8008d42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d44:	4b14      	ldr	r3, [pc, #80]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d4a:	4b13      	ldr	r3, [pc, #76]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d50:	4b11      	ldr	r3, [pc, #68]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d56:	4b10      	ldr	r3, [pc, #64]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d62:	480d      	ldr	r0, [pc, #52]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d64:	f7f8 fd05 	bl	8001772 <HAL_PCD_Init>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d6e:	f7f7 fde3 	bl	8000938 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d72:	2180      	movs	r1, #128	@ 0x80
 8008d74:	4808      	ldr	r0, [pc, #32]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d76:	f7f9 ff32 	bl	8002bde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d7a:	2240      	movs	r2, #64	@ 0x40
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	4806      	ldr	r0, [pc, #24]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d80:	f7f9 fee6 	bl	8002b50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d84:	2280      	movs	r2, #128	@ 0x80
 8008d86:	2101      	movs	r1, #1
 8008d88:	4803      	ldr	r0, [pc, #12]	@ (8008d98 <USBD_LL_Init+0x94>)
 8008d8a:	f7f9 fee1 	bl	8002b50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	2000176c 	.word	0x2000176c

08008d9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f8 fdec 	bl	8001990 <HAL_PCD_Start>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 f942 	bl	8009048 <USBD_Get_USB_Status>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	461a      	mov	r2, r3
 8008de0:	4603      	mov	r3, r0
 8008de2:	70fb      	strb	r3, [r7, #3]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70bb      	strb	r3, [r7, #2]
 8008de8:	4613      	mov	r3, r2
 8008dea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008dfa:	78bb      	ldrb	r3, [r7, #2]
 8008dfc:	883a      	ldrh	r2, [r7, #0]
 8008dfe:	78f9      	ldrb	r1, [r7, #3]
 8008e00:	f7f9 fac0 	bl	8002384 <HAL_PCD_EP_Open>
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 f91c 	bl	8009048 <USBD_Get_USB_Status>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e38:	78fa      	ldrb	r2, [r7, #3]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7f9 fb0b 	bl	8002458 <HAL_PCD_EP_Close>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 f8fd 	bl	8009048 <USBD_Get_USB_Status>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e76:	78fa      	ldrb	r2, [r7, #3]
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7f9 fbc3 	bl	8002606 <HAL_PCD_EP_SetStall>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 f8de 	bl	8009048 <USBD_Get_USB_Status>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008eb4:	78fa      	ldrb	r2, [r7, #3]
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7f9 fc07 	bl	80026cc <HAL_PCD_EP_ClrStall>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 f8bf 	bl	8009048 <USBD_Get_USB_Status>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008eea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	da0b      	bge.n	8008f0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ef4:	78fb      	ldrb	r3, [r7, #3]
 8008ef6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	4613      	mov	r3, r2
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	4413      	add	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	440b      	add	r3, r1
 8008f06:	3316      	adds	r3, #22
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	e00b      	b.n	8008f24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	4613      	mov	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008f22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f4a:	78fa      	ldrb	r2, [r7, #3]
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7f9 f9f4 	bl	800233c <HAL_PCD_SetAddress>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f874 	bl	8009048 <USBD_Get_USB_Status>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b086      	sub	sp, #24
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f8c:	7af9      	ldrb	r1, [r7, #11]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	f7f9 fafe 	bl	8002592 <HAL_PCD_EP_Transmit>
 8008f96:	4603      	mov	r3, r0
 8008f98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 f853 	bl	8009048 <USBD_Get_USB_Status>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fce:	7af9      	ldrb	r1, [r7, #11]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	f7f9 fa8a 	bl	80024ec <HAL_PCD_EP_Receive>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f832 	bl	8009048 <USBD_Get_USB_Status>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fe8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f7f9 faaa 	bl	8002562 <HAL_PCD_EP_GetRxCount>
 800900e:	4603      	mov	r3, r0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009020:	4b03      	ldr	r3, [pc, #12]	@ (8009030 <USBD_static_malloc+0x18>)
}
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	20001c50 	.word	0x20001c50

08009034 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]

}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	2b03      	cmp	r3, #3
 800905a:	d817      	bhi.n	800908c <USBD_Get_USB_Status+0x44>
 800905c:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <USBD_Get_USB_Status+0x1c>)
 800905e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009062:	bf00      	nop
 8009064:	08009075 	.word	0x08009075
 8009068:	0800907b 	.word	0x0800907b
 800906c:	08009081 	.word	0x08009081
 8009070:	08009087 	.word	0x08009087
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
    break;
 8009078:	e00b      	b.n	8009092 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800907a:	2303      	movs	r3, #3
 800907c:	73fb      	strb	r3, [r7, #15]
    break;
 800907e:	e008      	b.n	8009092 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009080:	2301      	movs	r3, #1
 8009082:	73fb      	strb	r3, [r7, #15]
    break;
 8009084:	e005      	b.n	8009092 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009086:	2303      	movs	r3, #3
 8009088:	73fb      	strb	r3, [r7, #15]
    break;
 800908a:	e002      	b.n	8009092 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800908c:	2303      	movs	r3, #3
 800908e:	73fb      	strb	r3, [r7, #15]
    break;
 8009090:	bf00      	nop
  }
  return usb_status;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0
#if USE_SPI_4W
    printf("USE 4wire spi\r\n");
 80090a4:	4802      	ldr	r0, [pc, #8]	@ (80090b0 <System_Init+0x10>)
 80090a6:	f003 f893 	bl	800c1d0 <puts>
#elif USE_IIC
    printf("USE i2c\r\n");
#endif
    return 0;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	0800ce54 	.word	0x0800ce54

080090b4 <PWM_SetValue>:
{

}

void PWM_SetValue(uint16_t value)
{		
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08a      	sub	sp, #40	@ 0x28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	80fb      	strh	r3, [r7, #6]
////	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	
    TIM_OC_InitTypeDef sConfigOC;
	
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80090be:	2360      	movs	r3, #96	@ 0x60
 80090c0:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 80090c2:	88fb      	ldrh	r3, [r7, #6]
 80090c4:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 80090ce:	f107 030c 	add.w	r3, r7, #12
 80090d2:	2204      	movs	r2, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4805      	ldr	r0, [pc, #20]	@ (80090ec <PWM_SetValue+0x38>)
 80090d8:	f7fa fb7e 	bl	80037d8 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  
 80090dc:	2104      	movs	r1, #4
 80090de:	4803      	ldr	r0, [pc, #12]	@ (80090ec <PWM_SetValue+0x38>)
 80090e0:	f7fa faca 	bl	8003678 <HAL_TIM_PWM_Start>
}
 80090e4:	bf00      	nop
 80090e6:	3728      	adds	r7, #40	@ 0x28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	200001f8 	.word	0x200001f8

080090f0 <SPI4W_Write_Byte>:
note:
	SPI4W_Write_Byte(value) : 
		Register hardware SPI
*********************************************/	
uint8_t SPI4W_Write_Byte(uint8_t value)                                    
{   
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	71fb      	strb	r3, [r7, #7]
    __HAL_SPI_ENABLE(&hspi1);
 80090fa:	4b17      	ldr	r3, [pc, #92]	@ (8009158 <SPI4W_Write_Byte+0x68>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b15      	ldr	r3, [pc, #84]	@ (8009158 <SPI4W_Write_Byte+0x68>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009108:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 800910a:	4b14      	ldr	r3, [pc, #80]	@ (800915c <SPI4W_Write_Byte+0x6c>)
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	4a13      	ldr	r2, [pc, #76]	@ (800915c <SPI4W_Write_Byte+0x6c>)
 8009110:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009114:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 8009116:	bf00      	nop
 8009118:	4b10      	ldr	r3, [pc, #64]	@ (800915c <SPI4W_Write_Byte+0x6c>)
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d0f9      	beq.n	8009118 <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 8009124:	4a0e      	ldr	r2, [pc, #56]	@ (8009160 <SPI4W_Write_Byte+0x70>)
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 800912a:	bf00      	nop
 800912c:	4b0b      	ldr	r3, [pc, #44]	@ (800915c <SPI4W_Write_Byte+0x6c>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1f9      	bne.n	800912c <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 8009138:	bf00      	nop
 800913a:	4b08      	ldr	r3, [pc, #32]	@ (800915c <SPI4W_Write_Byte+0x6c>)
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f9      	beq.n	800913a <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 8009146:	4b06      	ldr	r3, [pc, #24]	@ (8009160 <SPI4W_Write_Byte+0x70>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	b2db      	uxtb	r3, r3
}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	2000019c 	.word	0x2000019c
 800915c:	40013000 	.word	0x40013000
 8009160:	4001300c 	.word	0x4001300c

08009164 <SPI4W_Read_Byte>:

uint8_t SPI4W_Read_Byte(uint8_t value)                                    
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	71fb      	strb	r3, [r7, #7]
	return SPI4W_Write_Byte(value);
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff ffbd 	bl	80090f0 <SPI4W_Write_Byte>
 8009176:	4603      	mov	r3, r0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7f7 ff75 	bl	8001078 <HAL_Delay>
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <Driver_Delay_us>:

void Driver_Delay_us(uint32_t xus)
{
 8009196:	b480      	push	{r7}
 8009198:	b085      	sub	sp, #20
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
	int j;
    for(j=xus; j > 0; j--);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	60fb      	str	r3, [r7, #12]
 80091a2:	e002      	b.n	80091aa <Driver_Delay_us+0x14>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	dcf9      	bgt.n	80091a4 <Driver_Delay_us+0xe>
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <disk_initialize>:

//��ʼ������
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive nmuber (0..) */
)
{	
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	4603      	mov	r3, r0
 80091c6:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0;	    
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]
	switch(drv)
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10e      	bne.n	80091f0 <disk_initialize+0x32>
	{
		case SD_CARD://SD��
			res = SD_Initialize();//SD_Initialize() 
 80091d2:	f002 fc75 	bl	800bac0 <SD_Initialize>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]
		 	if(res)//STM32 SPI��bug,��sd������ʧ�ܵ�ʱ�������ִ����������,���ܵ���SPI��д�쳣
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00a      	beq.n	80091f6 <disk_initialize+0x38>
			{
				SD_SPI_SpeedLow();
 80091e0:	f002 fb4c 	bl	800b87c <SD_SPI_SpeedLow>
				SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 80091e4:	20ff      	movs	r0, #255	@ 0xff
 80091e6:	f002 fb3b 	bl	800b860 <SD_SPI_ReadWriteByte>
				SD_SPI_SpeedHigh();
 80091ea:	f002 fb4e 	bl	800b88a <SD_SPI_SpeedHigh>
			}
  			break;
 80091ee:	e002      	b.n	80091f6 <disk_initialize+0x38>
		default:
			res=1; 
 80091f0:	2301      	movs	r3, #1
 80091f2:	73fb      	strb	r3, [r7, #15]
 80091f4:	e000      	b.n	80091f8 <disk_initialize+0x3a>
  			break;
 80091f6:	bf00      	nop
	}		 
	if(res)return  STA_NOINIT;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <disk_initialize+0x44>
 80091fe:	2301      	movs	r3, #1
 8009200:	e000      	b.n	8009204 <disk_initialize+0x46>
	else return 0; //��ʼ���ɹ�
 8009202:	2300      	movs	r3, #0
}   
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <disk_status>:
//��ô���״̬
DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0..) */
)
{		   
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	71fb      	strb	r3, [r7, #7]
    return 0;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <disk_read>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	461a      	mov	r2, r3
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]
 8009234:	4613      	mov	r3, r2
 8009236:	73bb      	strb	r3, [r7, #14]
	uint8_t res=0; 
 8009238:	2300      	movs	r3, #0
 800923a:	75fb      	strb	r3, [r7, #23]
    if (!count)return RES_PARERR;//count���ܵ���0�����򷵻ز�������		 	 
 800923c:	7bbb      	ldrb	r3, [r7, #14]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <disk_read+0x22>
 8009242:	2304      	movs	r3, #4
 8009244:	e01f      	b.n	8009286 <disk_read+0x62>
	switch(drv)
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d112      	bne.n	8009272 <disk_read+0x4e>
	{
		case SD_CARD://SD��
			res=SD_ReadDisk(buff,sector,count);	 
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	461a      	mov	r2, r3
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	68b8      	ldr	r0, [r7, #8]
 8009254:	f002 fd32 	bl	800bcbc <SD_ReadDisk>
 8009258:	4603      	mov	r3, r0
 800925a:	75fb      	strb	r3, [r7, #23]
		 	if(res)//STM32 SPI��bug,��sd������ʧ�ܵ�ʱ�������ִ����������,���ܵ���SPI��д�쳣
 800925c:	7dfb      	ldrb	r3, [r7, #23]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <disk_read+0x54>
			{
				SD_SPI_SpeedLow();
 8009262:	f002 fb0b 	bl	800b87c <SD_SPI_SpeedLow>
				SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 8009266:	20ff      	movs	r0, #255	@ 0xff
 8009268:	f002 fafa 	bl	800b860 <SD_SPI_ReadWriteByte>
				SD_SPI_SpeedHigh();
 800926c:	f002 fb0d 	bl	800b88a <SD_SPI_SpeedHigh>
			}
			break;
 8009270:	e002      	b.n	8009278 <disk_read+0x54>
		default:
			res=1; 
 8009272:	2301      	movs	r3, #1
 8009274:	75fb      	strb	r3, [r7, #23]
 8009276:	e000      	b.n	800927a <disk_read+0x56>
			break;
 8009278:	bf00      	nop
	}
   //������ֵ����SPI_SD_driver.c�ķ���ֵת��ff.c�ķ���ֵ
    if(res==0x00)return RES_OK;	 
 800927a:	7dfb      	ldrb	r3, [r7, #23]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <disk_read+0x60>
 8009280:	2300      	movs	r3, #0
 8009282:	e000      	b.n	8009286 <disk_read+0x62>
    else return RES_ERROR;	   
 8009284:	2301      	movs	r3, #1
}  
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	        /* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b086      	sub	sp, #24
 8009292:	af00      	add	r7, sp, #0
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	461a      	mov	r2, r3
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]
 800929e:	4613      	mov	r3, r2
 80092a0:	73bb      	strb	r3, [r7, #14]
	uint8_t res=0;  
 80092a2:	2300      	movs	r3, #0
 80092a4:	75fb      	strb	r3, [r7, #23]
    if (!count)return RES_PARERR;//count���ܵ���0�����򷵻ز�������		 	 
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <disk_write+0x22>
 80092ac:	2304      	movs	r3, #4
 80092ae:	e013      	b.n	80092d8 <disk_write+0x4a>
	switch(drv)
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d108      	bne.n	80092c8 <disk_write+0x3a>
	{
		case SD_CARD://SD��
			res=SD_WriteDisk((uint8_t*)buff,sector,count);
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	461a      	mov	r2, r3
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	68b8      	ldr	r0, [r7, #8]
 80092be:	f002 fd49 	bl	800bd54 <SD_WriteDisk>
 80092c2:	4603      	mov	r3, r0
 80092c4:	75fb      	strb	r3, [r7, #23]
			break;
 80092c6:	e001      	b.n	80092cc <disk_write+0x3e>
		default:
			res=1; 
 80092c8:	2301      	movs	r3, #1
 80092ca:	75fb      	strb	r3, [r7, #23]
	}
    //������ֵ����SPI_SD_driver.c�ķ���ֵת��ff.c�ķ���ֵ
    if(res == 0x00)return RES_OK;	 
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <disk_write+0x48>
 80092d2:	2300      	movs	r3, #0
 80092d4:	e000      	b.n	80092d8 <disk_write+0x4a>
    else return RES_ERROR;		 
 80092d6:	2301      	movs	r3, #1
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	791b      	ldrb	r3, [r3, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d033      	beq.n	8009358 <sync_window+0x78>
		wsect = fs->winsect;	/* Current sector number */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	7858      	ldrb	r0, [r3, #1]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009300:	2301      	movs	r3, #1
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	f7ff ffc3 	bl	800928e <disk_write>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <sync_window+0x32>
			return FR_DISK_ERR;
 800930e:	2301      	movs	r3, #1
 8009310:	e023      	b.n	800935a <sync_window+0x7a>
		fs->wflag = 0;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	711a      	strb	r2, [r3, #4]
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a1b      	ldr	r3, [r3, #32]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	1ad2      	subs	r2, r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	429a      	cmp	r2, r3
 8009326:	d217      	bcs.n	8009358 <sync_window+0x78>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	78db      	ldrb	r3, [r3, #3]
 800932c:	60bb      	str	r3, [r7, #8]
 800932e:	e010      	b.n	8009352 <sync_window+0x72>
				wsect += fs->fsize;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4413      	add	r3, r2
 8009338:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	7858      	ldrb	r0, [r3, #1]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009344:	2301      	movs	r3, #1
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	f7ff ffa1 	bl	800928e <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	3b01      	subs	r3, #1
 8009350:	60bb      	str	r3, [r7, #8]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d8eb      	bhi.n	8009330 <sync_window+0x50>
			}
		}
	}
	return FR_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d018      	beq.n	80093a8 <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff ffb2 	bl	80092e0 <sync_window>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <move_window+0x24>
			return FR_DISK_ERR;
 8009382:	2301      	movs	r3, #1
 8009384:	e011      	b.n	80093aa <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7858      	ldrb	r0, [r3, #1]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009390:	2301      	movs	r3, #1
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	f7ff ff46 	bl	8009224 <disk_read>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <move_window+0x40>
			return FR_DISK_ERR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e003      	b.n	80093aa <move_window+0x48>
		fs->winsect = sector;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	return FR_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
	int vol = -1;
 80093ba:	f04f 33ff 	mov.w	r3, #4294967295
 80093be:	60fb      	str	r3, [r7, #12]


	if (*path) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01b      	beq.n	8009400 <get_ldnumber+0x4e>
		vol = (*path)[0] - '0';
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	3b30      	subs	r3, #48	@ 0x30
 80093d0:	60fb      	str	r3, [r7, #12]
		if ((UINT)vol < 9 && (*path)[1] == ':') {	/* There is a drive number */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d811      	bhi.n	80093fc <get_ldnumber+0x4a>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3301      	adds	r3, #1
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80093e2:	d10b      	bne.n	80093fc <get_ldnumber+0x4a>
			*path += 2;		/* Get value and strip it */
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	1c9a      	adds	r2, r3, #2
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	601a      	str	r2, [r3, #0]
			if (vol >= _VOLUMES) vol = -1;	/* Check if the drive number is valid */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	dd05      	ble.n	8009400 <get_ldnumber+0x4e>
 80093f4:	f04f 33ff 	mov.w	r3, #4294967295
 80093f8:	60fb      	str	r3, [r7, #12]
 80093fa:	e001      	b.n	8009400 <get_ldnumber+0x4e>
		} else {			/* No drive number use default drive */
#if _FS_RPATH && _VOLUMES >= 2
			vol = CurrVol;	/* Current drive */
#else
			vol = 0;		/* Drive 0 */
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]
#endif
		}
	}

	return vol;
 8009400:	68fb      	ldr	r3, [r7, #12]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
	...

08009410 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	711a      	strb	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f04f 32ff 	mov.w	r2, #4294967295
 8009426:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff ff99 	bl	8009362 <move_window>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <check_fs+0x2a>
		return 3;
 8009436:	2303      	movs	r3, #3
 8009438:	e04b      	b.n	80094d2 <check_fs+0xc2>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f203 232e 	addw	r3, r3, #558	@ 0x22e
 8009440:	3301      	adds	r3, #1
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b21b      	sxth	r3, r3
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	b21a      	sxth	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8009450:	b21b      	sxth	r3, r3
 8009452:	4313      	orrs	r3, r2
 8009454:	b21b      	sxth	r3, r3
 8009456:	4a21      	ldr	r2, [pc, #132]	@ (80094dc <check_fs+0xcc>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d001      	beq.n	8009460 <check_fs+0x50>
		return 2;
 800945c:	2302      	movs	r3, #2
 800945e:	e038      	b.n	80094d2 <check_fs+0xc2>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3366      	adds	r3, #102	@ 0x66
 8009464:	3303      	adds	r3, #3
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	061a      	lsls	r2, r3, #24
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3366      	adds	r3, #102	@ 0x66
 800946e:	3302      	adds	r3, #2
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	431a      	orrs	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3366      	adds	r3, #102	@ 0x66
 800947a:	3301      	adds	r3, #1
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	021b      	lsls	r3, r3, #8
 8009480:	4313      	orrs	r3, r2
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 8009488:	4313      	orrs	r3, r2
 800948a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800948e:	4a14      	ldr	r2, [pc, #80]	@ (80094e0 <check_fs+0xd0>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d101      	bne.n	8009498 <check_fs+0x88>
		return 0;
 8009494:	2300      	movs	r3, #0
 8009496:	e01c      	b.n	80094d2 <check_fs+0xc2>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3382      	adds	r3, #130	@ 0x82
 800949c:	3303      	adds	r3, #3
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	061a      	lsls	r2, r3, #24
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3382      	adds	r3, #130	@ 0x82
 80094a6:	3302      	adds	r3, #2
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	041b      	lsls	r3, r3, #16
 80094ac:	431a      	orrs	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3382      	adds	r3, #130	@ 0x82
 80094b2:	3301      	adds	r3, #1
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	4313      	orrs	r3, r2
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
 80094c0:	4313      	orrs	r3, r2
 80094c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80094c6:	4a06      	ldr	r2, [pc, #24]	@ (80094e0 <check_fs+0xd0>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d101      	bne.n	80094d0 <check_fs+0xc0>
		return 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	e000      	b.n	80094d2 <check_fs+0xc2>

	return 1;
 80094d0:	2301      	movs	r3, #1
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	ffffaa55 	.word	0xffffaa55
 80094e0:	00544146 	.word	0x00544146

080094e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b096      	sub	sp, #88	@ 0x58
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	4613      	mov	r3, r2
 80094f0:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80094f8:	68b8      	ldr	r0, [r7, #8]
 80094fa:	f7ff ff5a 	bl	80093b2 <get_ldnumber>
 80094fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009502:	2b00      	cmp	r3, #0
 8009504:	da01      	bge.n	800950a <find_volume+0x26>
 8009506:	230b      	movs	r3, #11
 8009508:	e294      	b.n	8009a34 <find_volume+0x550>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800950a:	4a9b      	ldr	r2, [pc, #620]	@ (8009778 <find_volume+0x294>)
 800950c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800950e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009512:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <find_volume+0x3a>
 800951a:	230c      	movs	r3, #12
 800951c:	e28a      	b.n	8009a34 <find_volume+0x550>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009522:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01a      	beq.n	8009562 <find_volume+0x7e>
		stat = disk_status(fs->drv);
 800952c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952e:	785b      	ldrb	r3, [r3, #1]
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff fe6b 	bl	800920c <disk_status>
 8009536:	4603      	mov	r3, r0
 8009538:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800953c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10c      	bne.n	8009562 <find_volume+0x7e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <find_volume+0x7a>
 800954e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <find_volume+0x7a>
				return FR_WRITE_PROTECTED;
 800955a:	230a      	movs	r3, #10
 800955c:	e26a      	b.n	8009a34 <find_volume+0x550>
			return FR_OK;				/* The file system object is valid */
 800955e:	2300      	movs	r3, #0
 8009560:	e268      	b.n	8009a34 <find_volume+0x550>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800956a:	b2da      	uxtb	r2, r3
 800956c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fe22 	bl	80091be <disk_initialize>
 800957a:	4603      	mov	r3, r0
 800957c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009580:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <find_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800958c:	2303      	movs	r3, #3
 800958e:	e251      	b.n	8009a34 <find_volume+0x550>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <find_volume+0xc2>
 8009596:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <find_volume+0xc2>
		return FR_WRITE_PROTECTED;
 80095a2:	230a      	movs	r3, #10
 80095a4:	e246      	b.n	8009a34 <find_volume+0x550>
#if _MAX_SS != 512						/* Get sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80095aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80095ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80095ae:	f7ff ff2f 	bl	8009410 <check_fs>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80095b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d155      	bne.n	800966c <find_volume+0x188>
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80095c0:	2300      	movs	r3, #0
 80095c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80095c4:	e02a      	b.n	800961c <find_volume+0x138>
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
 80095c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80095d4:	4413      	add	r3, r2
 80095d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	3304      	adds	r3, #4
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d012      	beq.n	8009608 <find_volume+0x124>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	330b      	adds	r3, #11
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	061a      	lsls	r2, r3, #24
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	330a      	adds	r3, #10
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	041b      	lsls	r3, r3, #16
 80095f2:	431a      	orrs	r2, r3
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	3309      	adds	r3, #9
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	021b      	lsls	r3, r3, #8
 80095fc:	4313      	orrs	r3, r2
 80095fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009600:	3208      	adds	r2, #8
 8009602:	7812      	ldrb	r2, [r2, #0]
 8009604:	431a      	orrs	r2, r3
 8009606:	e000      	b.n	800960a <find_volume+0x126>
 8009608:	2200      	movs	r2, #0
 800960a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	3358      	adds	r3, #88	@ 0x58
 8009610:	443b      	add	r3, r7
 8009612:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009618:	3301      	adds	r3, #1
 800961a:	643b      	str	r3, [r7, #64]	@ 0x40
 800961c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800961e:	2b03      	cmp	r3, #3
 8009620:	d9d1      	bls.n	80095c6 <find_volume+0xe2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009622:	2300      	movs	r3, #0
 8009624:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <find_volume+0x14e>
 800962c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800962e:	3b01      	subs	r3, #1
 8009630:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	3358      	adds	r3, #88	@ 0x58
 8009638:	443b      	add	r3, r7
 800963a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800963e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <find_volume+0x16e>
 8009646:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009648:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800964a:	f7ff fee1 	bl	8009410 <check_fs>
 800964e:	4603      	mov	r3, r0
 8009650:	e000      	b.n	8009654 <find_volume+0x170>
 8009652:	2302      	movs	r3, #2
 8009654:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009658:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800965c:	2b00      	cmp	r3, #0
 800965e:	d005      	beq.n	800966c <find_volume+0x188>
 8009660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009662:	3301      	adds	r3, #1
 8009664:	643b      	str	r3, [r7, #64]	@ 0x40
 8009666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009668:	2b03      	cmp	r3, #3
 800966a:	d9e2      	bls.n	8009632 <find_volume+0x14e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800966c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009670:	2b03      	cmp	r3, #3
 8009672:	d101      	bne.n	8009678 <find_volume+0x194>
 8009674:	2301      	movs	r3, #1
 8009676:	e1dd      	b.n	8009a34 <find_volume+0x550>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009678:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <find_volume+0x1a0>
 8009680:	230d      	movs	r3, #13
 8009682:	e1d7      	b.n	8009a34 <find_volume+0x550>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800968a:	b21b      	sxth	r3, r3
 800968c:	021b      	lsls	r3, r3, #8
 800968e:	b21a      	sxth	r2, r3
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8009696:	b21b      	sxth	r3, r3
 8009698:	4313      	orrs	r3, r2
 800969a:	b21b      	sxth	r3, r3
 800969c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096a0:	d001      	beq.n	80096a6 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80096a2:	230d      	movs	r3, #13
 80096a4:	e1c6      	b.n	8009a34 <find_volume+0x550>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80096ac:	b21b      	sxth	r3, r3
 80096ae:	021b      	lsls	r3, r3, #8
 80096b0:	b21a      	sxth	r2, r3
 80096b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80096b8:	b21b      	sxth	r3, r3
 80096ba:	4313      	orrs	r3, r2
 80096bc:	b21b      	sxth	r3, r3
 80096be:	b29b      	uxth	r3, r3
 80096c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80096c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d112      	bne.n	80096ee <find_volume+0x20a>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80096ce:	061a      	lsls	r2, r3, #24
 80096d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80096d6:	041b      	lsls	r3, r3, #16
 80096d8:	431a      	orrs	r2, r3
 80096da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096dc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	4313      	orrs	r3, r2
 80096e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80096ea:	4313      	orrs	r3, r2
 80096ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 80096ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096f2:	619a      	str	r2, [r3, #24]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80096f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f6:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	78db      	ldrb	r3, [r3, #3]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d005      	beq.n	8009712 <find_volume+0x22e>
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	78db      	ldrb	r3, [r3, #3]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d001      	beq.n	8009712 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800970e:	230d      	movs	r3, #13
 8009710:	e190      	b.n	8009a34 <find_volume+0x550>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009714:	78db      	ldrb	r3, [r3, #3]
 8009716:	461a      	mov	r2, r3
 8009718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800971a:	fb02 f303 	mul.w	r3, r2, r3
 800971e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800972a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972c:	789b      	ldrb	r3, [r3, #2]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d008      	beq.n	8009744 <find_volume+0x260>
 8009732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009734:	789b      	ldrb	r3, [r3, #2]
 8009736:	461a      	mov	r2, r3
 8009738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973a:	789b      	ldrb	r3, [r3, #2]
 800973c:	3b01      	subs	r3, #1
 800973e:	4013      	ands	r3, r2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <find_volume+0x264>
		return FR_NO_FILESYSTEM;
 8009744:	230d      	movs	r3, #13
 8009746:	e175      	b.n	8009a34 <find_volume+0x550>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8009748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800974e:	b21b      	sxth	r3, r3
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	b21a      	sxth	r2, r3
 8009754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800975a:	b21b      	sxth	r3, r3
 800975c:	4313      	orrs	r3, r2
 800975e:	b21b      	sxth	r3, r3
 8009760:	b29a      	uxth	r2, r3
 8009762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009764:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 8009766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009768:	891b      	ldrh	r3, [r3, #8]
 800976a:	f003 030f 	and.w	r3, r3, #15
 800976e:	b29b      	uxth	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <find_volume+0x298>
		return FR_NO_FILESYSTEM;
 8009774:	230d      	movs	r3, #13
 8009776:	e15d      	b.n	8009a34 <find_volume+0x550>
 8009778:	20001e70 	.word	0x20001e70

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 800977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009782:	b21b      	sxth	r3, r3
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	b21a      	sxth	r2, r3
 8009788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800978e:	b21b      	sxth	r3, r3
 8009790:	4313      	orrs	r3, r2
 8009792:	b21b      	sxth	r3, r3
 8009794:	b29b      	uxth	r3, r3
 8009796:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8009798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800979a:	2b00      	cmp	r3, #0
 800979c:	d112      	bne.n	80097c4 <find_volume+0x2e0>
 800979e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a0:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 80097a4:	061a      	lsls	r2, r3, #24
 80097a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80097ac:	041b      	lsls	r3, r3, #16
 80097ae:	431a      	orrs	r2, r3
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097b6:	021b      	lsls	r3, r3, #8
 80097b8:	4313      	orrs	r3, r2
 80097ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097bc:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 80097c0:	4313      	orrs	r3, r2
 80097c2:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 80097c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80097ca:	b21b      	sxth	r3, r3
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	b21a      	sxth	r2, r3
 80097d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097d6:	b21b      	sxth	r3, r3
 80097d8:	4313      	orrs	r3, r2
 80097da:	b21b      	sxth	r3, r3
 80097dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80097de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <find_volume+0x304>
 80097e4:	230d      	movs	r3, #13
 80097e6:	e125      	b.n	8009a34 <find_volume+0x550>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 80097e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80097ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ec:	4413      	add	r3, r2
 80097ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097f0:	8912      	ldrh	r2, [r2, #8]
 80097f2:	0912      	lsrs	r2, r2, #4
 80097f4:	b292      	uxth	r2, r2
 80097f6:	4413      	add	r3, r2
 80097f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80097fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fe:	429a      	cmp	r2, r3
 8009800:	d201      	bcs.n	8009806 <find_volume+0x322>
 8009802:	230d      	movs	r3, #13
 8009804:	e116      	b.n	8009a34 <find_volume+0x550>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800980e:	7892      	ldrb	r2, [r2, #2]
 8009810:	fbb3 f3f2 	udiv	r3, r3, r2
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <find_volume+0x33c>
 800981c:	230d      	movs	r3, #13
 800981e:	e109      	b.n	8009a34 <find_volume+0x550>
	fmt = FS_FAT12;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009828:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800982c:	4293      	cmp	r3, r2
 800982e:	d902      	bls.n	8009836 <find_volume+0x352>
 8009830:	2302      	movs	r3, #2
 8009832:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009838:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800983c:	4293      	cmp	r3, r2
 800983e:	d902      	bls.n	8009846 <find_volume+0x362>
 8009840:	2303      	movs	r3, #3
 8009842:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	1c9a      	adds	r2, r3, #2
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	615a      	str	r2, [r3, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800984e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009850:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009852:	61da      	str	r2, [r3, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009854:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009858:	441a      	add	r2, r3
 800985a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985c:	621a      	str	r2, [r3, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800985e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009862:	441a      	add	r2, r3
 8009864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009866:	629a      	str	r2, [r3, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8009868:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800986c:	2b03      	cmp	r3, #3
 800986e:	d11e      	bne.n	80098ae <find_volume+0x3ca>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	891b      	ldrh	r3, [r3, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <find_volume+0x398>
 8009878:	230d      	movs	r3, #13
 800987a:	e0db      	b.n	8009a34 <find_volume+0x550>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 800987c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987e:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8009882:	061a      	lsls	r2, r3, #24
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800988a:	041b      	lsls	r3, r3, #16
 800988c:	431a      	orrs	r2, r3
 800988e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009890:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	4313      	orrs	r3, r2
 8009898:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800989a:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 800989e:	431a      	orrs	r2, r3
 80098a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a2:	625a      	str	r2, [r3, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	695b      	ldr	r3, [r3, #20]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80098ac:	e01f      	b.n	80098ee <find_volume+0x40a>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80098ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b0:	891b      	ldrh	r3, [r3, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <find_volume+0x3d6>
 80098b6:	230d      	movs	r3, #13
 80098b8:	e0bc      	b.n	8009a34 <find_volume+0x550>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098bc:	6a1a      	ldr	r2, [r3, #32]
 80098be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c0:	441a      	add	r2, r3
 80098c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c4:	625a      	str	r2, [r3, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80098c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d103      	bne.n	80098d6 <find_volume+0x3f2>
 80098ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	e00a      	b.n	80098ec <find_volume+0x408>
 80098d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	4613      	mov	r3, r2
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	4413      	add	r3, r2
 80098e0:	085a      	lsrs	r2, r3, #1
 80098e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 80098ec:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 80098ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f0:	699a      	ldr	r2, [r3, #24]
 80098f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098f4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80098f8:	0a5b      	lsrs	r3, r3, #9
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d201      	bcs.n	8009902 <find_volume+0x41e>
		return FR_NO_FILESYSTEM;
 80098fe:	230d      	movs	r3, #13
 8009900:	e098      	b.n	8009a34 <find_volume+0x550>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009904:	f04f 32ff 	mov.w	r2, #4294967295
 8009908:	611a      	str	r2, [r3, #16]
 800990a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990c:	691a      	ldr	r2, [r3, #16]
 800990e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009910:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8009912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009914:	2280      	movs	r2, #128	@ 0x80
 8009916:	715a      	strb	r2, [r3, #5]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009918:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800991c:	2b03      	cmp	r3, #3
 800991e:	d17a      	bne.n	8009a16 <find_volume+0x532>
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
 8009920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009922:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009926:	b21b      	sxth	r3, r3
 8009928:	021b      	lsls	r3, r3, #8
 800992a:	b21a      	sxth	r2, r3
 800992c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8009932:	b21b      	sxth	r3, r3
 8009934:	4313      	orrs	r3, r2
 8009936:	b21b      	sxth	r3, r3
 8009938:	2b01      	cmp	r3, #1
 800993a:	d16c      	bne.n	8009a16 <find_volume+0x532>
		&& move_window(fs, bsect + 1) == FR_OK)
 800993c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800993e:	3301      	adds	r3, #1
 8009940:	4619      	mov	r1, r3
 8009942:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009944:	f7ff fd0d 	bl	8009362 <move_window>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d163      	bne.n	8009a16 <find_volume+0x532>
	{
		fs->fsi_flag = 0;
 800994e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009950:	2200      	movs	r2, #0
 8009952:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009956:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 800995a:	b21b      	sxth	r3, r3
 800995c:	021b      	lsls	r3, r3, #8
 800995e:	b21a      	sxth	r2, r3
 8009960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009962:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8009966:	b21b      	sxth	r3, r3
 8009968:	4313      	orrs	r3, r2
 800996a:	b21b      	sxth	r3, r3
 800996c:	4a33      	ldr	r2, [pc, #204]	@ (8009a3c <find_volume+0x558>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d151      	bne.n	8009a16 <find_volume+0x532>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
 8009972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009974:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8009978:	061a      	lsls	r2, r3, #24
 800997a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009980:	041b      	lsls	r3, r3, #16
 8009982:	431a      	orrs	r2, r3
 8009984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009986:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	4313      	orrs	r3, r2
 800998e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009990:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8009994:	4313      	orrs	r3, r2
 8009996:	4a2a      	ldr	r2, [pc, #168]	@ (8009a40 <find_volume+0x55c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d13c      	bne.n	8009a16 <find_volume+0x532>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
 800999c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999e:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 80099a2:	061a      	lsls	r2, r3, #24
 80099a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a6:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 80099aa:	041b      	lsls	r3, r3, #16
 80099ac:	431a      	orrs	r2, r3
 80099ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b0:	f893 3215 	ldrb.w	r3, [r3, #533]	@ 0x215
 80099b4:	021b      	lsls	r3, r3, #8
 80099b6:	4313      	orrs	r3, r2
 80099b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099ba:	f892 2214 	ldrb.w	r2, [r2, #532]	@ 0x214
 80099be:	4313      	orrs	r3, r2
 80099c0:	4a20      	ldr	r2, [pc, #128]	@ (8009a44 <find_volume+0x560>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d127      	bne.n	8009a16 <find_volume+0x532>
		{
#if !_FS_NOFSINFO
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 80099c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c8:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 80099cc:	061a      	lsls	r2, r3, #24
 80099ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d0:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 80099d4:	041b      	lsls	r3, r3, #16
 80099d6:	431a      	orrs	r2, r3
 80099d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099da:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 80099de:	021b      	lsls	r3, r3, #8
 80099e0:	4313      	orrs	r3, r2
 80099e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099e4:	f892 2218 	ldrb.w	r2, [r2, #536]	@ 0x218
 80099e8:	431a      	orrs	r2, r3
 80099ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ec:	611a      	str	r2, [r3, #16]
#endif
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 80099ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f0:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 80099f4:	061a      	lsls	r2, r3, #24
 80099f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f8:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 80099fc:	041b      	lsls	r3, r3, #16
 80099fe:	431a      	orrs	r2, r3
 8009a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a02:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8009a06:	021b      	lsls	r3, r3, #8
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a0c:	f892 221c 	ldrb.w	r2, [r2, #540]	@ 0x21c
 8009a10:	431a      	orrs	r2, r3
 8009a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a14:	60da      	str	r2, [r3, #12]
		}
	}
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009a1c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8009a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a48 <find_volume+0x564>)
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	3301      	adds	r3, #1
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	4b08      	ldr	r3, [pc, #32]	@ (8009a48 <find_volume+0x564>)
 8009a28:	801a      	strh	r2, [r3, #0]
 8009a2a:	4b07      	ldr	r3, [pc, #28]	@ (8009a48 <find_volume+0x564>)
 8009a2c:	881a      	ldrh	r2, [r3, #0]
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a30:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3758      	adds	r7, #88	@ 0x58
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	ffffaa55 	.word	0xffffaa55
 8009a40:	41615252 	.word	0x41615252
 8009a44:	61417272 	.word	0x61417272
 8009a48:	20001e74 	.word	0x20001e74

08009a4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	4613      	mov	r3, r2
 8009a58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;


	vol = get_ldnumber(&path);
 8009a5a:	f107 0308 	add.w	r3, r7, #8
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff fca7 	bl	80093b2 <get_ldnumber>
 8009a64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	da01      	bge.n	8009a70 <f_mount+0x24>
 8009a6c:	230b      	movs	r3, #11
 8009a6e:	e028      	b.n	8009ac2 <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a70:	4a16      	ldr	r2, [pc, #88]	@ (8009acc <f_mount+0x80>)
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <f_mount+0x3a>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	2200      	movs	r2, #0
 8009a84:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	490d      	ldr	r1, [pc, #52]	@ (8009acc <f_mount+0x80>)
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <f_mount+0x5c>
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d001      	beq.n	8009aac <f_mount+0x60>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e00a      	b.n	8009ac2 <f_mount+0x76>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009aac:	f107 0108 	add.w	r1, r7, #8
 8009ab0:	f107 030c 	add.w	r3, r7, #12
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff fd14 	bl	80094e4 <find_volume>
 8009abc:	4603      	mov	r3, r0
 8009abe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3720      	adds	r7, #32
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20001e70 	.word	0x20001e70

08009ad0 <SD_Init>:
char* pDirectoryFiles[ MAX_BMP_FILES ];
uint8_t str[20];
FRESULT f_res;
FATFS microSDFatFs;

void SD_Init(void){
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
	
	SD_CS_1;
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	2110      	movs	r1, #16
 8009ada:	481f      	ldr	r0, [pc, #124]	@ (8009b58 <SD_Init+0x88>)
 8009adc:	f7f7 fe30 	bl	8001740 <HAL_GPIO_WritePin>
	LCD_CS_1;
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	2140      	movs	r1, #64	@ 0x40
 8009ae4:	481c      	ldr	r0, [pc, #112]	@ (8009b58 <SD_Init+0x88>)
 8009ae6:	f7f7 fe2b 	bl	8001740 <HAL_GPIO_WritePin>
	TP_CS_1;
 8009aea:	2201      	movs	r2, #1
 8009aec:	2180      	movs	r1, #128	@ 0x80
 8009aee:	481a      	ldr	r0, [pc, #104]	@ (8009b58 <SD_Init+0x88>)
 8009af0:	f7f7 fe26 	bl	8001740 <HAL_GPIO_WritePin>
	
	int counter = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	607b      	str	r3, [r7, #4]
    //Check the mounted device
	f_res = f_mount(&microSDFatFs,(TCHAR const*)"/",1);
 8009af8:	2201      	movs	r2, #1
 8009afa:	4918      	ldr	r1, [pc, #96]	@ (8009b5c <SD_Init+0x8c>)
 8009afc:	4818      	ldr	r0, [pc, #96]	@ (8009b60 <SD_Init+0x90>)
 8009afe:	f7ff ffa5 	bl	8009a4c <f_mount>
 8009b02:	4603      	mov	r3, r0
 8009b04:	461a      	mov	r2, r3
 8009b06:	4b17      	ldr	r3, [pc, #92]	@ (8009b64 <SD_Init+0x94>)
 8009b08:	701a      	strb	r2, [r3, #0]
	if(f_res!=FR_OK){
 8009b0a:	4b16      	ldr	r3, [pc, #88]	@ (8009b64 <SD_Init+0x94>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d006      	beq.n	8009b20 <SD_Init+0x50>
		printf("SD card mount file system failed ,error code :(%d)\r\n",f_res);
 8009b12:	4b14      	ldr	r3, [pc, #80]	@ (8009b64 <SD_Init+0x94>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	4619      	mov	r1, r3
 8009b18:	4813      	ldr	r0, [pc, #76]	@ (8009b68 <SD_Init+0x98>)
 8009b1a:	f002 faf1 	bl	800c100 <iprintf>
		USB_Send_Message("SD card mount file system success!!\r\n");
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
			pDirectoryFiles[counter] = malloc(11); 
		}	
	}
}
 8009b1e:	e017      	b.n	8009b50 <SD_Init+0x80>
		printf("SD card mount file system success!! \r\n");
 8009b20:	4812      	ldr	r0, [pc, #72]	@ (8009b6c <SD_Init+0x9c>)
 8009b22:	f002 fb55 	bl	800c1d0 <puts>
		USB_Send_Message("SD card mount file system success!!\r\n");
 8009b26:	4812      	ldr	r0, [pc, #72]	@ (8009b70 <SD_Init+0xa0>)
 8009b28:	f7f6 fed6 	bl	80008d8 <USB_Send_Message>
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	607b      	str	r3, [r7, #4]
 8009b30:	e00b      	b.n	8009b4a <SD_Init+0x7a>
			pDirectoryFiles[counter] = malloc(11); 
 8009b32:	200b      	movs	r0, #11
 8009b34:	f002 f96c 	bl	800be10 <malloc>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8009b74 <SD_Init+0xa4>)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3301      	adds	r3, #1
 8009b48:	607b      	str	r3, [r7, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b18      	cmp	r3, #24
 8009b4e:	ddf0      	ble.n	8009b32 <SD_Init+0x62>
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	40020400 	.word	0x40020400
 8009b5c:	0800ce64 	.word	0x0800ce64
 8009b60:	20001ee0 	.word	0x20001ee0
 8009b64:	20001edc 	.word	0x20001edc
 8009b68:	0800ce68 	.word	0x0800ce68
 8009b6c:	0800cea0 	.word	0x0800cea0
 8009b70:	0800cec8 	.word	0x0800cec8
 8009b74:	20001e78 	.word	0x20001e78

08009b78 <LCD_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_Reset(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
    LCD_RST_1;
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009b82:	480e      	ldr	r0, [pc, #56]	@ (8009bbc <LCD_Reset+0x44>)
 8009b84:	f7f7 fddc 	bl	8001740 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8009b88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009b8c:	f7ff faf8 	bl	8009180 <Driver_Delay_ms>
    LCD_RST_0;
 8009b90:	2200      	movs	r2, #0
 8009b92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009b96:	4809      	ldr	r0, [pc, #36]	@ (8009bbc <LCD_Reset+0x44>)
 8009b98:	f7f7 fdd2 	bl	8001740 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8009b9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009ba0:	f7ff faee 	bl	8009180 <Driver_Delay_ms>
    LCD_RST_1;
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009baa:	4804      	ldr	r0, [pc, #16]	@ (8009bbc <LCD_Reset+0x44>)
 8009bac:	f7f7 fdc8 	bl	8001740 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8009bb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009bb4:	f7ff fae4 	bl	8009180 <Driver_Delay_ms>
}
 8009bb8:	bf00      	nop
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	40020000 	.word	0x40020000

08009bc0 <LCD_SetBackLight>:

static void LCD_SetBackLight(uint16_t value)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	80fb      	strh	r3, [r7, #6]
	PWM_SetValue(value);
 8009bca:	88fb      	ldrh	r3, [r7, #6]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fa71 	bl	80090b4 <PWM_SetValue>
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <LCD_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
void LCD_WriteReg(uint8_t Reg)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	71fb      	strb	r3, [r7, #7]
    LCD_DC_0;
 8009be6:	2200      	movs	r2, #0
 8009be8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009bec:	480a      	ldr	r0, [pc, #40]	@ (8009c18 <LCD_WriteReg+0x3c>)
 8009bee:	f7f7 fda7 	bl	8001740 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2140      	movs	r1, #64	@ 0x40
 8009bf6:	4809      	ldr	r0, [pc, #36]	@ (8009c1c <LCD_WriteReg+0x40>)
 8009bf8:	f7f7 fda2 	bl	8001740 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7ff fa76 	bl	80090f0 <SPI4W_Write_Byte>
    LCD_CS_1;
 8009c04:	2201      	movs	r2, #1
 8009c06:	2140      	movs	r1, #64	@ 0x40
 8009c08:	4804      	ldr	r0, [pc, #16]	@ (8009c1c <LCD_WriteReg+0x40>)
 8009c0a:	f7f7 fd99 	bl	8001740 <HAL_GPIO_WritePin>
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	40020000 	.word	0x40020000
 8009c1c:	40020400 	.word	0x40020400

08009c20 <LCD_WriteData>:

void LCD_WriteData(uint8_t Data)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	71fb      	strb	r3, [r7, #7]
    LCD_DC_1;
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009c30:	480d      	ldr	r0, [pc, #52]	@ (8009c68 <LCD_WriteData+0x48>)
 8009c32:	f7f7 fd85 	bl	8001740 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8009c36:	2200      	movs	r2, #0
 8009c38:	2140      	movs	r1, #64	@ 0x40
 8009c3a:	480c      	ldr	r0, [pc, #48]	@ (8009c6c <LCD_WriteData+0x4c>)
 8009c3c:	f7f7 fd80 	bl	8001740 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data >> 8);
 8009c40:	79fb      	ldrb	r3, [r7, #7]
 8009c42:	121b      	asrs	r3, r3, #8
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fa52 	bl	80090f0 <SPI4W_Write_Byte>
    SPI4W_Write_Byte(Data & 0XFF);
 8009c4c:	79fb      	ldrb	r3, [r7, #7]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fa4e 	bl	80090f0 <SPI4W_Write_Byte>
    LCD_CS_1;
 8009c54:	2201      	movs	r2, #1
 8009c56:	2140      	movs	r1, #64	@ 0x40
 8009c58:	4804      	ldr	r0, [pc, #16]	@ (8009c6c <LCD_WriteData+0x4c>)
 8009c5a:	f7f7 fd71 	bl	8001740 <HAL_GPIO_WritePin>
}
 8009c5e:	bf00      	nop
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	40020000 	.word	0x40020000
 8009c6c:	40020400 	.word	0x40020400

08009c70 <LCD_Write_AllData>:
/*******************************************************************************
function:
		Write register data
*******************************************************************************/
static void LCD_Write_AllData(uint16_t Data, uint32_t DataLen)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	6039      	str	r1, [r7, #0]
 8009c7a:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_DC_1;
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009c82:	4813      	ldr	r0, [pc, #76]	@ (8009cd0 <LCD_Write_AllData+0x60>)
 8009c84:	f7f7 fd5c 	bl	8001740 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2140      	movs	r1, #64	@ 0x40
 8009c8c:	4811      	ldr	r0, [pc, #68]	@ (8009cd4 <LCD_Write_AllData+0x64>)
 8009c8e:	f7f7 fd57 	bl	8001740 <HAL_GPIO_WritePin>
    for(i = 0; i < DataLen; i++) {
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	e00e      	b.n	8009cb6 <LCD_Write_AllData+0x46>
        SPI4W_Write_Byte(Data >> 8);
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	0a1b      	lsrs	r3, r3, #8
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7ff fa25 	bl	80090f0 <SPI4W_Write_Byte>
        SPI4W_Write_Byte(Data & 0XFF);
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff fa20 	bl	80090f0 <SPI4W_Write_Byte>
    for(i = 0; i < DataLen; i++) {
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d3ec      	bcc.n	8009c98 <LCD_Write_AllData+0x28>
    }
    LCD_CS_1;
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	2140      	movs	r1, #64	@ 0x40
 8009cc2:	4804      	ldr	r0, [pc, #16]	@ (8009cd4 <LCD_Write_AllData+0x64>)
 8009cc4:	f7f7 fd3c 	bl	8001740 <HAL_GPIO_WritePin>
}
 8009cc8:	bf00      	nop
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	40020000 	.word	0x40020000
 8009cd4:	40020400 	.word	0x40020400

08009cd8 <LCD_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	af00      	add	r7, sp, #0
    LCD_WriteReg(0XF9);
 8009cdc:	20f9      	movs	r0, #249	@ 0xf9
 8009cde:	f7ff ff7d 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x00);
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f7ff ff9c 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x08);
 8009ce8:	2008      	movs	r0, #8
 8009cea:	f7ff ff99 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0xC0);
 8009cee:	20c0      	movs	r0, #192	@ 0xc0
 8009cf0:	f7ff ff74 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x19);//VREG1OUT POSITIVE
 8009cf4:	2019      	movs	r0, #25
 8009cf6:	f7ff ff93 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x1a);//VREG2OUT NEGATIVE
 8009cfa:	201a      	movs	r0, #26
 8009cfc:	f7ff ff90 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0xC1);
 8009d00:	20c1      	movs	r0, #193	@ 0xc1
 8009d02:	f7ff ff6b 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x45);//VGH,VGL    VGH>=14V.
 8009d06:	2045      	movs	r0, #69	@ 0x45
 8009d08:	f7ff ff8a 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	f7ff ff87 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0xC2);	//Normal mode, increase can change the display quality, while increasing power consumption
 8009d12:	20c2      	movs	r0, #194	@ 0xc2
 8009d14:	f7ff ff62 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x33);
 8009d18:	2033      	movs	r0, #51	@ 0x33
 8009d1a:	f7ff ff81 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0XC5);
 8009d1e:	20c5      	movs	r0, #197	@ 0xc5
 8009d20:	f7ff ff5c 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x00);
 8009d24:	2000      	movs	r0, #0
 8009d26:	f7ff ff7b 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x28);//VCM_REG[7:0]. <=0X80.
 8009d2a:	2028      	movs	r0, #40	@ 0x28
 8009d2c:	f7ff ff78 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0xB1);//Sets the frame frequency of full color normal mode
 8009d30:	20b1      	movs	r0, #177	@ 0xb1
 8009d32:	f7ff ff53 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0xA0);//0XB0 =70HZ, <=0XB0.0xA0=62HZ
 8009d36:	20a0      	movs	r0, #160	@ 0xa0
 8009d38:	f7ff ff72 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x11);
 8009d3c:	2011      	movs	r0, #17
 8009d3e:	f7ff ff6f 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0xB4);
 8009d42:	20b4      	movs	r0, #180	@ 0xb4
 8009d44:	f7ff ff4a 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x02); //2 DOT FRAME MODE,F<=70HZ.
 8009d48:	2002      	movs	r0, #2
 8009d4a:	f7ff ff69 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0xB6);//
 8009d4e:	20b6      	movs	r0, #182	@ 0xb6
 8009d50:	f7ff ff44 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x00);
 8009d54:	2000      	movs	r0, #0
 8009d56:	f7ff ff63 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x42);//0 GS SS SM ISC[3:0];
 8009d5a:	2042      	movs	r0, #66	@ 0x42
 8009d5c:	f7ff ff60 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x3B);
 8009d60:	203b      	movs	r0, #59	@ 0x3b
 8009d62:	f7ff ff5d 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0xB7);
 8009d66:	20b7      	movs	r0, #183	@ 0xb7
 8009d68:	f7ff ff38 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x07);
 8009d6c:	2007      	movs	r0, #7
 8009d6e:	f7ff ff57 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0xE0);
 8009d72:	20e0      	movs	r0, #224	@ 0xe0
 8009d74:	f7ff ff32 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8009d78:	201f      	movs	r0, #31
 8009d7a:	f7ff ff51 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x25);
 8009d7e:	2025      	movs	r0, #37	@ 0x25
 8009d80:	f7ff ff4e 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x22);
 8009d84:	2022      	movs	r0, #34	@ 0x22
 8009d86:	f7ff ff4b 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x0B);
 8009d8a:	200b      	movs	r0, #11
 8009d8c:	f7ff ff48 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x06);
 8009d90:	2006      	movs	r0, #6
 8009d92:	f7ff ff45 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x0A);
 8009d96:	200a      	movs	r0, #10
 8009d98:	f7ff ff42 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x4E);
 8009d9c:	204e      	movs	r0, #78	@ 0x4e
 8009d9e:	f7ff ff3f 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0xC6);
 8009da2:	20c6      	movs	r0, #198	@ 0xc6
 8009da4:	f7ff ff3c 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x39);
 8009da8:	2039      	movs	r0, #57	@ 0x39
 8009daa:	f7ff ff39 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009dae:	2000      	movs	r0, #0
 8009db0:	f7ff ff36 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009db4:	2000      	movs	r0, #0
 8009db6:	f7ff ff33 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009dba:	2000      	movs	r0, #0
 8009dbc:	f7ff ff30 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	f7ff ff2d 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	f7ff ff2a 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009dcc:	2000      	movs	r0, #0
 8009dce:	f7ff ff27 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0XE1);
 8009dd2:	20e1      	movs	r0, #225	@ 0xe1
 8009dd4:	f7ff ff02 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8009dd8:	201f      	movs	r0, #31
 8009dda:	f7ff ff21 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8009dde:	203f      	movs	r0, #63	@ 0x3f
 8009de0:	f7ff ff1e 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8009de4:	203f      	movs	r0, #63	@ 0x3f
 8009de6:	f7ff ff1b 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009dea:	200f      	movs	r0, #15
 8009dec:	f7ff ff18 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x1F);
 8009df0:	201f      	movs	r0, #31
 8009df2:	f7ff ff15 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009df6:	200f      	movs	r0, #15
 8009df8:	f7ff ff12 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x46);
 8009dfc:	2046      	movs	r0, #70	@ 0x46
 8009dfe:	f7ff ff0f 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x49);
 8009e02:	2049      	movs	r0, #73	@ 0x49
 8009e04:	f7ff ff0c 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x31);
 8009e08:	2031      	movs	r0, #49	@ 0x31
 8009e0a:	f7ff ff09 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x05);
 8009e0e:	2005      	movs	r0, #5
 8009e10:	f7ff ff06 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x09);
 8009e14:	2009      	movs	r0, #9
 8009e16:	f7ff ff03 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x03);
 8009e1a:	2003      	movs	r0, #3
 8009e1c:	f7ff ff00 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x1C);
 8009e20:	201c      	movs	r0, #28
 8009e22:	f7ff fefd 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x1A);
 8009e26:	201a      	movs	r0, #26
 8009e28:	f7ff fefa 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	f7ff fef7 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0XF1);
 8009e32:	20f1      	movs	r0, #241	@ 0xf1
 8009e34:	f7ff fed2 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x36);
 8009e38:	2036      	movs	r0, #54	@ 0x36
 8009e3a:	f7ff fef1 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x04);
 8009e3e:	2004      	movs	r0, #4
 8009e40:	f7ff feee 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009e44:	2000      	movs	r0, #0
 8009e46:	f7ff feeb 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x3C);
 8009e4a:	203c      	movs	r0, #60	@ 0x3c
 8009e4c:	f7ff fee8 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009e50:	200f      	movs	r0, #15
 8009e52:	f7ff fee5 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009e56:	200f      	movs	r0, #15
 8009e58:	f7ff fee2 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0xA4);
 8009e5c:	20a4      	movs	r0, #164	@ 0xa4
 8009e5e:	f7ff fedf 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x02);
 8009e62:	2002      	movs	r0, #2
 8009e64:	f7ff fedc 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0XF2);
 8009e68:	20f2      	movs	r0, #242	@ 0xf2
 8009e6a:	f7ff feb7 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x18);
 8009e6e:	2018      	movs	r0, #24
 8009e70:	f7ff fed6 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0xA3);
 8009e74:	20a3      	movs	r0, #163	@ 0xa3
 8009e76:	f7ff fed3 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x12);
 8009e7a:	2012      	movs	r0, #18
 8009e7c:	f7ff fed0 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x02);
 8009e80:	2002      	movs	r0, #2
 8009e82:	f7ff fecd 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x32);
 8009e86:	2032      	movs	r0, #50	@ 0x32
 8009e88:	f7ff feca 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x12);
 8009e8c:	2012      	movs	r0, #18
 8009e8e:	f7ff fec7 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0xFF);
 8009e92:	20ff      	movs	r0, #255	@ 0xff
 8009e94:	f7ff fec4 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x32);
 8009e98:	2032      	movs	r0, #50	@ 0x32
 8009e9a:	f7ff fec1 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	f7ff febe 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0XF4);
 8009ea4:	20f4      	movs	r0, #244	@ 0xf4
 8009ea6:	f7ff fe99 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x40);
 8009eaa:	2040      	movs	r0, #64	@ 0x40
 8009eac:	f7ff feb8 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	f7ff feb5 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x08);
 8009eb6:	2008      	movs	r0, #8
 8009eb8:	f7ff feb2 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x91);
 8009ebc:	2091      	movs	r0, #145	@ 0x91
 8009ebe:	f7ff feaf 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x04);
 8009ec2:	2004      	movs	r0, #4
 8009ec4:	f7ff feac 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0XF8);
 8009ec8:	20f8      	movs	r0, #248	@ 0xf8
 8009eca:	f7ff fe87 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x21);
 8009ece:	2021      	movs	r0, #33	@ 0x21
 8009ed0:	f7ff fea6 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(0x04);
 8009ed4:	2004      	movs	r0, #4
 8009ed6:	f7ff fea3 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0X3A);	//Set Interface Pixel Format
 8009eda:	203a      	movs	r0, #58	@ 0x3a
 8009edc:	f7ff fe7e 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0x55);
 8009ee0:	2055      	movs	r0, #85	@ 0x55
 8009ee2:	f7ff fe9d 	bl	8009c20 <LCD_WriteData>

}
 8009ee6:	bf00      	nop
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <LCD_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	71fb      	strb	r3, [r7, #7]
    uint16_t MemoryAccessReg_Data = 0; //addr:0x36
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	81fb      	strh	r3, [r7, #14]
    uint16_t DisFunReg_Data = 0; //addr:0xB6
 8009efa:	2300      	movs	r3, #0
 8009efc:	81bb      	strh	r3, [r7, #12]

    // Gets the scan direction of GRAM
    switch (Scan_dir) {
 8009efe:	79fb      	ldrb	r3, [r7, #7]
 8009f00:	2b07      	cmp	r3, #7
 8009f02:	d83b      	bhi.n	8009f7c <LCD_SetGramScanWay+0x90>
 8009f04:	a201      	add	r2, pc, #4	@ (adr r2, 8009f0c <LCD_SetGramScanWay+0x20>)
 8009f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0a:	bf00      	nop
 8009f0c:	08009f2d 	.word	0x08009f2d
 8009f10:	08009f37 	.word	0x08009f37
 8009f14:	08009f41 	.word	0x08009f41
 8009f18:	08009f4b 	.word	0x08009f4b
 8009f1c:	08009f55 	.word	0x08009f55
 8009f20:	08009f5f 	.word	0x08009f5f
 8009f24:	08009f69 	.word	0x08009f69
 8009f28:	08009f73 	.word	0x08009f73
    case L2R_U2D:
        MemoryAccessReg_Data = 0x08;//0x08 | 0X8
 8009f2c:	2308      	movs	r3, #8
 8009f2e:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 8009f30:	2322      	movs	r3, #34	@ 0x22
 8009f32:	81bb      	strh	r3, [r7, #12]
        break;
 8009f34:	e022      	b.n	8009f7c <LCD_SetGramScanWay+0x90>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x08;
 8009f36:	2308      	movs	r3, #8
 8009f38:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 8009f3a:	2362      	movs	r3, #98	@ 0x62
 8009f3c:	81bb      	strh	r3, [r7, #12]
        break;
 8009f3e:	e01d      	b.n	8009f7c <LCD_SetGramScanWay+0x90>
    case R2L_U2D: //0X4
        MemoryAccessReg_Data = 0x08;
 8009f40:	2308      	movs	r3, #8
 8009f42:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 8009f44:	2302      	movs	r3, #2
 8009f46:	81bb      	strh	r3, [r7, #12]
        break;
 8009f48:	e018      	b.n	8009f7c <LCD_SetGramScanWay+0x90>
    case R2L_D2U: //0XC
        MemoryAccessReg_Data = 0x08;
 8009f4a:	2308      	movs	r3, #8
 8009f4c:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 8009f4e:	2342      	movs	r3, #66	@ 0x42
 8009f50:	81bb      	strh	r3, [r7, #12]
        break;
 8009f52:	e013      	b.n	8009f7c <LCD_SetGramScanWay+0x90>
    case U2D_L2R: //0X2
        MemoryAccessReg_Data = 0x28;
 8009f54:	2328      	movs	r3, #40	@ 0x28
 8009f56:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 8009f58:	2322      	movs	r3, #34	@ 0x22
 8009f5a:	81bb      	strh	r3, [r7, #12]
        break;
 8009f5c:	e00e      	b.n	8009f7c <LCD_SetGramScanWay+0x90>
    case U2D_R2L: //0X6
        MemoryAccessReg_Data = 0x28;
 8009f5e:	2328      	movs	r3, #40	@ 0x28
 8009f60:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 8009f62:	2302      	movs	r3, #2
 8009f64:	81bb      	strh	r3, [r7, #12]
        break;
 8009f66:	e009      	b.n	8009f7c <LCD_SetGramScanWay+0x90>
    case D2U_L2R: //0XA
        MemoryAccessReg_Data = 0x28;
 8009f68:	2328      	movs	r3, #40	@ 0x28
 8009f6a:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 8009f6c:	2362      	movs	r3, #98	@ 0x62
 8009f6e:	81bb      	strh	r3, [r7, #12]
        break;
 8009f70:	e004      	b.n	8009f7c <LCD_SetGramScanWay+0x90>
    case D2U_R2L: //0XE
        MemoryAccessReg_Data = 0x28;
 8009f72:	2328      	movs	r3, #40	@ 0x28
 8009f74:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 8009f76:	2342      	movs	r3, #66	@ 0x42
 8009f78:	81bb      	strh	r3, [r7, #12]
        break;
 8009f7a:	bf00      	nop
    }

    //Get the screen scan direction
    sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8009f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8009fec <LCD_SetGramScanWay+0x100>)
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	7113      	strb	r3, [r2, #4]

    //Get GRAM and LCD width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
 8009f82:	79fb      	ldrb	r3, [r7, #7]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d008      	beq.n	8009f9a <LCD_SetGramScanWay+0xae>
 8009f88:	79fb      	ldrb	r3, [r7, #7]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d005      	beq.n	8009f9a <LCD_SetGramScanWay+0xae>
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d002      	beq.n	8009f9a <LCD_SetGramScanWay+0xae>
 8009f94:	79fb      	ldrb	r3, [r7, #7]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d108      	bne.n	8009fac <LCD_SetGramScanWay+0xc0>
        sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8009f9a:	4b14      	ldr	r3, [pc, #80]	@ (8009fec <LCD_SetGramScanWay+0x100>)
 8009f9c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009fa0:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;
 8009fa2:	4b12      	ldr	r3, [pc, #72]	@ (8009fec <LCD_SetGramScanWay+0x100>)
 8009fa4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009fa8:	805a      	strh	r2, [r3, #2]
 8009faa:	e007      	b.n	8009fbc <LCD_SetGramScanWay+0xd0>
    } else {
        sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 8009fac:	4b0f      	ldr	r3, [pc, #60]	@ (8009fec <LCD_SetGramScanWay+0x100>)
 8009fae:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009fb2:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;
 8009fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8009fec <LCD_SetGramScanWay+0x100>)
 8009fb6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009fba:	805a      	strh	r2, [r3, #2]
    }

    // Set the read / write scan direction of the frame memory
    LCD_WriteReg(0xB6);
 8009fbc:	20b6      	movs	r0, #182	@ 0xb6
 8009fbe:	f7ff fe0d 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(0X00);
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	f7ff fe2c 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(DisFunReg_Data);
 8009fc8:	89bb      	ldrh	r3, [r7, #12]
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fe27 	bl	8009c20 <LCD_WriteData>

    LCD_WriteReg(0x36);
 8009fd2:	2036      	movs	r0, #54	@ 0x36
 8009fd4:	f7ff fe02 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(MemoryAccessReg_Data);
 8009fd8:	89fb      	ldrh	r3, [r7, #14]
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7ff fe1f 	bl	8009c20 <LCD_WriteData>
}
 8009fe2:	bf00      	nop
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	20002110 	.word	0x20002110

08009ff0 <LCD_Init>:
/********************************************************************************
function:
	initialization
********************************************************************************/
void LCD_Init(LCD_SCAN_DIR LCD_ScanDir, uint16_t LCD_BLval)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	460a      	mov	r2, r1
 8009ffa:	71fb      	strb	r3, [r7, #7]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	80bb      	strh	r3, [r7, #4]
    //Hardware reset
    LCD_Reset();
 800a000:	f7ff fdba 	bl	8009b78 <LCD_Reset>

	if(LCD_BLval > 65535)
		LCD_BLval = 65535;
	LCD_SetBackLight(LCD_BLval);
 800a004:	88bb      	ldrh	r3, [r7, #4]
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff fdda 	bl	8009bc0 <LCD_SetBackLight>
	
    //Set the initialization register
    LCD_InitReg();
 800a00c:	f7ff fe64 	bl	8009cd8 <LCD_InitReg>

    //Set the display scan and color transfer modes
    LCD_SetGramScanWay( LCD_ScanDir);
 800a010:	79fb      	ldrb	r3, [r7, #7]
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff ff6a 	bl	8009eec <LCD_SetGramScanWay>
    Driver_Delay_ms(200);
 800a018:	20c8      	movs	r0, #200	@ 0xc8
 800a01a:	f7ff f8b1 	bl	8009180 <Driver_Delay_ms>

    //sleep out
    LCD_WriteReg(0x11);
 800a01e:	2011      	movs	r0, #17
 800a020:	f7ff fddc 	bl	8009bdc <LCD_WriteReg>
    Driver_Delay_ms(120);
 800a024:	2078      	movs	r0, #120	@ 0x78
 800a026:	f7ff f8ab 	bl	8009180 <Driver_Delay_ms>

    //Turn on the LCD display
    LCD_WriteReg(0x29);
 800a02a:	2029      	movs	r0, #41	@ 0x29
 800a02c:	f7ff fdd6 	bl	8009bdc <LCD_WriteReg>
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <LCD_SetWindow>:
	Ystart  :   Y direction Start coordinates
	Xend    :   X direction end coordinates
	Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindow(POINT Xstart, POINT Ystart,	POINT Xend, POINT Yend)
{
 800a038:	b590      	push	{r4, r7, lr}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	4611      	mov	r1, r2
 800a044:	461a      	mov	r2, r3
 800a046:	4623      	mov	r3, r4
 800a048:	80fb      	strh	r3, [r7, #6]
 800a04a:	4603      	mov	r3, r0
 800a04c:	80bb      	strh	r3, [r7, #4]
 800a04e:	460b      	mov	r3, r1
 800a050:	807b      	strh	r3, [r7, #2]
 800a052:	4613      	mov	r3, r2
 800a054:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_WriteReg(0x2A);
 800a056:	202a      	movs	r0, #42	@ 0x2a
 800a058:	f7ff fdc0 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(Xstart >> 8);	 				//Set the horizontal starting point to the high octet
 800a05c:	88fb      	ldrh	r3, [r7, #6]
 800a05e:	0a1b      	lsrs	r3, r3, #8
 800a060:	b29b      	uxth	r3, r3
 800a062:	b2db      	uxtb	r3, r3
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fddb 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(Xstart & 0xff);	 				//Set the horizontal starting point to the low octet
 800a06a:	88fb      	ldrh	r3, [r7, #6]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff fdd6 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData((Xend - 1) >> 8);	//Set the horizontal end to the high octet
 800a074:	887b      	ldrh	r3, [r7, #2]
 800a076:	3b01      	subs	r3, #1
 800a078:	121b      	asrs	r3, r3, #8
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff fdcf 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData((Xend - 1) & 0xff);	//Set the horizontal end to the low octet
 800a082:	887b      	ldrh	r3, [r7, #2]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	3b01      	subs	r3, #1
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7ff fdc8 	bl	8009c20 <LCD_WriteData>

    //set the Y coordinates
    LCD_WriteReg(0x2B);
 800a090:	202b      	movs	r0, #43	@ 0x2b
 800a092:	f7ff fda3 	bl	8009bdc <LCD_WriteReg>
    LCD_WriteData(Ystart >> 8);
 800a096:	88bb      	ldrh	r3, [r7, #4]
 800a098:	0a1b      	lsrs	r3, r3, #8
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff fdbe 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData(Ystart & 0xff );
 800a0a4:	88bb      	ldrh	r3, [r7, #4]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff fdb9 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData((Yend - 1) >> 8);
 800a0ae:	883b      	ldrh	r3, [r7, #0]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	121b      	asrs	r3, r3, #8
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff fdb2 	bl	8009c20 <LCD_WriteData>
    LCD_WriteData((Yend - 1) & 0xff);
 800a0bc:	883b      	ldrh	r3, [r7, #0]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7ff fdab 	bl	8009c20 <LCD_WriteData>
    LCD_WriteReg(0x2C);
 800a0ca:	202c      	movs	r0, #44	@ 0x2c
 800a0cc:	f7ff fd86 	bl	8009bdc <LCD_WriteReg>
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd90      	pop	{r4, r7, pc}

0800a0d8 <LCD_SetCursor>:
parameter:
	xStart :   X direction Start coordinates
	xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor(POINT Xpoint, POINT Ypoint)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	460a      	mov	r2, r1
 800a0e2:	80fb      	strh	r3, [r7, #6]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	80bb      	strh	r3, [r7, #4]
    LCD_SetWindow(Xpoint, Ypoint, Xpoint, Ypoint);
 800a0e8:	88bb      	ldrh	r3, [r7, #4]
 800a0ea:	88fa      	ldrh	r2, [r7, #6]
 800a0ec:	88b9      	ldrh	r1, [r7, #4]
 800a0ee:	88f8      	ldrh	r0, [r7, #6]
 800a0f0:	f7ff ffa2 	bl	800a038 <LCD_SetWindow>
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <LCD_SetColor>:
parameter:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void LCD_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor(COLOR Color , POINT Xpoint, POINT Ypoint)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	4603      	mov	r3, r0
 800a104:	80fb      	strh	r3, [r7, #6]
 800a106:	460b      	mov	r3, r1
 800a108:	80bb      	strh	r3, [r7, #4]
 800a10a:	4613      	mov	r3, r2
 800a10c:	807b      	strh	r3, [r7, #2]
    LCD_Write_AllData(Color , (uint32_t)Xpoint * (uint32_t)Ypoint);
 800a10e:	88bb      	ldrh	r3, [r7, #4]
 800a110:	887a      	ldrh	r2, [r7, #2]
 800a112:	fb03 f202 	mul.w	r2, r3, r2
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7ff fda8 	bl	8009c70 <LCD_Write_AllData>
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <LCD_SetPointlColor>:
	Xpoint :   The x coordinate of the point
	Ypoint :   The y coordinate of the point
	Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor( POINT Xpoint, POINT Ypoint, COLOR Color)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	80fb      	strh	r3, [r7, #6]
 800a132:	460b      	mov	r3, r1
 800a134:	80bb      	strh	r3, [r7, #4]
 800a136:	4613      	mov	r3, r2
 800a138:	807b      	strh	r3, [r7, #2]
    if ((Xpoint <= sLCD_DIS.LCD_Dis_Column) && (Ypoint <= sLCD_DIS.LCD_Dis_Page)) {
 800a13a:	4b0d      	ldr	r3, [pc, #52]	@ (800a170 <LCD_SetPointlColor+0x48>)
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	88fa      	ldrh	r2, [r7, #6]
 800a140:	429a      	cmp	r2, r3
 800a142:	d810      	bhi.n	800a166 <LCD_SetPointlColor+0x3e>
 800a144:	4b0a      	ldr	r3, [pc, #40]	@ (800a170 <LCD_SetPointlColor+0x48>)
 800a146:	885b      	ldrh	r3, [r3, #2]
 800a148:	88ba      	ldrh	r2, [r7, #4]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d80b      	bhi.n	800a166 <LCD_SetPointlColor+0x3e>
        LCD_SetCursor (Xpoint, Ypoint);
 800a14e:	88ba      	ldrh	r2, [r7, #4]
 800a150:	88fb      	ldrh	r3, [r7, #6]
 800a152:	4611      	mov	r1, r2
 800a154:	4618      	mov	r0, r3
 800a156:	f7ff ffbf 	bl	800a0d8 <LCD_SetCursor>
        LCD_SetColor(Color, 1, 1);
 800a15a:	887b      	ldrh	r3, [r7, #2]
 800a15c:	2201      	movs	r2, #1
 800a15e:	2101      	movs	r1, #1
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff ffcb 	bl	800a0fc <LCD_SetColor>
    }
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	20002110 	.word	0x20002110

0800a174 <LCD_SetArealColor>:
	Xend   :   End point coordinates
	Yend   :   End point coordinates
	Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR Color)
{
 800a174:	b590      	push	{r4, r7, lr}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4604      	mov	r4, r0
 800a17c:	4608      	mov	r0, r1
 800a17e:	4611      	mov	r1, r2
 800a180:	461a      	mov	r2, r3
 800a182:	4623      	mov	r3, r4
 800a184:	80fb      	strh	r3, [r7, #6]
 800a186:	4603      	mov	r3, r0
 800a188:	80bb      	strh	r3, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	807b      	strh	r3, [r7, #2]
 800a18e:	4613      	mov	r3, r2
 800a190:	803b      	strh	r3, [r7, #0]
    if((Xend > Xstart) && (Yend > Ystart)) {
 800a192:	887a      	ldrh	r2, [r7, #2]
 800a194:	88fb      	ldrh	r3, [r7, #6]
 800a196:	429a      	cmp	r2, r3
 800a198:	d915      	bls.n	800a1c6 <LCD_SetArealColor+0x52>
 800a19a:	883a      	ldrh	r2, [r7, #0]
 800a19c:	88bb      	ldrh	r3, [r7, #4]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d911      	bls.n	800a1c6 <LCD_SetArealColor+0x52>
        LCD_SetWindow(Xstart , Ystart , Xend , Yend  );
 800a1a2:	883b      	ldrh	r3, [r7, #0]
 800a1a4:	887a      	ldrh	r2, [r7, #2]
 800a1a6:	88b9      	ldrh	r1, [r7, #4]
 800a1a8:	88f8      	ldrh	r0, [r7, #6]
 800a1aa:	f7ff ff45 	bl	800a038 <LCD_SetWindow>
        LCD_SetColor ( Color , Xend - Xstart, Yend - Ystart);
 800a1ae:	887a      	ldrh	r2, [r7, #2]
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	b299      	uxth	r1, r3
 800a1b6:	883a      	ldrh	r2, [r7, #0]
 800a1b8:	88bb      	ldrh	r3, [r7, #4]
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	8b3b      	ldrh	r3, [r7, #24]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7ff ff9b 	bl	800a0fc <LCD_SetColor>
    }
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd90      	pop	{r4, r7, pc}
	...

0800a1d0 <LCD_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_Clear(COLOR  Color)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	80fb      	strh	r3, [r7, #6]
    LCD_SetArealColor(0, 0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page , Color);
 800a1da:	4b07      	ldr	r3, [pc, #28]	@ (800a1f8 <LCD_Clear+0x28>)
 800a1dc:	881a      	ldrh	r2, [r3, #0]
 800a1de:	4b06      	ldr	r3, [pc, #24]	@ (800a1f8 <LCD_Clear+0x28>)
 800a1e0:	8859      	ldrh	r1, [r3, #2]
 800a1e2:	88fb      	ldrh	r3, [r7, #6]
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	f7ff ffc2 	bl	800a174 <LCD_SetArealColor>
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20002110 	.word	0x20002110

0800a1fc <GUI_Swop>:
extern LCD_DIS sLCD_DIS;
/******************************************************************************
function:	Coordinate conversion
******************************************************************************/
void GUI_Swop(POINT Point1, POINT Point2)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	460a      	mov	r2, r1
 800a206:	80fb      	strh	r3, [r7, #6]
 800a208:	4613      	mov	r3, r2
 800a20a:	80bb      	strh	r3, [r7, #4]
    POINT Temp;
    Temp = Point1;
 800a20c:	88fb      	ldrh	r3, [r7, #6]
 800a20e:	81fb      	strh	r3, [r7, #14]
    Point1 = Point2;
 800a210:	88bb      	ldrh	r3, [r7, #4]
 800a212:	80fb      	strh	r3, [r7, #6]
    Point2 = Temp;
 800a214:	89fb      	ldrh	r3, [r7, #14]
 800a216:	80bb      	strh	r3, [r7, #4]
}
 800a218:	bf00      	nop
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <GUI_DrawPoint>:
	Color		:   Set color
	Dot_Pixel	:	point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 800a224:	b590      	push	{r4, r7, lr}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	461a      	mov	r2, r3
 800a232:	4623      	mov	r3, r4
 800a234:	80fb      	strh	r3, [r7, #6]
 800a236:	4603      	mov	r3, r0
 800a238:	80bb      	strh	r3, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	807b      	strh	r3, [r7, #2]
 800a23e:	4613      	mov	r3, r2
 800a240:	707b      	strb	r3, [r7, #1]
    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 800a242:	4b34      	ldr	r3, [pc, #208]	@ (800a314 <GUI_DrawPoint+0xf0>)
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	88fa      	ldrh	r2, [r7, #6]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d804      	bhi.n	800a256 <GUI_DrawPoint+0x32>
 800a24c:	4b31      	ldr	r3, [pc, #196]	@ (800a314 <GUI_DrawPoint+0xf0>)
 800a24e:	885b      	ldrh	r3, [r3, #2]
 800a250:	88ba      	ldrh	r2, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	d903      	bls.n	800a25e <GUI_DrawPoint+0x3a>
        DEBUG("GUI_DrawPoint Input exceeds the normal display range\r\n");
 800a256:	4830      	ldr	r0, [pc, #192]	@ (800a318 <GUI_DrawPoint+0xf4>)
 800a258:	f001 ffba 	bl	800c1d0 <puts>
        return;
 800a25c:	e056      	b.n	800a30c <GUI_DrawPoint+0xe8>
    }

    uint16_t XDir_Num , YDir_Num;
    if(DOT_STYLE == DOT_STYLE_DFT) {
 800a25e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d12c      	bne.n	800a2c0 <GUI_DrawPoint+0x9c>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800a266:	2300      	movs	r3, #0
 800a268:	81fb      	strh	r3, [r7, #14]
 800a26a:	e022      	b.n	800a2b2 <GUI_DrawPoint+0x8e>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800a26c:	2300      	movs	r3, #0
 800a26e:	81bb      	strh	r3, [r7, #12]
 800a270:	e016      	b.n	800a2a0 <GUI_DrawPoint+0x7c>
                LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800a272:	88fa      	ldrh	r2, [r7, #6]
 800a274:	89fb      	ldrh	r3, [r7, #14]
 800a276:	4413      	add	r3, r2
 800a278:	b29a      	uxth	r2, r3
 800a27a:	787b      	ldrb	r3, [r7, #1]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	b298      	uxth	r0, r3
 800a282:	88ba      	ldrh	r2, [r7, #4]
 800a284:	89bb      	ldrh	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	b29a      	uxth	r2, r3
 800a28a:	787b      	ldrb	r3, [r7, #1]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	b29b      	uxth	r3, r3
 800a292:	887a      	ldrh	r2, [r7, #2]
 800a294:	4619      	mov	r1, r3
 800a296:	f7ff ff47 	bl	800a128 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800a29a:	89bb      	ldrh	r3, [r7, #12]
 800a29c:	3301      	adds	r3, #1
 800a29e:	81bb      	strh	r3, [r7, #12]
 800a2a0:	89ba      	ldrh	r2, [r7, #12]
 800a2a2:	787b      	ldrb	r3, [r7, #1]
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	dbe2      	blt.n	800a272 <GUI_DrawPoint+0x4e>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800a2ac:	89fb      	ldrh	r3, [r7, #14]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	81fb      	strh	r3, [r7, #14]
 800a2b2:	89fa      	ldrh	r2, [r7, #14]
 800a2b4:	787b      	ldrb	r3, [r7, #1]
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	dbd6      	blt.n	800a26c <GUI_DrawPoint+0x48>
 800a2be:	e025      	b.n	800a30c <GUI_DrawPoint+0xe8>
            }
        }
    } else {
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	81fb      	strh	r3, [r7, #14]
 800a2c4:	e01d      	b.n	800a302 <GUI_DrawPoint+0xde>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	81bb      	strh	r3, [r7, #12]
 800a2ca:	e012      	b.n	800a2f2 <GUI_DrawPoint+0xce>
                LCD_SetPointlColor(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800a2cc:	88fa      	ldrh	r2, [r7, #6]
 800a2ce:	89fb      	ldrh	r3, [r7, #14]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	b298      	uxth	r0, r3
 800a2d8:	88ba      	ldrh	r2, [r7, #4]
 800a2da:	89bb      	ldrh	r3, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	887a      	ldrh	r2, [r7, #2]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	f7ff ff1e 	bl	800a128 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800a2ec:	89bb      	ldrh	r3, [r7, #12]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	81bb      	strh	r3, [r7, #12]
 800a2f2:	787b      	ldrb	r3, [r7, #1]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	89ba      	ldrh	r2, [r7, #12]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d3e7      	bcc.n	800a2cc <GUI_DrawPoint+0xa8>
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800a2fc:	89fb      	ldrh	r3, [r7, #14]
 800a2fe:	3301      	adds	r3, #1
 800a300:	81fb      	strh	r3, [r7, #14]
 800a302:	787b      	ldrb	r3, [r7, #1]
 800a304:	b29b      	uxth	r3, r3
 800a306:	89fa      	ldrh	r2, [r7, #14]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d3dc      	bcc.n	800a2c6 <GUI_DrawPoint+0xa2>
            }
        }
    }
}
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd90      	pop	{r4, r7, pc}
 800a312:	bf00      	nop
 800a314:	20002110 	.word	0x20002110
 800a318:	0800cf64 	.word	0x0800cf64

0800a31c <GUI_DrawLine>:
	Yend   ：End point y coordinate
	Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 800a31c:	b590      	push	{r4, r7, lr}
 800a31e:	b08d      	sub	sp, #52	@ 0x34
 800a320:	af02      	add	r7, sp, #8
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	461a      	mov	r2, r3
 800a32a:	4623      	mov	r3, r4
 800a32c:	80fb      	strh	r3, [r7, #6]
 800a32e:	4603      	mov	r3, r0
 800a330:	80bb      	strh	r3, [r7, #4]
 800a332:	460b      	mov	r3, r1
 800a334:	807b      	strh	r3, [r7, #2]
 800a336:	4613      	mov	r3, r2
 800a338:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800a33a:	4b58      	ldr	r3, [pc, #352]	@ (800a49c <GUI_DrawLine+0x180>)
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	88fa      	ldrh	r2, [r7, #6]
 800a340:	429a      	cmp	r2, r3
 800a342:	d80e      	bhi.n	800a362 <GUI_DrawLine+0x46>
 800a344:	4b55      	ldr	r3, [pc, #340]	@ (800a49c <GUI_DrawLine+0x180>)
 800a346:	885b      	ldrh	r3, [r3, #2]
 800a348:	88ba      	ldrh	r2, [r7, #4]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d809      	bhi.n	800a362 <GUI_DrawLine+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800a34e:	4b53      	ldr	r3, [pc, #332]	@ (800a49c <GUI_DrawLine+0x180>)
 800a350:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800a352:	887a      	ldrh	r2, [r7, #2]
 800a354:	429a      	cmp	r2, r3
 800a356:	d804      	bhi.n	800a362 <GUI_DrawLine+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800a358:	4b50      	ldr	r3, [pc, #320]	@ (800a49c <GUI_DrawLine+0x180>)
 800a35a:	885b      	ldrh	r3, [r3, #2]
 800a35c:	883a      	ldrh	r2, [r7, #0]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d903      	bls.n	800a36a <GUI_DrawLine+0x4e>
        DEBUG("GUI_DrawLine Input exceeds the normal display range\r\n");
 800a362:	484f      	ldr	r0, [pc, #316]	@ (800a4a0 <GUI_DrawLine+0x184>)
 800a364:	f001 ff34 	bl	800c1d0 <puts>
        return;
 800a368:	e094      	b.n	800a494 <GUI_DrawLine+0x178>
    }

    if(Xstart > Xend)
 800a36a:	88fa      	ldrh	r2, [r7, #6]
 800a36c:	887b      	ldrh	r3, [r7, #2]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d905      	bls.n	800a37e <GUI_DrawLine+0x62>
        GUI_Swop(Xstart, Xend);
 800a372:	887a      	ldrh	r2, [r7, #2]
 800a374:	88fb      	ldrh	r3, [r7, #6]
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff ff3f 	bl	800a1fc <GUI_Swop>
    if(Ystart > Yend)
 800a37e:	88ba      	ldrh	r2, [r7, #4]
 800a380:	883b      	ldrh	r3, [r7, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d905      	bls.n	800a392 <GUI_DrawLine+0x76>
        GUI_Swop(Ystart, Yend);
 800a386:	883a      	ldrh	r2, [r7, #0]
 800a388:	88bb      	ldrh	r3, [r7, #4]
 800a38a:	4611      	mov	r1, r2
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7ff ff35 	bl	800a1fc <GUI_Swop>

    POINT Xpoint = Xstart;
 800a392:	88fb      	ldrh	r3, [r7, #6]
 800a394:	84fb      	strh	r3, [r7, #38]	@ 0x26
    POINT Ypoint = Ystart;
 800a396:	88bb      	ldrh	r3, [r7, #4]
 800a398:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800a39a:	887a      	ldrh	r2, [r7, #2]
 800a39c:	88fb      	ldrh	r3, [r7, #6]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	bfb8      	it	lt
 800a3a4:	425b      	neglt	r3, r3
 800a3a6:	61bb      	str	r3, [r7, #24]
    int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800a3a8:	883a      	ldrh	r2, [r7, #0]
 800a3aa:	88bb      	ldrh	r3, [r7, #4]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	bfb8      	it	lt
 800a3b2:	425b      	neglt	r3, r3
 800a3b4:	425b      	negs	r3, r3
 800a3b6:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int32_t XAddway = Xstart < Xend ? 1 : -1;
 800a3b8:	88fa      	ldrh	r2, [r7, #6]
 800a3ba:	887b      	ldrh	r3, [r7, #2]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d201      	bcs.n	800a3c4 <GUI_DrawLine+0xa8>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e001      	b.n	800a3c8 <GUI_DrawLine+0xac>
 800a3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c8:	613b      	str	r3, [r7, #16]
    int32_t YAddway = Ystart < Yend ? 1 : -1;
 800a3ca:	88ba      	ldrh	r2, [r7, #4]
 800a3cc:	883b      	ldrh	r3, [r7, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d201      	bcs.n	800a3d6 <GUI_DrawLine+0xba>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e001      	b.n	800a3da <GUI_DrawLine+0xbe>
 800a3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3da:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int32_t Esp = dx + dy;
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	623b      	str	r3, [r7, #32]
    int8_t Line_Style_Temp = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	77fb      	strb	r3, [r7, #31]

    for(;;) {
        Line_Style_Temp++;
 800a3e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if(Line_Style == LINE_DOTTED && Line_Style_Temp % 3 == 0) {
 800a3f4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d11a      	bne.n	800a432 <GUI_DrawLine+0x116>
 800a3fc:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800a400:	4b28      	ldr	r3, [pc, #160]	@ (800a4a4 <GUI_DrawLine+0x188>)
 800a402:	fb83 3102 	smull	r3, r1, r3, r2
 800a406:	17d3      	asrs	r3, r2, #31
 800a408:	1ac9      	subs	r1, r1, r3
 800a40a:	460b      	mov	r3, r1
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	440b      	add	r3, r1
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	b25b      	sxtb	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10c      	bne.n	800a432 <GUI_DrawLine+0x116>
            //DEBUG("LINE_DOTTED\r\n");
            GUI_DrawPoint(Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 800a418:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a41c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800a41e:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800a420:	2201      	movs	r2, #1
 800a422:	9200      	str	r2, [sp, #0]
 800a424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a428:	f7ff fefc 	bl	800a224 <GUI_DrawPoint>
            Line_Style_Temp = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	77fb      	strb	r3, [r7, #31]
 800a430:	e008      	b.n	800a444 <GUI_DrawLine+0x128>
        } else {
            GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 800a432:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a436:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800a438:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800a43a:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800a43c:	2401      	movs	r4, #1
 800a43e:	9400      	str	r4, [sp, #0]
 800a440:	f7ff fef0 	bl	800a224 <GUI_DrawPoint>
        }
        if(2 * Esp >= dy) {
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	dc0c      	bgt.n	800a468 <GUI_DrawLine+0x14c>
            if(Xpoint == Xend) break;
 800a44e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a450:	887b      	ldrh	r3, [r7, #2]
 800a452:	429a      	cmp	r2, r3
 800a454:	d01b      	beq.n	800a48e <GUI_DrawLine+0x172>
            Esp += dy;
 800a456:	6a3a      	ldr	r2, [r7, #32]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	4413      	add	r3, r2
 800a45c:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	b29a      	uxth	r2, r3
 800a462:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a464:	4413      	add	r3, r2
 800a466:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if(2 * Esp <= dx) {
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	429a      	cmp	r2, r3
 800a470:	dbba      	blt.n	800a3e8 <GUI_DrawLine+0xcc>
            if(Ypoint == Yend) break;
 800a472:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a474:	883b      	ldrh	r3, [r7, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d00b      	beq.n	800a492 <GUI_DrawLine+0x176>
            Esp += dx;
 800a47a:	6a3a      	ldr	r2, [r7, #32]
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	4413      	add	r3, r2
 800a480:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	b29a      	uxth	r2, r3
 800a486:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a488:	4413      	add	r3, r2
 800a48a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        Line_Style_Temp++;
 800a48c:	e7ac      	b.n	800a3e8 <GUI_DrawLine+0xcc>
            if(Xpoint == Xend) break;
 800a48e:	bf00      	nop
 800a490:	e000      	b.n	800a494 <GUI_DrawLine+0x178>
            if(Ypoint == Yend) break;
 800a492:	bf00      	nop
        }
    }
}
 800a494:	372c      	adds	r7, #44	@ 0x2c
 800a496:	46bd      	mov	sp, r7
 800a498:	bd90      	pop	{r4, r7, pc}
 800a49a:	bf00      	nop
 800a49c:	20002110 	.word	0x20002110
 800a4a0:	0800cfa4 	.word	0x0800cfa4
 800a4a4:	55555556 	.word	0x55555556

0800a4a8 <GUI_DrawRectangle>:
	Color  ：The color of the Rectangular segment
	Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel)
{
 800a4a8:	b590      	push	{r4, r7, lr}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af04      	add	r7, sp, #16
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	4623      	mov	r3, r4
 800a4b8:	80fb      	strh	r3, [r7, #6]
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	80bb      	strh	r3, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	807b      	strh	r3, [r7, #2]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800a4c6:	4b3a      	ldr	r3, [pc, #232]	@ (800a5b0 <GUI_DrawRectangle+0x108>)
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	88fa      	ldrh	r2, [r7, #6]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d80e      	bhi.n	800a4ee <GUI_DrawRectangle+0x46>
 800a4d0:	4b37      	ldr	r3, [pc, #220]	@ (800a5b0 <GUI_DrawRectangle+0x108>)
 800a4d2:	885b      	ldrh	r3, [r3, #2]
 800a4d4:	88ba      	ldrh	r2, [r7, #4]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d809      	bhi.n	800a4ee <GUI_DrawRectangle+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800a4da:	4b35      	ldr	r3, [pc, #212]	@ (800a5b0 <GUI_DrawRectangle+0x108>)
 800a4dc:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800a4de:	887a      	ldrh	r2, [r7, #2]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d804      	bhi.n	800a4ee <GUI_DrawRectangle+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800a4e4:	4b32      	ldr	r3, [pc, #200]	@ (800a5b0 <GUI_DrawRectangle+0x108>)
 800a4e6:	885b      	ldrh	r3, [r3, #2]
 800a4e8:	883a      	ldrh	r2, [r7, #0]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d903      	bls.n	800a4f6 <GUI_DrawRectangle+0x4e>
        DEBUG("Input exceeds the normal display range\r\n");
 800a4ee:	4831      	ldr	r0, [pc, #196]	@ (800a5b4 <GUI_DrawRectangle+0x10c>)
 800a4f0:	f001 fe6e 	bl	800c1d0 <puts>
        return;
 800a4f4:	e058      	b.n	800a5a8 <GUI_DrawRectangle+0x100>
    }

    if(Xstart > Xend)
 800a4f6:	88fa      	ldrh	r2, [r7, #6]
 800a4f8:	887b      	ldrh	r3, [r7, #2]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d905      	bls.n	800a50a <GUI_DrawRectangle+0x62>
        GUI_Swop(Xstart, Xend);
 800a4fe:	887a      	ldrh	r2, [r7, #2]
 800a500:	88fb      	ldrh	r3, [r7, #6]
 800a502:	4611      	mov	r1, r2
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff fe79 	bl	800a1fc <GUI_Swop>
    if(Ystart > Yend)
 800a50a:	88ba      	ldrh	r2, [r7, #4]
 800a50c:	883b      	ldrh	r3, [r7, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d905      	bls.n	800a51e <GUI_DrawRectangle+0x76>
        GUI_Swop(Ystart, Yend);
 800a512:	883a      	ldrh	r2, [r7, #0]
 800a514:	88bb      	ldrh	r3, [r7, #4]
 800a516:	4611      	mov	r1, r2
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff fe6f 	bl	800a1fc <GUI_Swop>

    
    if(Filled ) {
 800a51e:	7f3b      	ldrb	r3, [r7, #28]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d009      	beq.n	800a538 <GUI_DrawRectangle+0x90>
		POINT Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
        }
	#elif HIGH_Speed_Show
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 800a524:	883c      	ldrh	r4, [r7, #0]
 800a526:	887a      	ldrh	r2, [r7, #2]
 800a528:	88b9      	ldrh	r1, [r7, #4]
 800a52a:	88f8      	ldrh	r0, [r7, #6]
 800a52c:	8b3b      	ldrh	r3, [r7, #24]
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	4623      	mov	r3, r4
 800a532:	f7ff fe1f 	bl	800a174 <LCD_SetArealColor>
 800a536:	e037      	b.n	800a5a8 <GUI_DrawRectangle+0x100>
	#endif
    } else {
        GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 800a538:	88bc      	ldrh	r4, [r7, #4]
 800a53a:	887a      	ldrh	r2, [r7, #2]
 800a53c:	88b9      	ldrh	r1, [r7, #4]
 800a53e:	88f8      	ldrh	r0, [r7, #6]
 800a540:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a544:	9302      	str	r3, [sp, #8]
 800a546:	2300      	movs	r3, #0
 800a548:	9301      	str	r3, [sp, #4]
 800a54a:	8b3b      	ldrh	r3, [r7, #24]
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	4623      	mov	r3, r4
 800a550:	f7ff fee4 	bl	800a31c <GUI_DrawLine>
        GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 800a554:	883c      	ldrh	r4, [r7, #0]
 800a556:	88fa      	ldrh	r2, [r7, #6]
 800a558:	88b9      	ldrh	r1, [r7, #4]
 800a55a:	88f8      	ldrh	r0, [r7, #6]
 800a55c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a560:	9302      	str	r3, [sp, #8]
 800a562:	2300      	movs	r3, #0
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	8b3b      	ldrh	r3, [r7, #24]
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	4623      	mov	r3, r4
 800a56c:	f7ff fed6 	bl	800a31c <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 800a570:	88bc      	ldrh	r4, [r7, #4]
 800a572:	887a      	ldrh	r2, [r7, #2]
 800a574:	8839      	ldrh	r1, [r7, #0]
 800a576:	8878      	ldrh	r0, [r7, #2]
 800a578:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a57c:	9302      	str	r3, [sp, #8]
 800a57e:	2300      	movs	r3, #0
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	8b3b      	ldrh	r3, [r7, #24]
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	4623      	mov	r3, r4
 800a588:	f7ff fec8 	bl	800a31c <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 800a58c:	883c      	ldrh	r4, [r7, #0]
 800a58e:	88fa      	ldrh	r2, [r7, #6]
 800a590:	8839      	ldrh	r1, [r7, #0]
 800a592:	8878      	ldrh	r0, [r7, #2]
 800a594:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a598:	9302      	str	r3, [sp, #8]
 800a59a:	2300      	movs	r3, #0
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	8b3b      	ldrh	r3, [r7, #24]
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	4623      	mov	r3, r4
 800a5a4:	f7ff feba 	bl	800a31c <GUI_DrawLine>
    }
}
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd90      	pop	{r4, r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20002110 	.word	0x20002110
 800a5b4:	0800cfe4 	.word	0x0800cfe4

0800a5b8 <GUI_DisChar>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	@ 0x28
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	607b      	str	r3, [r7, #4]
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	81fb      	strh	r3, [r7, #14]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	81bb      	strh	r3, [r7, #12]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	72fb      	strb	r3, [r7, #11]
    POINT Page, Column;

    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 800a5cc:	4b50      	ldr	r3, [pc, #320]	@ (800a710 <GUI_DisChar+0x158>)
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	89fa      	ldrh	r2, [r7, #14]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d804      	bhi.n	800a5e0 <GUI_DisChar+0x28>
 800a5d6:	4b4e      	ldr	r3, [pc, #312]	@ (800a710 <GUI_DisChar+0x158>)
 800a5d8:	885b      	ldrh	r3, [r3, #2]
 800a5da:	89ba      	ldrh	r2, [r7, #12]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d903      	bls.n	800a5e8 <GUI_DisChar+0x30>
        DEBUG("GUI_DisChar Input exceeds the normal display range\r\n");
 800a5e0:	484c      	ldr	r0, [pc, #304]	@ (800a714 <GUI_DisChar+0x15c>)
 800a5e2:	f001 fdf5 	bl	800c1d0 <puts>
        return;
 800a5e6:	e08f      	b.n	800a708 <GUI_DisChar+0x150>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800a5e8:	7afb      	ldrb	r3, [r7, #11]
 800a5ea:	3b20      	subs	r3, #32
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	88d2      	ldrh	r2, [r2, #6]
 800a5f0:	fb02 f303 	mul.w	r3, r2, r3
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	8892      	ldrh	r2, [r2, #4]
 800a5f8:	08d2      	lsrs	r2, r2, #3
 800a5fa:	b292      	uxth	r2, r2
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	8892      	ldrh	r2, [r2, #4]
 800a602:	f002 0207 	and.w	r2, r2, #7
 800a606:	b292      	uxth	r2, r2
 800a608:	2a00      	cmp	r2, #0
 800a60a:	bf14      	ite	ne
 800a60c:	2201      	movne	r2, #1
 800a60e:	2200      	moveq	r2, #0
 800a610:	b2d2      	uxtb	r2, r2
 800a612:	440a      	add	r2, r1
 800a614:	fb02 f303 	mul.w	r3, r2, r3
 800a618:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	4413      	add	r3, r2
 800a622:	61bb      	str	r3, [r7, #24]

    for(Page = 0; Page < Font->Height; Page ++ ) {
 800a624:	2300      	movs	r3, #0
 800a626:	83fb      	strh	r3, [r7, #30]
 800a628:	e069      	b.n	800a6fe <GUI_DisChar+0x146>
        for(Column = 0; Column < Font->Width; Column ++ ) {
 800a62a:	2300      	movs	r3, #0
 800a62c:	83bb      	strh	r3, [r7, #28]
 800a62e:	e054      	b.n	800a6da <GUI_DisChar+0x122>

            //To determine whether the font background color and screen background color is consistent
            if(FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800a630:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a636:	4293      	cmp	r3, r2
 800a638:	d11a      	bne.n	800a670 <GUI_DisChar+0xb8>
                if(*ptr & (0x80 >> (Column % 8)))
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	4619      	mov	r1, r3
 800a640:	8bbb      	ldrh	r3, [r7, #28]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	2280      	movs	r2, #128	@ 0x80
 800a648:	fa42 f303 	asr.w	r3, r2, r3
 800a64c:	400b      	ands	r3, r1
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d037      	beq.n	800a6c2 <GUI_DisChar+0x10a>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800a652:	89fa      	ldrh	r2, [r7, #14]
 800a654:	8bbb      	ldrh	r3, [r7, #28]
 800a656:	4413      	add	r3, r2
 800a658:	b298      	uxth	r0, r3
 800a65a:	89ba      	ldrh	r2, [r7, #12]
 800a65c:	8bfb      	ldrh	r3, [r7, #30]
 800a65e:	4413      	add	r3, r2
 800a660:	b299      	uxth	r1, r3
 800a662:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a664:	2301      	movs	r3, #1
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	2301      	movs	r3, #1
 800a66a:	f7ff fddb 	bl	800a224 <GUI_DrawPoint>
 800a66e:	e028      	b.n	800a6c2 <GUI_DisChar+0x10a>
            } else {
                if(*ptr & (0x80 >> (Column % 8))) {
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	4619      	mov	r1, r3
 800a676:	8bbb      	ldrh	r3, [r7, #28]
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	2280      	movs	r2, #128	@ 0x80
 800a67e:	fa42 f303 	asr.w	r3, r2, r3
 800a682:	400b      	ands	r3, r1
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00e      	beq.n	800a6a6 <GUI_DisChar+0xee>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800a688:	89fa      	ldrh	r2, [r7, #14]
 800a68a:	8bbb      	ldrh	r3, [r7, #28]
 800a68c:	4413      	add	r3, r2
 800a68e:	b298      	uxth	r0, r3
 800a690:	89ba      	ldrh	r2, [r7, #12]
 800a692:	8bfb      	ldrh	r3, [r7, #30]
 800a694:	4413      	add	r3, r2
 800a696:	b299      	uxth	r1, r3
 800a698:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a69a:	2301      	movs	r3, #1
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	2301      	movs	r3, #1
 800a6a0:	f7ff fdc0 	bl	800a224 <GUI_DrawPoint>
 800a6a4:	e00d      	b.n	800a6c2 <GUI_DisChar+0x10a>
                } else {
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800a6a6:	89fa      	ldrh	r2, [r7, #14]
 800a6a8:	8bbb      	ldrh	r3, [r7, #28]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	b298      	uxth	r0, r3
 800a6ae:	89ba      	ldrh	r2, [r7, #12]
 800a6b0:	8bfb      	ldrh	r3, [r7, #30]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	b299      	uxth	r1, r3
 800a6b6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	2301      	movs	r3, #1
 800a6be:	f7ff fdb1 	bl	800a224 <GUI_DrawPoint>
                }
            }
            //One pixel is 8 bits
            if(Column % 8 == 7)
 800a6c2:	8bbb      	ldrh	r3, [r7, #28]
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	2b07      	cmp	r3, #7
 800a6cc:	d102      	bne.n	800a6d4 <GUI_DisChar+0x11c>
                ptr++;
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	61bb      	str	r3, [r7, #24]
        for(Column = 0; Column < Font->Width; Column ++ ) {
 800a6d4:	8bbb      	ldrh	r3, [r7, #28]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	83bb      	strh	r3, [r7, #28]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	889b      	ldrh	r3, [r3, #4]
 800a6de:	8bba      	ldrh	r2, [r7, #28]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d3a5      	bcc.n	800a630 <GUI_DisChar+0x78>
        }/* Write a line */
        if(Font->Width % 8 != 0)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	889b      	ldrh	r3, [r3, #4]
 800a6e8:	f003 0307 	and.w	r3, r3, #7
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <GUI_DisChar+0x140>
            ptr++;
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	61bb      	str	r3, [r7, #24]
    for(Page = 0; Page < Font->Height; Page ++ ) {
 800a6f8:	8bfb      	ldrh	r3, [r7, #30]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	83fb      	strh	r3, [r7, #30]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	88db      	ldrh	r3, [r3, #6]
 800a702:	8bfa      	ldrh	r2, [r7, #30]
 800a704:	429a      	cmp	r2, r3
 800a706:	d390      	bcc.n	800a62a <GUI_DisChar+0x72>
    }/* Write all */
}
 800a708:	3720      	adds	r7, #32
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20002110 	.word	0x20002110
 800a714:	0800d054 	.word	0x0800d054

0800a718 <GUI_DisString_EN>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	60ba      	str	r2, [r7, #8]
 800a720:	607b      	str	r3, [r7, #4]
 800a722:	4603      	mov	r3, r0
 800a724:	81fb      	strh	r3, [r7, #14]
 800a726:	460b      	mov	r3, r1
 800a728:	81bb      	strh	r3, [r7, #12]
    POINT Xpoint = Xstart;
 800a72a:	89fb      	ldrh	r3, [r7, #14]
 800a72c:	82fb      	strh	r3, [r7, #22]
    POINT Ypoint = Ystart;
 800a72e:	89bb      	ldrh	r3, [r7, #12]
 800a730:	82bb      	strh	r3, [r7, #20]

    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page) {
 800a732:	4b21      	ldr	r3, [pc, #132]	@ (800a7b8 <GUI_DisString_EN+0xa0>)
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	89fa      	ldrh	r2, [r7, #14]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d804      	bhi.n	800a746 <GUI_DisString_EN+0x2e>
 800a73c:	4b1e      	ldr	r3, [pc, #120]	@ (800a7b8 <GUI_DisString_EN+0xa0>)
 800a73e:	885b      	ldrh	r3, [r3, #2]
 800a740:	89ba      	ldrh	r2, [r7, #12]
 800a742:	429a      	cmp	r2, r3
 800a744:	d931      	bls.n	800a7aa <GUI_DisString_EN+0x92>
        DEBUG("GUI_DisString_EN Input exceeds the normal display range\r\n");
 800a746:	481d      	ldr	r0, [pc, #116]	@ (800a7bc <GUI_DisString_EN+0xa4>)
 800a748:	f001 fd42 	bl	800c1d0 <puts>
        return;
 800a74c:	e031      	b.n	800a7b2 <GUI_DisString_EN+0x9a>
    }

    while(* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
        if((Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ) {
 800a74e:	8afb      	ldrh	r3, [r7, #22]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	8892      	ldrh	r2, [r2, #4]
 800a754:	4413      	add	r3, r2
 800a756:	4a18      	ldr	r2, [pc, #96]	@ (800a7b8 <GUI_DisString_EN+0xa0>)
 800a758:	8812      	ldrh	r2, [r2, #0]
 800a75a:	4293      	cmp	r3, r2
 800a75c:	dd06      	ble.n	800a76c <GUI_DisString_EN+0x54>
            Xpoint = Xstart;
 800a75e:	89fb      	ldrh	r3, [r7, #14]
 800a760:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	88da      	ldrh	r2, [r3, #6]
 800a766:	8abb      	ldrh	r3, [r7, #20]
 800a768:	4413      	add	r3, r2
 800a76a:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if((Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ) {
 800a76c:	8abb      	ldrh	r3, [r7, #20]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	88d2      	ldrh	r2, [r2, #6]
 800a772:	4413      	add	r3, r2
 800a774:	4a10      	ldr	r2, [pc, #64]	@ (800a7b8 <GUI_DisString_EN+0xa0>)
 800a776:	8852      	ldrh	r2, [r2, #2]
 800a778:	4293      	cmp	r3, r2
 800a77a:	dd03      	ble.n	800a784 <GUI_DisString_EN+0x6c>
            Xpoint = Xstart;
 800a77c:	89fb      	ldrh	r3, [r7, #14]
 800a77e:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800a780:	89bb      	ldrh	r3, [r7, #12]
 800a782:	82bb      	strh	r3, [r7, #20]
        }
        GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	781a      	ldrb	r2, [r3, #0]
 800a788:	8ab9      	ldrh	r1, [r7, #20]
 800a78a:	8af8      	ldrh	r0, [r7, #22]
 800a78c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	8c3b      	ldrh	r3, [r7, #32]
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f7ff ff0f 	bl	800a5b8 <GUI_DisChar>

        //The next character of the address
        pString ++;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	3301      	adds	r3, #1
 800a79e:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	889a      	ldrh	r2, [r3, #4]
 800a7a4:	8afb      	ldrh	r3, [r7, #22]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	82fb      	strh	r3, [r7, #22]
    while(* pString != '\0') {
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1cd      	bne.n	800a74e <GUI_DisString_EN+0x36>
    }
}
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20002110 	.word	0x20002110
 800a7bc:	0800d090 	.word	0x0800d090

0800a7c0 <GUI_DisFloatNum>:
}


void GUI_DisFloatNum(POINT Xpoint, POINT Ypoint, float Nummber,
                sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b094      	sub	sp, #80	@ 0x50
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	ed87 0a04 	vstr	s0, [r7, #16]
 800a7ca:	60fa      	str	r2, [r7, #12]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	82fb      	strh	r3, [r7, #22]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	82bb      	strh	r3, [r7, #20]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	817b      	strh	r3, [r7, #10]
    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 800a7da:	4b7f      	ldr	r3, [pc, #508]	@ (800a9d8 <GUI_DisFloatNum+0x218>)
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	8afa      	ldrh	r2, [r7, #22]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d804      	bhi.n	800a7ee <GUI_DisFloatNum+0x2e>
 800a7e4:	4b7c      	ldr	r3, [pc, #496]	@ (800a9d8 <GUI_DisFloatNum+0x218>)
 800a7e6:	885b      	ldrh	r3, [r3, #2]
 800a7e8:	8aba      	ldrh	r2, [r7, #20]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d903      	bls.n	800a7f6 <GUI_DisFloatNum+0x36>
        DEBUG("GUI_DisNum Input exceeds the normal display range\r\n");
 800a7ee:	487b      	ldr	r0, [pc, #492]	@ (800a9dc <GUI_DisFloatNum+0x21c>)
 800a7f0:	f001 fcee 	bl	800c1d0 <puts>
 800a7f4:	e0ed      	b.n	800a9d2 <GUI_DisFloatNum+0x212>
        return;
    }

    // Проверяем, является ли число отрицательным
    uint8_t isNegative = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (Nummber < 0) {
 800a7fc:	edd7 7a04 	vldr	s15, [r7, #16]
 800a800:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a808:	d508      	bpl.n	800a81c <GUI_DisFloatNum+0x5c>
        isNegative = 1;
 800a80a:	2301      	movs	r3, #1
 800a80c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        Nummber = -Nummber;
 800a810:	edd7 7a04 	vldr	s15, [r7, #16]
 800a814:	eef1 7a67 	vneg.f32	s15, s15
 800a818:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    // Разделяем число на целую и дробную части
    uint8_t integerPart = (int)Nummber;
 800a81c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a824:	edc7 7a01 	vstr	s15, [r7, #4]
 800a828:	793b      	ldrb	r3, [r7, #4]
 800a82a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    float fractionalPart = Nummber - integerPart;
 800a82e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a83a:	ed97 7a04 	vldr	s14, [r7, #16]
 800a83e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a842:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Извлекаем сотые доли (округляем до двух знаков)
    uint8_t hundredths = (int)(fractionalPart * 100 + 0.5f); // +0.5 для округления
 800a846:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800a84a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800a9e0 <GUI_DisFloatNum+0x220>
 800a84e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a852:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a85a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a85e:	edc7 7a01 	vstr	s15, [r7, #4]
 800a862:	793b      	ldrb	r3, [r7, #4]
 800a864:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Обрабатываем целую часть (разбиваем на цифры)
    uint8_t intDigits[10] = {0}; // Максимум 10 цифр для int
 800a868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a86c:	2200      	movs	r2, #0
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	605a      	str	r2, [r3, #4]
 800a872:	811a      	strh	r2, [r3, #8]
    uint8_t Str_Array[10] = {0};
 800a874:	f107 0318 	add.w	r3, r7, #24
 800a878:	2200      	movs	r2, #0
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	605a      	str	r2, [r3, #4]
 800a87e:	811a      	strh	r2, [r3, #8]
    uint8_t *pStr = Str_Array;
 800a880:	f107 0318 	add.w	r3, r7, #24
 800a884:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t intLen = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    // Если целая часть = 0, то всё равно записываем 0
    if (integerPart == 0) {
 800a88c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a890:	2b00      	cmp	r3, #0
 800a892:	d12d      	bne.n	800a8f0 <GUI_DisFloatNum+0x130>
        intDigits[intLen++] = 0;
 800a894:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 800a89e:	3340      	adds	r3, #64	@ 0x40
 800a8a0:	f107 0208 	add.w	r2, r7, #8
 800a8a4:	4413      	add	r3, r2
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f803 2c24 	strb.w	r2, [r3, #-36]
 800a8ac:	e028      	b.n	800a900 <GUI_DisFloatNum+0x140>
    } else {
        while (integerPart > 0 && intLen < 10) {
            intDigits[intLen++] = integerPart % 10;
 800a8ae:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a8b2:	1c5a      	adds	r2, r3, #1
 800a8b4:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800a8be:	4b49      	ldr	r3, [pc, #292]	@ (800a9e4 <GUI_DisFloatNum+0x224>)
 800a8c0:	fba3 1302 	umull	r1, r3, r3, r2
 800a8c4:	08d9      	lsrs	r1, r3, #3
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	440b      	add	r3, r1
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	f100 0340 	add.w	r3, r0, #64	@ 0x40
 800a8d6:	f107 0108 	add.w	r1, r7, #8
 800a8da:	440b      	add	r3, r1
 800a8dc:	f803 2c24 	strb.w	r2, [r3, #-36]
            integerPart /= 10;
 800a8e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a8e4:	4a3f      	ldr	r2, [pc, #252]	@ (800a9e4 <GUI_DisFloatNum+0x224>)
 800a8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ea:	08db      	lsrs	r3, r3, #3
 800a8ec:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        while (integerPart > 0 && intLen < 10) {
 800a8f0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <GUI_DisFloatNum+0x140>
 800a8f8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a8fc:	2b09      	cmp	r3, #9
 800a8fe:	d9d6      	bls.n	800a8ae <GUI_DisFloatNum+0xee>
        }
    }

    // Записываем цифры целой части в обратном порядке
    size_t pos = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	643b      	str	r3, [r7, #64]	@ 0x40
    if (isNegative) {
 800a904:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d009      	beq.n	800a920 <GUI_DisFloatNum+0x160>
    	Str_Array[pos++] = '-'; // Можно заменить на 255 или другое значение, если нужны только цифры
 800a90c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	643a      	str	r2, [r7, #64]	@ 0x40
 800a912:	3340      	adds	r3, #64	@ 0x40
 800a914:	f107 0208 	add.w	r2, r7, #8
 800a918:	4413      	add	r3, r2
 800a91a:	222d      	movs	r2, #45	@ 0x2d
 800a91c:	f803 2c30 	strb.w	r2, [r3, #-48]
    }

    for (int i = intLen - 1; i >= 0; i--) {
 800a920:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a924:	3b01      	subs	r3, #1
 800a926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a928:	e012      	b.n	800a950 <GUI_DisFloatNum+0x190>
    	Str_Array[pos++] = intDigits[i] + '0';
 800a92a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800a92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a930:	4413      	add	r3, r2
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a936:	1c59      	adds	r1, r3, #1
 800a938:	6439      	str	r1, [r7, #64]	@ 0x40
 800a93a:	3230      	adds	r2, #48	@ 0x30
 800a93c:	b2d2      	uxtb	r2, r2
 800a93e:	3340      	adds	r3, #64	@ 0x40
 800a940:	f107 0108 	add.w	r1, r7, #8
 800a944:	440b      	add	r3, r1
 800a946:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (int i = intLen - 1; i >= 0; i--) {
 800a94a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a94c:	3b01      	subs	r3, #1
 800a94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a952:	2b00      	cmp	r3, #0
 800a954:	dae9      	bge.n	800a92a <GUI_DisFloatNum+0x16a>
    }

    // Добавляем запятую
    Str_Array[pos++] = ','; // ASCII-код ',' = 44
 800a956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a958:	1c5a      	adds	r2, r3, #1
 800a95a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a95c:	3340      	adds	r3, #64	@ 0x40
 800a95e:	f107 0208 	add.w	r2, r7, #8
 800a962:	4413      	add	r3, r2
 800a964:	222c      	movs	r2, #44	@ 0x2c
 800a966:	f803 2c30 	strb.w	r2, [r3, #-48]

    // Добавляем сотые доли (две цифры)
    Str_Array[pos++] = hundredths / 10 + '0';  // Десятые
 800a96a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a96e:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e4 <GUI_DisFloatNum+0x224>)
 800a970:	fba2 2303 	umull	r2, r3, r2, r3
 800a974:	08db      	lsrs	r3, r3, #3
 800a976:	b2da      	uxtb	r2, r3
 800a978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a97a:	1c59      	adds	r1, r3, #1
 800a97c:	6439      	str	r1, [r7, #64]	@ 0x40
 800a97e:	3230      	adds	r2, #48	@ 0x30
 800a980:	b2d2      	uxtb	r2, r2
 800a982:	3340      	adds	r3, #64	@ 0x40
 800a984:	f107 0108 	add.w	r1, r7, #8
 800a988:	440b      	add	r3, r1
 800a98a:	f803 2c30 	strb.w	r2, [r3, #-48]
    Str_Array[pos++] = hundredths % 10 + '0';  // Сотые
 800a98e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800a992:	4b14      	ldr	r3, [pc, #80]	@ (800a9e4 <GUI_DisFloatNum+0x224>)
 800a994:	fba3 1302 	umull	r1, r3, r3, r2
 800a998:	08d9      	lsrs	r1, r3, #3
 800a99a:	460b      	mov	r3, r1
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	440b      	add	r3, r1
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a8:	1c59      	adds	r1, r3, #1
 800a9aa:	6439      	str	r1, [r7, #64]	@ 0x40
 800a9ac:	3230      	adds	r2, #48	@ 0x30
 800a9ae:	b2d2      	uxtb	r2, r2
 800a9b0:	3340      	adds	r3, #64	@ 0x40
 800a9b2:	f107 0108 	add.w	r1, r7, #8
 800a9b6:	440b      	add	r3, r1
 800a9b8:	f803 2c30 	strb.w	r2, [r3, #-48]

    //show
    GUI_DisString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground );
 800a9bc:	8ab9      	ldrh	r1, [r7, #20]
 800a9be:	8af8      	ldrh	r0, [r7, #22]
 800a9c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	897b      	ldrh	r3, [r7, #10]
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9ce:	f7ff fea3 	bl	800a718 <GUI_DisString_EN>
}
 800a9d2:	3748      	adds	r7, #72	@ 0x48
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	20002110 	.word	0x20002110
 800a9dc:	0800d0d4 	.word	0x0800d0d4
 800a9e0:	42c80000 	.word	0x42c80000
 800a9e4:	cccccccd 	.word	0xcccccccd

0800a9e8 <GUI_GetFontSize>:
    }
}

// подбор размера шрифта
sFONT *GUI_GetFontSize(POINT Dx, POINT Dy)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	460a      	mov	r2, r1
 800a9f2:	80fb      	strh	r3, [r7, #6]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	80bb      	strh	r3, [r7, #4]
    sFONT *Font;
    if (Dx > Font24.Width && Dy > Font24.Height) {
 800a9f8:	4b38      	ldr	r3, [pc, #224]	@ (800aadc <GUI_GetFontSize+0xf4>)
 800a9fa:	889b      	ldrh	r3, [r3, #4]
 800a9fc:	88fa      	ldrh	r2, [r7, #6]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d907      	bls.n	800aa12 <GUI_GetFontSize+0x2a>
 800aa02:	4b36      	ldr	r3, [pc, #216]	@ (800aadc <GUI_GetFontSize+0xf4>)
 800aa04:	88db      	ldrh	r3, [r3, #6]
 800aa06:	88ba      	ldrh	r2, [r7, #4]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d902      	bls.n	800aa12 <GUI_GetFontSize+0x2a>
        Font = &Font24;
 800aa0c:	4b33      	ldr	r3, [pc, #204]	@ (800aadc <GUI_GetFontSize+0xf4>)
 800aa0e:	60fb      	str	r3, [r7, #12]
 800aa10:	e05e      	b.n	800aad0 <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font20.Width && Dx < Font24.Width) &&
 800aa12:	4b33      	ldr	r3, [pc, #204]	@ (800aae0 <GUI_GetFontSize+0xf8>)
 800aa14:	889b      	ldrh	r3, [r3, #4]
 800aa16:	88fa      	ldrh	r2, [r7, #6]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d911      	bls.n	800aa40 <GUI_GetFontSize+0x58>
 800aa1c:	4b2f      	ldr	r3, [pc, #188]	@ (800aadc <GUI_GetFontSize+0xf4>)
 800aa1e:	889b      	ldrh	r3, [r3, #4]
 800aa20:	88fa      	ldrh	r2, [r7, #6]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d20c      	bcs.n	800aa40 <GUI_GetFontSize+0x58>
               (Dy > Font20.Height && Dy < Font24.Height)) {
 800aa26:	4b2e      	ldr	r3, [pc, #184]	@ (800aae0 <GUI_GetFontSize+0xf8>)
 800aa28:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font20.Width && Dx < Font24.Width) &&
 800aa2a:	88ba      	ldrh	r2, [r7, #4]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d907      	bls.n	800aa40 <GUI_GetFontSize+0x58>
               (Dy > Font20.Height && Dy < Font24.Height)) {
 800aa30:	4b2a      	ldr	r3, [pc, #168]	@ (800aadc <GUI_GetFontSize+0xf4>)
 800aa32:	88db      	ldrh	r3, [r3, #6]
 800aa34:	88ba      	ldrh	r2, [r7, #4]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d202      	bcs.n	800aa40 <GUI_GetFontSize+0x58>
        Font = &Font20;
 800aa3a:	4b29      	ldr	r3, [pc, #164]	@ (800aae0 <GUI_GetFontSize+0xf8>)
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	e047      	b.n	800aad0 <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font16.Width && Dx < Font20.Width) &&
 800aa40:	4b28      	ldr	r3, [pc, #160]	@ (800aae4 <GUI_GetFontSize+0xfc>)
 800aa42:	889b      	ldrh	r3, [r3, #4]
 800aa44:	88fa      	ldrh	r2, [r7, #6]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d911      	bls.n	800aa6e <GUI_GetFontSize+0x86>
 800aa4a:	4b25      	ldr	r3, [pc, #148]	@ (800aae0 <GUI_GetFontSize+0xf8>)
 800aa4c:	889b      	ldrh	r3, [r3, #4]
 800aa4e:	88fa      	ldrh	r2, [r7, #6]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d20c      	bcs.n	800aa6e <GUI_GetFontSize+0x86>
               (Dy > Font16.Height && Dy < Font20.Height)) {
 800aa54:	4b23      	ldr	r3, [pc, #140]	@ (800aae4 <GUI_GetFontSize+0xfc>)
 800aa56:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font16.Width && Dx < Font20.Width) &&
 800aa58:	88ba      	ldrh	r2, [r7, #4]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d907      	bls.n	800aa6e <GUI_GetFontSize+0x86>
               (Dy > Font16.Height && Dy < Font20.Height)) {
 800aa5e:	4b20      	ldr	r3, [pc, #128]	@ (800aae0 <GUI_GetFontSize+0xf8>)
 800aa60:	88db      	ldrh	r3, [r3, #6]
 800aa62:	88ba      	ldrh	r2, [r7, #4]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d202      	bcs.n	800aa6e <GUI_GetFontSize+0x86>
        Font = &Font16;
 800aa68:	4b1e      	ldr	r3, [pc, #120]	@ (800aae4 <GUI_GetFontSize+0xfc>)
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	e030      	b.n	800aad0 <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font12.Width && Dx < Font16.Width) &&
 800aa6e:	4b1e      	ldr	r3, [pc, #120]	@ (800aae8 <GUI_GetFontSize+0x100>)
 800aa70:	889b      	ldrh	r3, [r3, #4]
 800aa72:	88fa      	ldrh	r2, [r7, #6]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d911      	bls.n	800aa9c <GUI_GetFontSize+0xb4>
 800aa78:	4b1a      	ldr	r3, [pc, #104]	@ (800aae4 <GUI_GetFontSize+0xfc>)
 800aa7a:	889b      	ldrh	r3, [r3, #4]
 800aa7c:	88fa      	ldrh	r2, [r7, #6]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d20c      	bcs.n	800aa9c <GUI_GetFontSize+0xb4>
               (Dy > Font12.Height && Dy < Font16.Height)) {
 800aa82:	4b19      	ldr	r3, [pc, #100]	@ (800aae8 <GUI_GetFontSize+0x100>)
 800aa84:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font12.Width && Dx < Font16.Width) &&
 800aa86:	88ba      	ldrh	r2, [r7, #4]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d907      	bls.n	800aa9c <GUI_GetFontSize+0xb4>
               (Dy > Font12.Height && Dy < Font16.Height)) {
 800aa8c:	4b15      	ldr	r3, [pc, #84]	@ (800aae4 <GUI_GetFontSize+0xfc>)
 800aa8e:	88db      	ldrh	r3, [r3, #6]
 800aa90:	88ba      	ldrh	r2, [r7, #4]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d202      	bcs.n	800aa9c <GUI_GetFontSize+0xb4>
        Font = &Font12;
 800aa96:	4b14      	ldr	r3, [pc, #80]	@ (800aae8 <GUI_GetFontSize+0x100>)
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	e019      	b.n	800aad0 <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font8.Width && Dx < Font12.Width) &&
 800aa9c:	4b13      	ldr	r3, [pc, #76]	@ (800aaec <GUI_GetFontSize+0x104>)
 800aa9e:	889b      	ldrh	r3, [r3, #4]
 800aaa0:	88fa      	ldrh	r2, [r7, #6]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d911      	bls.n	800aaca <GUI_GetFontSize+0xe2>
 800aaa6:	4b10      	ldr	r3, [pc, #64]	@ (800aae8 <GUI_GetFontSize+0x100>)
 800aaa8:	889b      	ldrh	r3, [r3, #4]
 800aaaa:	88fa      	ldrh	r2, [r7, #6]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d20c      	bcs.n	800aaca <GUI_GetFontSize+0xe2>
               (Dy > Font8.Height && Dy < Font12.Height)) {
 800aab0:	4b0e      	ldr	r3, [pc, #56]	@ (800aaec <GUI_GetFontSize+0x104>)
 800aab2:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font8.Width && Dx < Font12.Width) &&
 800aab4:	88ba      	ldrh	r2, [r7, #4]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d907      	bls.n	800aaca <GUI_GetFontSize+0xe2>
               (Dy > Font8.Height && Dy < Font12.Height)) {
 800aaba:	4b0b      	ldr	r3, [pc, #44]	@ (800aae8 <GUI_GetFontSize+0x100>)
 800aabc:	88db      	ldrh	r3, [r3, #6]
 800aabe:	88ba      	ldrh	r2, [r7, #4]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d202      	bcs.n	800aaca <GUI_GetFontSize+0xe2>
        Font = &Font8;
 800aac4:	4b09      	ldr	r3, [pc, #36]	@ (800aaec <GUI_GetFontSize+0x104>)
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	e002      	b.n	800aad0 <GUI_GetFontSize+0xe8>
    } else {
        DEBUG("Please change the display area size, or add a larger font to modify\r\n");
 800aaca:	4809      	ldr	r0, [pc, #36]	@ (800aaf0 <GUI_GetFontSize+0x108>)
 800aacc:	f001 fb80 	bl	800c1d0 <puts>
    }
    return Font;
 800aad0:	68fb      	ldr	r3, [r7, #12]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20000114 	.word	0x20000114
 800aae0:	2000010c 	.word	0x2000010c
 800aae4:	20000104 	.word	0x20000104
 800aae8:	200000fc 	.word	0x200000fc
 800aaec:	2000011c 	.word	0x2000011c
 800aaf0:	0800d130 	.word	0x0800d130

0800aaf4 <GUI_Showtime>:
		Color  :   Set show color
  note:
******************************************************************************/
void GUI_Showtime(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  DEV_TIME *pTime, COLOR Color)
{
 800aaf4:	b590      	push	{r4, r7, lr}
 800aaf6:	b08b      	sub	sp, #44	@ 0x2c
 800aaf8:	af02      	add	r7, sp, #8
 800aafa:	4604      	mov	r4, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	4611      	mov	r1, r2
 800ab00:	461a      	mov	r2, r3
 800ab02:	4623      	mov	r3, r4
 800ab04:	80fb      	strh	r3, [r7, #6]
 800ab06:	4603      	mov	r3, r0
 800ab08:	80bb      	strh	r3, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	807b      	strh	r3, [r7, #2]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	803b      	strh	r3, [r7, #0]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 800ab12:	4a6b      	ldr	r2, [pc, #428]	@ (800acc0 <GUI_Showtime+0x1cc>)
 800ab14:	f107 030c 	add.w	r3, r7, #12
 800ab18:	ca07      	ldmia	r2, {r0, r1, r2}
 800ab1a:	c303      	stmia	r3!, {r0, r1}
 800ab1c:	801a      	strh	r2, [r3, #0]
    sFONT *Font;

    //According to the display area adaptive font size
    POINT Dx = (Xend - Xstart) / 7;//Determine the spacing between characters
 800ab1e:	887a      	ldrh	r2, [r7, #2]
 800ab20:	88fb      	ldrh	r3, [r7, #6]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	4a67      	ldr	r2, [pc, #412]	@ (800acc4 <GUI_Showtime+0x1d0>)
 800ab26:	fb82 1203 	smull	r1, r2, r2, r3
 800ab2a:	441a      	add	r2, r3
 800ab2c:	1092      	asrs	r2, r2, #2
 800ab2e:	17db      	asrs	r3, r3, #31
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	83fb      	strh	r3, [r7, #30]
    POINT Dy = Yend - Ystart;      //determine the font size
 800ab34:	883a      	ldrh	r2, [r7, #0]
 800ab36:	88bb      	ldrh	r3, [r7, #4]
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	83bb      	strh	r3, [r7, #28]
    Yend -= 5; // убрал немного расстояние отрисовки белого фона снизу
 800ab3c:	883b      	ldrh	r3, [r7, #0]
 800ab3e:	3b05      	subs	r3, #5
 800ab40:	803b      	strh	r3, [r7, #0]
    Font = GUI_GetFontSize(Dx, Dy);
 800ab42:	8bba      	ldrh	r2, [r7, #28]
 800ab44:	8bfb      	ldrh	r3, [r7, #30]
 800ab46:	4611      	mov	r1, r2
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff ff4d 	bl	800a9e8 <GUI_GetFontSize>
 800ab4e:	61b8      	str	r0, [r7, #24]
	
	if ((pTime->Sec % 10) < 10 && (pTime->Sec % 10) > 0) {
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	799a      	ldrb	r2, [r3, #6]
 800ab54:	4b5c      	ldr	r3, [pc, #368]	@ (800acc8 <GUI_Showtime+0x1d4>)
 800ab56:	fba3 1302 	umull	r1, r3, r3, r2
 800ab5a:	08d9      	lsrs	r1, r3, #3
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	440b      	add	r3, r1
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d011      	beq.n	800ab90 <GUI_Showtime+0x9c>
		LCD_SetArealColor(Xstart + Dx * 6, Ystart, Xend, Yend, WHITE);// xx:xx:x0
 800ab6c:	8bfb      	ldrh	r3, [r7, #30]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	0052      	lsls	r2, r2, #1
 800ab72:	4413      	add	r3, r2
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	88fb      	ldrh	r3, [r7, #6]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	b298      	uxth	r0, r3
 800ab7e:	883b      	ldrh	r3, [r7, #0]
 800ab80:	887a      	ldrh	r2, [r7, #2]
 800ab82:	88b9      	ldrh	r1, [r7, #4]
 800ab84:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800ab88:	9400      	str	r4, [sp, #0]
 800ab8a:	f7ff faf3 	bl	800a174 <LCD_SetArealColor>
 800ab8e:	e0af      	b.n	800acf0 <GUI_Showtime+0x1fc>
	} else {
		if ((pTime->Sec / 10) < 6 && (pTime->Sec / 10) > 0) {
 800ab90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab92:	799b      	ldrb	r3, [r3, #6]
 800ab94:	2b3b      	cmp	r3, #59	@ 0x3b
 800ab96:	d814      	bhi.n	800abc2 <GUI_Showtime+0xce>
 800ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9a:	799b      	ldrb	r3, [r3, #6]
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	d910      	bls.n	800abc2 <GUI_Showtime+0xce>
			LCD_SetArealColor(Xstart + Dx * 5, Ystart, Xend, Yend, WHITE);// xx:xx:00
 800aba0:	8bfb      	ldrh	r3, [r7, #30]
 800aba2:	461a      	mov	r2, r3
 800aba4:	0092      	lsls	r2, r2, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	88fb      	ldrh	r3, [r7, #6]
 800abac:	4413      	add	r3, r2
 800abae:	b298      	uxth	r0, r3
 800abb0:	883b      	ldrh	r3, [r7, #0]
 800abb2:	887a      	ldrh	r2, [r7, #2]
 800abb4:	88b9      	ldrh	r1, [r7, #4]
 800abb6:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800abba:	9400      	str	r4, [sp, #0]
 800abbc:	f7ff fada 	bl	800a174 <LCD_SetArealColor>
 800abc0:	e096      	b.n	800acf0 <GUI_Showtime+0x1fc>
		} else {//sec = 60
			pTime->Min = pTime->Min + 1;
 800abc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc4:	795b      	ldrb	r3, [r3, #5]
 800abc6:	3301      	adds	r3, #1
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abcc:	715a      	strb	r2, [r3, #5]
			pTime->Sec = 0;
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	2200      	movs	r2, #0
 800abd2:	719a      	strb	r2, [r3, #6]
			if ((pTime->Min % 10) < 10 && (pTime->Min % 10) > 0) {
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	795a      	ldrb	r2, [r3, #5]
 800abd8:	4b3b      	ldr	r3, [pc, #236]	@ (800acc8 <GUI_Showtime+0x1d4>)
 800abda:	fba3 1302 	umull	r1, r3, r3, r2
 800abde:	08d9      	lsrs	r1, r3, #3
 800abe0:	460b      	mov	r3, r1
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	440b      	add	r3, r1
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	d015      	beq.n	800ac1c <GUI_Showtime+0x128>
				LCD_SetArealColor(Xstart + Dx * 3 + Dx / 2, Ystart, Xend, Yend, WHITE);// xx:x0:00
 800abf0:	8bfb      	ldrh	r3, [r7, #30]
 800abf2:	461a      	mov	r2, r3
 800abf4:	0052      	lsls	r2, r2, #1
 800abf6:	4413      	add	r3, r2
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	88fb      	ldrh	r3, [r7, #6]
 800abfc:	4413      	add	r3, r2
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	8bfb      	ldrh	r3, [r7, #30]
 800ac02:	085b      	lsrs	r3, r3, #1
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	4413      	add	r3, r2
 800ac08:	b298      	uxth	r0, r3
 800ac0a:	883b      	ldrh	r3, [r7, #0]
 800ac0c:	887a      	ldrh	r2, [r7, #2]
 800ac0e:	88b9      	ldrh	r1, [r7, #4]
 800ac10:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800ac14:	9400      	str	r4, [sp, #0]
 800ac16:	f7ff faad 	bl	800a174 <LCD_SetArealColor>
 800ac1a:	e069      	b.n	800acf0 <GUI_Showtime+0x1fc>
			} else {
				if ((pTime->Min / 10) < 6 && (pTime->Min / 10) > 0) {
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1e:	795b      	ldrb	r3, [r3, #5]
 800ac20:	2b3b      	cmp	r3, #59	@ 0x3b
 800ac22:	d817      	bhi.n	800ac54 <GUI_Showtime+0x160>
 800ac24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac26:	795b      	ldrb	r3, [r3, #5]
 800ac28:	2b09      	cmp	r3, #9
 800ac2a:	d913      	bls.n	800ac54 <GUI_Showtime+0x160>
					LCD_SetArealColor(Xstart + Dx * 2 + Dx / 2, Ystart, Xend, Yend, WHITE);// xx:00:00
 800ac2c:	8bfb      	ldrh	r3, [r7, #30]
 800ac2e:	005b      	lsls	r3, r3, #1
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	4413      	add	r3, r2
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	8bfb      	ldrh	r3, [r7, #30]
 800ac3a:	085b      	lsrs	r3, r3, #1
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	4413      	add	r3, r2
 800ac40:	b298      	uxth	r0, r3
 800ac42:	883b      	ldrh	r3, [r7, #0]
 800ac44:	887a      	ldrh	r2, [r7, #2]
 800ac46:	88b9      	ldrh	r1, [r7, #4]
 800ac48:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800ac4c:	9400      	str	r4, [sp, #0]
 800ac4e:	f7ff fa91 	bl	800a174 <LCD_SetArealColor>
 800ac52:	e04d      	b.n	800acf0 <GUI_Showtime+0x1fc>
				} else {//min = 60
					pTime->Hour =  pTime->Hour + 1;
 800ac54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac56:	791b      	ldrb	r3, [r3, #4]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5e:	711a      	strb	r2, [r3, #4]
					pTime->Min = 0;
 800ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac62:	2200      	movs	r2, #0
 800ac64:	715a      	strb	r2, [r3, #5]
					if ((pTime->Hour % 10) < 4 && (pTime->Hour % 10) > 0 && pTime->Hour < 24) {// x0:00:00
 800ac66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac68:	791a      	ldrb	r2, [r3, #4]
 800ac6a:	4b17      	ldr	r3, [pc, #92]	@ (800acc8 <GUI_Showtime+0x1d4>)
 800ac6c:	fba3 1302 	umull	r1, r3, r3, r2
 800ac70:	08d9      	lsrs	r1, r3, #3
 800ac72:	460b      	mov	r3, r1
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	440b      	add	r3, r1
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d824      	bhi.n	800accc <GUI_Showtime+0x1d8>
 800ac82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac84:	791a      	ldrb	r2, [r3, #4]
 800ac86:	4b10      	ldr	r3, [pc, #64]	@ (800acc8 <GUI_Showtime+0x1d4>)
 800ac88:	fba3 1302 	umull	r1, r3, r3, r2
 800ac8c:	08d9      	lsrs	r1, r3, #3
 800ac8e:	460b      	mov	r3, r1
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d016      	beq.n	800accc <GUI_Showtime+0x1d8>
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca0:	791b      	ldrb	r3, [r3, #4]
 800aca2:	2b17      	cmp	r3, #23
 800aca4:	d812      	bhi.n	800accc <GUI_Showtime+0x1d8>
						LCD_SetArealColor(Xstart + Dx, Ystart, Xend, Yend, WHITE);
 800aca6:	88fa      	ldrh	r2, [r7, #6]
 800aca8:	8bfb      	ldrh	r3, [r7, #30]
 800acaa:	4413      	add	r3, r2
 800acac:	b298      	uxth	r0, r3
 800acae:	883b      	ldrh	r3, [r7, #0]
 800acb0:	887a      	ldrh	r2, [r7, #2]
 800acb2:	88b9      	ldrh	r1, [r7, #4]
 800acb4:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800acb8:	9400      	str	r4, [sp, #0]
 800acba:	f7ff fa5b 	bl	800a174 <LCD_SetArealColor>
 800acbe:	e017      	b.n	800acf0 <GUI_Showtime+0x1fc>
 800acc0:	0800d180 	.word	0x0800d180
 800acc4:	92492493 	.word	0x92492493
 800acc8:	cccccccd 	.word	0xcccccccd
					} else {
						pTime->Hour = 0;
 800accc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acce:	2200      	movs	r2, #0
 800acd0:	711a      	strb	r2, [r3, #4]
						pTime->Min = 0;
 800acd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd4:	2200      	movs	r2, #0
 800acd6:	715a      	strb	r2, [r3, #5]
						pTime->Sec = 0;
 800acd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acda:	2200      	movs	r2, #0
 800acdc:	719a      	strb	r2, [r3, #6]
						LCD_SetArealColor(Xstart, Ystart, Xend, Yend, WHITE);// 00:00:00
 800acde:	883b      	ldrh	r3, [r7, #0]
 800ace0:	887a      	ldrh	r2, [r7, #2]
 800ace2:	88b9      	ldrh	r1, [r7, #4]
 800ace4:	88f8      	ldrh	r0, [r7, #6]
 800ace6:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800acea:	9400      	str	r4, [sp, #0]
 800acec:	f7ff fa42 	bl	800a174 <LCD_SetArealColor>
			}
		}
	}
    
    //Write data into the cache
    GUI_DisChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, FONT_BACKGROUND, Color);
 800acf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf2:	791b      	ldrb	r3, [r3, #4]
 800acf4:	4a74      	ldr	r2, [pc, #464]	@ (800aec8 <GUI_Showtime+0x3d4>)
 800acf6:	fba2 2303 	umull	r2, r3, r2, r3
 800acfa:	08db      	lsrs	r3, r3, #3
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	3320      	adds	r3, #32
 800ad00:	443b      	add	r3, r7
 800ad02:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800ad06:	88b9      	ldrh	r1, [r7, #4]
 800ad08:	88f8      	ldrh	r0, [r7, #6]
 800ad0a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	f7ff fc4f 	bl	800a5b8 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, FONT_BACKGROUND, Color);
 800ad1a:	88fa      	ldrh	r2, [r7, #6]
 800ad1c:	8bfb      	ldrh	r3, [r7, #30]
 800ad1e:	4413      	add	r3, r2
 800ad20:	b298      	uxth	r0, r3
 800ad22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad24:	791a      	ldrb	r2, [r3, #4]
 800ad26:	4b68      	ldr	r3, [pc, #416]	@ (800aec8 <GUI_Showtime+0x3d4>)
 800ad28:	fba3 1302 	umull	r1, r3, r3, r2
 800ad2c:	08d9      	lsrs	r1, r3, #3
 800ad2e:	460b      	mov	r3, r1
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	440b      	add	r3, r1
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	3320      	adds	r3, #32
 800ad3c:	443b      	add	r3, r7
 800ad3e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800ad42:	88b9      	ldrh	r1, [r7, #4]
 800ad44:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	f7ff fc32 	bl	800a5b8 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, FONT_BACKGROUND, Color);
 800ad54:	88fa      	ldrh	r2, [r7, #6]
 800ad56:	8bfb      	ldrh	r3, [r7, #30]
 800ad58:	4413      	add	r3, r2
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	8bfb      	ldrh	r3, [r7, #30]
 800ad5e:	089b      	lsrs	r3, r3, #2
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	4413      	add	r3, r2
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	8bfb      	ldrh	r3, [r7, #30]
 800ad68:	085b      	lsrs	r3, r3, #1
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	4413      	add	r3, r2
 800ad6e:	b298      	uxth	r0, r3
 800ad70:	88b9      	ldrh	r1, [r7, #4]
 800ad72:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	223a      	movs	r2, #58	@ 0x3a
 800ad80:	f7ff fc1a 	bl	800a5b8 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, FONT_BACKGROUND, Color);
 800ad84:	8bfb      	ldrh	r3, [r7, #30]
 800ad86:	005b      	lsls	r3, r3, #1
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	88fb      	ldrh	r3, [r7, #6]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	8bfb      	ldrh	r3, [r7, #30]
 800ad92:	085b      	lsrs	r3, r3, #1
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	4413      	add	r3, r2
 800ad98:	b298      	uxth	r0, r3
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9c:	795b      	ldrb	r3, [r3, #5]
 800ad9e:	4a4a      	ldr	r2, [pc, #296]	@ (800aec8 <GUI_Showtime+0x3d4>)
 800ada0:	fba2 2303 	umull	r2, r3, r2, r3
 800ada4:	08db      	lsrs	r3, r3, #3
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	3320      	adds	r3, #32
 800adaa:	443b      	add	r3, r7
 800adac:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800adb0:	88b9      	ldrh	r1, [r7, #4]
 800adb2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	f7ff fbfb 	bl	800a5b8 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, FONT_BACKGROUND, Color);
 800adc2:	8bfb      	ldrh	r3, [r7, #30]
 800adc4:	461a      	mov	r2, r3
 800adc6:	0052      	lsls	r2, r2, #1
 800adc8:	4413      	add	r3, r2
 800adca:	b29a      	uxth	r2, r3
 800adcc:	88fb      	ldrh	r3, [r7, #6]
 800adce:	4413      	add	r3, r2
 800add0:	b29a      	uxth	r2, r3
 800add2:	8bfb      	ldrh	r3, [r7, #30]
 800add4:	085b      	lsrs	r3, r3, #1
 800add6:	b29b      	uxth	r3, r3
 800add8:	4413      	add	r3, r2
 800adda:	b298      	uxth	r0, r3
 800addc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adde:	795a      	ldrb	r2, [r3, #5]
 800ade0:	4b39      	ldr	r3, [pc, #228]	@ (800aec8 <GUI_Showtime+0x3d4>)
 800ade2:	fba3 1302 	umull	r1, r3, r3, r2
 800ade6:	08d9      	lsrs	r1, r3, #3
 800ade8:	460b      	mov	r3, r1
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	440b      	add	r3, r1
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	3320      	adds	r3, #32
 800adf6:	443b      	add	r3, r7
 800adf8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800adfc:	88b9      	ldrh	r1, [r7, #4]
 800adfe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	f7ff fbd5 	bl	800a5b8 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, FONT_BACKGROUND, Color);
 800ae0e:	8bfb      	ldrh	r3, [r7, #30]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	88fb      	ldrh	r3, [r7, #6]
 800ae16:	4413      	add	r3, r2
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	8bfb      	ldrh	r3, [r7, #30]
 800ae1c:	085b      	lsrs	r3, r3, #1
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	4413      	add	r3, r2
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	8bfb      	ldrh	r3, [r7, #30]
 800ae26:	089b      	lsrs	r3, r3, #2
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	b298      	uxth	r0, r3
 800ae2e:	88b9      	ldrh	r1, [r7, #4]
 800ae30:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	223a      	movs	r2, #58	@ 0x3a
 800ae3e:	f7ff fbbb 	bl	800a5b8 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, FONT_BACKGROUND, Color);
 800ae42:	8bfb      	ldrh	r3, [r7, #30]
 800ae44:	461a      	mov	r2, r3
 800ae46:	0092      	lsls	r2, r2, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	88fb      	ldrh	r3, [r7, #6]
 800ae4e:	4413      	add	r3, r2
 800ae50:	b298      	uxth	r0, r3
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	799b      	ldrb	r3, [r3, #6]
 800ae56:	4a1c      	ldr	r2, [pc, #112]	@ (800aec8 <GUI_Showtime+0x3d4>)
 800ae58:	fba2 2303 	umull	r2, r3, r2, r3
 800ae5c:	08db      	lsrs	r3, r3, #3
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	3320      	adds	r3, #32
 800ae62:	443b      	add	r3, r7
 800ae64:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800ae68:	88b9      	ldrh	r1, [r7, #4]
 800ae6a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	f7ff fb9f 	bl	800a5b8 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, FONT_BACKGROUND, Color);
 800ae7a:	8bfb      	ldrh	r3, [r7, #30]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	0052      	lsls	r2, r2, #1
 800ae80:	4413      	add	r3, r2
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	88fb      	ldrh	r3, [r7, #6]
 800ae88:	4413      	add	r3, r2
 800ae8a:	b298      	uxth	r0, r3
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8e:	799a      	ldrb	r2, [r3, #6]
 800ae90:	4b0d      	ldr	r3, [pc, #52]	@ (800aec8 <GUI_Showtime+0x3d4>)
 800ae92:	fba3 1302 	umull	r1, r3, r3, r2
 800ae96:	08d9      	lsrs	r1, r3, #3
 800ae98:	460b      	mov	r3, r1
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	440b      	add	r3, r1
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	3320      	adds	r3, #32
 800aea6:	443b      	add	r3, r7
 800aea8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800aeac:	88b9      	ldrh	r1, [r7, #4]
 800aeae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800aeb0:	9301      	str	r3, [sp, #4]
 800aeb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	f7ff fb7d 	bl	800a5b8 <GUI_DisChar>
}
 800aebe:	bf00      	nop
 800aec0:	3724      	adds	r7, #36	@ 0x24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd90      	pop	{r4, r7, pc}
 800aec6:	bf00      	nop
 800aec8:	cccccccd 	.word	0xcccccccd

0800aecc <TP_Read_ADC>:
parameter:
	Channel_Cmd :	0x90: Read channel Y +, select the ADC resolution is 12 bits, set to differential mode
					0xd0: Read channel x +, select the ADC resolution is 12 bits, set to differential mode
*******************************************************************************/
static uint16_t TP_Read_ADC(uint8_t CMD)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	71fb      	strb	r3, [r7, #7]
    uint16_t Data = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	81fb      	strh	r3, [r7, #14]

    //A cycle of at least 400ns.
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800aeda:	4b1a      	ldr	r3, [pc, #104]	@ (800af44 <TP_Read_ADC+0x78>)
 800aedc:	2228      	movs	r2, #40	@ 0x28
 800aede:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800aee0:	4818      	ldr	r0, [pc, #96]	@ (800af44 <TP_Read_ADC+0x78>)
 800aee2:	f7f8 faf1 	bl	80034c8 <HAL_SPI_Init>

	TP_CS_0;
 800aee6:	2200      	movs	r2, #0
 800aee8:	2180      	movs	r1, #128	@ 0x80
 800aeea:	4817      	ldr	r0, [pc, #92]	@ (800af48 <TP_Read_ADC+0x7c>)
 800aeec:	f7f6 fc28 	bl	8001740 <HAL_GPIO_WritePin>

	SPI4W_Write_Byte(CMD);
 800aef0:	79fb      	ldrb	r3, [r7, #7]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fe f8fc 	bl	80090f0 <SPI4W_Write_Byte>
	Driver_Delay_us(200);
 800aef8:	20c8      	movs	r0, #200	@ 0xc8
 800aefa:	f7fe f94c 	bl	8009196 <Driver_Delay_us>
	
	Data = SPI4W_Read_Byte(0XFF);
 800aefe:	20ff      	movs	r0, #255	@ 0xff
 800af00:	f7fe f930 	bl	8009164 <SPI4W_Read_Byte>
 800af04:	4603      	mov	r3, r0
 800af06:	81fb      	strh	r3, [r7, #14]
	Data <<= 8;//7bit
 800af08:	89fb      	ldrh	r3, [r7, #14]
 800af0a:	021b      	lsls	r3, r3, #8
 800af0c:	81fb      	strh	r3, [r7, #14]
	Data |= SPI4W_Read_Byte(0XFF);
 800af0e:	20ff      	movs	r0, #255	@ 0xff
 800af10:	f7fe f928 	bl	8009164 <SPI4W_Read_Byte>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	89fb      	ldrh	r3, [r7, #14]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	81fb      	strh	r3, [r7, #14]
	Data >>= 3;//5bit
 800af1e:	89fb      	ldrh	r3, [r7, #14]
 800af20:	08db      	lsrs	r3, r3, #3
 800af22:	81fb      	strh	r3, [r7, #14]
	TP_CS_1;
 800af24:	2201      	movs	r2, #1
 800af26:	2180      	movs	r1, #128	@ 0x80
 800af28:	4807      	ldr	r0, [pc, #28]	@ (800af48 <TP_Read_ADC+0x7c>)
 800af2a:	f7f6 fc09 	bl	8001740 <HAL_GPIO_WritePin>
	
	//LCD SPI speed = 18 MHz
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800af2e:	4b05      	ldr	r3, [pc, #20]	@ (800af44 <TP_Read_ADC+0x78>)
 800af30:	2208      	movs	r2, #8
 800af32:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800af34:	4803      	ldr	r0, [pc, #12]	@ (800af44 <TP_Read_ADC+0x78>)
 800af36:	f7f8 fac7 	bl	80034c8 <HAL_SPI_Init>

    return Data;
 800af3a:	89fb      	ldrh	r3, [r7, #14]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	2000019c 	.word	0x2000019c
 800af48:	40020400 	.word	0x40020400

0800af4c <TP_Read_ADC_Average>:
					0xd0 :Read channel x +
*******************************************************************************/
#define READ_TIMES  5	//Number of readings
#define LOST_NUM    1	//Discard value
static uint16_t TP_Read_ADC_Average(uint8_t Channel_Cmd)
{
 800af4c:	b590      	push	{r4, r7, lr}
 800af4e:	b087      	sub	sp, #28
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
    uint8_t i, j;
    uint16_t Read_Buff[READ_TIMES];
    uint16_t Read_Sum = 0, Read_Temp = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	82bb      	strh	r3, [r7, #20]
 800af5a:	2300      	movs	r3, #0
 800af5c:	827b      	strh	r3, [r7, #18]

    //Read and save multiple samples
    for(i = 0; i < READ_TIMES; i++){
 800af5e:	2300      	movs	r3, #0
 800af60:	75fb      	strb	r3, [r7, #23]
 800af62:	e011      	b.n	800af88 <TP_Read_ADC_Average+0x3c>
		Read_Buff[i] = TP_Read_ADC(Channel_Cmd);
 800af64:	7dfc      	ldrb	r4, [r7, #23]
 800af66:	79fb      	ldrb	r3, [r7, #7]
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff ffaf 	bl	800aecc <TP_Read_ADC>
 800af6e:	4603      	mov	r3, r0
 800af70:	461a      	mov	r2, r3
 800af72:	0063      	lsls	r3, r4, #1
 800af74:	3318      	adds	r3, #24
 800af76:	443b      	add	r3, r7
 800af78:	f823 2c10 	strh.w	r2, [r3, #-16]
		Driver_Delay_us(200);
 800af7c:	20c8      	movs	r0, #200	@ 0xc8
 800af7e:	f7fe f90a 	bl	8009196 <Driver_Delay_us>
    for(i = 0; i < READ_TIMES; i++){
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	3301      	adds	r3, #1
 800af86:	75fb      	strb	r3, [r7, #23]
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	d9ea      	bls.n	800af64 <TP_Read_ADC_Average+0x18>
	}
	
    //Sort from small to large
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 800af8e:	2300      	movs	r3, #0
 800af90:	75fb      	strb	r3, [r7, #23]
 800af92:	e035      	b.n	800b000 <TP_Read_ADC_Average+0xb4>
        for (j = i + 1; j < READ_TIMES; j ++) {
 800af94:	7dfb      	ldrb	r3, [r7, #23]
 800af96:	3301      	adds	r3, #1
 800af98:	75bb      	strb	r3, [r7, #22]
 800af9a:	e02b      	b.n	800aff4 <TP_Read_ADC_Average+0xa8>
            if (Read_Buff[i] > Read_Buff[j]) {
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	3318      	adds	r3, #24
 800afa2:	443b      	add	r3, r7
 800afa4:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800afa8:	7dbb      	ldrb	r3, [r7, #22]
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	3318      	adds	r3, #24
 800afae:	443b      	add	r3, r7
 800afb0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d91a      	bls.n	800afee <TP_Read_ADC_Average+0xa2>
                Read_Temp = Read_Buff[i];
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	3318      	adds	r3, #24
 800afbe:	443b      	add	r3, r7
 800afc0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800afc4:	827b      	strh	r3, [r7, #18]
                Read_Buff[i] = Read_Buff[j];
 800afc6:	7dbb      	ldrb	r3, [r7, #22]
 800afc8:	7dfa      	ldrb	r2, [r7, #23]
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	3318      	adds	r3, #24
 800afce:	443b      	add	r3, r7
 800afd0:	f833 1c10 	ldrh.w	r1, [r3, #-16]
 800afd4:	0053      	lsls	r3, r2, #1
 800afd6:	3318      	adds	r3, #24
 800afd8:	443b      	add	r3, r7
 800afda:	460a      	mov	r2, r1
 800afdc:	f823 2c10 	strh.w	r2, [r3, #-16]
                Read_Buff[j] = Read_Temp;
 800afe0:	7dbb      	ldrb	r3, [r7, #22]
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	3318      	adds	r3, #24
 800afe6:	443b      	add	r3, r7
 800afe8:	8a7a      	ldrh	r2, [r7, #18]
 800afea:	f823 2c10 	strh.w	r2, [r3, #-16]
        for (j = i + 1; j < READ_TIMES; j ++) {
 800afee:	7dbb      	ldrb	r3, [r7, #22]
 800aff0:	3301      	adds	r3, #1
 800aff2:	75bb      	strb	r3, [r7, #22]
 800aff4:	7dbb      	ldrb	r3, [r7, #22]
 800aff6:	2b04      	cmp	r3, #4
 800aff8:	d9d0      	bls.n	800af9c <TP_Read_ADC_Average+0x50>
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	3301      	adds	r3, #1
 800affe:	75fb      	strb	r3, [r7, #23]
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	2b03      	cmp	r3, #3
 800b004:	d9c6      	bls.n	800af94 <TP_Read_ADC_Average+0x48>
            }
        }
    }

    //Exclude the largest and the smallest
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 800b006:	2301      	movs	r3, #1
 800b008:	75fb      	strb	r3, [r7, #23]
 800b00a:	e00b      	b.n	800b024 <TP_Read_ADC_Average+0xd8>
        Read_Sum += Read_Buff[i];
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	3318      	adds	r3, #24
 800b012:	443b      	add	r3, r7
 800b014:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800b018:	8abb      	ldrh	r3, [r7, #20]
 800b01a:	4413      	add	r3, r2
 800b01c:	82bb      	strh	r3, [r7, #20]
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	3301      	adds	r3, #1
 800b022:	75fb      	strb	r3, [r7, #23]
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	2b03      	cmp	r3, #3
 800b028:	d9f0      	bls.n	800b00c <TP_Read_ADC_Average+0xc0>

    //Averaging
    Read_Temp = Read_Sum / (READ_TIMES - 2 * LOST_NUM);
 800b02a:	8abb      	ldrh	r3, [r7, #20]
 800b02c:	4a04      	ldr	r2, [pc, #16]	@ (800b040 <TP_Read_ADC_Average+0xf4>)
 800b02e:	fba2 2303 	umull	r2, r3, r2, r3
 800b032:	085b      	lsrs	r3, r3, #1
 800b034:	827b      	strh	r3, [r7, #18]

    return Read_Temp;
 800b036:	8a7b      	ldrh	r3, [r7, #18]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	371c      	adds	r7, #28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd90      	pop	{r4, r7, pc}
 800b040:	aaaaaaab 	.word	0xaaaaaaab

0800b044 <TP_Read_ADC_XY>:
parameter:
	Channel_Cmd :	0x90 :Read channel Y +
					0xd0 :Read channel x +
*******************************************************************************/
static void TP_Read_ADC_XY(uint16_t *pXCh_Adc, uint16_t  *pYCh_Adc )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
    *pXCh_Adc = TP_Read_ADC_Average(0xD0);
 800b04e:	20d0      	movs	r0, #208	@ 0xd0
 800b050:	f7ff ff7c 	bl	800af4c <TP_Read_ADC_Average>
 800b054:	4603      	mov	r3, r0
 800b056:	461a      	mov	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	801a      	strh	r2, [r3, #0]
    *pYCh_Adc = TP_Read_ADC_Average(0x90);
 800b05c:	2090      	movs	r0, #144	@ 0x90
 800b05e:	f7ff ff75 	bl	800af4c <TP_Read_ADC_Average>
 800b062:	4603      	mov	r3, r0
 800b064:	461a      	mov	r2, r3
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	801a      	strh	r2, [r3, #0]
}
 800b06a:	bf00      	nop
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <TP_Read_TwiceADC>:
	Channel_Cmd :	pYCh_Adc = 0x90 :Read channel Y +
					pXCh_Adc = 0xd0 :Read channel x +
*******************************************************************************/
#define ERR_RANGE 50	//tolerance scope
static bool TP_Read_TwiceADC(uint16_t *pXCh_Adc, uint16_t  *pYCh_Adc )
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
    uint16_t XCh_Adc1, YCh_Adc1, XCh_Adc2, YCh_Adc2;

    //Read the ADC values Read the ADC values twice
    TP_Read_ADC_XY(&XCh_Adc1, &YCh_Adc1);
 800b07c:	f107 020c 	add.w	r2, r7, #12
 800b080:	f107 030e 	add.w	r3, r7, #14
 800b084:	4611      	mov	r1, r2
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff ffdc 	bl	800b044 <TP_Read_ADC_XY>
//	Driver_Delay_us(10);
    TP_Read_ADC_XY(&XCh_Adc2, &YCh_Adc2);
 800b08c:	f107 0208 	add.w	r2, r7, #8
 800b090:	f107 030a 	add.w	r3, r7, #10
 800b094:	4611      	mov	r1, r2
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff ffd4 	bl	800b044 <TP_Read_ADC_XY>
//	Driver_Delay_us(10);
	
    //The ADC error used twice is greater than ERR_RANGE to take the average
    if( ((XCh_Adc2 <= XCh_Adc1 && XCh_Adc1 < XCh_Adc2 + ERR_RANGE) ||
 800b09c:	897a      	ldrh	r2, [r7, #10]
 800b09e:	89fb      	ldrh	r3, [r7, #14]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d804      	bhi.n	800b0ae <TP_Read_TwiceADC+0x3c>
 800b0a4:	897b      	ldrh	r3, [r7, #10]
 800b0a6:	3331      	adds	r3, #49	@ 0x31
 800b0a8:	89fa      	ldrh	r2, [r7, #14]
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	da08      	bge.n	800b0c0 <TP_Read_TwiceADC+0x4e>
         (XCh_Adc1 <= XCh_Adc2 && XCh_Adc2 < XCh_Adc1 + ERR_RANGE))
 800b0ae:	89fa      	ldrh	r2, [r7, #14]
 800b0b0:	897b      	ldrh	r3, [r7, #10]
    if( ((XCh_Adc2 <= XCh_Adc1 && XCh_Adc1 < XCh_Adc2 + ERR_RANGE) ||
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d82c      	bhi.n	800b110 <TP_Read_TwiceADC+0x9e>
         (XCh_Adc1 <= XCh_Adc2 && XCh_Adc2 < XCh_Adc1 + ERR_RANGE))
 800b0b6:	89fb      	ldrh	r3, [r7, #14]
 800b0b8:	3331      	adds	r3, #49	@ 0x31
 800b0ba:	897a      	ldrh	r2, [r7, #10]
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	db27      	blt.n	800b110 <TP_Read_TwiceADC+0x9e>
        && ((YCh_Adc2 <= YCh_Adc1 && YCh_Adc1 < YCh_Adc2 + ERR_RANGE) ||
 800b0c0:	893a      	ldrh	r2, [r7, #8]
 800b0c2:	89bb      	ldrh	r3, [r7, #12]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d804      	bhi.n	800b0d2 <TP_Read_TwiceADC+0x60>
 800b0c8:	893b      	ldrh	r3, [r7, #8]
 800b0ca:	3331      	adds	r3, #49	@ 0x31
 800b0cc:	89ba      	ldrh	r2, [r7, #12]
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	da08      	bge.n	800b0e4 <TP_Read_TwiceADC+0x72>
            (YCh_Adc1 <= YCh_Adc2 && YCh_Adc2 < YCh_Adc1 + ERR_RANGE))) {
 800b0d2:	89ba      	ldrh	r2, [r7, #12]
 800b0d4:	893b      	ldrh	r3, [r7, #8]
        && ((YCh_Adc2 <= YCh_Adc1 && YCh_Adc1 < YCh_Adc2 + ERR_RANGE) ||
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d81a      	bhi.n	800b110 <TP_Read_TwiceADC+0x9e>
            (YCh_Adc1 <= YCh_Adc2 && YCh_Adc2 < YCh_Adc1 + ERR_RANGE))) {
 800b0da:	89bb      	ldrh	r3, [r7, #12]
 800b0dc:	3331      	adds	r3, #49	@ 0x31
 800b0de:	893a      	ldrh	r2, [r7, #8]
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	db15      	blt.n	800b110 <TP_Read_TwiceADC+0x9e>
        *pXCh_Adc = (XCh_Adc1 + XCh_Adc2) / 2;
 800b0e4:	89fb      	ldrh	r3, [r7, #14]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	897b      	ldrh	r3, [r7, #10]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	0fda      	lsrs	r2, r3, #31
 800b0ee:	4413      	add	r3, r2
 800b0f0:	105b      	asrs	r3, r3, #1
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	801a      	strh	r2, [r3, #0]
        *pYCh_Adc = (YCh_Adc1 + YCh_Adc2) / 2;
 800b0f8:	89bb      	ldrh	r3, [r7, #12]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	893b      	ldrh	r3, [r7, #8]
 800b0fe:	4413      	add	r3, r2
 800b100:	0fda      	lsrs	r2, r3, #31
 800b102:	4413      	add	r3, r2
 800b104:	105b      	asrs	r3, r3, #1
 800b106:	b29a      	uxth	r2, r3
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	801a      	strh	r2, [r3, #0]
        return true;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e000      	b.n	800b112 <TP_Read_TwiceADC+0xa0>
    }

    //The ADC error used twice is less than ERR_RANGE returns failed
    return false;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
	...

0800b11c <TP_Scan>:
		chCoordType:
					1 : calibration
					0 : relative position
*******************************************************************************/
static uint8_t TP_Scan(uint8_t chCoordType)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	4603      	mov	r3, r0
 800b124:	71fb      	strb	r3, [r7, #7]
    //In X, Y coordinate measurement, IRQ is disabled and output is low
    if (!GET_TP_IRQ) {//Press the button to press
 800b126:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b12a:	48a9      	ldr	r0, [pc, #676]	@ (800b3d0 <TP_Scan+0x2b4>)
 800b12c:	f7f6 faf0 	bl	8001710 <HAL_GPIO_ReadPin>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	f040 8128 	bne.w	800b388 <TP_Scan+0x26c>
        //Read the physical coordinates
        if (chCoordType) {
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d004      	beq.n	800b148 <TP_Scan+0x2c>
            TP_Read_TwiceADC(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint);
 800b13e:	49a5      	ldr	r1, [pc, #660]	@ (800b3d4 <TP_Scan+0x2b8>)
 800b140:	48a5      	ldr	r0, [pc, #660]	@ (800b3d8 <TP_Scan+0x2bc>)
 800b142:	f7ff ff96 	bl	800b072 <TP_Read_TwiceADC>
 800b146:	e10e      	b.n	800b366 <TP_Scan+0x24a>
            //Read the screen coordinates
        } else if (TP_Read_TwiceADC(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint)) {
 800b148:	49a2      	ldr	r1, [pc, #648]	@ (800b3d4 <TP_Scan+0x2b8>)
 800b14a:	48a3      	ldr	r0, [pc, #652]	@ (800b3d8 <TP_Scan+0x2bc>)
 800b14c:	f7ff ff91 	bl	800b072 <TP_Read_TwiceADC>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 8107 	beq.w	800b366 <TP_Scan+0x24a>
//			DEBUG("(Xad,Yad) = %d,%d\r\n",sTP_DEV.Xpoint,sTP_DEV.Ypoint);
            if(sTP_DEV.TP_Scan_Dir == R2L_D2U) {		//Converts the result to screen coordinates
 800b158:	4ba0      	ldr	r3, [pc, #640]	@ (800b3dc <TP_Scan+0x2c0>)
 800b15a:	7e1b      	ldrb	r3, [r3, #24]
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d136      	bne.n	800b1ce <TP_Scan+0xb2>
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Xpoint +
 800b160:	4b9e      	ldr	r3, [pc, #632]	@ (800b3dc <TP_Scan+0x2c0>)
 800b162:	ed93 7a04 	vldr	s14, [r3, #16]
 800b166:	4b9d      	ldr	r3, [pc, #628]	@ (800b3dc <TP_Scan+0x2c0>)
 800b168:	889b      	ldrh	r3, [r3, #4]
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b172:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800b176:	4b99      	ldr	r3, [pc, #612]	@ (800b3dc <TP_Scan+0x2c0>)
 800b178:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Xpoint +
 800b17c:	ee07 3a90 	vmov	s15, r3
 800b180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b184:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b18c:	ee17 3a90 	vmov	r3, s15
 800b190:	b29a      	uxth	r2, r3
 800b192:	4b93      	ldr	r3, [pc, #588]	@ (800b3e0 <TP_Scan+0x2c4>)
 800b194:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Ypoint +
 800b196:	4b91      	ldr	r3, [pc, #580]	@ (800b3dc <TP_Scan+0x2c0>)
 800b198:	ed93 7a05 	vldr	s14, [r3, #20]
 800b19c:	4b8f      	ldr	r3, [pc, #572]	@ (800b3dc <TP_Scan+0x2c0>)
 800b19e:	88db      	ldrh	r3, [r3, #6]
 800b1a0:	ee07 3a90 	vmov	s15, r3
 800b1a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1a8:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800b1ac:	4b8b      	ldr	r3, [pc, #556]	@ (800b3dc <TP_Scan+0x2c0>)
 800b1ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Ypoint +
 800b1b2:	ee07 3a90 	vmov	s15, r3
 800b1b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c2:	ee17 3a90 	vmov	r3, s15
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	4b85      	ldr	r3, [pc, #532]	@ (800b3e0 <TP_Scan+0x2c4>)
 800b1ca:	805a      	strh	r2, [r3, #2]
 800b1cc:	e0cb      	b.n	800b366 <TP_Scan+0x24a>
            } else if(sTP_DEV.TP_Scan_Dir == L2R_U2D) {
 800b1ce:	4b83      	ldr	r3, [pc, #524]	@ (800b3dc <TP_Scan+0x2c0>)
 800b1d0:	7e1b      	ldrb	r3, [r3, #24]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d146      	bne.n	800b264 <TP_Scan+0x148>
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800b1d6:	4b83      	ldr	r3, [pc, #524]	@ (800b3e4 <TP_Scan+0x2c8>)
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fXfac * sTP_DEV.Xpoint -
 800b1e2:	4b7e      	ldr	r3, [pc, #504]	@ (800b3dc <TP_Scan+0x2c0>)
 800b1e4:	edd3 6a04 	vldr	s13, [r3, #16]
 800b1e8:	4b7c      	ldr	r3, [pc, #496]	@ (800b3dc <TP_Scan+0x2c0>)
 800b1ea:	889b      	ldrh	r3, [r3, #4]
 800b1ec:	ee07 3a90 	vmov	s15, r3
 800b1f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800b1f8:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800b1fc:	4b77      	ldr	r3, [pc, #476]	@ (800b3dc <TP_Scan+0x2c0>)
 800b1fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                                  sTP_DEV.fXfac * sTP_DEV.Xpoint -
 800b202:	ee07 3a90 	vmov	s15, r3
 800b206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b20a:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800b20e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b212:	ee17 3a90 	vmov	r3, s15
 800b216:	b29a      	uxth	r2, r3
 800b218:	4b71      	ldr	r3, [pc, #452]	@ (800b3e0 <TP_Scan+0x2c4>)
 800b21a:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800b21c:	4b71      	ldr	r3, [pc, #452]	@ (800b3e4 <TP_Scan+0x2c8>)
 800b21e:	885b      	ldrh	r3, [r3, #2]
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fYfac * sTP_DEV.Ypoint -
 800b228:	4b6c      	ldr	r3, [pc, #432]	@ (800b3dc <TP_Scan+0x2c0>)
 800b22a:	edd3 6a05 	vldr	s13, [r3, #20]
 800b22e:	4b6b      	ldr	r3, [pc, #428]	@ (800b3dc <TP_Scan+0x2c0>)
 800b230:	88db      	ldrh	r3, [r3, #6]
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b23a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800b23e:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800b242:	4b66      	ldr	r3, [pc, #408]	@ (800b3dc <TP_Scan+0x2c0>)
 800b244:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                                  sTP_DEV.fYfac * sTP_DEV.Ypoint -
 800b248:	ee07 3a90 	vmov	s15, r3
 800b24c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b250:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800b254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b258:	ee17 3a90 	vmov	r3, s15
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	4b60      	ldr	r3, [pc, #384]	@ (800b3e0 <TP_Scan+0x2c4>)
 800b260:	805a      	strh	r2, [r3, #2]
 800b262:	e080      	b.n	800b366 <TP_Scan+0x24a>
            } else if(sTP_DEV.TP_Scan_Dir == U2D_R2L) {
 800b264:	4b5d      	ldr	r3, [pc, #372]	@ (800b3dc <TP_Scan+0x2c0>)
 800b266:	7e1b      	ldrb	r3, [r3, #24]
 800b268:	2b05      	cmp	r3, #5
 800b26a:	d136      	bne.n	800b2da <TP_Scan+0x1be>
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Ypoint +
 800b26c:	4b5b      	ldr	r3, [pc, #364]	@ (800b3dc <TP_Scan+0x2c0>)
 800b26e:	ed93 7a04 	vldr	s14, [r3, #16]
 800b272:	4b5a      	ldr	r3, [pc, #360]	@ (800b3dc <TP_Scan+0x2c0>)
 800b274:	88db      	ldrh	r3, [r3, #6]
 800b276:	ee07 3a90 	vmov	s15, r3
 800b27a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b27e:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800b282:	4b56      	ldr	r3, [pc, #344]	@ (800b3dc <TP_Scan+0x2c0>)
 800b284:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Ypoint +
 800b288:	ee07 3a90 	vmov	s15, r3
 800b28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b290:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b298:	ee17 3a90 	vmov	r3, s15
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	4b50      	ldr	r3, [pc, #320]	@ (800b3e0 <TP_Scan+0x2c4>)
 800b2a0:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Xpoint +
 800b2a2:	4b4e      	ldr	r3, [pc, #312]	@ (800b3dc <TP_Scan+0x2c0>)
 800b2a4:	ed93 7a05 	vldr	s14, [r3, #20]
 800b2a8:	4b4c      	ldr	r3, [pc, #304]	@ (800b3dc <TP_Scan+0x2c0>)
 800b2aa:	889b      	ldrh	r3, [r3, #4]
 800b2ac:	ee07 3a90 	vmov	s15, r3
 800b2b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2b4:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800b2b8:	4b48      	ldr	r3, [pc, #288]	@ (800b3dc <TP_Scan+0x2c0>)
 800b2ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Xpoint +
 800b2be:	ee07 3a90 	vmov	s15, r3
 800b2c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ce:	ee17 3a90 	vmov	r3, s15
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	4b42      	ldr	r3, [pc, #264]	@ (800b3e0 <TP_Scan+0x2c4>)
 800b2d6:	805a      	strh	r2, [r3, #2]
 800b2d8:	e045      	b.n	800b366 <TP_Scan+0x24a>
            } else {
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800b2da:	4b42      	ldr	r3, [pc, #264]	@ (800b3e4 <TP_Scan+0x2c8>)
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fXfac * sTP_DEV.Ypoint -
 800b2e6:	4b3d      	ldr	r3, [pc, #244]	@ (800b3dc <TP_Scan+0x2c0>)
 800b2e8:	edd3 6a04 	vldr	s13, [r3, #16]
 800b2ec:	4b3b      	ldr	r3, [pc, #236]	@ (800b3dc <TP_Scan+0x2c0>)
 800b2ee:	88db      	ldrh	r3, [r3, #6]
 800b2f0:	ee07 3a90 	vmov	s15, r3
 800b2f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800b2fc:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800b300:	4b36      	ldr	r3, [pc, #216]	@ (800b3dc <TP_Scan+0x2c0>)
 800b302:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                                  sTP_DEV.fXfac * sTP_DEV.Ypoint -
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b30e:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800b312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b316:	ee17 3a90 	vmov	r3, s15
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	4b30      	ldr	r3, [pc, #192]	@ (800b3e0 <TP_Scan+0x2c4>)
 800b31e:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800b320:	4b30      	ldr	r3, [pc, #192]	@ (800b3e4 <TP_Scan+0x2c8>)
 800b322:	885b      	ldrh	r3, [r3, #2]
 800b324:	ee07 3a90 	vmov	s15, r3
 800b328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fYfac * sTP_DEV.Xpoint -
 800b32c:	4b2b      	ldr	r3, [pc, #172]	@ (800b3dc <TP_Scan+0x2c0>)
 800b32e:	edd3 6a05 	vldr	s13, [r3, #20]
 800b332:	4b2a      	ldr	r3, [pc, #168]	@ (800b3dc <TP_Scan+0x2c0>)
 800b334:	889b      	ldrh	r3, [r3, #4]
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b33e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800b342:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800b346:	4b25      	ldr	r3, [pc, #148]	@ (800b3dc <TP_Scan+0x2c0>)
 800b348:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                                  sTP_DEV.fYfac * sTP_DEV.Xpoint -
 800b34c:	ee07 3a90 	vmov	s15, r3
 800b350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b354:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800b358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b35c:	ee17 3a90 	vmov	r3, s15
 800b360:	b29a      	uxth	r2, r3
 800b362:	4b1f      	ldr	r3, [pc, #124]	@ (800b3e0 <TP_Scan+0x2c4>)
 800b364:	805a      	strh	r2, [r3, #2]
            }
//			DEBUG("( x , y ) = %d,%d\r\n",sTP_Draw.Xpoint,sTP_Draw.Ypoint);
        }
        if (0 == (sTP_DEV.chStatus & TP_PRESS_DOWN)) {	//Not being pressed
 800b366:	4b1d      	ldr	r3, [pc, #116]	@ (800b3dc <TP_Scan+0x2c0>)
 800b368:	7a1b      	ldrb	r3, [r3, #8]
 800b36a:	b25b      	sxtb	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	db26      	blt.n	800b3be <TP_Scan+0x2a2>
            sTP_DEV.chStatus = TP_PRESS_DOWN | TP_PRESSED;
 800b370:	4b1a      	ldr	r3, [pc, #104]	@ (800b3dc <TP_Scan+0x2c0>)
 800b372:	22c0      	movs	r2, #192	@ 0xc0
 800b374:	721a      	strb	r2, [r3, #8]
            sTP_DEV.Xpoint0 = sTP_DEV.Xpoint;
 800b376:	4b19      	ldr	r3, [pc, #100]	@ (800b3dc <TP_Scan+0x2c0>)
 800b378:	889a      	ldrh	r2, [r3, #4]
 800b37a:	4b18      	ldr	r3, [pc, #96]	@ (800b3dc <TP_Scan+0x2c0>)
 800b37c:	801a      	strh	r2, [r3, #0]
            sTP_DEV.Ypoint0 = sTP_DEV.Ypoint;
 800b37e:	4b17      	ldr	r3, [pc, #92]	@ (800b3dc <TP_Scan+0x2c0>)
 800b380:	88da      	ldrh	r2, [r3, #6]
 800b382:	4b16      	ldr	r3, [pc, #88]	@ (800b3dc <TP_Scan+0x2c0>)
 800b384:	805a      	strh	r2, [r3, #2]
 800b386:	e01a      	b.n	800b3be <TP_Scan+0x2a2>
        }
    } else {
        if (sTP_DEV.chStatus & TP_PRESS_DOWN) {	//0x80
 800b388:	4b14      	ldr	r3, [pc, #80]	@ (800b3dc <TP_Scan+0x2c0>)
 800b38a:	7a1b      	ldrb	r3, [r3, #8]
 800b38c:	b25b      	sxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	da07      	bge.n	800b3a2 <TP_Scan+0x286>
            sTP_DEV.chStatus &= ~(1 << 7);		//0x00
 800b392:	4b12      	ldr	r3, [pc, #72]	@ (800b3dc <TP_Scan+0x2c0>)
 800b394:	7a1b      	ldrb	r3, [r3, #8]
 800b396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	4b0f      	ldr	r3, [pc, #60]	@ (800b3dc <TP_Scan+0x2c0>)
 800b39e:	721a      	strb	r2, [r3, #8]
 800b3a0:	e00d      	b.n	800b3be <TP_Scan+0x2a2>
        } else {
            sTP_DEV.Xpoint0 = 0;
 800b3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b3dc <TP_Scan+0x2c0>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	801a      	strh	r2, [r3, #0]
            sTP_DEV.Ypoint0 = 0;
 800b3a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b3dc <TP_Scan+0x2c0>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	805a      	strh	r2, [r3, #2]
            sTP_DEV.Xpoint = 0xffff;
 800b3ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b3dc <TP_Scan+0x2c0>)
 800b3b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b3b4:	809a      	strh	r2, [r3, #4]
            sTP_DEV.Ypoint = 0xffff;
 800b3b6:	4b09      	ldr	r3, [pc, #36]	@ (800b3dc <TP_Scan+0x2c0>)
 800b3b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b3bc:	80da      	strh	r2, [r3, #6]
        }
    }

    return (sTP_DEV.chStatus & TP_PRESS_DOWN);
 800b3be:	4b07      	ldr	r3, [pc, #28]	@ (800b3dc <TP_Scan+0x2c0>)
 800b3c0:	7a1b      	ldrb	r3, [r3, #8]
 800b3c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b3c6:	b2db      	uxtb	r3, r3
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	40020000 	.word	0x40020000
 800b3d4:	20002122 	.word	0x20002122
 800b3d8:	20002120 	.word	0x20002120
 800b3dc:	2000211c 	.word	0x2000211c
 800b3e0:	20002138 	.word	0x20002138
 800b3e4:	20002110 	.word	0x20002110

0800b3e8 <TP_GetAdFac>:
/*******************************************************************************
function:
		Use the default calibration factor
*******************************************************************************/
void TP_GetAdFac(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af02      	add	r7, sp, #8
    if(	sTP_DEV.TP_Scan_Dir == D2U_L2R ) { //SCAN_DIR_DFT = D2U_L2R
 800b3ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b3f0:	7e1b      	ldrb	r3, [r3, #24]
 800b3f2:	2b06      	cmp	r3, #6
 800b3f4:	d10e      	bne.n	800b414 <TP_GetAdFac+0x2c>
        sTP_DEV.fXfac = -0.132443F ;
 800b3f6:	4b2d      	ldr	r3, [pc, #180]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b3f8:	4a2d      	ldr	r2, [pc, #180]	@ (800b4b0 <TP_GetAdFac+0xc8>)
 800b3fa:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.089997F ;
 800b3fc:	4b2b      	ldr	r3, [pc, #172]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b3fe:	4a2d      	ldr	r2, [pc, #180]	@ (800b4b4 <TP_GetAdFac+0xcc>)
 800b400:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 516L ;
 800b402:	4b2a      	ldr	r3, [pc, #168]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b404:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b408:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -22L ;
 800b40a:	4b28      	ldr	r3, [pc, #160]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b40c:	f64f 72ea 	movw	r2, #65514	@ 0xffea
 800b410:	819a      	strh	r2, [r3, #12]
        LCD_Clear(LCD_BACKGROUND);
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
						calibration in this direction",
                         &Font16, FONT_BACKGROUND, RED);
    }
}
 800b412:	e048      	b.n	800b4a6 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == L2R_U2D ) {
 800b414:	4b25      	ldr	r3, [pc, #148]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b416:	7e1b      	ldrb	r3, [r3, #24]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10e      	bne.n	800b43a <TP_GetAdFac+0x52>
        sTP_DEV.fXfac = 0.089697F ;
 800b41c:	4b23      	ldr	r3, [pc, #140]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b41e:	4a26      	ldr	r2, [pc, #152]	@ (800b4b8 <TP_GetAdFac+0xd0>)
 800b420:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.134792F ;
 800b422:	4b22      	ldr	r3, [pc, #136]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b424:	4a25      	ldr	r2, [pc, #148]	@ (800b4bc <TP_GetAdFac+0xd4>)
 800b426:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -21L ;
 800b428:	4b20      	ldr	r3, [pc, #128]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b42a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800b42e:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -39L ;
 800b430:	4b1e      	ldr	r3, [pc, #120]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b432:	f64f 72d9 	movw	r2, #65497	@ 0xffd9
 800b436:	819a      	strh	r2, [r3, #12]
}
 800b438:	e035      	b.n	800b4a6 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == R2L_D2U ) {
 800b43a:	4b1c      	ldr	r3, [pc, #112]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b43c:	7e1b      	ldrb	r3, [r3, #24]
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d10e      	bne.n	800b460 <TP_GetAdFac+0x78>
        sTP_DEV.fXfac = 0.089915F ;
 800b442:	4b1a      	ldr	r3, [pc, #104]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b444:	4a1e      	ldr	r2, [pc, #120]	@ (800b4c0 <TP_GetAdFac+0xd8>)
 800b446:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac =  0.133178F ;
 800b448:	4b18      	ldr	r3, [pc, #96]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b44a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4c4 <TP_GetAdFac+0xdc>)
 800b44c:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -22L ;
 800b44e:	4b17      	ldr	r3, [pc, #92]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b450:	f64f 72ea 	movw	r2, #65514	@ 0xffea
 800b454:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -38L ;
 800b456:	4b15      	ldr	r3, [pc, #84]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b458:	f64f 72da 	movw	r2, #65498	@ 0xffda
 800b45c:	819a      	strh	r2, [r3, #12]
}
 800b45e:	e022      	b.n	800b4a6 <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == U2D_R2L ) {
 800b460:	4b12      	ldr	r3, [pc, #72]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b462:	7e1b      	ldrb	r3, [r3, #24]
 800b464:	2b05      	cmp	r3, #5
 800b466:	d10e      	bne.n	800b486 <TP_GetAdFac+0x9e>
        sTP_DEV.fXfac = -0.132906F ;
 800b468:	4b10      	ldr	r3, [pc, #64]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b46a:	4a17      	ldr	r2, [pc, #92]	@ (800b4c8 <TP_GetAdFac+0xe0>)
 800b46c:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.087964F ;
 800b46e:	4b0f      	ldr	r3, [pc, #60]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b470:	4a16      	ldr	r2, [pc, #88]	@ (800b4cc <TP_GetAdFac+0xe4>)
 800b472:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 517L ;
 800b474:	4b0d      	ldr	r3, [pc, #52]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b476:	f240 2205 	movw	r2, #517	@ 0x205
 800b47a:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -20L ;
 800b47c:	4b0b      	ldr	r3, [pc, #44]	@ (800b4ac <TP_GetAdFac+0xc4>)
 800b47e:	f64f 72ec 	movw	r2, #65516	@ 0xffec
 800b482:	819a      	strh	r2, [r3, #12]
}
 800b484:	e00f      	b.n	800b4a6 <TP_GetAdFac+0xbe>
        LCD_Clear(LCD_BACKGROUND);
 800b486:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b48a:	f7fe fea1 	bl	800a1d0 <LCD_Clear>
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
 800b48e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800b492:	9301      	str	r3, [sp, #4]
 800b494:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4d0 <TP_GetAdFac+0xe8>)
 800b49c:	4a0d      	ldr	r2, [pc, #52]	@ (800b4d4 <TP_GetAdFac+0xec>)
 800b49e:	213c      	movs	r1, #60	@ 0x3c
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	f7ff f939 	bl	800a718 <GUI_DisString_EN>
}
 800b4a6:	bf00      	nop
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	2000211c 	.word	0x2000211c
 800b4b0:	be079f23 	.word	0xbe079f23
 800b4b4:	3db85059 	.word	0x3db85059
 800b4b8:	3db7b310 	.word	0x3db7b310
 800b4bc:	3e0a06ea 	.word	0x3e0a06ea
 800b4c0:	3db8255b 	.word	0x3db8255b
 800b4c4:	3e085fd0 	.word	0x3e085fd0
 800b4c8:	be081883 	.word	0xbe081883
 800b4cc:	3db42678 	.word	0x3db42678
 800b4d0:	20000104 	.word	0x20000104
 800b4d4:	0800d510 	.word	0x0800d510

0800b4d8 <TP_MenuDialog>:

/*******************************************************************************
function:
		Paint menu options
*******************************************************************************/
void TP_MenuDialog(void) {
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af04      	add	r7, sp, #16
    //LCD_Clear(LCD_BACKGROUND);
    DEBUG("Menu return ...\r\n");
 800b4de:	485f      	ldr	r0, [pc, #380]	@ (800b65c <TP_MenuDialog+0x184>)
 800b4e0:	f000 fe76 	bl	800c1d0 <puts>

    // Current show
	GUI_DrawRectangle(0, 20,
					  sLCD_DIS.LCD_Dis_Column/2, 220,
 800b4e4:	4b5e      	ldr	r3, [pc, #376]	@ (800b660 <TP_MenuDialog+0x188>)
 800b4e6:	881b      	ldrh	r3, [r3, #0]
	GUI_DrawRectangle(0, 20,
 800b4e8:	085b      	lsrs	r3, r3, #1
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	9302      	str	r3, [sp, #8]
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	23dc      	movs	r3, #220	@ 0xdc
 800b4fc:	2114      	movs	r1, #20
 800b4fe:	2000      	movs	r0, #0
 800b500:	f7fe ffd2 	bl	800a4a8 <GUI_DrawRectangle>
					  MAGENTA, DRAW_FULL, DOT_PIXEL_1X1);
	GUI_DisString_EN(10, 30, "Current:", &Font24, MAGENTA, BLACK);
 800b504:	2300      	movs	r3, #0
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	4b55      	ldr	r3, [pc, #340]	@ (800b664 <TP_MenuDialog+0x18c>)
 800b510:	4a55      	ldr	r2, [pc, #340]	@ (800b668 <TP_MenuDialog+0x190>)
 800b512:	211e      	movs	r1, #30
 800b514:	200a      	movs	r0, #10
 800b516:	f7ff f8ff 	bl	800a718 <GUI_DisString_EN>

	// Voltage show
	GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 20,
 800b51a:	4b51      	ldr	r3, [pc, #324]	@ (800b660 <TP_MenuDialog+0x188>)
 800b51c:	881b      	ldrh	r3, [r3, #0]
 800b51e:	085b      	lsrs	r3, r3, #1
 800b520:	b298      	uxth	r0, r3
 800b522:	4b4f      	ldr	r3, [pc, #316]	@ (800b660 <TP_MenuDialog+0x188>)
 800b524:	881a      	ldrh	r2, [r3, #0]
 800b526:	2301      	movs	r3, #1
 800b528:	9302      	str	r3, [sp, #8]
 800b52a:	2301      	movs	r3, #1
 800b52c:	9301      	str	r3, [sp, #4]
 800b52e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	23dc      	movs	r3, #220	@ 0xdc
 800b536:	2114      	movs	r1, #20
 800b538:	f7fe ffb6 	bl	800a4a8 <GUI_DrawRectangle>
					  sLCD_DIS.LCD_Dis_Column, 220,
					  GBLUE, DRAW_FULL, DOT_PIXEL_1X1);
	GUI_DisString_EN(250, 30, "Voltage:", &Font24, GBLUE, BLACK);
 800b53c:	2300      	movs	r3, #0
 800b53e:	9301      	str	r3, [sp, #4]
 800b540:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	4b47      	ldr	r3, [pc, #284]	@ (800b664 <TP_MenuDialog+0x18c>)
 800b548:	4a48      	ldr	r2, [pc, #288]	@ (800b66c <TP_MenuDialog+0x194>)
 800b54a:	211e      	movs	r1, #30
 800b54c:	20fa      	movs	r0, #250	@ 0xfa
 800b54e:	f7ff f8e3 	bl	800a718 <GUI_DisString_EN>

	// AC/DC Switch (BRRED/YELLOW)
	if (sELECTONIC_LOAD_PARAMETERS.currentType) {
 800b552:	4b47      	ldr	r3, [pc, #284]	@ (800b670 <TP_MenuDialog+0x198>)
 800b554:	785b      	ldrb	r3, [r3, #1]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d01f      	beq.n	800b59a <TP_MenuDialog+0xc2>
		GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 220,
 800b55a:	4b41      	ldr	r3, [pc, #260]	@ (800b660 <TP_MenuDialog+0x188>)
 800b55c:	881b      	ldrh	r3, [r3, #0]
 800b55e:	085b      	lsrs	r3, r3, #1
 800b560:	b298      	uxth	r0, r3
 800b562:	4b3f      	ldr	r3, [pc, #252]	@ (800b660 <TP_MenuDialog+0x188>)
 800b564:	881a      	ldrh	r2, [r3, #0]
 800b566:	4b3e      	ldr	r3, [pc, #248]	@ (800b660 <TP_MenuDialog+0x188>)
 800b568:	885b      	ldrh	r3, [r3, #2]
 800b56a:	2101      	movs	r1, #1
 800b56c:	9102      	str	r1, [sp, #8]
 800b56e:	2101      	movs	r1, #1
 800b570:	9101      	str	r1, [sp, #4]
 800b572:	f64f 4107 	movw	r1, #64519	@ 0xfc07
 800b576:	9100      	str	r1, [sp, #0]
 800b578:	21dc      	movs	r1, #220	@ 0xdc
 800b57a:	f7fe ff95 	bl	800a4a8 <GUI_DrawRectangle>
				sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page,
				BRRED, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(345, 260, "AC", &Font24, BRRED, BLACK);
 800b57e:	2300      	movs	r3, #0
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	4b36      	ldr	r3, [pc, #216]	@ (800b664 <TP_MenuDialog+0x18c>)
 800b58a:	4a3a      	ldr	r2, [pc, #232]	@ (800b674 <TP_MenuDialog+0x19c>)
 800b58c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800b590:	f240 1059 	movw	r0, #345	@ 0x159
 800b594:	f7ff f8c0 	bl	800a718 <GUI_DisString_EN>
 800b598:	e01e      	b.n	800b5d8 <TP_MenuDialog+0x100>
	} else {
		GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 220,
 800b59a:	4b31      	ldr	r3, [pc, #196]	@ (800b660 <TP_MenuDialog+0x188>)
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	085b      	lsrs	r3, r3, #1
 800b5a0:	b298      	uxth	r0, r3
 800b5a2:	4b2f      	ldr	r3, [pc, #188]	@ (800b660 <TP_MenuDialog+0x188>)
 800b5a4:	881a      	ldrh	r2, [r3, #0]
 800b5a6:	4b2e      	ldr	r3, [pc, #184]	@ (800b660 <TP_MenuDialog+0x188>)
 800b5a8:	885b      	ldrh	r3, [r3, #2]
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	9102      	str	r1, [sp, #8]
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	9101      	str	r1, [sp, #4]
 800b5b2:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 800b5b6:	9100      	str	r1, [sp, #0]
 800b5b8:	21dc      	movs	r1, #220	@ 0xdc
 800b5ba:	f7fe ff75 	bl	800a4a8 <GUI_DrawRectangle>
				sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page,
				YELLOW, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(345, 260, "DC", &Font24, YELLOW, BLACK);
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	4b26      	ldr	r3, [pc, #152]	@ (800b664 <TP_MenuDialog+0x18c>)
 800b5ca:	4a2b      	ldr	r2, [pc, #172]	@ (800b678 <TP_MenuDialog+0x1a0>)
 800b5cc:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800b5d0:	f240 1059 	movw	r0, #345	@ 0x159
 800b5d4:	f7ff f8a0 	bl	800a718 <GUI_DisString_EN>
	}

	// ON/OFF switch (GREEN/RED)
	if (sELECTONIC_LOAD_PARAMETERS.condition) {
 800b5d8:	4b25      	ldr	r3, [pc, #148]	@ (800b670 <TP_MenuDialog+0x198>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01d      	beq.n	800b61c <TP_MenuDialog+0x144>
		GUI_DrawRectangle(0, 220,
			sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
 800b5e0:	4b1f      	ldr	r3, [pc, #124]	@ (800b660 <TP_MenuDialog+0x188>)
 800b5e2:	881b      	ldrh	r3, [r3, #0]
		GUI_DrawRectangle(0, 220,
 800b5e4:	085b      	lsrs	r3, r3, #1
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	4b1d      	ldr	r3, [pc, #116]	@ (800b660 <TP_MenuDialog+0x188>)
 800b5ea:	885b      	ldrh	r3, [r3, #2]
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	9102      	str	r1, [sp, #8]
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	9101      	str	r1, [sp, #4]
 800b5f4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800b5f8:	9100      	str	r1, [sp, #0]
 800b5fa:	21dc      	movs	r1, #220	@ 0xdc
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	f7fe ff53 	bl	800a4a8 <GUI_DrawRectangle>
			GREEN, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(103, 260, "ON", &Font24, GREEN, BLACK);
 800b602:	2300      	movs	r3, #0
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	4b15      	ldr	r3, [pc, #84]	@ (800b664 <TP_MenuDialog+0x18c>)
 800b60e:	4a1b      	ldr	r2, [pc, #108]	@ (800b67c <TP_MenuDialog+0x1a4>)
 800b610:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800b614:	2067      	movs	r0, #103	@ 0x67
 800b616:	f7ff f87f 	bl	800a718 <GUI_DisString_EN>
		GUI_DrawRectangle(0, 220,
		sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
		RED, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(95, 260, "OFF", &Font24, RED, BLACK);
	}
}
 800b61a:	e01c      	b.n	800b656 <TP_MenuDialog+0x17e>
		sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
 800b61c:	4b10      	ldr	r3, [pc, #64]	@ (800b660 <TP_MenuDialog+0x188>)
 800b61e:	881b      	ldrh	r3, [r3, #0]
		GUI_DrawRectangle(0, 220,
 800b620:	085b      	lsrs	r3, r3, #1
 800b622:	b29a      	uxth	r2, r3
 800b624:	4b0e      	ldr	r3, [pc, #56]	@ (800b660 <TP_MenuDialog+0x188>)
 800b626:	885b      	ldrh	r3, [r3, #2]
 800b628:	2101      	movs	r1, #1
 800b62a:	9102      	str	r1, [sp, #8]
 800b62c:	2101      	movs	r1, #1
 800b62e:	9101      	str	r1, [sp, #4]
 800b630:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800b634:	9100      	str	r1, [sp, #0]
 800b636:	21dc      	movs	r1, #220	@ 0xdc
 800b638:	2000      	movs	r0, #0
 800b63a:	f7fe ff35 	bl	800a4a8 <GUI_DrawRectangle>
		GUI_DisString_EN(95, 260, "OFF", &Font24, RED, BLACK);
 800b63e:	2300      	movs	r3, #0
 800b640:	9301      	str	r3, [sp, #4]
 800b642:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	4b06      	ldr	r3, [pc, #24]	@ (800b664 <TP_MenuDialog+0x18c>)
 800b64a:	4a0d      	ldr	r2, [pc, #52]	@ (800b680 <TP_MenuDialog+0x1a8>)
 800b64c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800b650:	205f      	movs	r0, #95	@ 0x5f
 800b652:	f7ff f861 	bl	800a718 <GUI_DisString_EN>
}
 800b656:	bf00      	nop
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	0800d574 	.word	0x0800d574
 800b660:	20002110 	.word	0x20002110
 800b664:	20000114 	.word	0x20000114
 800b668:	0800d590 	.word	0x0800d590
 800b66c:	0800d59c 	.word	0x0800d59c
 800b670:	20002140 	.word	0x20002140
 800b674:	0800d5a8 	.word	0x0800d5a8
 800b678:	0800d5ac 	.word	0x0800d5ac
 800b67c:	0800d5b0 	.word	0x0800d5b0
 800b680:	0800d5b4 	.word	0x0800d5b4

0800b684 <TP_IndicationsUnit>:

/*******************************************************************************
function:
		Paint numbers
*******************************************************************************/
void TP_IndicationsUnit(void) {
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af02      	add	r7, sp, #8
	GUI_DisFloatNum(280, 120, 131.5487, &Font24, GBLUE, BLACK);
 800b68a:	2300      	movs	r3, #0
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b692:	4a16      	ldr	r2, [pc, #88]	@ (800b6ec <TP_IndicationsUnit+0x68>)
 800b694:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800b6f0 <TP_IndicationsUnit+0x6c>
 800b698:	2178      	movs	r1, #120	@ 0x78
 800b69a:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800b69e:	f7ff f88f 	bl	800a7c0 <GUI_DisFloatNum>
	GUI_DisString_EN(400, 120, "Volt", &Font24, GBLUE, BLACK);
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b6ec <TP_IndicationsUnit+0x68>)
 800b6ae:	4a11      	ldr	r2, [pc, #68]	@ (800b6f4 <TP_IndicationsUnit+0x70>)
 800b6b0:	2178      	movs	r1, #120	@ 0x78
 800b6b2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b6b6:	f7ff f82f 	bl	800a718 <GUI_DisString_EN>

	GUI_DisFloatNum(60, 120, 6.01647, &Font24, MAGENTA, BLACK);
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800b6c2:	4a0a      	ldr	r2, [pc, #40]	@ (800b6ec <TP_IndicationsUnit+0x68>)
 800b6c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800b6f8 <TP_IndicationsUnit+0x74>
 800b6c8:	2178      	movs	r1, #120	@ 0x78
 800b6ca:	203c      	movs	r0, #60	@ 0x3c
 800b6cc:	f7ff f878 	bl	800a7c0 <GUI_DisFloatNum>
	GUI_DisString_EN(180, 120, "Amp", &Font24, MAGENTA, BLACK);
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	4b04      	ldr	r3, [pc, #16]	@ (800b6ec <TP_IndicationsUnit+0x68>)
 800b6dc:	4a07      	ldr	r2, [pc, #28]	@ (800b6fc <TP_IndicationsUnit+0x78>)
 800b6de:	2178      	movs	r1, #120	@ 0x78
 800b6e0:	20b4      	movs	r0, #180	@ 0xb4
 800b6e2:	f7ff f819 	bl	800a718 <GUI_DisString_EN>
}
 800b6e6:	bf00      	nop
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20000114 	.word	0x20000114
 800b6f0:	43038c78 	.word	0x43038c78
 800b6f4:	0800d5b8 	.word	0x0800d5b8
 800b6f8:	40c086ec 	.word	0x40c086ec
 800b6fc:	0800d5c0 	.word	0x0800d5c0

0800b700 <TP_MenuTouch>:
/*******************************************************************************
function:
		Touch position on menu
*******************************************************************************/
void TP_MenuTouch(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
	sTP_Draw.Xpoint = 0;
 800b704:	4b37      	ldr	r3, [pc, #220]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b706:	2200      	movs	r2, #0
 800b708:	801a      	strh	r2, [r3, #0]
	sTP_Draw.Ypoint = 0;
 800b70a:	4b36      	ldr	r3, [pc, #216]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	805a      	strh	r2, [r3, #2]
    TP_Scan(0);
 800b710:	2000      	movs	r0, #0
 800b712:	f7ff fd03 	bl	800b11c <TP_Scan>
    if ((sTP_DEV.chStatus & TP_PRESS_DOWN) && (sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column && sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page)) {		//Press the button
 800b716:	4b34      	ldr	r3, [pc, #208]	@ (800b7e8 <TP_MenuTouch+0xe8>)
 800b718:	7a1b      	ldrb	r3, [r3, #8]
 800b71a:	b25b      	sxtb	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	da5e      	bge.n	800b7de <TP_MenuTouch+0xde>
 800b720:	4b30      	ldr	r3, [pc, #192]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b722:	881a      	ldrh	r2, [r3, #0]
 800b724:	4b31      	ldr	r3, [pc, #196]	@ (800b7ec <TP_MenuTouch+0xec>)
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d258      	bcs.n	800b7de <TP_MenuTouch+0xde>
 800b72c:	4b2d      	ldr	r3, [pc, #180]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b72e:	885a      	ldrh	r2, [r3, #2]
 800b730:	4b2e      	ldr	r3, [pc, #184]	@ (800b7ec <TP_MenuTouch+0xec>)
 800b732:	885b      	ldrh	r3, [r3, #2]
 800b734:	429a      	cmp	r2, r3
 800b736:	d252      	bcs.n	800b7de <TP_MenuTouch+0xde>
		// ON/OFF Switch
		if (sTP_Draw.Xpoint > 0 &&
 800b738:	4b2a      	ldr	r3, [pc, #168]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d025      	beq.n	800b78c <TP_MenuTouch+0x8c>
				sTP_Draw.Xpoint < (sLCD_DIS.LCD_Dis_Column/2 - 1) &&
 800b740:	4b28      	ldr	r3, [pc, #160]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b742:	881b      	ldrh	r3, [r3, #0]
 800b744:	461a      	mov	r2, r3
 800b746:	4b29      	ldr	r3, [pc, #164]	@ (800b7ec <TP_MenuTouch+0xec>)
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	085b      	lsrs	r3, r3, #1
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	3b01      	subs	r3, #1
		if (sTP_Draw.Xpoint > 0 &&
 800b750:	429a      	cmp	r2, r3
 800b752:	da1b      	bge.n	800b78c <TP_MenuTouch+0x8c>
				sTP_Draw.Ypoint > 220 &&
 800b754:	4b23      	ldr	r3, [pc, #140]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b756:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Xpoint < (sLCD_DIS.LCD_Dis_Column/2 - 1) &&
 800b758:	2bdc      	cmp	r3, #220	@ 0xdc
 800b75a:	d917      	bls.n	800b78c <TP_MenuTouch+0x8c>
				sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page) {
 800b75c:	4b21      	ldr	r3, [pc, #132]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b75e:	885a      	ldrh	r2, [r3, #2]
 800b760:	4b22      	ldr	r3, [pc, #136]	@ (800b7ec <TP_MenuTouch+0xec>)
 800b762:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Ypoint > 220 &&
 800b764:	429a      	cmp	r2, r3
 800b766:	d211      	bcs.n	800b78c <TP_MenuTouch+0x8c>
			sELECTONIC_LOAD_PARAMETERS.condition = !sELECTONIC_LOAD_PARAMETERS.condition;
 800b768:	4b21      	ldr	r3, [pc, #132]	@ (800b7f0 <TP_MenuTouch+0xf0>)
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	bf14      	ite	ne
 800b770:	2301      	movne	r3, #1
 800b772:	2300      	moveq	r3, #0
 800b774:	b2db      	uxtb	r3, r3
 800b776:	f083 0301 	eor.w	r3, r3, #1
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	b2da      	uxtb	r2, r3
 800b782:	4b1b      	ldr	r3, [pc, #108]	@ (800b7f0 <TP_MenuTouch+0xf0>)
 800b784:	701a      	strb	r2, [r3, #0]
			TP_MenuDialog();
 800b786:	f7ff fea7 	bl	800b4d8 <TP_MenuDialog>
			TP_MenuDialog();
		} else {
			//TP_MenuDialog(); // можно использовать как костыль
		}
    }
}
 800b78a:	e028      	b.n	800b7de <TP_MenuTouch+0xde>
		} else if(sTP_Draw.Xpoint > sLCD_DIS.LCD_Dis_Column/2 &&
 800b78c:	4b15      	ldr	r3, [pc, #84]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b78e:	881a      	ldrh	r2, [r3, #0]
 800b790:	4b16      	ldr	r3, [pc, #88]	@ (800b7ec <TP_MenuTouch+0xec>)
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	085b      	lsrs	r3, r3, #1
 800b796:	b29b      	uxth	r3, r3
 800b798:	429a      	cmp	r2, r3
 800b79a:	d920      	bls.n	800b7de <TP_MenuTouch+0xde>
				sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column &&
 800b79c:	4b11      	ldr	r3, [pc, #68]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b79e:	881a      	ldrh	r2, [r3, #0]
 800b7a0:	4b12      	ldr	r3, [pc, #72]	@ (800b7ec <TP_MenuTouch+0xec>)
 800b7a2:	881b      	ldrh	r3, [r3, #0]
		} else if(sTP_Draw.Xpoint > sLCD_DIS.LCD_Dis_Column/2 &&
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d21a      	bcs.n	800b7de <TP_MenuTouch+0xde>
				sTP_Draw.Ypoint > 220 &&
 800b7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b7aa:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column &&
 800b7ac:	2bdc      	cmp	r3, #220	@ 0xdc
 800b7ae:	d916      	bls.n	800b7de <TP_MenuTouch+0xde>
				sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page) {
 800b7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b7e4 <TP_MenuTouch+0xe4>)
 800b7b2:	885a      	ldrh	r2, [r3, #2]
 800b7b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ec <TP_MenuTouch+0xec>)
 800b7b6:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Ypoint > 220 &&
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d210      	bcs.n	800b7de <TP_MenuTouch+0xde>
			sELECTONIC_LOAD_PARAMETERS.currentType = !sELECTONIC_LOAD_PARAMETERS.currentType;
 800b7bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f0 <TP_MenuTouch+0xf0>)
 800b7be:	785b      	ldrb	r3, [r3, #1]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	bf14      	ite	ne
 800b7c4:	2301      	movne	r3, #1
 800b7c6:	2300      	moveq	r3, #0
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	f083 0301 	eor.w	r3, r3, #1
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	4b06      	ldr	r3, [pc, #24]	@ (800b7f0 <TP_MenuTouch+0xf0>)
 800b7d8:	705a      	strb	r2, [r3, #1]
			TP_MenuDialog();
 800b7da:	f7ff fe7d 	bl	800b4d8 <TP_MenuDialog>
}
 800b7de:	bf00      	nop
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20002138 	.word	0x20002138
 800b7e8:	2000211c 	.word	0x2000211c
 800b7ec:	20002110 	.word	0x20002110
 800b7f0:	20002140 	.word	0x20002140

0800b7f4 <TP_Init>:
/*******************************************************************************
function:
		Touch pad initialization
*******************************************************************************/
void TP_Init( LCD_SCAN_DIR Lcd_ScanDir )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	71fb      	strb	r3, [r7, #7]
    TP_CS_1;
 800b7fe:	2201      	movs	r2, #1
 800b800:	2180      	movs	r1, #128	@ 0x80
 800b802:	4807      	ldr	r0, [pc, #28]	@ (800b820 <TP_Init+0x2c>)
 800b804:	f7f5 ff9c 	bl	8001740 <HAL_GPIO_WritePin>

    sTP_DEV.TP_Scan_Dir = Lcd_ScanDir;
 800b808:	4a06      	ldr	r2, [pc, #24]	@ (800b824 <TP_Init+0x30>)
 800b80a:	79fb      	ldrb	r3, [r7, #7]
 800b80c:	7613      	strb	r3, [r2, #24]

    TP_Read_ADC_XY(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint);
 800b80e:	4906      	ldr	r1, [pc, #24]	@ (800b828 <TP_Init+0x34>)
 800b810:	4806      	ldr	r0, [pc, #24]	@ (800b82c <TP_Init+0x38>)
 800b812:	f7ff fc17 	bl	800b044 <TP_Read_ADC_XY>
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	40020400 	.word	0x40020400
 800b824:	2000211c 	.word	0x2000211c
 800b828:	20002122 	.word	0x20002122
 800b82c:	20002120 	.word	0x20002120

0800b830 <LOAD_Init>:

void LOAD_Init(void)
{
 800b830:	b480      	push	{r7}
 800b832:	af00      	add	r7, sp, #0
    sELECTONIC_LOAD_PARAMETERS.condition = 1;
 800b834:	4b09      	ldr	r3, [pc, #36]	@ (800b85c <LOAD_Init+0x2c>)
 800b836:	2201      	movs	r2, #1
 800b838:	701a      	strb	r2, [r3, #0]

    sELECTONIC_LOAD_PARAMETERS.currentType = 1;
 800b83a:	4b08      	ldr	r3, [pc, #32]	@ (800b85c <LOAD_Init+0x2c>)
 800b83c:	2201      	movs	r2, #1
 800b83e:	705a      	strb	r2, [r3, #1]

    sELECTONIC_LOAD_PARAMETERS.currentValue = 0;
 800b840:	4b06      	ldr	r3, [pc, #24]	@ (800b85c <LOAD_Init+0x2c>)
 800b842:	f04f 0200 	mov.w	r2, #0
 800b846:	605a      	str	r2, [r3, #4]

    sELECTONIC_LOAD_PARAMETERS.voltageValue = 0;
 800b848:	4b04      	ldr	r3, [pc, #16]	@ (800b85c <LOAD_Init+0x2c>)
 800b84a:	f04f 0200 	mov.w	r2, #0
 800b84e:	609a      	str	r2, [r3, #8]
}
 800b850:	bf00      	nop
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	20002140 	.word	0x20002140

0800b860 <SD_SPI_ReadWriteByte>:
unsigned char  SD_Type=0;  //version of the sd card

//data: data to be written to sd card.
//return: data read from sd card.
unsigned char SD_SPI_ReadWriteByte(unsigned char CMD)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	4603      	mov	r3, r0
 800b868:	71fb      	strb	r3, [r7, #7]
	return SPI4W_Write_Byte(CMD);
 800b86a:	79fb      	ldrb	r3, [r7, #7]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fd fc3f 	bl	80090f0 <SPI4W_Write_Byte>
 800b872:	4603      	mov	r3, r0
//	return SPI_Read_Byte();
}	  
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <SD_SPI_SpeedLow>:

//set spi in low speed mode.
void SD_SPI_SpeedLow(void)
{
 800b87c:	b480      	push	{r7}
 800b87e:	af00      	add	r7, sp, #0
//	SPI1->CR1&=0XFFC7; 
//	SPI1->CR1|=SPI_BaudRatePrescaler_256;
//	SPI_Cmd(SPI1,ENABLE); 
}
 800b880:	bf00      	nop
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr

0800b88a <SD_SPI_SpeedHigh>:


//set spi in high speed mode.
void SD_SPI_SpeedHigh(void)
{
 800b88a:	b480      	push	{r7}
 800b88c:	af00      	add	r7, sp, #0
//	SPI1->CR1&=0XFFC7; 
//	SPI1->CR1|=SPI_BaudRatePrescaler_32;
//	SPI_Cmd(SPI1,ENABLE); 
}
 800b88e:	bf00      	nop
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <SD_DisSelect>:


//released spi bus
void SD_DisSelect(void)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	af00      	add	r7, sp, #0
	SD_CS_1;
 800b89c:	2201      	movs	r2, #1
 800b89e:	2110      	movs	r1, #16
 800b8a0:	4803      	ldr	r0, [pc, #12]	@ (800b8b0 <SD_DisSelect+0x18>)
 800b8a2:	f7f5 ff4d 	bl	8001740 <HAL_GPIO_WritePin>
 	SD_SPI_ReadWriteByte(0xff);//providing extra 8 clocks  
 800b8a6:	20ff      	movs	r0, #255	@ 0xff
 800b8a8:	f7ff ffda 	bl	800b860 <SD_SPI_ReadWriteByte>
}
 800b8ac:	bf00      	nop
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	40020400 	.word	0x40020400

0800b8b4 <SD_Select>:

//pick sd card and waiting until until it's ready
//return: 0: succed 1: failure
unsigned char SD_Select(void)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	af00      	add	r7, sp, #0
	SD_CS_0;
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2110      	movs	r1, #16
 800b8bc:	4807      	ldr	r0, [pc, #28]	@ (800b8dc <SD_Select+0x28>)
 800b8be:	f7f5 ff3f 	bl	8001740 <HAL_GPIO_WritePin>
	if(SD_WaitReady()==0)return 0; 
 800b8c2:	f000 f80d 	bl	800b8e0 <SD_WaitReady>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <SD_Select+0x1c>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e002      	b.n	800b8d6 <SD_Select+0x22>
	SD_DisSelect();
 800b8d0:	f7ff ffe2 	bl	800b898 <SD_DisSelect>
	return 1;
 800b8d4:	2301      	movs	r3, #1
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	40020400 	.word	0x40020400

0800b8e0 <SD_WaitReady>:

//waiting for sd card until it's ready
unsigned char SD_WaitReady(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
	unsigned int t=0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	607b      	str	r3, [r7, #4]
	do{
		if(SD_SPI_ReadWriteByte(0XFF) == 0XFF)
 800b8ea:	20ff      	movs	r0, #255	@ 0xff
 800b8ec:	f7ff ffb8 	bl	800b860 <SD_SPI_ReadWriteByte>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2bff      	cmp	r3, #255	@ 0xff
 800b8f4:	d101      	bne.n	800b8fa <SD_WaitReady+0x1a>
			return 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e008      	b.n	800b90c <SD_WaitReady+0x2c>
		t++;		  	
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	607b      	str	r3, [r7, #4]
	}while(t<0XFFFFFF);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800b906:	4293      	cmp	r3, r2
 800b908:	d3ef      	bcc.n	800b8ea <SD_WaitReady+0xa>
	return 1;
 800b90a:	2301      	movs	r3, #1
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <SD_GetResponse>:
//waiting for response from sd card.
//Response: expect from sd card.
//return: succeed for 0, fail for other else 
//return: 0 for success, other for failure.   
unsigned char SD_GetResponse(unsigned char Response)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	71fb      	strb	r3, [r7, #7]
	unsigned short Count=0xFFFF;	   						  
 800b91e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b922:	81fb      	strh	r3, [r7, #14]
	while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)
 800b924:	e002      	b.n	800b92c <SD_GetResponse+0x18>
		Count--; 	  
 800b926:	89fb      	ldrh	r3, [r7, #14]
 800b928:	3b01      	subs	r3, #1
 800b92a:	81fb      	strh	r3, [r7, #14]
	while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)
 800b92c:	20ff      	movs	r0, #255	@ 0xff
 800b92e:	f7ff ff97 	bl	800b860 <SD_SPI_ReadWriteByte>
 800b932:	4603      	mov	r3, r0
 800b934:	461a      	mov	r2, r3
 800b936:	79fb      	ldrb	r3, [r7, #7]
 800b938:	4293      	cmp	r3, r2
 800b93a:	d002      	beq.n	800b942 <SD_GetResponse+0x2e>
 800b93c:	89fb      	ldrh	r3, [r7, #14]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1f1      	bne.n	800b926 <SD_GetResponse+0x12>
	if (Count==0)
 800b942:	89fb      	ldrh	r3, [r7, #14]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d101      	bne.n	800b94c <SD_GetResponse+0x38>
		return MSD_RESPONSE_FAILURE;  
 800b948:	23ff      	movs	r3, #255	@ 0xff
 800b94a:	e000      	b.n	800b94e <SD_GetResponse+0x3a>
	else 
		return MSD_RESPONSE_NO_ERROR;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <SD_RecvData>:
//read a buffer from sd card.
//*buf: pointer to a buffer.
//len: length of the buffer.
//return: 0 for success, other for failure.   
unsigned char SD_RecvData(unsigned char *buf,unsigned short len)
{			  	  
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	807b      	strh	r3, [r7, #2]
	if(SD_GetResponse(0xFE))
 800b962:	20fe      	movs	r0, #254	@ 0xfe
 800b964:	f7ff ffd6 	bl	800b914 <SD_GetResponse>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00b      	beq.n	800b986 <SD_RecvData+0x30>
		return 1;//waiting for start command send back from sd card.
 800b96e:	2301      	movs	r3, #1
 800b970:	e015      	b.n	800b99e <SD_RecvData+0x48>
    while(len--){//receiving data...
        *buf = SD_SPI_ReadWriteByte(0xFF);
 800b972:	20ff      	movs	r0, #255	@ 0xff
 800b974:	f7ff ff74 	bl	800b860 <SD_SPI_ReadWriteByte>
 800b978:	4603      	mov	r3, r0
 800b97a:	461a      	mov	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	701a      	strb	r2, [r3, #0]
        buf++;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	3301      	adds	r3, #1
 800b984:	607b      	str	r3, [r7, #4]
    while(len--){//receiving data...
 800b986:	887b      	ldrh	r3, [r7, #2]
 800b988:	1e5a      	subs	r2, r3, #1
 800b98a:	807a      	strh	r2, [r7, #2]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1f0      	bne.n	800b972 <SD_RecvData+0x1c>
    }

    //send 2 dummy write (dummy CRC)
    SD_SPI_ReadWriteByte(0xFF);
 800b990:	20ff      	movs	r0, #255	@ 0xff
 800b992:	f7ff ff65 	bl	800b860 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(0xFF);									  					    
 800b996:	20ff      	movs	r0, #255	@ 0xff
 800b998:	f7ff ff62 	bl	800b860 <SD_SPI_ReadWriteByte>
    return 0;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <SD_SendBlock>:
//write a buffer containing 512 bytes to sd card.
//buf: data buffer
//cmd: command
//return: 0 for success, other for failure.   
unsigned char SD_SendBlock(unsigned char*buf,unsigned char cmd)
{	
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	70fb      	strb	r3, [r7, #3]
	unsigned short t;		  	  
	if(SD_WaitReady())return 1;
 800b9b2:	f7ff ff95 	bl	800b8e0 <SD_WaitReady>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <SD_SendBlock+0x1a>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e02a      	b.n	800ba16 <SD_SendBlock+0x70>
	SD_SPI_ReadWriteByte(cmd);
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff ff4c 	bl	800b860 <SD_SPI_ReadWriteByte>
	if(cmd!=0XFD){
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	2bfd      	cmp	r3, #253	@ 0xfd
 800b9cc:	d022      	beq.n	800ba14 <SD_SendBlock+0x6e>
		for(t=0;t<512;t++)
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	81fb      	strh	r3, [r7, #14]
 800b9d2:	e009      	b.n	800b9e8 <SD_SendBlock+0x42>
			SD_SPI_ReadWriteByte(buf[t]);
 800b9d4:	89fb      	ldrh	r3, [r7, #14]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	4413      	add	r3, r2
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff ff3f 	bl	800b860 <SD_SPI_ReadWriteByte>
		for(t=0;t<512;t++)
 800b9e2:	89fb      	ldrh	r3, [r7, #14]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	81fb      	strh	r3, [r7, #14]
 800b9e8:	89fb      	ldrh	r3, [r7, #14]
 800b9ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9ee:	d3f1      	bcc.n	800b9d4 <SD_SendBlock+0x2e>
	    SD_SPI_ReadWriteByte(0xFF);//ignoring CRC
 800b9f0:	20ff      	movs	r0, #255	@ 0xff
 800b9f2:	f7ff ff35 	bl	800b860 <SD_SPI_ReadWriteByte>
	    SD_SPI_ReadWriteByte(0xFF);
 800b9f6:	20ff      	movs	r0, #255	@ 0xff
 800b9f8:	f7ff ff32 	bl	800b860 <SD_SPI_ReadWriteByte>
		t = SD_SPI_ReadWriteByte(0xFF);
 800b9fc:	20ff      	movs	r0, #255	@ 0xff
 800b9fe:	f7ff ff2f 	bl	800b860 <SD_SPI_ReadWriteByte>
 800ba02:	4603      	mov	r3, r0
 800ba04:	81fb      	strh	r3, [r7, #14]
		if((t&0x1F)!=0x05)
 800ba06:	89fb      	ldrh	r3, [r7, #14]
 800ba08:	f003 031f 	and.w	r3, r3, #31
 800ba0c:	2b05      	cmp	r3, #5
 800ba0e:	d001      	beq.n	800ba14 <SD_SendBlock+0x6e>
			return 2;								  					    
 800ba10:	2302      	movs	r3, #2
 800ba12:	e000      	b.n	800ba16 <SD_SendBlock+0x70>
	}						 									  					    
    return 0;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <SD_SendCmd>:
//cmd��command
//arg: parameter
//crc: crc
//return: response sent back from sd card.
unsigned char SD_SendCmd(unsigned char cmd, unsigned int arg, unsigned char crc)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	4603      	mov	r3, r0
 800ba26:	6039      	str	r1, [r7, #0]
 800ba28:	71fb      	strb	r3, [r7, #7]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	71bb      	strb	r3, [r7, #6]
    unsigned char r1;	
	unsigned char Retry=0; 
 800ba2e:	2300      	movs	r3, #0
 800ba30:	73fb      	strb	r3, [r7, #15]
	SD_DisSelect();
 800ba32:	f7ff ff31 	bl	800b898 <SD_DisSelect>
	if(SD_Select())return 0XFF;
 800ba36:	f7ff ff3d 	bl	800b8b4 <SD_Select>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <SD_SendCmd+0x26>
 800ba40:	23ff      	movs	r3, #255	@ 0xff
 800ba42:	e038      	b.n	800bab6 <SD_SendCmd+0x98>

    SD_SPI_ReadWriteByte(cmd | 0x40);
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7ff ff07 	bl	800b860 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 24);
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	0e1b      	lsrs	r3, r3, #24
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7ff ff01 	bl	800b860 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 16);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	0c1b      	lsrs	r3, r3, #16
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fefb 	bl	800b860 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 8);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	0a1b      	lsrs	r3, r3, #8
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff fef5 	bl	800b860 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg);	  
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff fef0 	bl	800b860 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(crc); 
 800ba80:	79bb      	ldrb	r3, [r7, #6]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff feec 	bl	800b860 <SD_SPI_ReadWriteByte>
	if(cmd == CMD12)SD_SPI_ReadWriteByte(0xff); //Skip a stuff byte when stop reading
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	2b0c      	cmp	r3, #12
 800ba8c:	d102      	bne.n	800ba94 <SD_SendCmd+0x76>
 800ba8e:	20ff      	movs	r0, #255	@ 0xff
 800ba90:	f7ff fee6 	bl	800b860 <SD_SPI_ReadWriteByte>
	Retry = 0X1F;
 800ba94:	231f      	movs	r3, #31
 800ba96:	73fb      	strb	r3, [r7, #15]
	do{
		r1 = SD_SPI_ReadWriteByte(0xFF);
 800ba98:	20ff      	movs	r0, #255	@ 0xff
 800ba9a:	f7ff fee1 	bl	800b860 <SD_SPI_ReadWriteByte>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73bb      	strb	r3, [r7, #14]
	}while((r1&0X80) && Retry--);	 
 800baa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	da04      	bge.n	800bab4 <SD_SendCmd+0x96>
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	1e5a      	subs	r2, r3, #1
 800baae:	73fa      	strb	r2, [r7, #15]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1f1      	bne.n	800ba98 <SD_SendCmd+0x7a>

    return r1;
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
	...

0800bac0 <SD_Initialize>:
    return Capacity;
}

//initialize sd card 
unsigned char SD_Initialize(void)
{
 800bac0:	b590      	push	{r4, r7, lr}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
    unsigned char r1;      
    unsigned short retry;  
    unsigned char buf[4];  
	unsigned short i;
    
    SD_CS_1;
 800bac6:	2201      	movs	r2, #1
 800bac8:	2110      	movs	r1, #16
 800baca:	487a      	ldr	r0, [pc, #488]	@ (800bcb4 <SD_Initialize+0x1f4>)
 800bacc:	f7f5 fe38 	bl	8001740 <HAL_GPIO_WritePin>
 	SD_SPI_SpeedLow();	
 800bad0:	f7ff fed4 	bl	800b87c <SD_SPI_SpeedLow>
 	for(i=0;i<10;i++)SD_SPI_ReadWriteByte(0XFF);
 800bad4:	2300      	movs	r3, #0
 800bad6:	817b      	strh	r3, [r7, #10]
 800bad8:	e005      	b.n	800bae6 <SD_Initialize+0x26>
 800bada:	20ff      	movs	r0, #255	@ 0xff
 800badc:	f7ff fec0 	bl	800b860 <SD_SPI_ReadWriteByte>
 800bae0:	897b      	ldrh	r3, [r7, #10]
 800bae2:	3301      	adds	r3, #1
 800bae4:	817b      	strh	r3, [r7, #10]
 800bae6:	897b      	ldrh	r3, [r7, #10]
 800bae8:	2b09      	cmp	r3, #9
 800baea:	d9f6      	bls.n	800bada <SD_Initialize+0x1a>
	retry=20;
 800baec:	2314      	movs	r3, #20
 800baee:	81bb      	strh	r3, [r7, #12]
	do
	{
		r1=SD_SendCmd(CMD0,0,0x95);//enter to idle state
 800baf0:	2295      	movs	r2, #149	@ 0x95
 800baf2:	2100      	movs	r1, #0
 800baf4:	2000      	movs	r0, #0
 800baf6:	f7ff ff92 	bl	800ba1e <SD_SendCmd>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73fb      	strb	r3, [r7, #15]
	}while((r1!=0X01) && retry--);
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d004      	beq.n	800bb0e <SD_Initialize+0x4e>
 800bb04:	89bb      	ldrh	r3, [r7, #12]
 800bb06:	1e5a      	subs	r2, r3, #1
 800bb08:	81ba      	strh	r2, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1f0      	bne.n	800baf0 <SD_Initialize+0x30>
 	SD_Type=0;
 800bb0e:	4b6a      	ldr	r3, [pc, #424]	@ (800bcb8 <SD_Initialize+0x1f8>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	701a      	strb	r2, [r3, #0]
    
	if(r1==0X01)
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	f040 80b7 	bne.w	800bc8a <SD_Initialize+0x1ca>
	{
		if(SD_SendCmd(CMD8,0x1AA,0x87)==1)//SD V2.0
 800bb1c:	2287      	movs	r2, #135	@ 0x87
 800bb1e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800bb22:	2008      	movs	r0, #8
 800bb24:	f7ff ff7b 	bl	800ba1e <SD_SendCmd>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d15f      	bne.n	800bbee <SD_Initialize+0x12e>
		{
			for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);	//Get trailing return value of R7 resp
 800bb2e:	2300      	movs	r3, #0
 800bb30:	817b      	strh	r3, [r7, #10]
 800bb32:	e00d      	b.n	800bb50 <SD_Initialize+0x90>
 800bb34:	897c      	ldrh	r4, [r7, #10]
 800bb36:	20ff      	movs	r0, #255	@ 0xff
 800bb38:	f7ff fe92 	bl	800b860 <SD_SPI_ReadWriteByte>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	461a      	mov	r2, r3
 800bb40:	f104 0310 	add.w	r3, r4, #16
 800bb44:	443b      	add	r3, r7
 800bb46:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800bb4a:	897b      	ldrh	r3, [r7, #10]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	817b      	strh	r3, [r7, #10]
 800bb50:	897b      	ldrh	r3, [r7, #10]
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d9ee      	bls.n	800bb34 <SD_Initialize+0x74>
			if(buf[2]==0X01&&buf[3]==0XAA)//is it support of 2.7~3.6V 
 800bb56:	79bb      	ldrb	r3, [r7, #6]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	f040 8096 	bne.w	800bc8a <SD_Initialize+0x1ca>
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	2baa      	cmp	r3, #170	@ 0xaa
 800bb62:	f040 8092 	bne.w	800bc8a <SD_Initialize+0x1ca>
			{
				retry=0XFFFE;
 800bb66:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800bb6a:	81bb      	strh	r3, [r7, #12]
				do
				{
					SD_SendCmd(CMD55,0,0X01);	
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	2100      	movs	r1, #0
 800bb70:	2037      	movs	r0, #55	@ 0x37
 800bb72:	f7ff ff54 	bl	800ba1e <SD_SendCmd>
					r1=SD_SendCmd(CMD41,0x40000000,0X01);
 800bb76:	2201      	movs	r2, #1
 800bb78:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bb7c:	2029      	movs	r0, #41	@ 0x29
 800bb7e:	f7ff ff4e 	bl	800ba1e <SD_SendCmd>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d004      	beq.n	800bb96 <SD_Initialize+0xd6>
 800bb8c:	89bb      	ldrh	r3, [r7, #12]
 800bb8e:	1e5a      	subs	r2, r3, #1
 800bb90:	81ba      	strh	r2, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1ea      	bne.n	800bb6c <SD_Initialize+0xac>
				if(retry&&SD_SendCmd(CMD58,0,0X01)==0) //start to identify the SD2.0 version of sd card.
 800bb96:	89bb      	ldrh	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d076      	beq.n	800bc8a <SD_Initialize+0x1ca>
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	2100      	movs	r1, #0
 800bba0:	203a      	movs	r0, #58	@ 0x3a
 800bba2:	f7ff ff3c 	bl	800ba1e <SD_SendCmd>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d16e      	bne.n	800bc8a <SD_Initialize+0x1ca>
				{
					for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);//get OCR
 800bbac:	2300      	movs	r3, #0
 800bbae:	817b      	strh	r3, [r7, #10]
 800bbb0:	e00d      	b.n	800bbce <SD_Initialize+0x10e>
 800bbb2:	897c      	ldrh	r4, [r7, #10]
 800bbb4:	20ff      	movs	r0, #255	@ 0xff
 800bbb6:	f7ff fe53 	bl	800b860 <SD_SPI_ReadWriteByte>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	f104 0310 	add.w	r3, r4, #16
 800bbc2:	443b      	add	r3, r7
 800bbc4:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800bbc8:	897b      	ldrh	r3, [r7, #10]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	817b      	strh	r3, [r7, #10]
 800bbce:	897b      	ldrh	r3, [r7, #10]
 800bbd0:	2b03      	cmp	r3, #3
 800bbd2:	d9ee      	bls.n	800bbb2 <SD_Initialize+0xf2>
					if(buf[0]&0x40)SD_Type=SD_TYPE_V2HC;    //check CCS
 800bbd4:	793b      	ldrb	r3, [r7, #4]
 800bbd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <SD_Initialize+0x126>
 800bbde:	4b36      	ldr	r3, [pc, #216]	@ (800bcb8 <SD_Initialize+0x1f8>)
 800bbe0:	2206      	movs	r2, #6
 800bbe2:	701a      	strb	r2, [r3, #0]
 800bbe4:	e051      	b.n	800bc8a <SD_Initialize+0x1ca>
					else SD_Type=SD_TYPE_V2;   
 800bbe6:	4b34      	ldr	r3, [pc, #208]	@ (800bcb8 <SD_Initialize+0x1f8>)
 800bbe8:	2204      	movs	r2, #4
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	e04d      	b.n	800bc8a <SD_Initialize+0x1ca>
				}
			}
		}else//SD V1.x/ MMC	V3
		{
			SD_SendCmd(CMD55,0,0X01);		
 800bbee:	2201      	movs	r2, #1
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	2037      	movs	r0, #55	@ 0x37
 800bbf4:	f7ff ff13 	bl	800ba1e <SD_SendCmd>
			r1=SD_SendCmd(CMD41,0,0X01);	
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	2029      	movs	r0, #41	@ 0x29
 800bbfe:	f7ff ff0e 	bl	800ba1e <SD_SendCmd>
 800bc02:	4603      	mov	r3, r0
 800bc04:	73fb      	strb	r3, [r7, #15]
			if(r1<=1)
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d81a      	bhi.n	800bc42 <SD_Initialize+0x182>
			{		
				SD_Type=SD_TYPE_V1;
 800bc0c:	4b2a      	ldr	r3, [pc, #168]	@ (800bcb8 <SD_Initialize+0x1f8>)
 800bc0e:	2202      	movs	r2, #2
 800bc10:	701a      	strb	r2, [r3, #0]
				retry=0XFFFE;
 800bc12:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800bc16:	81bb      	strh	r3, [r7, #12]
				do //exit idle state
				{
					SD_SendCmd(CMD55,0,0X01);	
 800bc18:	2201      	movs	r2, #1
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	2037      	movs	r0, #55	@ 0x37
 800bc1e:	f7ff fefe 	bl	800ba1e <SD_SendCmd>
					r1=SD_SendCmd(CMD41,0,0X01);
 800bc22:	2201      	movs	r2, #1
 800bc24:	2100      	movs	r1, #0
 800bc26:	2029      	movs	r0, #41	@ 0x29
 800bc28:	f7ff fef9 	bl	800ba1e <SD_SendCmd>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d01a      	beq.n	800bc6c <SD_Initialize+0x1ac>
 800bc36:	89bb      	ldrh	r3, [r7, #12]
 800bc38:	1e5a      	subs	r2, r3, #1
 800bc3a:	81ba      	strh	r2, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1eb      	bne.n	800bc18 <SD_Initialize+0x158>
 800bc40:	e014      	b.n	800bc6c <SD_Initialize+0x1ac>
			}else
			{
				SD_Type=SD_TYPE_MMC;//MMC V3
 800bc42:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb8 <SD_Initialize+0x1f8>)
 800bc44:	2201      	movs	r2, #1
 800bc46:	701a      	strb	r2, [r3, #0]
				retry=0XFFFE;
 800bc48:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800bc4c:	81bb      	strh	r3, [r7, #12]
				do 
				{											    
					r1=SD_SendCmd(CMD1,0,0X01);
 800bc4e:	2201      	movs	r2, #1
 800bc50:	2100      	movs	r1, #0
 800bc52:	2001      	movs	r0, #1
 800bc54:	f7ff fee3 	bl	800ba1e <SD_SendCmd>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);  
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d004      	beq.n	800bc6c <SD_Initialize+0x1ac>
 800bc62:	89bb      	ldrh	r3, [r7, #12]
 800bc64:	1e5a      	subs	r2, r3, #1
 800bc66:	81ba      	strh	r2, [r7, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1f0      	bne.n	800bc4e <SD_Initialize+0x18e>
			}
			if(retry==0||SD_SendCmd(CMD16,512,0X01)!=0)SD_Type=SD_TYPE_ERR;
 800bc6c:	89bb      	ldrh	r3, [r7, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d008      	beq.n	800bc84 <SD_Initialize+0x1c4>
 800bc72:	2201      	movs	r2, #1
 800bc74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc78:	2010      	movs	r0, #16
 800bc7a:	f7ff fed0 	bl	800ba1e <SD_SendCmd>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d002      	beq.n	800bc8a <SD_Initialize+0x1ca>
 800bc84:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb8 <SD_Initialize+0x1f8>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
		}
	}
	SD_DisSelect();
 800bc8a:	f7ff fe05 	bl	800b898 <SD_DisSelect>
	SD_SPI_SpeedHigh();
 800bc8e:	f7ff fdfc 	bl	800b88a <SD_SPI_SpeedHigh>
	if(SD_Type)return 0;
 800bc92:	4b09      	ldr	r3, [pc, #36]	@ (800bcb8 <SD_Initialize+0x1f8>)
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <SD_Initialize+0x1de>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	e005      	b.n	800bcaa <SD_Initialize+0x1ea>
	else if(r1)return r1; 	   
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <SD_Initialize+0x1e8>
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	e000      	b.n	800bcaa <SD_Initialize+0x1ea>
	return 0xaa;
 800bca8:	23aa      	movs	r3, #170	@ 0xaa
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3714      	adds	r7, #20
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd90      	pop	{r4, r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	40020400 	.word	0x40020400
 800bcb8:	2000214c 	.word	0x2000214c

0800bcbc <SD_ReadDisk>:
//buf: data buffer
//sector: sector
//cnt: totals of sectors]
//return: 0 ok, other for failure
unsigned char SD_ReadDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	71fb      	strb	r3, [r7, #7]
	unsigned char r1;
	if(SD_Type!=SD_TYPE_V2HC)sector <<= 9;
 800bcca:	4b21      	ldr	r3, [pc, #132]	@ (800bd50 <SD_ReadDisk+0x94>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b06      	cmp	r3, #6
 800bcd0:	d002      	beq.n	800bcd8 <SD_ReadDisk+0x1c>
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	025b      	lsls	r3, r3, #9
 800bcd6:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800bcd8:	79fb      	ldrb	r3, [r7, #7]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d111      	bne.n	800bd02 <SD_ReadDisk+0x46>
	{
		r1=SD_SendCmd(CMD17,sector,0X01);
 800bcde:	2201      	movs	r2, #1
 800bce0:	68b9      	ldr	r1, [r7, #8]
 800bce2:	2011      	movs	r0, #17
 800bce4:	f7ff fe9b 	bl	800ba1e <SD_SendCmd>
 800bce8:	4603      	mov	r3, r0
 800bcea:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800bcec:	7dfb      	ldrb	r3, [r7, #23]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d127      	bne.n	800bd42 <SD_ReadDisk+0x86>
		{
			r1=SD_RecvData(buf,512);   
 800bcf2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f7ff fe2d 	bl	800b956 <SD_RecvData>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	75fb      	strb	r3, [r7, #23]
 800bd00:	e01f      	b.n	800bd42 <SD_ReadDisk+0x86>
		}
	}else
	{
		r1=SD_SendCmd(CMD18,sector,0X01);
 800bd02:	2201      	movs	r2, #1
 800bd04:	68b9      	ldr	r1, [r7, #8]
 800bd06:	2012      	movs	r0, #18
 800bd08:	f7ff fe89 	bl	800ba1e <SD_SendCmd>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_RecvData(buf,512);
 800bd10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f7ff fe1e 	bl	800b956 <SD_RecvData>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	75fb      	strb	r3, [r7, #23]
			buf+=512;  
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800bd24:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0); 	
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	71fb      	strb	r3, [r7, #7]
 800bd2c:	79fb      	ldrb	r3, [r7, #7]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <SD_ReadDisk+0x7c>
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0eb      	beq.n	800bd10 <SD_ReadDisk+0x54>
		SD_SendCmd(CMD12,0,0X01);	
 800bd38:	2201      	movs	r2, #1
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	200c      	movs	r0, #12
 800bd3e:	f7ff fe6e 	bl	800ba1e <SD_SendCmd>
	}   
	SD_DisSelect();
 800bd42:	f7ff fda9 	bl	800b898 <SD_DisSelect>
	return r1;//
 800bd46:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	2000214c 	.word	0x2000214c

0800bd54 <SD_WriteDisk>:
//buf: data buffer
//sector: start sector
//cnt: totals of sectors]
//return: 0 ok, other for failure
unsigned char SD_WriteDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	71fb      	strb	r3, [r7, #7]
	unsigned char r1;
	if(SD_Type!=SD_TYPE_V2HC)sector *= 512;
 800bd62:	4b2a      	ldr	r3, [pc, #168]	@ (800be0c <SD_WriteDisk+0xb8>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b06      	cmp	r3, #6
 800bd68:	d002      	beq.n	800bd70 <SD_WriteDisk+0x1c>
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	025b      	lsls	r3, r3, #9
 800bd6e:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800bd70:	79fb      	ldrb	r3, [r7, #7]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d110      	bne.n	800bd98 <SD_WriteDisk+0x44>
	{
		r1=SD_SendCmd(CMD24,sector,0X01);
 800bd76:	2201      	movs	r2, #1
 800bd78:	68b9      	ldr	r1, [r7, #8]
 800bd7a:	2018      	movs	r0, #24
 800bd7c:	f7ff fe4f 	bl	800ba1e <SD_SendCmd>
 800bd80:	4603      	mov	r3, r0
 800bd82:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d138      	bne.n	800bdfc <SD_WriteDisk+0xa8>
		{
			r1=SD_SendBlock(buf,0xFE); 
 800bd8a:	21fe      	movs	r1, #254	@ 0xfe
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f7ff fe0a 	bl	800b9a6 <SD_SendBlock>
 800bd92:	4603      	mov	r3, r0
 800bd94:	75fb      	strb	r3, [r7, #23]
 800bd96:	e031      	b.n	800bdfc <SD_WriteDisk+0xa8>
		}
	}else
	{
		if(SD_Type!=SD_TYPE_MMC)
 800bd98:	4b1c      	ldr	r3, [pc, #112]	@ (800be0c <SD_WriteDisk+0xb8>)
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d00a      	beq.n	800bdb6 <SD_WriteDisk+0x62>
		{
			SD_SendCmd(CMD55,0,0X01);	
 800bda0:	2201      	movs	r2, #1
 800bda2:	2100      	movs	r1, #0
 800bda4:	2037      	movs	r0, #55	@ 0x37
 800bda6:	f7ff fe3a 	bl	800ba1e <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0X01);	
 800bdaa:	79fb      	ldrb	r3, [r7, #7]
 800bdac:	2201      	movs	r2, #1
 800bdae:	4619      	mov	r1, r3
 800bdb0:	2017      	movs	r0, #23
 800bdb2:	f7ff fe34 	bl	800ba1e <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0X01);
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	68b9      	ldr	r1, [r7, #8]
 800bdba:	2019      	movs	r0, #25
 800bdbc:	f7ff fe2f 	bl	800ba1e <SD_SendCmd>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800bdc4:	7dfb      	ldrb	r3, [r7, #23]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d118      	bne.n	800bdfc <SD_WriteDisk+0xa8>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); 
 800bdca:	21fc      	movs	r1, #252	@ 0xfc
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f7ff fdea 	bl	800b9a6 <SD_SendBlock>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	75fb      	strb	r3, [r7, #23]
				buf+=512;  
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800bddc:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	71fb      	strb	r3, [r7, #7]
 800bde4:	79fb      	ldrb	r3, [r7, #7]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <SD_WriteDisk+0x9c>
 800bdea:	7dfb      	ldrb	r3, [r7, #23]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d0ec      	beq.n	800bdca <SD_WriteDisk+0x76>
			r1=SD_SendBlock(0,0xFD);
 800bdf0:	21fd      	movs	r1, #253	@ 0xfd
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	f7ff fdd7 	bl	800b9a6 <SD_SendBlock>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	75fb      	strb	r3, [r7, #23]
		}
	}   
	SD_DisSelect();
 800bdfc:	f7ff fd4c 	bl	800b898 <SD_DisSelect>
	return r1;
 800be00:	7dfb      	ldrb	r3, [r7, #23]
}	   
 800be02:	4618      	mov	r0, r3
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	2000214c 	.word	0x2000214c

0800be10 <malloc>:
 800be10:	4b02      	ldr	r3, [pc, #8]	@ (800be1c <malloc+0xc>)
 800be12:	4601      	mov	r1, r0
 800be14:	6818      	ldr	r0, [r3, #0]
 800be16:	f000 b825 	b.w	800be64 <_malloc_r>
 800be1a:	bf00      	nop
 800be1c:	20000130 	.word	0x20000130

0800be20 <sbrk_aligned>:
 800be20:	b570      	push	{r4, r5, r6, lr}
 800be22:	4e0f      	ldr	r6, [pc, #60]	@ (800be60 <sbrk_aligned+0x40>)
 800be24:	460c      	mov	r4, r1
 800be26:	6831      	ldr	r1, [r6, #0]
 800be28:	4605      	mov	r5, r0
 800be2a:	b911      	cbnz	r1, 800be32 <sbrk_aligned+0x12>
 800be2c:	f000 faec 	bl	800c408 <_sbrk_r>
 800be30:	6030      	str	r0, [r6, #0]
 800be32:	4621      	mov	r1, r4
 800be34:	4628      	mov	r0, r5
 800be36:	f000 fae7 	bl	800c408 <_sbrk_r>
 800be3a:	1c43      	adds	r3, r0, #1
 800be3c:	d103      	bne.n	800be46 <sbrk_aligned+0x26>
 800be3e:	f04f 34ff 	mov.w	r4, #4294967295
 800be42:	4620      	mov	r0, r4
 800be44:	bd70      	pop	{r4, r5, r6, pc}
 800be46:	1cc4      	adds	r4, r0, #3
 800be48:	f024 0403 	bic.w	r4, r4, #3
 800be4c:	42a0      	cmp	r0, r4
 800be4e:	d0f8      	beq.n	800be42 <sbrk_aligned+0x22>
 800be50:	1a21      	subs	r1, r4, r0
 800be52:	4628      	mov	r0, r5
 800be54:	f000 fad8 	bl	800c408 <_sbrk_r>
 800be58:	3001      	adds	r0, #1
 800be5a:	d1f2      	bne.n	800be42 <sbrk_aligned+0x22>
 800be5c:	e7ef      	b.n	800be3e <sbrk_aligned+0x1e>
 800be5e:	bf00      	nop
 800be60:	20002150 	.word	0x20002150

0800be64 <_malloc_r>:
 800be64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be68:	1ccd      	adds	r5, r1, #3
 800be6a:	f025 0503 	bic.w	r5, r5, #3
 800be6e:	3508      	adds	r5, #8
 800be70:	2d0c      	cmp	r5, #12
 800be72:	bf38      	it	cc
 800be74:	250c      	movcc	r5, #12
 800be76:	2d00      	cmp	r5, #0
 800be78:	4606      	mov	r6, r0
 800be7a:	db01      	blt.n	800be80 <_malloc_r+0x1c>
 800be7c:	42a9      	cmp	r1, r5
 800be7e:	d904      	bls.n	800be8a <_malloc_r+0x26>
 800be80:	230c      	movs	r3, #12
 800be82:	6033      	str	r3, [r6, #0]
 800be84:	2000      	movs	r0, #0
 800be86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf60 <_malloc_r+0xfc>
 800be8e:	f000 f869 	bl	800bf64 <__malloc_lock>
 800be92:	f8d8 3000 	ldr.w	r3, [r8]
 800be96:	461c      	mov	r4, r3
 800be98:	bb44      	cbnz	r4, 800beec <_malloc_r+0x88>
 800be9a:	4629      	mov	r1, r5
 800be9c:	4630      	mov	r0, r6
 800be9e:	f7ff ffbf 	bl	800be20 <sbrk_aligned>
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	4604      	mov	r4, r0
 800bea6:	d158      	bne.n	800bf5a <_malloc_r+0xf6>
 800bea8:	f8d8 4000 	ldr.w	r4, [r8]
 800beac:	4627      	mov	r7, r4
 800beae:	2f00      	cmp	r7, #0
 800beb0:	d143      	bne.n	800bf3a <_malloc_r+0xd6>
 800beb2:	2c00      	cmp	r4, #0
 800beb4:	d04b      	beq.n	800bf4e <_malloc_r+0xea>
 800beb6:	6823      	ldr	r3, [r4, #0]
 800beb8:	4639      	mov	r1, r7
 800beba:	4630      	mov	r0, r6
 800bebc:	eb04 0903 	add.w	r9, r4, r3
 800bec0:	f000 faa2 	bl	800c408 <_sbrk_r>
 800bec4:	4581      	cmp	r9, r0
 800bec6:	d142      	bne.n	800bf4e <_malloc_r+0xea>
 800bec8:	6821      	ldr	r1, [r4, #0]
 800beca:	1a6d      	subs	r5, r5, r1
 800becc:	4629      	mov	r1, r5
 800bece:	4630      	mov	r0, r6
 800bed0:	f7ff ffa6 	bl	800be20 <sbrk_aligned>
 800bed4:	3001      	adds	r0, #1
 800bed6:	d03a      	beq.n	800bf4e <_malloc_r+0xea>
 800bed8:	6823      	ldr	r3, [r4, #0]
 800beda:	442b      	add	r3, r5
 800bedc:	6023      	str	r3, [r4, #0]
 800bede:	f8d8 3000 	ldr.w	r3, [r8]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	bb62      	cbnz	r2, 800bf40 <_malloc_r+0xdc>
 800bee6:	f8c8 7000 	str.w	r7, [r8]
 800beea:	e00f      	b.n	800bf0c <_malloc_r+0xa8>
 800beec:	6822      	ldr	r2, [r4, #0]
 800beee:	1b52      	subs	r2, r2, r5
 800bef0:	d420      	bmi.n	800bf34 <_malloc_r+0xd0>
 800bef2:	2a0b      	cmp	r2, #11
 800bef4:	d917      	bls.n	800bf26 <_malloc_r+0xc2>
 800bef6:	1961      	adds	r1, r4, r5
 800bef8:	42a3      	cmp	r3, r4
 800befa:	6025      	str	r5, [r4, #0]
 800befc:	bf18      	it	ne
 800befe:	6059      	strne	r1, [r3, #4]
 800bf00:	6863      	ldr	r3, [r4, #4]
 800bf02:	bf08      	it	eq
 800bf04:	f8c8 1000 	streq.w	r1, [r8]
 800bf08:	5162      	str	r2, [r4, r5]
 800bf0a:	604b      	str	r3, [r1, #4]
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	f000 f82f 	bl	800bf70 <__malloc_unlock>
 800bf12:	f104 000b 	add.w	r0, r4, #11
 800bf16:	1d23      	adds	r3, r4, #4
 800bf18:	f020 0007 	bic.w	r0, r0, #7
 800bf1c:	1ac2      	subs	r2, r0, r3
 800bf1e:	bf1c      	itt	ne
 800bf20:	1a1b      	subne	r3, r3, r0
 800bf22:	50a3      	strne	r3, [r4, r2]
 800bf24:	e7af      	b.n	800be86 <_malloc_r+0x22>
 800bf26:	6862      	ldr	r2, [r4, #4]
 800bf28:	42a3      	cmp	r3, r4
 800bf2a:	bf0c      	ite	eq
 800bf2c:	f8c8 2000 	streq.w	r2, [r8]
 800bf30:	605a      	strne	r2, [r3, #4]
 800bf32:	e7eb      	b.n	800bf0c <_malloc_r+0xa8>
 800bf34:	4623      	mov	r3, r4
 800bf36:	6864      	ldr	r4, [r4, #4]
 800bf38:	e7ae      	b.n	800be98 <_malloc_r+0x34>
 800bf3a:	463c      	mov	r4, r7
 800bf3c:	687f      	ldr	r7, [r7, #4]
 800bf3e:	e7b6      	b.n	800beae <_malloc_r+0x4a>
 800bf40:	461a      	mov	r2, r3
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	d1fb      	bne.n	800bf40 <_malloc_r+0xdc>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	6053      	str	r3, [r2, #4]
 800bf4c:	e7de      	b.n	800bf0c <_malloc_r+0xa8>
 800bf4e:	230c      	movs	r3, #12
 800bf50:	6033      	str	r3, [r6, #0]
 800bf52:	4630      	mov	r0, r6
 800bf54:	f000 f80c 	bl	800bf70 <__malloc_unlock>
 800bf58:	e794      	b.n	800be84 <_malloc_r+0x20>
 800bf5a:	6005      	str	r5, [r0, #0]
 800bf5c:	e7d6      	b.n	800bf0c <_malloc_r+0xa8>
 800bf5e:	bf00      	nop
 800bf60:	20002154 	.word	0x20002154

0800bf64 <__malloc_lock>:
 800bf64:	4801      	ldr	r0, [pc, #4]	@ (800bf6c <__malloc_lock+0x8>)
 800bf66:	f000 ba9c 	b.w	800c4a2 <__retarget_lock_acquire_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20002298 	.word	0x20002298

0800bf70 <__malloc_unlock>:
 800bf70:	4801      	ldr	r0, [pc, #4]	@ (800bf78 <__malloc_unlock+0x8>)
 800bf72:	f000 ba97 	b.w	800c4a4 <__retarget_lock_release_recursive>
 800bf76:	bf00      	nop
 800bf78:	20002298 	.word	0x20002298

0800bf7c <std>:
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	b510      	push	{r4, lr}
 800bf80:	4604      	mov	r4, r0
 800bf82:	e9c0 3300 	strd	r3, r3, [r0]
 800bf86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf8a:	6083      	str	r3, [r0, #8]
 800bf8c:	8181      	strh	r1, [r0, #12]
 800bf8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf90:	81c2      	strh	r2, [r0, #14]
 800bf92:	6183      	str	r3, [r0, #24]
 800bf94:	4619      	mov	r1, r3
 800bf96:	2208      	movs	r2, #8
 800bf98:	305c      	adds	r0, #92	@ 0x5c
 800bf9a:	f000 f9f9 	bl	800c390 <memset>
 800bf9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfd4 <std+0x58>)
 800bfa0:	6263      	str	r3, [r4, #36]	@ 0x24
 800bfa2:	4b0d      	ldr	r3, [pc, #52]	@ (800bfd8 <std+0x5c>)
 800bfa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bfa6:	4b0d      	ldr	r3, [pc, #52]	@ (800bfdc <std+0x60>)
 800bfa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe0 <std+0x64>)
 800bfac:	6323      	str	r3, [r4, #48]	@ 0x30
 800bfae:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe4 <std+0x68>)
 800bfb0:	6224      	str	r4, [r4, #32]
 800bfb2:	429c      	cmp	r4, r3
 800bfb4:	d006      	beq.n	800bfc4 <std+0x48>
 800bfb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bfba:	4294      	cmp	r4, r2
 800bfbc:	d002      	beq.n	800bfc4 <std+0x48>
 800bfbe:	33d0      	adds	r3, #208	@ 0xd0
 800bfc0:	429c      	cmp	r4, r3
 800bfc2:	d105      	bne.n	800bfd0 <std+0x54>
 800bfc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfcc:	f000 ba68 	b.w	800c4a0 <__retarget_lock_init_recursive>
 800bfd0:	bd10      	pop	{r4, pc}
 800bfd2:	bf00      	nop
 800bfd4:	0800c1e1 	.word	0x0800c1e1
 800bfd8:	0800c203 	.word	0x0800c203
 800bfdc:	0800c23b 	.word	0x0800c23b
 800bfe0:	0800c25f 	.word	0x0800c25f
 800bfe4:	20002158 	.word	0x20002158

0800bfe8 <stdio_exit_handler>:
 800bfe8:	4a02      	ldr	r2, [pc, #8]	@ (800bff4 <stdio_exit_handler+0xc>)
 800bfea:	4903      	ldr	r1, [pc, #12]	@ (800bff8 <stdio_exit_handler+0x10>)
 800bfec:	4803      	ldr	r0, [pc, #12]	@ (800bffc <stdio_exit_handler+0x14>)
 800bfee:	f000 b869 	b.w	800c0c4 <_fwalk_sglue>
 800bff2:	bf00      	nop
 800bff4:	20000124 	.word	0x20000124
 800bff8:	0800cbe1 	.word	0x0800cbe1
 800bffc:	20000134 	.word	0x20000134

0800c000 <cleanup_stdio>:
 800c000:	6841      	ldr	r1, [r0, #4]
 800c002:	4b0c      	ldr	r3, [pc, #48]	@ (800c034 <cleanup_stdio+0x34>)
 800c004:	4299      	cmp	r1, r3
 800c006:	b510      	push	{r4, lr}
 800c008:	4604      	mov	r4, r0
 800c00a:	d001      	beq.n	800c010 <cleanup_stdio+0x10>
 800c00c:	f000 fde8 	bl	800cbe0 <_fflush_r>
 800c010:	68a1      	ldr	r1, [r4, #8]
 800c012:	4b09      	ldr	r3, [pc, #36]	@ (800c038 <cleanup_stdio+0x38>)
 800c014:	4299      	cmp	r1, r3
 800c016:	d002      	beq.n	800c01e <cleanup_stdio+0x1e>
 800c018:	4620      	mov	r0, r4
 800c01a:	f000 fde1 	bl	800cbe0 <_fflush_r>
 800c01e:	68e1      	ldr	r1, [r4, #12]
 800c020:	4b06      	ldr	r3, [pc, #24]	@ (800c03c <cleanup_stdio+0x3c>)
 800c022:	4299      	cmp	r1, r3
 800c024:	d004      	beq.n	800c030 <cleanup_stdio+0x30>
 800c026:	4620      	mov	r0, r4
 800c028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c02c:	f000 bdd8 	b.w	800cbe0 <_fflush_r>
 800c030:	bd10      	pop	{r4, pc}
 800c032:	bf00      	nop
 800c034:	20002158 	.word	0x20002158
 800c038:	200021c0 	.word	0x200021c0
 800c03c:	20002228 	.word	0x20002228

0800c040 <global_stdio_init.part.0>:
 800c040:	b510      	push	{r4, lr}
 800c042:	4b0b      	ldr	r3, [pc, #44]	@ (800c070 <global_stdio_init.part.0+0x30>)
 800c044:	4c0b      	ldr	r4, [pc, #44]	@ (800c074 <global_stdio_init.part.0+0x34>)
 800c046:	4a0c      	ldr	r2, [pc, #48]	@ (800c078 <global_stdio_init.part.0+0x38>)
 800c048:	601a      	str	r2, [r3, #0]
 800c04a:	4620      	mov	r0, r4
 800c04c:	2200      	movs	r2, #0
 800c04e:	2104      	movs	r1, #4
 800c050:	f7ff ff94 	bl	800bf7c <std>
 800c054:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c058:	2201      	movs	r2, #1
 800c05a:	2109      	movs	r1, #9
 800c05c:	f7ff ff8e 	bl	800bf7c <std>
 800c060:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c064:	2202      	movs	r2, #2
 800c066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c06a:	2112      	movs	r1, #18
 800c06c:	f7ff bf86 	b.w	800bf7c <std>
 800c070:	20002290 	.word	0x20002290
 800c074:	20002158 	.word	0x20002158
 800c078:	0800bfe9 	.word	0x0800bfe9

0800c07c <__sfp_lock_acquire>:
 800c07c:	4801      	ldr	r0, [pc, #4]	@ (800c084 <__sfp_lock_acquire+0x8>)
 800c07e:	f000 ba10 	b.w	800c4a2 <__retarget_lock_acquire_recursive>
 800c082:	bf00      	nop
 800c084:	20002299 	.word	0x20002299

0800c088 <__sfp_lock_release>:
 800c088:	4801      	ldr	r0, [pc, #4]	@ (800c090 <__sfp_lock_release+0x8>)
 800c08a:	f000 ba0b 	b.w	800c4a4 <__retarget_lock_release_recursive>
 800c08e:	bf00      	nop
 800c090:	20002299 	.word	0x20002299

0800c094 <__sinit>:
 800c094:	b510      	push	{r4, lr}
 800c096:	4604      	mov	r4, r0
 800c098:	f7ff fff0 	bl	800c07c <__sfp_lock_acquire>
 800c09c:	6a23      	ldr	r3, [r4, #32]
 800c09e:	b11b      	cbz	r3, 800c0a8 <__sinit+0x14>
 800c0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0a4:	f7ff bff0 	b.w	800c088 <__sfp_lock_release>
 800c0a8:	4b04      	ldr	r3, [pc, #16]	@ (800c0bc <__sinit+0x28>)
 800c0aa:	6223      	str	r3, [r4, #32]
 800c0ac:	4b04      	ldr	r3, [pc, #16]	@ (800c0c0 <__sinit+0x2c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1f5      	bne.n	800c0a0 <__sinit+0xc>
 800c0b4:	f7ff ffc4 	bl	800c040 <global_stdio_init.part.0>
 800c0b8:	e7f2      	b.n	800c0a0 <__sinit+0xc>
 800c0ba:	bf00      	nop
 800c0bc:	0800c001 	.word	0x0800c001
 800c0c0:	20002290 	.word	0x20002290

0800c0c4 <_fwalk_sglue>:
 800c0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	4688      	mov	r8, r1
 800c0cc:	4614      	mov	r4, r2
 800c0ce:	2600      	movs	r6, #0
 800c0d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0d4:	f1b9 0901 	subs.w	r9, r9, #1
 800c0d8:	d505      	bpl.n	800c0e6 <_fwalk_sglue+0x22>
 800c0da:	6824      	ldr	r4, [r4, #0]
 800c0dc:	2c00      	cmp	r4, #0
 800c0de:	d1f7      	bne.n	800c0d0 <_fwalk_sglue+0xc>
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0e6:	89ab      	ldrh	r3, [r5, #12]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d907      	bls.n	800c0fc <_fwalk_sglue+0x38>
 800c0ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	d003      	beq.n	800c0fc <_fwalk_sglue+0x38>
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	47c0      	blx	r8
 800c0fa:	4306      	orrs	r6, r0
 800c0fc:	3568      	adds	r5, #104	@ 0x68
 800c0fe:	e7e9      	b.n	800c0d4 <_fwalk_sglue+0x10>

0800c100 <iprintf>:
 800c100:	b40f      	push	{r0, r1, r2, r3}
 800c102:	b507      	push	{r0, r1, r2, lr}
 800c104:	4906      	ldr	r1, [pc, #24]	@ (800c120 <iprintf+0x20>)
 800c106:	ab04      	add	r3, sp, #16
 800c108:	6808      	ldr	r0, [r1, #0]
 800c10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c10e:	6881      	ldr	r1, [r0, #8]
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	f000 fa3d 	bl	800c590 <_vfiprintf_r>
 800c116:	b003      	add	sp, #12
 800c118:	f85d eb04 	ldr.w	lr, [sp], #4
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr
 800c120:	20000130 	.word	0x20000130

0800c124 <_puts_r>:
 800c124:	6a03      	ldr	r3, [r0, #32]
 800c126:	b570      	push	{r4, r5, r6, lr}
 800c128:	6884      	ldr	r4, [r0, #8]
 800c12a:	4605      	mov	r5, r0
 800c12c:	460e      	mov	r6, r1
 800c12e:	b90b      	cbnz	r3, 800c134 <_puts_r+0x10>
 800c130:	f7ff ffb0 	bl	800c094 <__sinit>
 800c134:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c136:	07db      	lsls	r3, r3, #31
 800c138:	d405      	bmi.n	800c146 <_puts_r+0x22>
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	0598      	lsls	r0, r3, #22
 800c13e:	d402      	bmi.n	800c146 <_puts_r+0x22>
 800c140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c142:	f000 f9ae 	bl	800c4a2 <__retarget_lock_acquire_recursive>
 800c146:	89a3      	ldrh	r3, [r4, #12]
 800c148:	0719      	lsls	r1, r3, #28
 800c14a:	d502      	bpl.n	800c152 <_puts_r+0x2e>
 800c14c:	6923      	ldr	r3, [r4, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d135      	bne.n	800c1be <_puts_r+0x9a>
 800c152:	4621      	mov	r1, r4
 800c154:	4628      	mov	r0, r5
 800c156:	f000 f8c5 	bl	800c2e4 <__swsetup_r>
 800c15a:	b380      	cbz	r0, 800c1be <_puts_r+0x9a>
 800c15c:	f04f 35ff 	mov.w	r5, #4294967295
 800c160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c162:	07da      	lsls	r2, r3, #31
 800c164:	d405      	bmi.n	800c172 <_puts_r+0x4e>
 800c166:	89a3      	ldrh	r3, [r4, #12]
 800c168:	059b      	lsls	r3, r3, #22
 800c16a:	d402      	bmi.n	800c172 <_puts_r+0x4e>
 800c16c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c16e:	f000 f999 	bl	800c4a4 <__retarget_lock_release_recursive>
 800c172:	4628      	mov	r0, r5
 800c174:	bd70      	pop	{r4, r5, r6, pc}
 800c176:	2b00      	cmp	r3, #0
 800c178:	da04      	bge.n	800c184 <_puts_r+0x60>
 800c17a:	69a2      	ldr	r2, [r4, #24]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	dc17      	bgt.n	800c1b0 <_puts_r+0x8c>
 800c180:	290a      	cmp	r1, #10
 800c182:	d015      	beq.n	800c1b0 <_puts_r+0x8c>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	6022      	str	r2, [r4, #0]
 800c18a:	7019      	strb	r1, [r3, #0]
 800c18c:	68a3      	ldr	r3, [r4, #8]
 800c18e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c192:	3b01      	subs	r3, #1
 800c194:	60a3      	str	r3, [r4, #8]
 800c196:	2900      	cmp	r1, #0
 800c198:	d1ed      	bne.n	800c176 <_puts_r+0x52>
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	da11      	bge.n	800c1c2 <_puts_r+0x9e>
 800c19e:	4622      	mov	r2, r4
 800c1a0:	210a      	movs	r1, #10
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f000 f85f 	bl	800c266 <__swbuf_r>
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d0d7      	beq.n	800c15c <_puts_r+0x38>
 800c1ac:	250a      	movs	r5, #10
 800c1ae:	e7d7      	b.n	800c160 <_puts_r+0x3c>
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f000 f857 	bl	800c266 <__swbuf_r>
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d1e7      	bne.n	800c18c <_puts_r+0x68>
 800c1bc:	e7ce      	b.n	800c15c <_puts_r+0x38>
 800c1be:	3e01      	subs	r6, #1
 800c1c0:	e7e4      	b.n	800c18c <_puts_r+0x68>
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	1c5a      	adds	r2, r3, #1
 800c1c6:	6022      	str	r2, [r4, #0]
 800c1c8:	220a      	movs	r2, #10
 800c1ca:	701a      	strb	r2, [r3, #0]
 800c1cc:	e7ee      	b.n	800c1ac <_puts_r+0x88>
	...

0800c1d0 <puts>:
 800c1d0:	4b02      	ldr	r3, [pc, #8]	@ (800c1dc <puts+0xc>)
 800c1d2:	4601      	mov	r1, r0
 800c1d4:	6818      	ldr	r0, [r3, #0]
 800c1d6:	f7ff bfa5 	b.w	800c124 <_puts_r>
 800c1da:	bf00      	nop
 800c1dc:	20000130 	.word	0x20000130

0800c1e0 <__sread>:
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e8:	f000 f8fc 	bl	800c3e4 <_read_r>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	bfab      	itete	ge
 800c1f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c1f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c1f4:	181b      	addge	r3, r3, r0
 800c1f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c1fa:	bfac      	ite	ge
 800c1fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c1fe:	81a3      	strhlt	r3, [r4, #12]
 800c200:	bd10      	pop	{r4, pc}

0800c202 <__swrite>:
 800c202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c206:	461f      	mov	r7, r3
 800c208:	898b      	ldrh	r3, [r1, #12]
 800c20a:	05db      	lsls	r3, r3, #23
 800c20c:	4605      	mov	r5, r0
 800c20e:	460c      	mov	r4, r1
 800c210:	4616      	mov	r6, r2
 800c212:	d505      	bpl.n	800c220 <__swrite+0x1e>
 800c214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c218:	2302      	movs	r3, #2
 800c21a:	2200      	movs	r2, #0
 800c21c:	f000 f8d0 	bl	800c3c0 <_lseek_r>
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	4632      	mov	r2, r6
 800c22e:	463b      	mov	r3, r7
 800c230:	4628      	mov	r0, r5
 800c232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c236:	f000 b8f7 	b.w	800c428 <_write_r>

0800c23a <__sseek>:
 800c23a:	b510      	push	{r4, lr}
 800c23c:	460c      	mov	r4, r1
 800c23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c242:	f000 f8bd 	bl	800c3c0 <_lseek_r>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	bf15      	itete	ne
 800c24c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c24e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c252:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c256:	81a3      	strheq	r3, [r4, #12]
 800c258:	bf18      	it	ne
 800c25a:	81a3      	strhne	r3, [r4, #12]
 800c25c:	bd10      	pop	{r4, pc}

0800c25e <__sclose>:
 800c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c262:	f000 b89d 	b.w	800c3a0 <_close_r>

0800c266 <__swbuf_r>:
 800c266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c268:	460e      	mov	r6, r1
 800c26a:	4614      	mov	r4, r2
 800c26c:	4605      	mov	r5, r0
 800c26e:	b118      	cbz	r0, 800c278 <__swbuf_r+0x12>
 800c270:	6a03      	ldr	r3, [r0, #32]
 800c272:	b90b      	cbnz	r3, 800c278 <__swbuf_r+0x12>
 800c274:	f7ff ff0e 	bl	800c094 <__sinit>
 800c278:	69a3      	ldr	r3, [r4, #24]
 800c27a:	60a3      	str	r3, [r4, #8]
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	071a      	lsls	r2, r3, #28
 800c280:	d501      	bpl.n	800c286 <__swbuf_r+0x20>
 800c282:	6923      	ldr	r3, [r4, #16]
 800c284:	b943      	cbnz	r3, 800c298 <__swbuf_r+0x32>
 800c286:	4621      	mov	r1, r4
 800c288:	4628      	mov	r0, r5
 800c28a:	f000 f82b 	bl	800c2e4 <__swsetup_r>
 800c28e:	b118      	cbz	r0, 800c298 <__swbuf_r+0x32>
 800c290:	f04f 37ff 	mov.w	r7, #4294967295
 800c294:	4638      	mov	r0, r7
 800c296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	6922      	ldr	r2, [r4, #16]
 800c29c:	1a98      	subs	r0, r3, r2
 800c29e:	6963      	ldr	r3, [r4, #20]
 800c2a0:	b2f6      	uxtb	r6, r6
 800c2a2:	4283      	cmp	r3, r0
 800c2a4:	4637      	mov	r7, r6
 800c2a6:	dc05      	bgt.n	800c2b4 <__swbuf_r+0x4e>
 800c2a8:	4621      	mov	r1, r4
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	f000 fc98 	bl	800cbe0 <_fflush_r>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d1ed      	bne.n	800c290 <__swbuf_r+0x2a>
 800c2b4:	68a3      	ldr	r3, [r4, #8]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	60a3      	str	r3, [r4, #8]
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	6022      	str	r2, [r4, #0]
 800c2c0:	701e      	strb	r6, [r3, #0]
 800c2c2:	6962      	ldr	r2, [r4, #20]
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d004      	beq.n	800c2d4 <__swbuf_r+0x6e>
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	07db      	lsls	r3, r3, #31
 800c2ce:	d5e1      	bpl.n	800c294 <__swbuf_r+0x2e>
 800c2d0:	2e0a      	cmp	r6, #10
 800c2d2:	d1df      	bne.n	800c294 <__swbuf_r+0x2e>
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f000 fc82 	bl	800cbe0 <_fflush_r>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d0d9      	beq.n	800c294 <__swbuf_r+0x2e>
 800c2e0:	e7d6      	b.n	800c290 <__swbuf_r+0x2a>
	...

0800c2e4 <__swsetup_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4b29      	ldr	r3, [pc, #164]	@ (800c38c <__swsetup_r+0xa8>)
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	6818      	ldr	r0, [r3, #0]
 800c2ec:	460c      	mov	r4, r1
 800c2ee:	b118      	cbz	r0, 800c2f8 <__swsetup_r+0x14>
 800c2f0:	6a03      	ldr	r3, [r0, #32]
 800c2f2:	b90b      	cbnz	r3, 800c2f8 <__swsetup_r+0x14>
 800c2f4:	f7ff fece 	bl	800c094 <__sinit>
 800c2f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2fc:	0719      	lsls	r1, r3, #28
 800c2fe:	d422      	bmi.n	800c346 <__swsetup_r+0x62>
 800c300:	06da      	lsls	r2, r3, #27
 800c302:	d407      	bmi.n	800c314 <__swsetup_r+0x30>
 800c304:	2209      	movs	r2, #9
 800c306:	602a      	str	r2, [r5, #0]
 800c308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	f04f 30ff 	mov.w	r0, #4294967295
 800c312:	e033      	b.n	800c37c <__swsetup_r+0x98>
 800c314:	0758      	lsls	r0, r3, #29
 800c316:	d512      	bpl.n	800c33e <__swsetup_r+0x5a>
 800c318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c31a:	b141      	cbz	r1, 800c32e <__swsetup_r+0x4a>
 800c31c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c320:	4299      	cmp	r1, r3
 800c322:	d002      	beq.n	800c32a <__swsetup_r+0x46>
 800c324:	4628      	mov	r0, r5
 800c326:	f000 f8bf 	bl	800c4a8 <_free_r>
 800c32a:	2300      	movs	r3, #0
 800c32c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c32e:	89a3      	ldrh	r3, [r4, #12]
 800c330:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c334:	81a3      	strh	r3, [r4, #12]
 800c336:	2300      	movs	r3, #0
 800c338:	6063      	str	r3, [r4, #4]
 800c33a:	6923      	ldr	r3, [r4, #16]
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	f043 0308 	orr.w	r3, r3, #8
 800c344:	81a3      	strh	r3, [r4, #12]
 800c346:	6923      	ldr	r3, [r4, #16]
 800c348:	b94b      	cbnz	r3, 800c35e <__swsetup_r+0x7a>
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c354:	d003      	beq.n	800c35e <__swsetup_r+0x7a>
 800c356:	4621      	mov	r1, r4
 800c358:	4628      	mov	r0, r5
 800c35a:	f000 fc8f 	bl	800cc7c <__smakebuf_r>
 800c35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c362:	f013 0201 	ands.w	r2, r3, #1
 800c366:	d00a      	beq.n	800c37e <__swsetup_r+0x9a>
 800c368:	2200      	movs	r2, #0
 800c36a:	60a2      	str	r2, [r4, #8]
 800c36c:	6962      	ldr	r2, [r4, #20]
 800c36e:	4252      	negs	r2, r2
 800c370:	61a2      	str	r2, [r4, #24]
 800c372:	6922      	ldr	r2, [r4, #16]
 800c374:	b942      	cbnz	r2, 800c388 <__swsetup_r+0xa4>
 800c376:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c37a:	d1c5      	bne.n	800c308 <__swsetup_r+0x24>
 800c37c:	bd38      	pop	{r3, r4, r5, pc}
 800c37e:	0799      	lsls	r1, r3, #30
 800c380:	bf58      	it	pl
 800c382:	6962      	ldrpl	r2, [r4, #20]
 800c384:	60a2      	str	r2, [r4, #8]
 800c386:	e7f4      	b.n	800c372 <__swsetup_r+0x8e>
 800c388:	2000      	movs	r0, #0
 800c38a:	e7f7      	b.n	800c37c <__swsetup_r+0x98>
 800c38c:	20000130 	.word	0x20000130

0800c390 <memset>:
 800c390:	4402      	add	r2, r0
 800c392:	4603      	mov	r3, r0
 800c394:	4293      	cmp	r3, r2
 800c396:	d100      	bne.n	800c39a <memset+0xa>
 800c398:	4770      	bx	lr
 800c39a:	f803 1b01 	strb.w	r1, [r3], #1
 800c39e:	e7f9      	b.n	800c394 <memset+0x4>

0800c3a0 <_close_r>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	4d06      	ldr	r5, [pc, #24]	@ (800c3bc <_close_r+0x1c>)
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	4608      	mov	r0, r1
 800c3aa:	602b      	str	r3, [r5, #0]
 800c3ac:	f7f4 fbd1 	bl	8000b52 <_close>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_close_r+0x1a>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_close_r+0x1a>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	20002294 	.word	0x20002294

0800c3c0 <_lseek_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d07      	ldr	r5, [pc, #28]	@ (800c3e0 <_lseek_r+0x20>)
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	602a      	str	r2, [r5, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f7f4 fbe6 	bl	8000ba0 <_lseek>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d102      	bne.n	800c3de <_lseek_r+0x1e>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	b103      	cbz	r3, 800c3de <_lseek_r+0x1e>
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	20002294 	.word	0x20002294

0800c3e4 <_read_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4d07      	ldr	r5, [pc, #28]	@ (800c404 <_read_r+0x20>)
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	4608      	mov	r0, r1
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	602a      	str	r2, [r5, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f7f4 fb90 	bl	8000b18 <_read>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_read_r+0x1e>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_read_r+0x1e>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	20002294 	.word	0x20002294

0800c408 <_sbrk_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d06      	ldr	r5, [pc, #24]	@ (800c424 <_sbrk_r+0x1c>)
 800c40c:	2300      	movs	r3, #0
 800c40e:	4604      	mov	r4, r0
 800c410:	4608      	mov	r0, r1
 800c412:	602b      	str	r3, [r5, #0]
 800c414:	f7f4 fbd2 	bl	8000bbc <_sbrk>
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	d102      	bne.n	800c422 <_sbrk_r+0x1a>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	b103      	cbz	r3, 800c422 <_sbrk_r+0x1a>
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	bd38      	pop	{r3, r4, r5, pc}
 800c424:	20002294 	.word	0x20002294

0800c428 <_write_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4d07      	ldr	r5, [pc, #28]	@ (800c448 <_write_r+0x20>)
 800c42c:	4604      	mov	r4, r0
 800c42e:	4608      	mov	r0, r1
 800c430:	4611      	mov	r1, r2
 800c432:	2200      	movs	r2, #0
 800c434:	602a      	str	r2, [r5, #0]
 800c436:	461a      	mov	r2, r3
 800c438:	f7f4 fa62 	bl	8000900 <_write>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	d102      	bne.n	800c446 <_write_r+0x1e>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	b103      	cbz	r3, 800c446 <_write_r+0x1e>
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	bd38      	pop	{r3, r4, r5, pc}
 800c448:	20002294 	.word	0x20002294

0800c44c <__errno>:
 800c44c:	4b01      	ldr	r3, [pc, #4]	@ (800c454 <__errno+0x8>)
 800c44e:	6818      	ldr	r0, [r3, #0]
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	20000130 	.word	0x20000130

0800c458 <__libc_init_array>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	4d0d      	ldr	r5, [pc, #52]	@ (800c490 <__libc_init_array+0x38>)
 800c45c:	4c0d      	ldr	r4, [pc, #52]	@ (800c494 <__libc_init_array+0x3c>)
 800c45e:	1b64      	subs	r4, r4, r5
 800c460:	10a4      	asrs	r4, r4, #2
 800c462:	2600      	movs	r6, #0
 800c464:	42a6      	cmp	r6, r4
 800c466:	d109      	bne.n	800c47c <__libc_init_array+0x24>
 800c468:	4d0b      	ldr	r5, [pc, #44]	@ (800c498 <__libc_init_array+0x40>)
 800c46a:	4c0c      	ldr	r4, [pc, #48]	@ (800c49c <__libc_init_array+0x44>)
 800c46c:	f000 fc64 	bl	800cd38 <_init>
 800c470:	1b64      	subs	r4, r4, r5
 800c472:	10a4      	asrs	r4, r4, #2
 800c474:	2600      	movs	r6, #0
 800c476:	42a6      	cmp	r6, r4
 800c478:	d105      	bne.n	800c486 <__libc_init_array+0x2e>
 800c47a:	bd70      	pop	{r4, r5, r6, pc}
 800c47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c480:	4798      	blx	r3
 800c482:	3601      	adds	r6, #1
 800c484:	e7ee      	b.n	800c464 <__libc_init_array+0xc>
 800c486:	f855 3b04 	ldr.w	r3, [r5], #4
 800c48a:	4798      	blx	r3
 800c48c:	3601      	adds	r6, #1
 800c48e:	e7f2      	b.n	800c476 <__libc_init_array+0x1e>
 800c490:	080112f4 	.word	0x080112f4
 800c494:	080112f4 	.word	0x080112f4
 800c498:	080112f4 	.word	0x080112f4
 800c49c:	080112f8 	.word	0x080112f8

0800c4a0 <__retarget_lock_init_recursive>:
 800c4a0:	4770      	bx	lr

0800c4a2 <__retarget_lock_acquire_recursive>:
 800c4a2:	4770      	bx	lr

0800c4a4 <__retarget_lock_release_recursive>:
 800c4a4:	4770      	bx	lr
	...

0800c4a8 <_free_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	2900      	cmp	r1, #0
 800c4ae:	d041      	beq.n	800c534 <_free_r+0x8c>
 800c4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4b4:	1f0c      	subs	r4, r1, #4
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	bfb8      	it	lt
 800c4ba:	18e4      	addlt	r4, r4, r3
 800c4bc:	f7ff fd52 	bl	800bf64 <__malloc_lock>
 800c4c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c538 <_free_r+0x90>)
 800c4c2:	6813      	ldr	r3, [r2, #0]
 800c4c4:	b933      	cbnz	r3, 800c4d4 <_free_r+0x2c>
 800c4c6:	6063      	str	r3, [r4, #4]
 800c4c8:	6014      	str	r4, [r2, #0]
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4d0:	f7ff bd4e 	b.w	800bf70 <__malloc_unlock>
 800c4d4:	42a3      	cmp	r3, r4
 800c4d6:	d908      	bls.n	800c4ea <_free_r+0x42>
 800c4d8:	6820      	ldr	r0, [r4, #0]
 800c4da:	1821      	adds	r1, r4, r0
 800c4dc:	428b      	cmp	r3, r1
 800c4de:	bf01      	itttt	eq
 800c4e0:	6819      	ldreq	r1, [r3, #0]
 800c4e2:	685b      	ldreq	r3, [r3, #4]
 800c4e4:	1809      	addeq	r1, r1, r0
 800c4e6:	6021      	streq	r1, [r4, #0]
 800c4e8:	e7ed      	b.n	800c4c6 <_free_r+0x1e>
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	b10b      	cbz	r3, 800c4f4 <_free_r+0x4c>
 800c4f0:	42a3      	cmp	r3, r4
 800c4f2:	d9fa      	bls.n	800c4ea <_free_r+0x42>
 800c4f4:	6811      	ldr	r1, [r2, #0]
 800c4f6:	1850      	adds	r0, r2, r1
 800c4f8:	42a0      	cmp	r0, r4
 800c4fa:	d10b      	bne.n	800c514 <_free_r+0x6c>
 800c4fc:	6820      	ldr	r0, [r4, #0]
 800c4fe:	4401      	add	r1, r0
 800c500:	1850      	adds	r0, r2, r1
 800c502:	4283      	cmp	r3, r0
 800c504:	6011      	str	r1, [r2, #0]
 800c506:	d1e0      	bne.n	800c4ca <_free_r+0x22>
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	6053      	str	r3, [r2, #4]
 800c50e:	4408      	add	r0, r1
 800c510:	6010      	str	r0, [r2, #0]
 800c512:	e7da      	b.n	800c4ca <_free_r+0x22>
 800c514:	d902      	bls.n	800c51c <_free_r+0x74>
 800c516:	230c      	movs	r3, #12
 800c518:	602b      	str	r3, [r5, #0]
 800c51a:	e7d6      	b.n	800c4ca <_free_r+0x22>
 800c51c:	6820      	ldr	r0, [r4, #0]
 800c51e:	1821      	adds	r1, r4, r0
 800c520:	428b      	cmp	r3, r1
 800c522:	bf04      	itt	eq
 800c524:	6819      	ldreq	r1, [r3, #0]
 800c526:	685b      	ldreq	r3, [r3, #4]
 800c528:	6063      	str	r3, [r4, #4]
 800c52a:	bf04      	itt	eq
 800c52c:	1809      	addeq	r1, r1, r0
 800c52e:	6021      	streq	r1, [r4, #0]
 800c530:	6054      	str	r4, [r2, #4]
 800c532:	e7ca      	b.n	800c4ca <_free_r+0x22>
 800c534:	bd38      	pop	{r3, r4, r5, pc}
 800c536:	bf00      	nop
 800c538:	20002154 	.word	0x20002154

0800c53c <__sfputc_r>:
 800c53c:	6893      	ldr	r3, [r2, #8]
 800c53e:	3b01      	subs	r3, #1
 800c540:	2b00      	cmp	r3, #0
 800c542:	b410      	push	{r4}
 800c544:	6093      	str	r3, [r2, #8]
 800c546:	da08      	bge.n	800c55a <__sfputc_r+0x1e>
 800c548:	6994      	ldr	r4, [r2, #24]
 800c54a:	42a3      	cmp	r3, r4
 800c54c:	db01      	blt.n	800c552 <__sfputc_r+0x16>
 800c54e:	290a      	cmp	r1, #10
 800c550:	d103      	bne.n	800c55a <__sfputc_r+0x1e>
 800c552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c556:	f7ff be86 	b.w	800c266 <__swbuf_r>
 800c55a:	6813      	ldr	r3, [r2, #0]
 800c55c:	1c58      	adds	r0, r3, #1
 800c55e:	6010      	str	r0, [r2, #0]
 800c560:	7019      	strb	r1, [r3, #0]
 800c562:	4608      	mov	r0, r1
 800c564:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <__sfputs_r>:
 800c56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56c:	4606      	mov	r6, r0
 800c56e:	460f      	mov	r7, r1
 800c570:	4614      	mov	r4, r2
 800c572:	18d5      	adds	r5, r2, r3
 800c574:	42ac      	cmp	r4, r5
 800c576:	d101      	bne.n	800c57c <__sfputs_r+0x12>
 800c578:	2000      	movs	r0, #0
 800c57a:	e007      	b.n	800c58c <__sfputs_r+0x22>
 800c57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c580:	463a      	mov	r2, r7
 800c582:	4630      	mov	r0, r6
 800c584:	f7ff ffda 	bl	800c53c <__sfputc_r>
 800c588:	1c43      	adds	r3, r0, #1
 800c58a:	d1f3      	bne.n	800c574 <__sfputs_r+0xa>
 800c58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c590 <_vfiprintf_r>:
 800c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	460d      	mov	r5, r1
 800c596:	b09d      	sub	sp, #116	@ 0x74
 800c598:	4614      	mov	r4, r2
 800c59a:	4698      	mov	r8, r3
 800c59c:	4606      	mov	r6, r0
 800c59e:	b118      	cbz	r0, 800c5a8 <_vfiprintf_r+0x18>
 800c5a0:	6a03      	ldr	r3, [r0, #32]
 800c5a2:	b90b      	cbnz	r3, 800c5a8 <_vfiprintf_r+0x18>
 800c5a4:	f7ff fd76 	bl	800c094 <__sinit>
 800c5a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5aa:	07d9      	lsls	r1, r3, #31
 800c5ac:	d405      	bmi.n	800c5ba <_vfiprintf_r+0x2a>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	059a      	lsls	r2, r3, #22
 800c5b2:	d402      	bmi.n	800c5ba <_vfiprintf_r+0x2a>
 800c5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5b6:	f7ff ff74 	bl	800c4a2 <__retarget_lock_acquire_recursive>
 800c5ba:	89ab      	ldrh	r3, [r5, #12]
 800c5bc:	071b      	lsls	r3, r3, #28
 800c5be:	d501      	bpl.n	800c5c4 <_vfiprintf_r+0x34>
 800c5c0:	692b      	ldr	r3, [r5, #16]
 800c5c2:	b99b      	cbnz	r3, 800c5ec <_vfiprintf_r+0x5c>
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f7ff fe8c 	bl	800c2e4 <__swsetup_r>
 800c5cc:	b170      	cbz	r0, 800c5ec <_vfiprintf_r+0x5c>
 800c5ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5d0:	07dc      	lsls	r4, r3, #31
 800c5d2:	d504      	bpl.n	800c5de <_vfiprintf_r+0x4e>
 800c5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d8:	b01d      	add	sp, #116	@ 0x74
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	89ab      	ldrh	r3, [r5, #12]
 800c5e0:	0598      	lsls	r0, r3, #22
 800c5e2:	d4f7      	bmi.n	800c5d4 <_vfiprintf_r+0x44>
 800c5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5e6:	f7ff ff5d 	bl	800c4a4 <__retarget_lock_release_recursive>
 800c5ea:	e7f3      	b.n	800c5d4 <_vfiprintf_r+0x44>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5f0:	2320      	movs	r3, #32
 800c5f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5fa:	2330      	movs	r3, #48	@ 0x30
 800c5fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7ac <_vfiprintf_r+0x21c>
 800c600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c604:	f04f 0901 	mov.w	r9, #1
 800c608:	4623      	mov	r3, r4
 800c60a:	469a      	mov	sl, r3
 800c60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c610:	b10a      	cbz	r2, 800c616 <_vfiprintf_r+0x86>
 800c612:	2a25      	cmp	r2, #37	@ 0x25
 800c614:	d1f9      	bne.n	800c60a <_vfiprintf_r+0x7a>
 800c616:	ebba 0b04 	subs.w	fp, sl, r4
 800c61a:	d00b      	beq.n	800c634 <_vfiprintf_r+0xa4>
 800c61c:	465b      	mov	r3, fp
 800c61e:	4622      	mov	r2, r4
 800c620:	4629      	mov	r1, r5
 800c622:	4630      	mov	r0, r6
 800c624:	f7ff ffa1 	bl	800c56a <__sfputs_r>
 800c628:	3001      	adds	r0, #1
 800c62a:	f000 80a7 	beq.w	800c77c <_vfiprintf_r+0x1ec>
 800c62e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c630:	445a      	add	r2, fp
 800c632:	9209      	str	r2, [sp, #36]	@ 0x24
 800c634:	f89a 3000 	ldrb.w	r3, [sl]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 809f 	beq.w	800c77c <_vfiprintf_r+0x1ec>
 800c63e:	2300      	movs	r3, #0
 800c640:	f04f 32ff 	mov.w	r2, #4294967295
 800c644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c648:	f10a 0a01 	add.w	sl, sl, #1
 800c64c:	9304      	str	r3, [sp, #16]
 800c64e:	9307      	str	r3, [sp, #28]
 800c650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c654:	931a      	str	r3, [sp, #104]	@ 0x68
 800c656:	4654      	mov	r4, sl
 800c658:	2205      	movs	r2, #5
 800c65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65e:	4853      	ldr	r0, [pc, #332]	@ (800c7ac <_vfiprintf_r+0x21c>)
 800c660:	f7f3 fdc6 	bl	80001f0 <memchr>
 800c664:	9a04      	ldr	r2, [sp, #16]
 800c666:	b9d8      	cbnz	r0, 800c6a0 <_vfiprintf_r+0x110>
 800c668:	06d1      	lsls	r1, r2, #27
 800c66a:	bf44      	itt	mi
 800c66c:	2320      	movmi	r3, #32
 800c66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c672:	0713      	lsls	r3, r2, #28
 800c674:	bf44      	itt	mi
 800c676:	232b      	movmi	r3, #43	@ 0x2b
 800c678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c67c:	f89a 3000 	ldrb.w	r3, [sl]
 800c680:	2b2a      	cmp	r3, #42	@ 0x2a
 800c682:	d015      	beq.n	800c6b0 <_vfiprintf_r+0x120>
 800c684:	9a07      	ldr	r2, [sp, #28]
 800c686:	4654      	mov	r4, sl
 800c688:	2000      	movs	r0, #0
 800c68a:	f04f 0c0a 	mov.w	ip, #10
 800c68e:	4621      	mov	r1, r4
 800c690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c694:	3b30      	subs	r3, #48	@ 0x30
 800c696:	2b09      	cmp	r3, #9
 800c698:	d94b      	bls.n	800c732 <_vfiprintf_r+0x1a2>
 800c69a:	b1b0      	cbz	r0, 800c6ca <_vfiprintf_r+0x13a>
 800c69c:	9207      	str	r2, [sp, #28]
 800c69e:	e014      	b.n	800c6ca <_vfiprintf_r+0x13a>
 800c6a0:	eba0 0308 	sub.w	r3, r0, r8
 800c6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	9304      	str	r3, [sp, #16]
 800c6ac:	46a2      	mov	sl, r4
 800c6ae:	e7d2      	b.n	800c656 <_vfiprintf_r+0xc6>
 800c6b0:	9b03      	ldr	r3, [sp, #12]
 800c6b2:	1d19      	adds	r1, r3, #4
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	9103      	str	r1, [sp, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	bfbb      	ittet	lt
 800c6bc:	425b      	neglt	r3, r3
 800c6be:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c2:	9307      	strge	r3, [sp, #28]
 800c6c4:	9307      	strlt	r3, [sp, #28]
 800c6c6:	bfb8      	it	lt
 800c6c8:	9204      	strlt	r2, [sp, #16]
 800c6ca:	7823      	ldrb	r3, [r4, #0]
 800c6cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6ce:	d10a      	bne.n	800c6e6 <_vfiprintf_r+0x156>
 800c6d0:	7863      	ldrb	r3, [r4, #1]
 800c6d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6d4:	d132      	bne.n	800c73c <_vfiprintf_r+0x1ac>
 800c6d6:	9b03      	ldr	r3, [sp, #12]
 800c6d8:	1d1a      	adds	r2, r3, #4
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	9203      	str	r2, [sp, #12]
 800c6de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6e2:	3402      	adds	r4, #2
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c7bc <_vfiprintf_r+0x22c>
 800c6ea:	7821      	ldrb	r1, [r4, #0]
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	4650      	mov	r0, sl
 800c6f0:	f7f3 fd7e 	bl	80001f0 <memchr>
 800c6f4:	b138      	cbz	r0, 800c706 <_vfiprintf_r+0x176>
 800c6f6:	9b04      	ldr	r3, [sp, #16]
 800c6f8:	eba0 000a 	sub.w	r0, r0, sl
 800c6fc:	2240      	movs	r2, #64	@ 0x40
 800c6fe:	4082      	lsls	r2, r0
 800c700:	4313      	orrs	r3, r2
 800c702:	3401      	adds	r4, #1
 800c704:	9304      	str	r3, [sp, #16]
 800c706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70a:	4829      	ldr	r0, [pc, #164]	@ (800c7b0 <_vfiprintf_r+0x220>)
 800c70c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c710:	2206      	movs	r2, #6
 800c712:	f7f3 fd6d 	bl	80001f0 <memchr>
 800c716:	2800      	cmp	r0, #0
 800c718:	d03f      	beq.n	800c79a <_vfiprintf_r+0x20a>
 800c71a:	4b26      	ldr	r3, [pc, #152]	@ (800c7b4 <_vfiprintf_r+0x224>)
 800c71c:	bb1b      	cbnz	r3, 800c766 <_vfiprintf_r+0x1d6>
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	3307      	adds	r3, #7
 800c722:	f023 0307 	bic.w	r3, r3, #7
 800c726:	3308      	adds	r3, #8
 800c728:	9303      	str	r3, [sp, #12]
 800c72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c72c:	443b      	add	r3, r7
 800c72e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c730:	e76a      	b.n	800c608 <_vfiprintf_r+0x78>
 800c732:	fb0c 3202 	mla	r2, ip, r2, r3
 800c736:	460c      	mov	r4, r1
 800c738:	2001      	movs	r0, #1
 800c73a:	e7a8      	b.n	800c68e <_vfiprintf_r+0xfe>
 800c73c:	2300      	movs	r3, #0
 800c73e:	3401      	adds	r4, #1
 800c740:	9305      	str	r3, [sp, #20]
 800c742:	4619      	mov	r1, r3
 800c744:	f04f 0c0a 	mov.w	ip, #10
 800c748:	4620      	mov	r0, r4
 800c74a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c74e:	3a30      	subs	r2, #48	@ 0x30
 800c750:	2a09      	cmp	r2, #9
 800c752:	d903      	bls.n	800c75c <_vfiprintf_r+0x1cc>
 800c754:	2b00      	cmp	r3, #0
 800c756:	d0c6      	beq.n	800c6e6 <_vfiprintf_r+0x156>
 800c758:	9105      	str	r1, [sp, #20]
 800c75a:	e7c4      	b.n	800c6e6 <_vfiprintf_r+0x156>
 800c75c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c760:	4604      	mov	r4, r0
 800c762:	2301      	movs	r3, #1
 800c764:	e7f0      	b.n	800c748 <_vfiprintf_r+0x1b8>
 800c766:	ab03      	add	r3, sp, #12
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	462a      	mov	r2, r5
 800c76c:	4b12      	ldr	r3, [pc, #72]	@ (800c7b8 <_vfiprintf_r+0x228>)
 800c76e:	a904      	add	r1, sp, #16
 800c770:	4630      	mov	r0, r6
 800c772:	f3af 8000 	nop.w
 800c776:	4607      	mov	r7, r0
 800c778:	1c78      	adds	r0, r7, #1
 800c77a:	d1d6      	bne.n	800c72a <_vfiprintf_r+0x19a>
 800c77c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c77e:	07d9      	lsls	r1, r3, #31
 800c780:	d405      	bmi.n	800c78e <_vfiprintf_r+0x1fe>
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	059a      	lsls	r2, r3, #22
 800c786:	d402      	bmi.n	800c78e <_vfiprintf_r+0x1fe>
 800c788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c78a:	f7ff fe8b 	bl	800c4a4 <__retarget_lock_release_recursive>
 800c78e:	89ab      	ldrh	r3, [r5, #12]
 800c790:	065b      	lsls	r3, r3, #25
 800c792:	f53f af1f 	bmi.w	800c5d4 <_vfiprintf_r+0x44>
 800c796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c798:	e71e      	b.n	800c5d8 <_vfiprintf_r+0x48>
 800c79a:	ab03      	add	r3, sp, #12
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	462a      	mov	r2, r5
 800c7a0:	4b05      	ldr	r3, [pc, #20]	@ (800c7b8 <_vfiprintf_r+0x228>)
 800c7a2:	a904      	add	r1, sp, #16
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f000 f879 	bl	800c89c <_printf_i>
 800c7aa:	e7e4      	b.n	800c776 <_vfiprintf_r+0x1e6>
 800c7ac:	080112b8 	.word	0x080112b8
 800c7b0:	080112c2 	.word	0x080112c2
 800c7b4:	00000000 	.word	0x00000000
 800c7b8:	0800c56b 	.word	0x0800c56b
 800c7bc:	080112be 	.word	0x080112be

0800c7c0 <_printf_common>:
 800c7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c4:	4616      	mov	r6, r2
 800c7c6:	4698      	mov	r8, r3
 800c7c8:	688a      	ldr	r2, [r1, #8]
 800c7ca:	690b      	ldr	r3, [r1, #16]
 800c7cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	bfb8      	it	lt
 800c7d4:	4613      	movlt	r3, r2
 800c7d6:	6033      	str	r3, [r6, #0]
 800c7d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7dc:	4607      	mov	r7, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	b10a      	cbz	r2, 800c7e6 <_printf_common+0x26>
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	6033      	str	r3, [r6, #0]
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	0699      	lsls	r1, r3, #26
 800c7ea:	bf42      	ittt	mi
 800c7ec:	6833      	ldrmi	r3, [r6, #0]
 800c7ee:	3302      	addmi	r3, #2
 800c7f0:	6033      	strmi	r3, [r6, #0]
 800c7f2:	6825      	ldr	r5, [r4, #0]
 800c7f4:	f015 0506 	ands.w	r5, r5, #6
 800c7f8:	d106      	bne.n	800c808 <_printf_common+0x48>
 800c7fa:	f104 0a19 	add.w	sl, r4, #25
 800c7fe:	68e3      	ldr	r3, [r4, #12]
 800c800:	6832      	ldr	r2, [r6, #0]
 800c802:	1a9b      	subs	r3, r3, r2
 800c804:	42ab      	cmp	r3, r5
 800c806:	dc26      	bgt.n	800c856 <_printf_common+0x96>
 800c808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c80c:	6822      	ldr	r2, [r4, #0]
 800c80e:	3b00      	subs	r3, #0
 800c810:	bf18      	it	ne
 800c812:	2301      	movne	r3, #1
 800c814:	0692      	lsls	r2, r2, #26
 800c816:	d42b      	bmi.n	800c870 <_printf_common+0xb0>
 800c818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c81c:	4641      	mov	r1, r8
 800c81e:	4638      	mov	r0, r7
 800c820:	47c8      	blx	r9
 800c822:	3001      	adds	r0, #1
 800c824:	d01e      	beq.n	800c864 <_printf_common+0xa4>
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	6922      	ldr	r2, [r4, #16]
 800c82a:	f003 0306 	and.w	r3, r3, #6
 800c82e:	2b04      	cmp	r3, #4
 800c830:	bf02      	ittt	eq
 800c832:	68e5      	ldreq	r5, [r4, #12]
 800c834:	6833      	ldreq	r3, [r6, #0]
 800c836:	1aed      	subeq	r5, r5, r3
 800c838:	68a3      	ldr	r3, [r4, #8]
 800c83a:	bf0c      	ite	eq
 800c83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c840:	2500      	movne	r5, #0
 800c842:	4293      	cmp	r3, r2
 800c844:	bfc4      	itt	gt
 800c846:	1a9b      	subgt	r3, r3, r2
 800c848:	18ed      	addgt	r5, r5, r3
 800c84a:	2600      	movs	r6, #0
 800c84c:	341a      	adds	r4, #26
 800c84e:	42b5      	cmp	r5, r6
 800c850:	d11a      	bne.n	800c888 <_printf_common+0xc8>
 800c852:	2000      	movs	r0, #0
 800c854:	e008      	b.n	800c868 <_printf_common+0xa8>
 800c856:	2301      	movs	r3, #1
 800c858:	4652      	mov	r2, sl
 800c85a:	4641      	mov	r1, r8
 800c85c:	4638      	mov	r0, r7
 800c85e:	47c8      	blx	r9
 800c860:	3001      	adds	r0, #1
 800c862:	d103      	bne.n	800c86c <_printf_common+0xac>
 800c864:	f04f 30ff 	mov.w	r0, #4294967295
 800c868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c86c:	3501      	adds	r5, #1
 800c86e:	e7c6      	b.n	800c7fe <_printf_common+0x3e>
 800c870:	18e1      	adds	r1, r4, r3
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	2030      	movs	r0, #48	@ 0x30
 800c876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c87a:	4422      	add	r2, r4
 800c87c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c884:	3302      	adds	r3, #2
 800c886:	e7c7      	b.n	800c818 <_printf_common+0x58>
 800c888:	2301      	movs	r3, #1
 800c88a:	4622      	mov	r2, r4
 800c88c:	4641      	mov	r1, r8
 800c88e:	4638      	mov	r0, r7
 800c890:	47c8      	blx	r9
 800c892:	3001      	adds	r0, #1
 800c894:	d0e6      	beq.n	800c864 <_printf_common+0xa4>
 800c896:	3601      	adds	r6, #1
 800c898:	e7d9      	b.n	800c84e <_printf_common+0x8e>
	...

0800c89c <_printf_i>:
 800c89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a0:	7e0f      	ldrb	r7, [r1, #24]
 800c8a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8a4:	2f78      	cmp	r7, #120	@ 0x78
 800c8a6:	4691      	mov	r9, r2
 800c8a8:	4680      	mov	r8, r0
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	469a      	mov	sl, r3
 800c8ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8b2:	d807      	bhi.n	800c8c4 <_printf_i+0x28>
 800c8b4:	2f62      	cmp	r7, #98	@ 0x62
 800c8b6:	d80a      	bhi.n	800c8ce <_printf_i+0x32>
 800c8b8:	2f00      	cmp	r7, #0
 800c8ba:	f000 80d1 	beq.w	800ca60 <_printf_i+0x1c4>
 800c8be:	2f58      	cmp	r7, #88	@ 0x58
 800c8c0:	f000 80b8 	beq.w	800ca34 <_printf_i+0x198>
 800c8c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8cc:	e03a      	b.n	800c944 <_printf_i+0xa8>
 800c8ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8d2:	2b15      	cmp	r3, #21
 800c8d4:	d8f6      	bhi.n	800c8c4 <_printf_i+0x28>
 800c8d6:	a101      	add	r1, pc, #4	@ (adr r1, 800c8dc <_printf_i+0x40>)
 800c8d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8dc:	0800c935 	.word	0x0800c935
 800c8e0:	0800c949 	.word	0x0800c949
 800c8e4:	0800c8c5 	.word	0x0800c8c5
 800c8e8:	0800c8c5 	.word	0x0800c8c5
 800c8ec:	0800c8c5 	.word	0x0800c8c5
 800c8f0:	0800c8c5 	.word	0x0800c8c5
 800c8f4:	0800c949 	.word	0x0800c949
 800c8f8:	0800c8c5 	.word	0x0800c8c5
 800c8fc:	0800c8c5 	.word	0x0800c8c5
 800c900:	0800c8c5 	.word	0x0800c8c5
 800c904:	0800c8c5 	.word	0x0800c8c5
 800c908:	0800ca47 	.word	0x0800ca47
 800c90c:	0800c973 	.word	0x0800c973
 800c910:	0800ca01 	.word	0x0800ca01
 800c914:	0800c8c5 	.word	0x0800c8c5
 800c918:	0800c8c5 	.word	0x0800c8c5
 800c91c:	0800ca69 	.word	0x0800ca69
 800c920:	0800c8c5 	.word	0x0800c8c5
 800c924:	0800c973 	.word	0x0800c973
 800c928:	0800c8c5 	.word	0x0800c8c5
 800c92c:	0800c8c5 	.word	0x0800c8c5
 800c930:	0800ca09 	.word	0x0800ca09
 800c934:	6833      	ldr	r3, [r6, #0]
 800c936:	1d1a      	adds	r2, r3, #4
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6032      	str	r2, [r6, #0]
 800c93c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c944:	2301      	movs	r3, #1
 800c946:	e09c      	b.n	800ca82 <_printf_i+0x1e6>
 800c948:	6833      	ldr	r3, [r6, #0]
 800c94a:	6820      	ldr	r0, [r4, #0]
 800c94c:	1d19      	adds	r1, r3, #4
 800c94e:	6031      	str	r1, [r6, #0]
 800c950:	0606      	lsls	r6, r0, #24
 800c952:	d501      	bpl.n	800c958 <_printf_i+0xbc>
 800c954:	681d      	ldr	r5, [r3, #0]
 800c956:	e003      	b.n	800c960 <_printf_i+0xc4>
 800c958:	0645      	lsls	r5, r0, #25
 800c95a:	d5fb      	bpl.n	800c954 <_printf_i+0xb8>
 800c95c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c960:	2d00      	cmp	r5, #0
 800c962:	da03      	bge.n	800c96c <_printf_i+0xd0>
 800c964:	232d      	movs	r3, #45	@ 0x2d
 800c966:	426d      	negs	r5, r5
 800c968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c96c:	4858      	ldr	r0, [pc, #352]	@ (800cad0 <_printf_i+0x234>)
 800c96e:	230a      	movs	r3, #10
 800c970:	e011      	b.n	800c996 <_printf_i+0xfa>
 800c972:	6821      	ldr	r1, [r4, #0]
 800c974:	6833      	ldr	r3, [r6, #0]
 800c976:	0608      	lsls	r0, r1, #24
 800c978:	f853 5b04 	ldr.w	r5, [r3], #4
 800c97c:	d402      	bmi.n	800c984 <_printf_i+0xe8>
 800c97e:	0649      	lsls	r1, r1, #25
 800c980:	bf48      	it	mi
 800c982:	b2ad      	uxthmi	r5, r5
 800c984:	2f6f      	cmp	r7, #111	@ 0x6f
 800c986:	4852      	ldr	r0, [pc, #328]	@ (800cad0 <_printf_i+0x234>)
 800c988:	6033      	str	r3, [r6, #0]
 800c98a:	bf14      	ite	ne
 800c98c:	230a      	movne	r3, #10
 800c98e:	2308      	moveq	r3, #8
 800c990:	2100      	movs	r1, #0
 800c992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c996:	6866      	ldr	r6, [r4, #4]
 800c998:	60a6      	str	r6, [r4, #8]
 800c99a:	2e00      	cmp	r6, #0
 800c99c:	db05      	blt.n	800c9aa <_printf_i+0x10e>
 800c99e:	6821      	ldr	r1, [r4, #0]
 800c9a0:	432e      	orrs	r6, r5
 800c9a2:	f021 0104 	bic.w	r1, r1, #4
 800c9a6:	6021      	str	r1, [r4, #0]
 800c9a8:	d04b      	beq.n	800ca42 <_printf_i+0x1a6>
 800c9aa:	4616      	mov	r6, r2
 800c9ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9b0:	fb03 5711 	mls	r7, r3, r1, r5
 800c9b4:	5dc7      	ldrb	r7, [r0, r7]
 800c9b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9ba:	462f      	mov	r7, r5
 800c9bc:	42bb      	cmp	r3, r7
 800c9be:	460d      	mov	r5, r1
 800c9c0:	d9f4      	bls.n	800c9ac <_printf_i+0x110>
 800c9c2:	2b08      	cmp	r3, #8
 800c9c4:	d10b      	bne.n	800c9de <_printf_i+0x142>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	07df      	lsls	r7, r3, #31
 800c9ca:	d508      	bpl.n	800c9de <_printf_i+0x142>
 800c9cc:	6923      	ldr	r3, [r4, #16]
 800c9ce:	6861      	ldr	r1, [r4, #4]
 800c9d0:	4299      	cmp	r1, r3
 800c9d2:	bfde      	ittt	le
 800c9d4:	2330      	movle	r3, #48	@ 0x30
 800c9d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9de:	1b92      	subs	r2, r2, r6
 800c9e0:	6122      	str	r2, [r4, #16]
 800c9e2:	f8cd a000 	str.w	sl, [sp]
 800c9e6:	464b      	mov	r3, r9
 800c9e8:	aa03      	add	r2, sp, #12
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	f7ff fee7 	bl	800c7c0 <_printf_common>
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	d14a      	bne.n	800ca8c <_printf_i+0x1f0>
 800c9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9fa:	b004      	add	sp, #16
 800c9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	f043 0320 	orr.w	r3, r3, #32
 800ca06:	6023      	str	r3, [r4, #0]
 800ca08:	4832      	ldr	r0, [pc, #200]	@ (800cad4 <_printf_i+0x238>)
 800ca0a:	2778      	movs	r7, #120	@ 0x78
 800ca0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	6831      	ldr	r1, [r6, #0]
 800ca14:	061f      	lsls	r7, r3, #24
 800ca16:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca1a:	d402      	bmi.n	800ca22 <_printf_i+0x186>
 800ca1c:	065f      	lsls	r7, r3, #25
 800ca1e:	bf48      	it	mi
 800ca20:	b2ad      	uxthmi	r5, r5
 800ca22:	6031      	str	r1, [r6, #0]
 800ca24:	07d9      	lsls	r1, r3, #31
 800ca26:	bf44      	itt	mi
 800ca28:	f043 0320 	orrmi.w	r3, r3, #32
 800ca2c:	6023      	strmi	r3, [r4, #0]
 800ca2e:	b11d      	cbz	r5, 800ca38 <_printf_i+0x19c>
 800ca30:	2310      	movs	r3, #16
 800ca32:	e7ad      	b.n	800c990 <_printf_i+0xf4>
 800ca34:	4826      	ldr	r0, [pc, #152]	@ (800cad0 <_printf_i+0x234>)
 800ca36:	e7e9      	b.n	800ca0c <_printf_i+0x170>
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	f023 0320 	bic.w	r3, r3, #32
 800ca3e:	6023      	str	r3, [r4, #0]
 800ca40:	e7f6      	b.n	800ca30 <_printf_i+0x194>
 800ca42:	4616      	mov	r6, r2
 800ca44:	e7bd      	b.n	800c9c2 <_printf_i+0x126>
 800ca46:	6833      	ldr	r3, [r6, #0]
 800ca48:	6825      	ldr	r5, [r4, #0]
 800ca4a:	6961      	ldr	r1, [r4, #20]
 800ca4c:	1d18      	adds	r0, r3, #4
 800ca4e:	6030      	str	r0, [r6, #0]
 800ca50:	062e      	lsls	r6, r5, #24
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	d501      	bpl.n	800ca5a <_printf_i+0x1be>
 800ca56:	6019      	str	r1, [r3, #0]
 800ca58:	e002      	b.n	800ca60 <_printf_i+0x1c4>
 800ca5a:	0668      	lsls	r0, r5, #25
 800ca5c:	d5fb      	bpl.n	800ca56 <_printf_i+0x1ba>
 800ca5e:	8019      	strh	r1, [r3, #0]
 800ca60:	2300      	movs	r3, #0
 800ca62:	6123      	str	r3, [r4, #16]
 800ca64:	4616      	mov	r6, r2
 800ca66:	e7bc      	b.n	800c9e2 <_printf_i+0x146>
 800ca68:	6833      	ldr	r3, [r6, #0]
 800ca6a:	1d1a      	adds	r2, r3, #4
 800ca6c:	6032      	str	r2, [r6, #0]
 800ca6e:	681e      	ldr	r6, [r3, #0]
 800ca70:	6862      	ldr	r2, [r4, #4]
 800ca72:	2100      	movs	r1, #0
 800ca74:	4630      	mov	r0, r6
 800ca76:	f7f3 fbbb 	bl	80001f0 <memchr>
 800ca7a:	b108      	cbz	r0, 800ca80 <_printf_i+0x1e4>
 800ca7c:	1b80      	subs	r0, r0, r6
 800ca7e:	6060      	str	r0, [r4, #4]
 800ca80:	6863      	ldr	r3, [r4, #4]
 800ca82:	6123      	str	r3, [r4, #16]
 800ca84:	2300      	movs	r3, #0
 800ca86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca8a:	e7aa      	b.n	800c9e2 <_printf_i+0x146>
 800ca8c:	6923      	ldr	r3, [r4, #16]
 800ca8e:	4632      	mov	r2, r6
 800ca90:	4649      	mov	r1, r9
 800ca92:	4640      	mov	r0, r8
 800ca94:	47d0      	blx	sl
 800ca96:	3001      	adds	r0, #1
 800ca98:	d0ad      	beq.n	800c9f6 <_printf_i+0x15a>
 800ca9a:	6823      	ldr	r3, [r4, #0]
 800ca9c:	079b      	lsls	r3, r3, #30
 800ca9e:	d413      	bmi.n	800cac8 <_printf_i+0x22c>
 800caa0:	68e0      	ldr	r0, [r4, #12]
 800caa2:	9b03      	ldr	r3, [sp, #12]
 800caa4:	4298      	cmp	r0, r3
 800caa6:	bfb8      	it	lt
 800caa8:	4618      	movlt	r0, r3
 800caaa:	e7a6      	b.n	800c9fa <_printf_i+0x15e>
 800caac:	2301      	movs	r3, #1
 800caae:	4632      	mov	r2, r6
 800cab0:	4649      	mov	r1, r9
 800cab2:	4640      	mov	r0, r8
 800cab4:	47d0      	blx	sl
 800cab6:	3001      	adds	r0, #1
 800cab8:	d09d      	beq.n	800c9f6 <_printf_i+0x15a>
 800caba:	3501      	adds	r5, #1
 800cabc:	68e3      	ldr	r3, [r4, #12]
 800cabe:	9903      	ldr	r1, [sp, #12]
 800cac0:	1a5b      	subs	r3, r3, r1
 800cac2:	42ab      	cmp	r3, r5
 800cac4:	dcf2      	bgt.n	800caac <_printf_i+0x210>
 800cac6:	e7eb      	b.n	800caa0 <_printf_i+0x204>
 800cac8:	2500      	movs	r5, #0
 800caca:	f104 0619 	add.w	r6, r4, #25
 800cace:	e7f5      	b.n	800cabc <_printf_i+0x220>
 800cad0:	080112c9 	.word	0x080112c9
 800cad4:	080112da 	.word	0x080112da

0800cad8 <__sflush_r>:
 800cad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae0:	0716      	lsls	r6, r2, #28
 800cae2:	4605      	mov	r5, r0
 800cae4:	460c      	mov	r4, r1
 800cae6:	d454      	bmi.n	800cb92 <__sflush_r+0xba>
 800cae8:	684b      	ldr	r3, [r1, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	dc02      	bgt.n	800caf4 <__sflush_r+0x1c>
 800caee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dd48      	ble.n	800cb86 <__sflush_r+0xae>
 800caf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	d045      	beq.n	800cb86 <__sflush_r+0xae>
 800cafa:	2300      	movs	r3, #0
 800cafc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb00:	682f      	ldr	r7, [r5, #0]
 800cb02:	6a21      	ldr	r1, [r4, #32]
 800cb04:	602b      	str	r3, [r5, #0]
 800cb06:	d030      	beq.n	800cb6a <__sflush_r+0x92>
 800cb08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	0759      	lsls	r1, r3, #29
 800cb0e:	d505      	bpl.n	800cb1c <__sflush_r+0x44>
 800cb10:	6863      	ldr	r3, [r4, #4]
 800cb12:	1ad2      	subs	r2, r2, r3
 800cb14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb16:	b10b      	cbz	r3, 800cb1c <__sflush_r+0x44>
 800cb18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb1a:	1ad2      	subs	r2, r2, r3
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb20:	6a21      	ldr	r1, [r4, #32]
 800cb22:	4628      	mov	r0, r5
 800cb24:	47b0      	blx	r6
 800cb26:	1c43      	adds	r3, r0, #1
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	d106      	bne.n	800cb3a <__sflush_r+0x62>
 800cb2c:	6829      	ldr	r1, [r5, #0]
 800cb2e:	291d      	cmp	r1, #29
 800cb30:	d82b      	bhi.n	800cb8a <__sflush_r+0xb2>
 800cb32:	4a2a      	ldr	r2, [pc, #168]	@ (800cbdc <__sflush_r+0x104>)
 800cb34:	40ca      	lsrs	r2, r1
 800cb36:	07d6      	lsls	r6, r2, #31
 800cb38:	d527      	bpl.n	800cb8a <__sflush_r+0xb2>
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	6062      	str	r2, [r4, #4]
 800cb3e:	04d9      	lsls	r1, r3, #19
 800cb40:	6922      	ldr	r2, [r4, #16]
 800cb42:	6022      	str	r2, [r4, #0]
 800cb44:	d504      	bpl.n	800cb50 <__sflush_r+0x78>
 800cb46:	1c42      	adds	r2, r0, #1
 800cb48:	d101      	bne.n	800cb4e <__sflush_r+0x76>
 800cb4a:	682b      	ldr	r3, [r5, #0]
 800cb4c:	b903      	cbnz	r3, 800cb50 <__sflush_r+0x78>
 800cb4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb52:	602f      	str	r7, [r5, #0]
 800cb54:	b1b9      	cbz	r1, 800cb86 <__sflush_r+0xae>
 800cb56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb5a:	4299      	cmp	r1, r3
 800cb5c:	d002      	beq.n	800cb64 <__sflush_r+0x8c>
 800cb5e:	4628      	mov	r0, r5
 800cb60:	f7ff fca2 	bl	800c4a8 <_free_r>
 800cb64:	2300      	movs	r3, #0
 800cb66:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb68:	e00d      	b.n	800cb86 <__sflush_r+0xae>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	47b0      	blx	r6
 800cb70:	4602      	mov	r2, r0
 800cb72:	1c50      	adds	r0, r2, #1
 800cb74:	d1c9      	bne.n	800cb0a <__sflush_r+0x32>
 800cb76:	682b      	ldr	r3, [r5, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d0c6      	beq.n	800cb0a <__sflush_r+0x32>
 800cb7c:	2b1d      	cmp	r3, #29
 800cb7e:	d001      	beq.n	800cb84 <__sflush_r+0xac>
 800cb80:	2b16      	cmp	r3, #22
 800cb82:	d11e      	bne.n	800cbc2 <__sflush_r+0xea>
 800cb84:	602f      	str	r7, [r5, #0]
 800cb86:	2000      	movs	r0, #0
 800cb88:	e022      	b.n	800cbd0 <__sflush_r+0xf8>
 800cb8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb8e:	b21b      	sxth	r3, r3
 800cb90:	e01b      	b.n	800cbca <__sflush_r+0xf2>
 800cb92:	690f      	ldr	r7, [r1, #16]
 800cb94:	2f00      	cmp	r7, #0
 800cb96:	d0f6      	beq.n	800cb86 <__sflush_r+0xae>
 800cb98:	0793      	lsls	r3, r2, #30
 800cb9a:	680e      	ldr	r6, [r1, #0]
 800cb9c:	bf08      	it	eq
 800cb9e:	694b      	ldreq	r3, [r1, #20]
 800cba0:	600f      	str	r7, [r1, #0]
 800cba2:	bf18      	it	ne
 800cba4:	2300      	movne	r3, #0
 800cba6:	eba6 0807 	sub.w	r8, r6, r7
 800cbaa:	608b      	str	r3, [r1, #8]
 800cbac:	f1b8 0f00 	cmp.w	r8, #0
 800cbb0:	dde9      	ble.n	800cb86 <__sflush_r+0xae>
 800cbb2:	6a21      	ldr	r1, [r4, #32]
 800cbb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cbb6:	4643      	mov	r3, r8
 800cbb8:	463a      	mov	r2, r7
 800cbba:	4628      	mov	r0, r5
 800cbbc:	47b0      	blx	r6
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	dc08      	bgt.n	800cbd4 <__sflush_r+0xfc>
 800cbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbca:	81a3      	strh	r3, [r4, #12]
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd4:	4407      	add	r7, r0
 800cbd6:	eba8 0800 	sub.w	r8, r8, r0
 800cbda:	e7e7      	b.n	800cbac <__sflush_r+0xd4>
 800cbdc:	20400001 	.word	0x20400001

0800cbe0 <_fflush_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	690b      	ldr	r3, [r1, #16]
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	b913      	cbnz	r3, 800cbf0 <_fflush_r+0x10>
 800cbea:	2500      	movs	r5, #0
 800cbec:	4628      	mov	r0, r5
 800cbee:	bd38      	pop	{r3, r4, r5, pc}
 800cbf0:	b118      	cbz	r0, 800cbfa <_fflush_r+0x1a>
 800cbf2:	6a03      	ldr	r3, [r0, #32]
 800cbf4:	b90b      	cbnz	r3, 800cbfa <_fflush_r+0x1a>
 800cbf6:	f7ff fa4d 	bl	800c094 <__sinit>
 800cbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d0f3      	beq.n	800cbea <_fflush_r+0xa>
 800cc02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc04:	07d0      	lsls	r0, r2, #31
 800cc06:	d404      	bmi.n	800cc12 <_fflush_r+0x32>
 800cc08:	0599      	lsls	r1, r3, #22
 800cc0a:	d402      	bmi.n	800cc12 <_fflush_r+0x32>
 800cc0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc0e:	f7ff fc48 	bl	800c4a2 <__retarget_lock_acquire_recursive>
 800cc12:	4628      	mov	r0, r5
 800cc14:	4621      	mov	r1, r4
 800cc16:	f7ff ff5f 	bl	800cad8 <__sflush_r>
 800cc1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc1c:	07da      	lsls	r2, r3, #31
 800cc1e:	4605      	mov	r5, r0
 800cc20:	d4e4      	bmi.n	800cbec <_fflush_r+0xc>
 800cc22:	89a3      	ldrh	r3, [r4, #12]
 800cc24:	059b      	lsls	r3, r3, #22
 800cc26:	d4e1      	bmi.n	800cbec <_fflush_r+0xc>
 800cc28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc2a:	f7ff fc3b 	bl	800c4a4 <__retarget_lock_release_recursive>
 800cc2e:	e7dd      	b.n	800cbec <_fflush_r+0xc>

0800cc30 <__swhatbuf_r>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	460c      	mov	r4, r1
 800cc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc38:	2900      	cmp	r1, #0
 800cc3a:	b096      	sub	sp, #88	@ 0x58
 800cc3c:	4615      	mov	r5, r2
 800cc3e:	461e      	mov	r6, r3
 800cc40:	da0d      	bge.n	800cc5e <__swhatbuf_r+0x2e>
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc48:	f04f 0100 	mov.w	r1, #0
 800cc4c:	bf14      	ite	ne
 800cc4e:	2340      	movne	r3, #64	@ 0x40
 800cc50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc54:	2000      	movs	r0, #0
 800cc56:	6031      	str	r1, [r6, #0]
 800cc58:	602b      	str	r3, [r5, #0]
 800cc5a:	b016      	add	sp, #88	@ 0x58
 800cc5c:	bd70      	pop	{r4, r5, r6, pc}
 800cc5e:	466a      	mov	r2, sp
 800cc60:	f000 f848 	bl	800ccf4 <_fstat_r>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	dbec      	blt.n	800cc42 <__swhatbuf_r+0x12>
 800cc68:	9901      	ldr	r1, [sp, #4]
 800cc6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc72:	4259      	negs	r1, r3
 800cc74:	4159      	adcs	r1, r3
 800cc76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc7a:	e7eb      	b.n	800cc54 <__swhatbuf_r+0x24>

0800cc7c <__smakebuf_r>:
 800cc7c:	898b      	ldrh	r3, [r1, #12]
 800cc7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc80:	079d      	lsls	r5, r3, #30
 800cc82:	4606      	mov	r6, r0
 800cc84:	460c      	mov	r4, r1
 800cc86:	d507      	bpl.n	800cc98 <__smakebuf_r+0x1c>
 800cc88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	6123      	str	r3, [r4, #16]
 800cc90:	2301      	movs	r3, #1
 800cc92:	6163      	str	r3, [r4, #20]
 800cc94:	b003      	add	sp, #12
 800cc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc98:	ab01      	add	r3, sp, #4
 800cc9a:	466a      	mov	r2, sp
 800cc9c:	f7ff ffc8 	bl	800cc30 <__swhatbuf_r>
 800cca0:	9f00      	ldr	r7, [sp, #0]
 800cca2:	4605      	mov	r5, r0
 800cca4:	4639      	mov	r1, r7
 800cca6:	4630      	mov	r0, r6
 800cca8:	f7ff f8dc 	bl	800be64 <_malloc_r>
 800ccac:	b948      	cbnz	r0, 800ccc2 <__smakebuf_r+0x46>
 800ccae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccb2:	059a      	lsls	r2, r3, #22
 800ccb4:	d4ee      	bmi.n	800cc94 <__smakebuf_r+0x18>
 800ccb6:	f023 0303 	bic.w	r3, r3, #3
 800ccba:	f043 0302 	orr.w	r3, r3, #2
 800ccbe:	81a3      	strh	r3, [r4, #12]
 800ccc0:	e7e2      	b.n	800cc88 <__smakebuf_r+0xc>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	6020      	str	r0, [r4, #0]
 800ccc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccca:	81a3      	strh	r3, [r4, #12]
 800cccc:	9b01      	ldr	r3, [sp, #4]
 800ccce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ccd2:	b15b      	cbz	r3, 800ccec <__smakebuf_r+0x70>
 800ccd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccd8:	4630      	mov	r0, r6
 800ccda:	f000 f81d 	bl	800cd18 <_isatty_r>
 800ccde:	b128      	cbz	r0, 800ccec <__smakebuf_r+0x70>
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	f023 0303 	bic.w	r3, r3, #3
 800cce6:	f043 0301 	orr.w	r3, r3, #1
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	89a3      	ldrh	r3, [r4, #12]
 800ccee:	431d      	orrs	r5, r3
 800ccf0:	81a5      	strh	r5, [r4, #12]
 800ccf2:	e7cf      	b.n	800cc94 <__smakebuf_r+0x18>

0800ccf4 <_fstat_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	4d07      	ldr	r5, [pc, #28]	@ (800cd14 <_fstat_r+0x20>)
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	4608      	mov	r0, r1
 800ccfe:	4611      	mov	r1, r2
 800cd00:	602b      	str	r3, [r5, #0]
 800cd02:	f7f3 ff32 	bl	8000b6a <_fstat>
 800cd06:	1c43      	adds	r3, r0, #1
 800cd08:	d102      	bne.n	800cd10 <_fstat_r+0x1c>
 800cd0a:	682b      	ldr	r3, [r5, #0]
 800cd0c:	b103      	cbz	r3, 800cd10 <_fstat_r+0x1c>
 800cd0e:	6023      	str	r3, [r4, #0]
 800cd10:	bd38      	pop	{r3, r4, r5, pc}
 800cd12:	bf00      	nop
 800cd14:	20002294 	.word	0x20002294

0800cd18 <_isatty_r>:
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	4d06      	ldr	r5, [pc, #24]	@ (800cd34 <_isatty_r+0x1c>)
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	4604      	mov	r4, r0
 800cd20:	4608      	mov	r0, r1
 800cd22:	602b      	str	r3, [r5, #0]
 800cd24:	f7f3 ff31 	bl	8000b8a <_isatty>
 800cd28:	1c43      	adds	r3, r0, #1
 800cd2a:	d102      	bne.n	800cd32 <_isatty_r+0x1a>
 800cd2c:	682b      	ldr	r3, [r5, #0]
 800cd2e:	b103      	cbz	r3, 800cd32 <_isatty_r+0x1a>
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	bd38      	pop	{r3, r4, r5, pc}
 800cd34:	20002294 	.word	0x20002294

0800cd38 <_init>:
 800cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3a:	bf00      	nop
 800cd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd3e:	bc08      	pop	{r3}
 800cd40:	469e      	mov	lr, r3
 800cd42:	4770      	bx	lr

0800cd44 <_fini>:
 800cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd46:	bf00      	nop
 800cd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4a:	bc08      	pop	{r3}
 800cd4c:	469e      	mov	lr, r3
 800cd4e:	4770      	bx	lr
