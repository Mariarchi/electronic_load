
LCD_by_myself_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000460c  0800bfd8  0800bfd8  0000cfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105e4  080105e4  00012180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080105e4  080105e4  000115e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105ec  080105ec  00012180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105ec  080105ec  000115ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080105f0  080105f0  000115f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  080105f4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000211c  20000180  08010774  00012180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000229c  08010774  0001229c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eac8  00000000  00000000  000121b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005429  00000000  00000000  00030c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  000360a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001476  00000000  00000000  00037bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d293  00000000  00000000  0003903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a91  00000000  00000000  000562d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099158  00000000  00000000  0007bd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114eba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007614  00000000  00000000  00114f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011c514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bfc0 	.word	0x0800bfc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800bfc0 	.word	0x0800bfc0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a2f      	ldr	r2, [pc, #188]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a28      	ldr	r2, [pc, #160]	@ (8000698 <MX_GPIO_Init+0xdc>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <MX_GPIO_Init+0xdc>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_GPIO_Init+0xdc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800062c:	481b      	ldr	r0, [pc, #108]	@ (800069c <MX_GPIO_Init+0xe0>)
 800062e:	f000 ffa1 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin|TP_CS_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	21d0      	movs	r1, #208	@ 0xd0
 8000636:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 8000638:	f000 ff9c 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 800063c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	4811      	ldr	r0, [pc, #68]	@ (800069c <MX_GPIO_Init+0xe0>)
 8000656:	f000 fdf1 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800065a:	2308      	movs	r3, #8
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4619      	mov	r1, r3
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 800066e:	f000 fde5 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LCD_CS_Pin TP_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin|TP_CS_Pin;
 8000672:	23d0      	movs	r3, #208	@ 0xd0
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_GPIO_Init+0xe4>)
 800068a:	f000 fdd7 	bl	800123c <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f000 fc03 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f869 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f7ff ff83 	bl	80005bc <MX_GPIO_Init>
  MX_SPI1_Init();
 80006b6:	f000 f905 	bl	80008c4 <MX_SPI1_Init>
  MX_TIM3_Init();
 80006ba:	f000 fa9d 	bl	8000bf8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80006be:	f000 fb59 	bl	8000d74 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80006c2:	f007 f90d 	bl	80078e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  printf("3.5inch TFT Touch Shield Demo\r\n");
 80006c6:	4829      	ldr	r0, [pc, #164]	@ (800076c <main+0xc8>)
 80006c8:	f00a fec6 	bl	800b458 <puts>
  System_Init();
 80006cc:	f007 fe2c 	bl	8008328 <System_Init>

  LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;//SCAN_DIR_DFT = D2U_L2R направление отрисовки?
 80006d0:	2306      	movs	r3, #6
 80006d2:	72fb      	strb	r3, [r7, #11]
  printf("Init LCD...\r\n");
 80006d4:	4826      	ldr	r0, [pc, #152]	@ (8000770 <main+0xcc>)
 80006d6:	f00a febf 	bl	800b458 <puts>
  LCD_Init(Lcd_ScanDir, 64000); // управление яркостью
 80006da:	7afb      	ldrb	r3, [r7, #11]
 80006dc:	f44f 417a 	mov.w	r1, #64000	@ 0xfa00
 80006e0:	4618      	mov	r0, r3
 80006e2:	f008 fdc9 	bl	8009278 <LCD_Init>
  printf("Init TouchPad...\r\n");
 80006e6:	4823      	ldr	r0, [pc, #140]	@ (8000774 <main+0xd0>)
 80006e8:	f00a feb6 	bl	800b458 <puts>
  TP_Init(Lcd_ScanDir);
 80006ec:	7afb      	ldrb	r3, [r7, #11]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00a f9c4 	bl	800aa7c <TP_Init>
  printf("Init SDcard...\r\n");
 80006f4:	4820      	ldr	r0, [pc, #128]	@ (8000778 <main+0xd4>)
 80006f6:	f00a feaf 	bl	800b458 <puts>
  SD_Init();
 80006fa:	f008 fb2d 	bl	8008d58 <SD_Init>
  printf("Install factory TP set...\r\n");
 80006fe:	481f      	ldr	r0, [pc, #124]	@ (800077c <main+0xd8>)
 8000700:	f00a feaa 	bl	800b458 <puts>
  TP_GetAdFac();//Get the default calibration factor
 8000704:	f009 ffb4 	bl	800a670 <TP_GetAdFac>
  printf("Initialization for Electronic load \r\n");
 8000708:	481d      	ldr	r0, [pc, #116]	@ (8000780 <main+0xdc>)
 800070a:	f00a fea5 	bl	800b458 <puts>
  LOAD_Init();
 800070e:	f00a f9d3 	bl	800aab8 <LOAD_Init>
	printf("**********Touch Draw Board**********\r\n");
	TP_GetAdFac();//Get the default calibration factor
	TP_Dialog();//initialize the drawing board
*/

	uint32_t previousTick = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]

	DEV_TIME sDev_time;
	sDev_time.Hour = 00;
 8000716:	2300      	movs	r3, #0
 8000718:	713b      	strb	r3, [r7, #4]
	sDev_time.Min = 00;
 800071a:	2300      	movs	r3, #0
 800071c:	717b      	strb	r3, [r7, #5]
	sDev_time.Sec = 00;
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]

	LCD_Clear(LCD_BACKGROUND);
 8000722:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000726:	f008 fe97 	bl	8009458 <LCD_Clear>
	TP_MenuDialog();
 800072a:	f00a f819 	bl	800a760 <TP_MenuDialog>
	//GUI_Show();
	//LCD_Show_bmp(Bmp_ScanDir , Lcd_ScanDir);
	//TP_DrawBoard();
	//GUI_DisGrayMap(0, 0, gImage_ninja);

	TP_MenuTouch();
 800072e:	f00a f92b 	bl	800a988 <TP_MenuTouch>
	TP_IndicationsUnit();
 8000732:	f00a f8eb 	bl	800a90c <TP_IndicationsUnit>

	if (HAL_GetTick() - previousTick >= 1000) {
 8000736:	f000 fc23 	bl	8000f80 <HAL_GetTick>
 800073a:	4602      	mov	r2, r0
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000744:	d3f3      	bcc.n	800072e <main+0x8a>
		previousTick = HAL_GetTick();
 8000746:	f000 fc1b 	bl	8000f80 <HAL_GetTick>
 800074a:	60f8      	str	r0, [r7, #12]

		sDev_time.Sec++;
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	3301      	adds	r3, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	71bb      	strb	r3, [r7, #6]
		GUI_Showtime(0, 0, 126, 25, &sDev_time, BLUE);
 8000754:	231f      	movs	r3, #31
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	463b      	mov	r3, r7
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2319      	movs	r3, #25
 800075e:	227e      	movs	r2, #126	@ 0x7e
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f009 fb0a 	bl	8009d7c <GUI_Showtime>
	TP_MenuTouch();
 8000768:	e7e1      	b.n	800072e <main+0x8a>
 800076a:	bf00      	nop
 800076c:	0800bfd8 	.word	0x0800bfd8
 8000770:	0800bff8 	.word	0x0800bff8
 8000774:	0800c008 	.word	0x0800c008
 8000778:	0800c01c 	.word	0x0800c01c
 800077c:	0800c02c 	.word	0x0800c02c
 8000780:	0800c048 	.word	0x0800c048

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	@ 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	@ 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f00a ff40 	bl	800b618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b33      	ldr	r3, [pc, #204]	@ (800087c <SystemClock_Config+0xf8>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	4a32      	ldr	r2, [pc, #200]	@ (800087c <SystemClock_Config+0xf8>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b8:	4b30      	ldr	r3, [pc, #192]	@ (800087c <SystemClock_Config+0xf8>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <SystemClock_Config+0xfc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a2c      	ldr	r2, [pc, #176]	@ (8000880 <SystemClock_Config+0xfc>)
 80007ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <SystemClock_Config+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e0:	2301      	movs	r3, #1
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f4:	2310      	movs	r3, #16
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 123;
 80007f8:	237b      	movs	r3, #123	@ 0x7b
 80007fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f002 f91f 	bl	8002a4c <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d003      	beq.n	800081c <SystemClock_Config+0x98>
  {
	  _Error_Handler(__FILE__, __LINE__);
 8000814:	21cc      	movs	r1, #204	@ 0xcc
 8000816:	481b      	ldr	r0, [pc, #108]	@ (8000884 <SystemClock_Config+0x100>)
 8000818:	f000 f84b 	bl	80008b2 <_Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2103      	movs	r1, #3
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fb7f 	bl	8002f3c <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d003      	beq.n	800084c <SystemClock_Config+0xc8>
  {
	  _Error_Handler(__FILE__, __LINE__);
 8000844:	21da      	movs	r1, #218	@ 0xda
 8000846:	480f      	ldr	r0, [pc, #60]	@ (8000884 <SystemClock_Config+0x100>)
 8000848:	f000 f833 	bl	80008b2 <_Error_Handler>
  }
	  /**Configure the Systick interrupt time
	  */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800084c:	f002 fd22 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 8000850:	4603      	mov	r3, r0
 8000852:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <SystemClock_Config+0x104>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	099b      	lsrs	r3, r3, #6
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fcc5 	bl	80011ea <HAL_SYSTICK_Config>

	  /**Configure the Systick
	  */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000860:	2004      	movs	r0, #4
 8000862:	f000 fccf 	bl	8001204 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	f04f 30ff 	mov.w	r0, #4294967295
 800086e:	f000 fc92 	bl	8001196 <HAL_NVIC_SetPriority>
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	@ 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000
 8000884:	0800c070 	.word	0x0800c070
 8000888:	10624dd3 	.word	0x10624dd3

0800088c <USB_Send_Message>:

/* USER CODE BEGIN 4 */
void USB_Send_Message(const char *msg) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff fca3 	bl	80001e0 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	4619      	mov	r1, r3
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f007 f8e6 	bl	8007a70 <CDC_Transmit_FS>
	HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 fb77 	bl	8000f98 <HAL_Delay>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <_Error_Handler+0xe>

080008c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_SPI1_Init+0x68>)
 80008ca:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <MX_SPI1_Init+0x6c>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_SPI1_Init+0x68>)
 80008d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_SPI1_Init+0x68>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_SPI1_Init+0x68>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_SPI1_Init+0x68>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_SPI1_Init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_SPI1_Init+0x68>)
 80008f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_SPI1_Init+0x68>)
 80008f8:	2210      	movs	r2, #16
 80008fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_SPI1_Init+0x68>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_SPI1_Init+0x68>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_SPI1_Init+0x68>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <MX_SPI1_Init+0x68>)
 8000910:	220a      	movs	r2, #10
 8000912:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_SPI1_Init+0x68>)
 8000916:	f002 fcf1 	bl	80032fc <HAL_SPI_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000920:	2136      	movs	r1, #54	@ 0x36
 8000922:	4804      	ldr	r0, [pc, #16]	@ (8000934 <MX_SPI1_Init+0x70>)
 8000924:	f7ff ffc5 	bl	80008b2 <_Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000019c 	.word	0x2000019c
 8000930:	40013000 	.word	0x40013000
 8000934:	0800c084 	.word	0x0800c084

08000938 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a19      	ldr	r2, [pc, #100]	@ (80009bc <HAL_SPI_MspInit+0x84>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12b      	bne.n	80009b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	4a17      	ldr	r2, [pc, #92]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000964:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000968:	6453      	str	r3, [r2, #68]	@ 0x44
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000992:	23e0      	movs	r3, #224	@ 0xe0
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a2:	2305      	movs	r3, #5
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <HAL_SPI_MspInit+0x8c>)
 80009ae:	f000 fc45 	bl	800123c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	@ 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40013000 	.word	0x40013000
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6e:	f000 fa73 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a7c:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <OTG_FS_IRQHandler+0x10>)
 8000a7e:	f000 fed6 	bl	800182e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000176c 	.word	0x2000176c

08000a8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	e00a      	b.n	8000ab4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a9e:	f3af 8000 	nop.w
 8000aa2:	4601      	mov	r1, r0
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	60ba      	str	r2, [r7, #8]
 8000aaa:	b2ca      	uxtb	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf0      	blt.n	8000a9e <_read+0x12>
  }

  return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e009      	b.n	8000aec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf1      	blt.n	8000ad8 <_write+0x12>
  }
  return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_close>:

int _close(int file)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b26:	605a      	str	r2, [r3, #4]
  return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_isatty>:

int _isatty(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	@ (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f00a fd9c 	bl	800b6d4 <__errno>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <_sbrk+0x64>)
 8000bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20020000 	.word	0x20020000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	200001f4 	.word	0x200001f4
 8000bd0:	200022a0 	.word	0x200022a0

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfe:	f107 0320 	add.w	r3, r7, #32
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
 8000c16:	615a      	str	r2, [r3, #20]
 8000c18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c1a:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000c1c:	4a25      	ldr	r2, [pc, #148]	@ (8000cb4 <MX_TIM3_Init+0xbc>)
 8000c1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c40:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000c42:	f002 fbe4 	bl	800340e <HAL_TIM_PWM_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000c4c:	2133      	movs	r1, #51	@ 0x33
 8000c4e:	481a      	ldr	r0, [pc, #104]	@ (8000cb8 <MX_TIM3_Init+0xc0>)
 8000c50:	f7ff fe2f 	bl	80008b2 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	4619      	mov	r1, r3
 8000c62:	4813      	ldr	r0, [pc, #76]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000c64:	f002 ffcc 	bl	8003c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c6e:	2139      	movs	r1, #57	@ 0x39
 8000c70:	4811      	ldr	r0, [pc, #68]	@ (8000cb8 <MX_TIM3_Init+0xc0>)
 8000c72:	f7ff fe1e 	bl	80008b2 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c76:	2360      	movs	r3, #96	@ 0x60
 8000c78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2204      	movs	r2, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4808      	ldr	r0, [pc, #32]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000c8e:	f002 fcbd 	bl	800360c <HAL_TIM_PWM_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000c98:	2141      	movs	r1, #65	@ 0x41
 8000c9a:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <MX_TIM3_Init+0xc0>)
 8000c9c:	f7ff fe09 	bl	80008b2 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca0:	4803      	ldr	r0, [pc, #12]	@ (8000cb0 <MX_TIM3_Init+0xb8>)
 8000ca2:	f000 f82d 	bl	8000d00 <HAL_TIM_MspPostInit>

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200001f8 	.word	0x200001f8
 8000cb4:	40000400 	.word	0x40000400
 8000cb8:	0800c098 	.word	0x0800c098

08000cbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10d      	bne.n	8000cea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <HAL_TIM_PWM_MspInit+0x40>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a09      	ldr	r2, [pc, #36]	@ (8000cfc <HAL_TIM_PWM_MspInit+0x40>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <HAL_TIM_PWM_MspInit+0x40>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40000400 	.word	0x40000400
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <HAL_TIM_MspPostInit+0x68>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d11d      	bne.n	8000d5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a10      	ldr	r2, [pc, #64]	@ (8000d6c <HAL_TIM_MspPostInit+0x6c>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_TIM_MspPostInit+0x6c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000d3e:	2320      	movs	r3, #32
 8000d40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <HAL_TIM_MspPostInit+0x70>)
 8000d5a:	f000 fa6f 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400

08000d74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000d7a:	4a13      	ldr	r2, [pc, #76]	@ (8000dc8 <MX_USART2_UART_Init+0x54>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000daa:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000dac:	f002 ff96 	bl	8003cdc <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000db6:	2133      	movs	r1, #51	@ 0x33
 8000db8:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <MX_USART2_UART_Init+0x58>)
 8000dba:	f7ff fd7a 	bl	80008b2 <_Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000240 	.word	0x20000240
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	0800c0ac 	.word	0x0800c0ac

08000dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a19      	ldr	r2, [pc, #100]	@ (8000e54 <HAL_UART_MspInit+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12b      	bne.n	8000e4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <HAL_UART_MspInit+0x88>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <HAL_UART_MspInit+0x88>)
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_UART_MspInit+0x88>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_UART_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <HAL_UART_MspInit+0x88>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_UART_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <HAL_UART_MspInit+0x8c>)
 8000e46:	f000 f9f9 	bl	800123c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	@ 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e64:	f7ff feb6 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	@ (8000eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f00a fc27 	bl	800b6e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fc07 	bl	80006a4 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ea4:	080105f4 	.word	0x080105f4
  ldr r2, =_sbss
 8000ea8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000eac:	2000229c 	.word	0x2000229c

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f94f 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	200f      	movs	r0, #15
 8000ee4:	f000 f808 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fd6e 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f967 	bl	80011ea <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f92f 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000288 	.word	0x20000288

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000288 	.word	0x20000288

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db0b      	blt.n	800106e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4907      	ldr	r1, [pc, #28]	@ (800107c <__NVIC_EnableIRQ+0x38>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	@ (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	@ (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff29 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff3e 	bl	8001028 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff31 	bl	8001044 <__NVIC_EnableIRQ>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffa2 	bl	800113c <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b04      	cmp	r3, #4
 8001210:	d106      	bne.n	8001220 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800121e:	e005      	b.n	800122c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001226:	f023 0304 	bic.w	r3, r3, #4
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e159      	b.n	800150c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8148 	bne.w	8001506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d005      	beq.n	800128e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128a:	2b02      	cmp	r3, #2
 800128c:	d130      	bne.n	80012f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	f003 0201 	and.w	r2, r3, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d017      	beq.n	800132c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d123      	bne.n	8001380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a2 	beq.w	8001506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b57      	ldr	r3, [pc, #348]	@ (8001524 <HAL_GPIO_Init+0x2e8>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	4a56      	ldr	r2, [pc, #344]	@ (8001524 <HAL_GPIO_Init+0x2e8>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d2:	4b54      	ldr	r3, [pc, #336]	@ (8001524 <HAL_GPIO_Init+0x2e8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013de:	4a52      	ldr	r2, [pc, #328]	@ (8001528 <HAL_GPIO_Init+0x2ec>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a49      	ldr	r2, [pc, #292]	@ (800152c <HAL_GPIO_Init+0x2f0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x202>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a48      	ldr	r2, [pc, #288]	@ (8001530 <HAL_GPIO_Init+0x2f4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x1fe>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a47      	ldr	r2, [pc, #284]	@ (8001534 <HAL_GPIO_Init+0x2f8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x1fa>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a46      	ldr	r2, [pc, #280]	@ (8001538 <HAL_GPIO_Init+0x2fc>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x1f6>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a45      	ldr	r2, [pc, #276]	@ (800153c <HAL_GPIO_Init+0x300>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x1f2>
 800142a:	2304      	movs	r3, #4
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x204>
 800142e:	2307      	movs	r3, #7
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x204>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x204>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x204>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x204>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	@ (8001528 <HAL_GPIO_Init+0x2ec>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b38      	ldr	r3, [pc, #224]	@ (8001540 <HAL_GPIO_Init+0x304>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a2f      	ldr	r2, [pc, #188]	@ (8001540 <HAL_GPIO_Init+0x304>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <HAL_GPIO_Init+0x304>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a24      	ldr	r2, [pc, #144]	@ (8001540 <HAL_GPIO_Init+0x304>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_GPIO_Init+0x304>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001540 <HAL_GPIO_Init+0x304>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <HAL_GPIO_Init+0x304>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a0f      	ldr	r2, [pc, #60]	@ (8001540 <HAL_GPIO_Init+0x304>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f aea2 	bls.w	8001258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af02      	add	r7, sp, #8
 80015ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e101      	b.n	80017bc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f006 fb94 	bl	8007d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2203      	movs	r2, #3
 80015dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015e6:	d102      	bne.n	80015ee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 ff4d 	bl	8004492 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7c1a      	ldrb	r2, [r3, #16]
 8001600:	f88d 2000 	strb.w	r2, [sp]
 8001604:	3304      	adds	r3, #4
 8001606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001608:	f002 fe2c 	bl	8004264 <USB_CoreInit>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2202      	movs	r2, #2
 8001616:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0ce      	b.n	80017bc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f002 ff45 	bl	80044b4 <USB_SetCurrentMode>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0bf      	b.n	80017bc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e04a      	b.n	80016d8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	3315      	adds	r3, #21
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3314      	adds	r3, #20
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	b298      	uxth	r0, r3
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	332e      	adds	r3, #46	@ 0x2e
 800167e:	4602      	mov	r2, r0
 8001680:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	3318      	adds	r3, #24
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	331c      	adds	r3, #28
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3320      	adds	r3, #32
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	3324      	adds	r3, #36	@ 0x24
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	3301      	adds	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3af      	bcc.n	8001642 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e044      	b.n	8001772 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	3301      	adds	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	429a      	cmp	r2, r3
 800177a:	d3b5      	bcc.n	80016e8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7c1a      	ldrb	r2, [r3, #16]
 8001784:	f88d 2000 	strb.w	r2, [sp]
 8001788:	3304      	adds	r3, #4
 800178a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800178c:	f002 fede 	bl	800454c <USB_DevInit>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2202      	movs	r2, #2
 800179a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00c      	b.n	80017bc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 ff28 	bl	800560a <USB_DevDisconnect>

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_PCD_Start+0x1c>
 80017dc:	2302      	movs	r3, #2
 80017de:	e022      	b.n	8001826 <HAL_PCD_Start+0x62>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001800:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fe2f 	bl	8004470 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fed6 	bl	80055c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800182e:	b590      	push	{r4, r7, lr}
 8001830:	b08d      	sub	sp, #52	@ 0x34
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f003 ff94 	bl	8005772 <USB_GetMode>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	f040 848c 	bne.w	800216a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fef8 	bl	800564c <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8482 	beq.w	8002168 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fee5 	bl	800564c <USB_ReadInterrupts>
 8001882:	4603      	mov	r3, r0
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b02      	cmp	r3, #2
 800188a:	d107      	bne.n	800189c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f002 0202 	and.w	r2, r2, #2
 800189a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 fed3 	bl	800564c <USB_ReadInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d161      	bne.n	8001974 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0210 	bic.w	r2, r2, #16
 80018be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f003 020f 	and.w	r2, r3, #15
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	3304      	adds	r3, #4
 80018de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80018e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018ea:	d124      	bne.n	8001936 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d035      	beq.n	8001964 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001906:	b29b      	uxth	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	6a38      	ldr	r0, [r7, #32]
 800190c:	f003 fd0a 	bl	8005324 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800191c:	441a      	add	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800192e:	441a      	add	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	e016      	b.n	8001964 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800193c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001940:	d110      	bne.n	8001964 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001948:	2208      	movs	r2, #8
 800194a:	4619      	mov	r1, r3
 800194c:	6a38      	ldr	r0, [r7, #32]
 800194e:	f003 fce9 	bl	8005324 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800195e:	441a      	add	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0210 	orr.w	r2, r2, #16
 8001972:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 fe67 	bl	800564c <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001984:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001988:	f040 80a7 	bne.w	8001ada <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fe6c 	bl	8005672 <USB_ReadDevAllOutEpInterrupt>
 800199a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800199c:	e099      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800199e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 808e 	beq.w	8001ac6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fe90 	bl	80056da <USB_ReadDevOutEPInterrupt>
 80019ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	015a      	lsls	r2, r3, #5
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019d2:	461a      	mov	r2, r3
 80019d4:	2301      	movs	r3, #1
 80019d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fea4 	bl	8002728 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00c      	beq.n	8001a04 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	015a      	lsls	r2, r3, #5
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019f6:	461a      	mov	r2, r3
 80019f8:	2308      	movs	r3, #8
 80019fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 ff7a 	bl	80028f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d030      	beq.n	8001a8c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	2b80      	cmp	r3, #128	@ 0x80
 8001a34:	d109      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a48:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	78db      	ldrb	r3, [r3, #3]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f006 fa43 	bl	8007f00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a86:	461a      	mov	r2, r3
 8001a88:	2302      	movs	r3, #2
 8001a8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f003 0320 	and.w	r3, r3, #32
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	015a      	lsls	r2, r3, #5
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ac4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	3301      	adds	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ace:	085b      	lsrs	r3, r3, #1
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f47f af62 	bne.w	800199e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fdb4 	bl	800564c <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001aee:	f040 80db 	bne.w	8001ca8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fdd5 	bl	80056a6 <USB_ReadDevAllInEpInterrupt>
 8001afc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001b02:	e0cd      	b.n	8001ca0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80c2 	beq.w	8001c94 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fdfb 	bl	8005716 <USB_ReadDevInEPInterrupt>
 8001b20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d057      	beq.n	8001bdc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	2201      	movs	r2, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69f9      	ldr	r1, [r7, #28]
 8001b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2301      	movs	r3, #1
 8001b60:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	799b      	ldrb	r3, [r3, #6]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d132      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	3320      	adds	r3, #32
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4403      	add	r3, r0
 8001b8a:	331c      	adds	r3, #28
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4419      	add	r1, r3
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4403      	add	r3, r0
 8001b9e:	3320      	adds	r3, #32
 8001ba0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d113      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x3a2>
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3324      	adds	r3, #36	@ 0x24
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d108      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2101      	movs	r1, #1
 8001bcc:	f003 fe02 	bl	80057d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f006 f913 	bl	8007e02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d008      	beq.n	8001bf8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2310      	movs	r3, #16
 8001c12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2340      	movs	r3, #64	@ 0x40
 8001c2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d023      	beq.n	8001c82 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c3c:	6a38      	ldr	r0, [r7, #32]
 8001c3e:	f002 fde9 	bl	8004814 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	3310      	adds	r3, #16
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	3304      	adds	r3, #4
 8001c54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	78db      	ldrb	r3, [r3, #3]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2200      	movs	r2, #0
 8001c62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f006 f95a 	bl	8007f24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2302      	movs	r3, #2
 8001c80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fcbd 	bl	800260e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	3301      	adds	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f47f af2e 	bne.w	8001b04 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fccd 	bl	800564c <USB_ReadInterrupts>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001cbc:	d122      	bne.n	8001d04 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d108      	bne.n	8001cee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fea4 	bl	8002a34 <HAL_PCDEx_LPM_Callback>
 8001cec:	e002      	b.n	8001cf4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f006 f8f8 	bl	8007ee4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fc9f 	bl	800564c <USB_ReadInterrupts>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d18:	d112      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d102      	bne.n	8001d30 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f006 f8b4 	bl	8007e98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001d3e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fc81 	bl	800564c <USB_ReadInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d54:	f040 80b7 	bne.w	8001ec6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2110      	movs	r1, #16
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 fd4e 	bl	8004814 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d7c:	e046      	b.n	8001e0c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001da2:	0151      	lsls	r1, r2, #5
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	440a      	add	r2, r1
 8001da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001dac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001db0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001dc4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dd6:	0151      	lsls	r1, r2, #5
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	440a      	add	r2, r1
 8001ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001de0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001de4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001df6:	0151      	lsls	r1, r2, #5
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	440a      	add	r2, r1
 8001dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001e00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e04:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e08:	3301      	adds	r3, #1
 8001e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	791b      	ldrb	r3, [r3, #4]
 8001e10:	461a      	mov	r2, r3
 8001e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d3b2      	bcc.n	8001d7e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e26:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001e2a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7bdb      	ldrb	r3, [r3, #15]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d016      	beq.n	8001e62 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e44:	f043 030b 	orr.w	r3, r3, #11
 8001e48:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e5a:	f043 030b 	orr.w	r3, r3, #11
 8001e5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e60:	e015      	b.n	8001e8e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e74:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001e78:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e88:	f043 030b 	orr.w	r3, r3, #11
 8001e8c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e9c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001ea0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f003 fc8f 	bl	80057d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fbbe 	bl	800564c <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eda:	d123      	bne.n	8001f24 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 fc54 	bl	800578e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 fd0b 	bl	8004906 <USB_GetDevSpeed>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681c      	ldr	r4, [r3, #0]
 8001efc:	f001 f9ca 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 8001f00:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f06:	461a      	mov	r2, r3
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f002 fa0f 	bl	800432c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f005 ffa0 	bl	8007e54 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 fb8f 	bl	800564c <USB_ReadInterrupts>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d10a      	bne.n	8001f4e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f005 ff7c 	bl	8007e36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f002 0208 	and.w	r2, r2, #8
 8001f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fb7a 	bl	800564c <USB_ReadInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5e:	2b80      	cmp	r3, #128	@ 0x80
 8001f60:	d123      	bne.n	8001faa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f6e:	2301      	movs	r3, #1
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f72:	e014      	b.n	8001f9e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fb0a 	bl	80025ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	791b      	ldrb	r3, [r3, #4]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d3e4      	bcc.n	8001f74 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 fb4c 	bl	800564c <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fbe:	d13c      	bne.n	800203a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc4:	e02b      	b.n	800201e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3318      	adds	r3, #24
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d115      	bne.n	8002018 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001fec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da12      	bge.n	8002018 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3317      	adds	r3, #23
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4619      	mov	r1, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 faca 	bl	80025ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	3301      	adds	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	791b      	ldrb	r3, [r3, #4]
 8002022:	461a      	mov	r2, r3
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	4293      	cmp	r3, r2
 8002028:	d3cd      	bcc.n	8001fc6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fb04 	bl	800564c <USB_ReadInterrupts>
 8002044:	4603      	mov	r3, r0
 8002046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800204a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800204e:	d156      	bne.n	80020fe <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002050:	2301      	movs	r3, #1
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
 8002054:	e045      	b.n	80020e2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d12e      	bne.n	80020dc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800207e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002080:	2b00      	cmp	r3, #0
 8002082:	da2b      	bge.n	80020dc <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	0c1a      	lsrs	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800208e:	4053      	eors	r3, r2
 8002090:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d121      	bne.n	80020dc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10a      	bne.n	80020dc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d8:	6053      	str	r3, [r2, #4]
            break;
 80020da:	e008      	b.n	80020ee <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	3301      	adds	r3, #1
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	791b      	ldrb	r3, [r3, #4]
 80020e6:	461a      	mov	r2, r3
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d3b3      	bcc.n	8002056 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80020fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 faa2 	bl	800564c <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800210e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002112:	d10a      	bne.n	800212a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f005 ff17 	bl	8007f48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fa8c 	bl	800564c <USB_ReadInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b04      	cmp	r3, #4
 800213c:	d115      	bne.n	800216a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f005 ff07 	bl	8007f64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	e000      	b.n	800216a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002168:	bf00      	nop
    }
  }
}
 800216a:	3734      	adds	r7, #52	@ 0x34
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}

08002170 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_PCD_SetAddress+0x1a>
 8002186:	2302      	movs	r3, #2
 8002188:	e012      	b.n	80021b0 <HAL_PCD_SetAddress+0x40>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 f9eb 	bl	800557c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	70fb      	strb	r3, [r7, #3]
 80021ca:	460b      	mov	r3, r1
 80021cc:	803b      	strh	r3, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da0f      	bge.n	80021fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 020f 	and.w	r2, r3, #15
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	3310      	adds	r3, #16
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	705a      	strb	r2, [r3, #1]
 80021fc:	e00f      	b.n	800221e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	f003 020f 	and.w	r2, r3, #15
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	4413      	add	r3, r2
 8002214:	3304      	adds	r3, #4
 8002216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	b2da      	uxtb	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800222a:	883b      	ldrh	r3, [r7, #0]
 800222c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	78ba      	ldrb	r2, [r7, #2]
 8002238:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	785b      	ldrb	r3, [r3, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800224c:	78bb      	ldrb	r3, [r7, #2]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d102      	bne.n	8002258 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_PCD_EP_Open+0xae>
 8002262:	2302      	movs	r3, #2
 8002264:	e00e      	b.n	8002284 <HAL_PCD_EP_Open+0xcc>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	4618      	mov	r0, r3
 8002276:	f002 fb6b 	bl	8004950 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002282:	7afb      	ldrb	r3, [r7, #11]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800229c:	2b00      	cmp	r3, #0
 800229e:	da0f      	bge.n	80022c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	3310      	adds	r3, #16
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	705a      	strb	r2, [r3, #1]
 80022be:	e00f      	b.n	80022e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	3304      	adds	r3, #4
 80022d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_PCD_EP_Close+0x6e>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e00e      	b.n	8002318 <HAL_PCD_EP_Close+0x8c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	4618      	mov	r0, r3
 800230a:	f002 fba9 	bl	8004a60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	460b      	mov	r3, r1
 800232e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	f003 020f 	and.w	r2, r3, #15
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2200      	movs	r2, #0
 8002360:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002362:	7afb      	ldrb	r3, [r7, #11]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	b2da      	uxtb	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	799b      	ldrb	r3, [r3, #6]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	799b      	ldrb	r3, [r3, #6]
 8002384:	461a      	mov	r2, r3
 8002386:	6979      	ldr	r1, [r7, #20]
 8002388:	f002 fc46 	bl	8004c18 <USB_EPStartXfer>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	f003 020f 	and.w	r2, r3, #15
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80023b8:	681b      	ldr	r3, [r3, #0]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	460b      	mov	r3, r1
 80023d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d6:	7afb      	ldrb	r3, [r7, #11]
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	3310      	adds	r3, #16
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4413      	add	r3, r2
 80023ea:	3304      	adds	r3, #4
 80023ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2201      	movs	r2, #1
 8002404:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002406:	7afb      	ldrb	r3, [r7, #11]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	b2da      	uxtb	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	799b      	ldrb	r3, [r3, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d102      	bne.n	8002420 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	799b      	ldrb	r3, [r3, #6]
 8002428:	461a      	mov	r2, r3
 800242a:	6979      	ldr	r1, [r7, #20]
 800242c:	f002 fbf4 	bl	8004c18 <USB_EPStartXfer>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	7912      	ldrb	r2, [r2, #4]
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e04f      	b.n	80024f8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800245c:	2b00      	cmp	r3, #0
 800245e:	da0f      	bge.n	8002480 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	3310      	adds	r3, #16
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	3304      	adds	r3, #4
 8002476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	705a      	strb	r2, [r3, #1]
 800247e:	e00d      	b.n	800249c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	3304      	adds	r3, #4
 8002494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_EP_SetStall+0x82>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e01d      	b.n	80024f8 <HAL_PCD_EP_SetStall+0xbe>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 ff82 	bl	80053d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7999      	ldrb	r1, [r3, #6]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024e8:	461a      	mov	r2, r3
 80024ea:	f003 f973 	bl	80057d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	7912      	ldrb	r2, [r2, #4]
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e042      	b.n	80025a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800251e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002522:	2b00      	cmp	r3, #0
 8002524:	da0f      	bge.n	8002546 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	3310      	adds	r3, #16
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	3304      	adds	r3, #4
 800253c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	705a      	strb	r2, [r3, #1]
 8002544:	e00f      	b.n	8002566 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	3304      	adds	r3, #4
 800255e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_PCD_EP_ClrStall+0x86>
 8002582:	2302      	movs	r3, #2
 8002584:	e00e      	b.n	80025a4 <HAL_PCD_EP_ClrStall+0xa4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68f9      	ldr	r1, [r7, #12]
 8002594:	4618      	mov	r0, r3
 8002596:	f002 ff8b 	bl	80054b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80025b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da0c      	bge.n	80025da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 020f 	and.w	r2, r3, #15
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	3310      	adds	r3, #16
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e00c      	b.n	80025f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	3304      	adds	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 fdaa 	bl	8005154 <USB_EPStopXfer>
 8002600:	4603      	mov	r3, r0
 8002602:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002604:	7afb      	ldrb	r3, [r7, #11]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b08a      	sub	sp, #40	@ 0x28
 8002612:	af02      	add	r7, sp, #8
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	3310      	adds	r3, #16
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	3304      	adds	r3, #4
 8002634:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	429a      	cmp	r2, r3
 8002640:	d901      	bls.n	8002646 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06b      	b.n	800271e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	429a      	cmp	r2, r3
 800265a:	d902      	bls.n	8002662 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3303      	adds	r3, #3
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800266a:	e02a      	b.n	80026c2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	429a      	cmp	r2, r3
 8002680:	d902      	bls.n	8002688 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	3303      	adds	r3, #3
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68d9      	ldr	r1, [r3, #12]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	4603      	mov	r3, r0
 80026a4:	6978      	ldr	r0, [r7, #20]
 80026a6:	f002 fdff 	bl	80052a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	441a      	add	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	441a      	add	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d809      	bhi.n	80026ec <PCD_WriteEmptyTxFifo+0xde>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d203      	bcs.n	80026ec <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1bf      	bne.n	800266c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d811      	bhi.n	800271c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	2201      	movs	r2, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800270c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	43db      	mvns	r3, r3
 8002712:	6939      	ldr	r1, [r7, #16]
 8002714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002718:	4013      	ands	r3, r2
 800271a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	333c      	adds	r3, #60	@ 0x3c
 8002740:	3304      	adds	r3, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	799b      	ldrb	r3, [r3, #6]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d17b      	bne.n	8002856 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4a61      	ldr	r2, [pc, #388]	@ (80028f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	f240 80b9 	bls.w	80028e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80b3 	beq.w	80028e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800278a:	461a      	mov	r2, r3
 800278c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002790:	6093      	str	r3, [r2, #8]
 8002792:	e0a7      	b.n	80028e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027aa:	461a      	mov	r2, r3
 80027ac:	2320      	movs	r3, #32
 80027ae:	6093      	str	r3, [r2, #8]
 80027b0:	e098      	b.n	80028e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 8093 	bne.w	80028e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4a4b      	ldr	r2, [pc, #300]	@ (80028f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d90f      	bls.n	80027e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027dc:	461a      	mov	r2, r3
 80027de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e2:	6093      	str	r3, [r2, #8]
 80027e4:	e07e      	b.n	80028e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	0159      	lsls	r1, r3, #5
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	440b      	add	r3, r1
 8002808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002812:	1ad2      	subs	r2, r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d114      	bne.n	8002848 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002830:	461a      	mov	r2, r3
 8002832:	2101      	movs	r1, #1
 8002834:	f002 ffce 	bl	80057d4 <USB_EP0_OutStart>
 8002838:	e006      	b.n	8002848 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	441a      	add	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4619      	mov	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f005 fabc 	bl	8007dcc <HAL_PCD_DataOutStageCallback>
 8002854:	e046      	b.n	80028e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	4a26      	ldr	r2, [pc, #152]	@ (80028f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d124      	bne.n	80028a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800287a:	6093      	str	r3, [r2, #8]
 800287c:	e032      	b.n	80028e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	2320      	movs	r3, #32
 8002898:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f005 fa93 	bl	8007dcc <HAL_PCD_DataOutStageCallback>
 80028a6:	e01d      	b.n	80028e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d114      	bne.n	80028d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d108      	bne.n	80028d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028d0:	461a      	mov	r2, r3
 80028d2:	2100      	movs	r1, #0
 80028d4:	f002 ff7e 	bl	80057d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f005 fa74 	bl	8007dcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	4f54300a 	.word	0x4f54300a
 80028f4:	4f54310a 	.word	0x4f54310a

080028f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	333c      	adds	r3, #60	@ 0x3c
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a15      	ldr	r2, [pc, #84]	@ (8002980 <PCD_EP_OutSetupPacket_int+0x88>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d90e      	bls.n	800294c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002944:	461a      	mov	r2, r3
 8002946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800294a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f005 fa2b 	bl	8007da8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <PCD_EP_OutSetupPacket_int+0x88>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d90c      	bls.n	8002974 <PCD_EP_OutSetupPacket_int+0x7c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	799b      	ldrb	r3, [r3, #6]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d108      	bne.n	8002974 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800296c:	461a      	mov	r2, r3
 800296e:	2101      	movs	r1, #1
 8002970:	f002 ff30 	bl	80057d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	4f54300a 	.word	0x4f54300a

08002984 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
 8002990:	4613      	mov	r3, r2
 8002992:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029a2:	883b      	ldrh	r3, [r7, #0]
 80029a4:	0419      	lsls	r1, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80029b0:	e028      	b.n	8002a04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	4413      	add	r3, r2
 80029be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e00d      	b.n	80029e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	3340      	adds	r3, #64	@ 0x40
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	4413      	add	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	3301      	adds	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3ec      	bcc.n	80029c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029ec:	883b      	ldrh	r3, [r7, #0]
 80029ee:	0418      	lsls	r0, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6819      	ldr	r1, [r3, #0]
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4302      	orrs	r2, r0
 80029fc:	3340      	adds	r3, #64	@ 0x40
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e267      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d075      	beq.n	8002b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a6a:	4b88      	ldr	r3, [pc, #544]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a76:	4b85      	ldr	r3, [pc, #532]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a82:	4b82      	ldr	r3, [pc, #520]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	4b7e      	ldr	r3, [pc, #504]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05b      	beq.n	8002b54 <HAL_RCC_OscConfig+0x108>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d157      	bne.n	8002b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e242      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x74>
 8002ab2:	4b76      	ldr	r3, [pc, #472]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a75      	ldr	r2, [pc, #468]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x98>
 8002aca:	4b70      	ldr	r3, [pc, #448]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6f      	ldr	r2, [pc, #444]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a6c      	ldr	r2, [pc, #432]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ae4:	4b69      	ldr	r3, [pc, #420]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a68      	ldr	r2, [pc, #416]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b66      	ldr	r3, [pc, #408]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a65      	ldr	r2, [pc, #404]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fa3c 	bl	8000f80 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fa38 	bl	8000f80 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e207      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xc0>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fa28 	bl	8000f80 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe fa24 	bl	8000f80 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	@ 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1f3      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	4b51      	ldr	r3, [pc, #324]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0xe8>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b62:	4b4a      	ldr	r3, [pc, #296]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	4b47      	ldr	r3, [pc, #284]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7a:	4b44      	ldr	r3, [pc, #272]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1c7      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4937      	ldr	r1, [pc, #220]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	e03a      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	4b34      	ldr	r3, [pc, #208]	@ (8002c90 <HAL_RCC_OscConfig+0x244>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7fe f9dd 	bl	8000f80 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bca:	f7fe f9d9 	bl	8000f80 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1a8      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b28      	ldr	r3, [pc, #160]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4925      	ldr	r1, [pc, #148]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfe:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <HAL_RCC_OscConfig+0x244>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe f9bc 	bl	8000f80 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fe f9b8 	bl	8000f80 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e187      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d036      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3e:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <HAL_RCC_OscConfig+0x248>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fe f99c 	bl	8000f80 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7fe f998 	bl	8000f80 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e167      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_RCC_OscConfig+0x240>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x200>
 8002c6a:	e01b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_RCC_OscConfig+0x248>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c72:	f7fe f985 	bl	8000f80 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	e00e      	b.n	8002c98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7a:	f7fe f981 	bl	8000f80 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d907      	bls.n	8002c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e150      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	42470000 	.word	0x42470000
 8002c94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	4b88      	ldr	r3, [pc, #544]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ea      	bne.n	8002c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8097 	beq.w	8002de0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b81      	ldr	r3, [pc, #516]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	4b7d      	ldr	r3, [pc, #500]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	4a7c      	ldr	r2, [pc, #496]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd2:	4b7a      	ldr	r3, [pc, #488]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b77      	ldr	r3, [pc, #476]	@ (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b74      	ldr	r3, [pc, #464]	@ (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a73      	ldr	r2, [pc, #460]	@ (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe f941 	bl	8000f80 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe f93d 	bl	8000f80 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e10c      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec0 <HAL_RCC_OscConfig+0x474>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2ea>
 8002d28:	4b64      	ldr	r3, [pc, #400]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2c:	4a63      	ldr	r2, [pc, #396]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d34:	e01c      	b.n	8002d70 <HAL_RCC_OscConfig+0x324>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b05      	cmp	r3, #5
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x30c>
 8002d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d42:	4a5e      	ldr	r2, [pc, #376]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0x324>
 8002d58:	4b58      	ldr	r3, [pc, #352]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5c:	4a57      	ldr	r2, [pc, #348]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d64:	4b55      	ldr	r3, [pc, #340]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d68:	4a54      	ldr	r2, [pc, #336]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d6a:	f023 0304 	bic.w	r3, r3, #4
 8002d6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe f902 	bl	8000f80 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7fe f8fe 	bl	8000f80 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0cb      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d96:	4b49      	ldr	r3, [pc, #292]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0ee      	beq.n	8002d80 <HAL_RCC_OscConfig+0x334>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7fe f8ec 	bl	8000f80 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dac:	f7fe f8e8 	bl	8000f80 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0b5      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1ee      	bne.n	8002dac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd4:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	4a38      	ldr	r2, [pc, #224]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80a1 	beq.w	8002f2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dea:	4b34      	ldr	r3, [pc, #208]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d05c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d141      	bne.n	8002e82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b31      	ldr	r3, [pc, #196]	@ (8002ec4 <HAL_RCC_OscConfig+0x478>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe f8bc 	bl	8000f80 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe f8b8 	bl	8000f80 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e087      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	4b27      	ldr	r3, [pc, #156]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	3b01      	subs	r3, #1
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	491b      	ldr	r1, [pc, #108]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_RCC_OscConfig+0x478>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe f891 	bl	8000f80 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe f88d 	bl	8000f80 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e05c      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e74:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x416>
 8002e80:	e054      	b.n	8002f2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <HAL_RCC_OscConfig+0x478>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe f87a 	bl	8000f80 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe f876 	bl	8000f80 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e045      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_RCC_OscConfig+0x470>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x444>
 8002eae:	e03d      	b.n	8002f2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e038      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40007000 	.word	0x40007000
 8002ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <HAL_RCC_OscConfig+0x4ec>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d028      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d121      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d11a      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d111      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0cc      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b68      	ldr	r3, [pc, #416]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d90c      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b65      	ldr	r3, [pc, #404]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b63      	ldr	r3, [pc, #396]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b8      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b59      	ldr	r3, [pc, #356]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a58      	ldr	r2, [pc, #352]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa8:	4b53      	ldr	r3, [pc, #332]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a52      	ldr	r2, [pc, #328]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b50      	ldr	r3, [pc, #320]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	494d      	ldr	r1, [pc, #308]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d044      	beq.n	800305c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b47      	ldr	r3, [pc, #284]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d119      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d003      	beq.n	8002ffa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	4b3b      	ldr	r3, [pc, #236]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e067      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4b37      	ldr	r3, [pc, #220]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4934      	ldr	r1, [pc, #208]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302c:	f7fd ffa8 	bl	8000f80 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7fd ffa4 	bl	8000f80 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e04f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	4b2b      	ldr	r3, [pc, #172]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 020c 	and.w	r2, r3, #12
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	429a      	cmp	r2, r3
 800305a:	d1eb      	bne.n	8003034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800305c:	4b25      	ldr	r3, [pc, #148]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d20c      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e032      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4916      	ldr	r1, [pc, #88]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ae:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	490e      	ldr	r1, [pc, #56]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c2:	f000 f821 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490a      	ldr	r1, [pc, #40]	@ (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a09      	ldr	r2, [pc, #36]	@ (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030de:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd ff08 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023c00 	.word	0x40023c00
 80030f8:	40023800 	.word	0x40023800
 80030fc:	0800c8bc 	.word	0x0800c8bc
 8003100:	20000000 	.word	0x20000000
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b090      	sub	sp, #64	@ 0x40
 800310e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003120:	4b59      	ldr	r3, [pc, #356]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x180>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d00d      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x40>
 800312c:	2b08      	cmp	r3, #8
 800312e:	f200 80a1 	bhi.w	8003274 <HAL_RCC_GetSysClockFreq+0x16c>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x34>
 8003136:	2b04      	cmp	r3, #4
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x3a>
 800313a:	e09b      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b53      	ldr	r3, [pc, #332]	@ (800328c <HAL_RCC_GetSysClockFreq+0x184>)
 800313e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003140:	e09b      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003142:	4b53      	ldr	r3, [pc, #332]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x188>)
 8003144:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003146:	e098      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003148:	4b4f      	ldr	r3, [pc, #316]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x180>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003150:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003152:	4b4d      	ldr	r3, [pc, #308]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x180>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d028      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315e:	4b4a      	ldr	r3, [pc, #296]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x180>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	099b      	lsrs	r3, r3, #6
 8003164:	2200      	movs	r2, #0
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	627a      	str	r2, [r7, #36]	@ 0x24
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003170:	2100      	movs	r1, #0
 8003172:	4b47      	ldr	r3, [pc, #284]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x188>)
 8003174:	fb03 f201 	mul.w	r2, r3, r1
 8003178:	2300      	movs	r3, #0
 800317a:	fb00 f303 	mul.w	r3, r0, r3
 800317e:	4413      	add	r3, r2
 8003180:	4a43      	ldr	r2, [pc, #268]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x188>)
 8003182:	fba0 1202 	umull	r1, r2, r0, r2
 8003186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003188:	460a      	mov	r2, r1
 800318a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800318c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800318e:	4413      	add	r3, r2
 8003190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003194:	2200      	movs	r2, #0
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	61fa      	str	r2, [r7, #28]
 800319a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800319e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031a2:	f7fd f875 	bl	8000290 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4613      	mov	r3, r2
 80031ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ae:	e053      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b0:	4b35      	ldr	r3, [pc, #212]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x180>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	2200      	movs	r2, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	617a      	str	r2, [r7, #20]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031c2:	f04f 0b00 	mov.w	fp, #0
 80031c6:	4652      	mov	r2, sl
 80031c8:	465b      	mov	r3, fp
 80031ca:	f04f 0000 	mov.w	r0, #0
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	0159      	lsls	r1, r3, #5
 80031d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d8:	0150      	lsls	r0, r2, #5
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	ebb2 080a 	subs.w	r8, r2, sl
 80031e2:	eb63 090b 	sbc.w	r9, r3, fp
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031fa:	ebb2 0408 	subs.w	r4, r2, r8
 80031fe:	eb63 0509 	sbc.w	r5, r3, r9
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	00eb      	lsls	r3, r5, #3
 800320c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003210:	00e2      	lsls	r2, r4, #3
 8003212:	4614      	mov	r4, r2
 8003214:	461d      	mov	r5, r3
 8003216:	eb14 030a 	adds.w	r3, r4, sl
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	eb45 030b 	adc.w	r3, r5, fp
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322e:	4629      	mov	r1, r5
 8003230:	028b      	lsls	r3, r1, #10
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003238:	4621      	mov	r1, r4
 800323a:	028a      	lsls	r2, r1, #10
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003242:	2200      	movs	r2, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	60fa      	str	r2, [r7, #12]
 8003248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800324c:	f7fd f820 	bl	8000290 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x180>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003268:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800326a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_RCC_GetSysClockFreq+0x184>)
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800327c:	4618      	mov	r0, r3
 800327e:	3740      	adds	r7, #64	@ 0x40
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400
 8003290:	017d7840 	.word	0x017d7840

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a9b      	lsrs	r3, r3, #10
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	0800c8cc 	.word	0x0800c8cc

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffdc 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0b5b      	lsrs	r3, r3, #13
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	0800c8cc 	.word	0x0800c8cc

080032fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07b      	b.n	8003406 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d108      	bne.n	8003328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800331e:	d009      	beq.n	8003334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]
 8003326:	e005      	b.n	8003334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd faf2 	bl	8000938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800336a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b8:	ea42 0103 	orr.w	r1, r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 0104 	and.w	r1, r3, #4
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	f003 0210 	and.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e041      	b.n	80034a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7fd fc41 	bl	8000cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f000 f99f 	bl	8003790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_TIM_PWM_Start+0x24>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e022      	b.n	8003516 <HAL_TIM_PWM_Start+0x6a>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d109      	bne.n	80034ea <HAL_TIM_PWM_Start+0x3e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e015      	b.n	8003516 <HAL_TIM_PWM_Start+0x6a>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d109      	bne.n	8003504 <HAL_TIM_PWM_Start+0x58>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e008      	b.n	8003516 <HAL_TIM_PWM_Start+0x6a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e068      	b.n	80035f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d104      	bne.n	800352e <HAL_TIM_PWM_Start+0x82>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800352c:	e013      	b.n	8003556 <HAL_TIM_PWM_Start+0xaa>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d104      	bne.n	800353e <HAL_TIM_PWM_Start+0x92>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800353c:	e00b      	b.n	8003556 <HAL_TIM_PWM_Start+0xaa>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d104      	bne.n	800354e <HAL_TIM_PWM_Start+0xa2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800354c:	e003      	b.n	8003556 <HAL_TIM_PWM_Start+0xaa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2202      	movs	r2, #2
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	6839      	ldr	r1, [r7, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fb28 	bl	8003bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a23      	ldr	r2, [pc, #140]	@ (80035f8 <HAL_TIM_PWM_Start+0x14c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d107      	bne.n	800357e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1d      	ldr	r2, [pc, #116]	@ (80035f8 <HAL_TIM_PWM_Start+0x14c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_TIM_PWM_Start+0x10e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003590:	d013      	beq.n	80035ba <HAL_TIM_PWM_Start+0x10e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <HAL_TIM_PWM_Start+0x150>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_TIM_PWM_Start+0x10e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a17      	ldr	r2, [pc, #92]	@ (8003600 <HAL_TIM_PWM_Start+0x154>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_TIM_PWM_Start+0x10e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a16      	ldr	r2, [pc, #88]	@ (8003604 <HAL_TIM_PWM_Start+0x158>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_TIM_PWM_Start+0x10e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a14      	ldr	r2, [pc, #80]	@ (8003608 <HAL_TIM_PWM_Start+0x15c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d111      	bne.n	80035de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d010      	beq.n	80035ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035dc:	e007      	b.n	80035ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40014000 	.word	0x40014000

0800360c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003626:	2302      	movs	r3, #2
 8003628:	e0ae      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	f200 809f 	bhi.w	8003778 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800363a:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003675 	.word	0x08003675
 8003644:	08003779 	.word	0x08003779
 8003648:	08003779 	.word	0x08003779
 800364c:	08003779 	.word	0x08003779
 8003650:	080036b5 	.word	0x080036b5
 8003654:	08003779 	.word	0x08003779
 8003658:	08003779 	.word	0x08003779
 800365c:	08003779 	.word	0x08003779
 8003660:	080036f7 	.word	0x080036f7
 8003664:	08003779 	.word	0x08003779
 8003668:	08003779 	.word	0x08003779
 800366c:	08003779 	.word	0x08003779
 8003670:	08003737 	.word	0x08003737
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f90e 	bl	800389c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0208 	orr.w	r2, r2, #8
 800368e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0204 	bic.w	r2, r2, #4
 800369e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6999      	ldr	r1, [r3, #24]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	619a      	str	r2, [r3, #24]
      break;
 80036b2:	e064      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f954 	bl	8003968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6999      	ldr	r1, [r3, #24]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	021a      	lsls	r2, r3, #8
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	619a      	str	r2, [r3, #24]
      break;
 80036f4:	e043      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f99f 	bl	8003a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0208 	orr.w	r2, r2, #8
 8003710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0204 	bic.w	r2, r2, #4
 8003720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69d9      	ldr	r1, [r3, #28]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	61da      	str	r2, [r3, #28]
      break;
 8003734:	e023      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f9e9 	bl	8003b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	021a      	lsls	r2, r3, #8
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	61da      	str	r2, [r3, #28]
      break;
 8003776:	e002      	b.n	800377e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	75fb      	strb	r3, [r7, #23]
      break;
 800377c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a37      	ldr	r2, [pc, #220]	@ (8003880 <TIM_Base_SetConfig+0xf0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00f      	beq.n	80037c8 <TIM_Base_SetConfig+0x38>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ae:	d00b      	beq.n	80037c8 <TIM_Base_SetConfig+0x38>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a34      	ldr	r2, [pc, #208]	@ (8003884 <TIM_Base_SetConfig+0xf4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <TIM_Base_SetConfig+0x38>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a33      	ldr	r2, [pc, #204]	@ (8003888 <TIM_Base_SetConfig+0xf8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_Base_SetConfig+0x38>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a32      	ldr	r2, [pc, #200]	@ (800388c <TIM_Base_SetConfig+0xfc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a28      	ldr	r2, [pc, #160]	@ (8003880 <TIM_Base_SetConfig+0xf0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01b      	beq.n	800381a <TIM_Base_SetConfig+0x8a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e8:	d017      	beq.n	800381a <TIM_Base_SetConfig+0x8a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a25      	ldr	r2, [pc, #148]	@ (8003884 <TIM_Base_SetConfig+0xf4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <TIM_Base_SetConfig+0x8a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a24      	ldr	r2, [pc, #144]	@ (8003888 <TIM_Base_SetConfig+0xf8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00f      	beq.n	800381a <TIM_Base_SetConfig+0x8a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a23      	ldr	r2, [pc, #140]	@ (800388c <TIM_Base_SetConfig+0xfc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00b      	beq.n	800381a <TIM_Base_SetConfig+0x8a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <TIM_Base_SetConfig+0x100>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d007      	beq.n	800381a <TIM_Base_SetConfig+0x8a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a21      	ldr	r2, [pc, #132]	@ (8003894 <TIM_Base_SetConfig+0x104>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d003      	beq.n	800381a <TIM_Base_SetConfig+0x8a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a20      	ldr	r2, [pc, #128]	@ (8003898 <TIM_Base_SetConfig+0x108>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d108      	bne.n	800382c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a0c      	ldr	r2, [pc, #48]	@ (8003880 <TIM_Base_SetConfig+0xf0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d103      	bne.n	800385a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f043 0204 	orr.w	r2, r3, #4
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	601a      	str	r2, [r3, #0]
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f023 0201 	bic.w	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f023 0302 	bic.w	r3, r3, #2
 80038e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003964 <TIM_OC1_SetConfig+0xc8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d10c      	bne.n	8003912 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0308 	bic.w	r3, r3, #8
 80038fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f023 0304 	bic.w	r3, r3, #4
 8003910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a13      	ldr	r2, [pc, #76]	@ (8003964 <TIM_OC1_SetConfig+0xc8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d111      	bne.n	800393e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	621a      	str	r2, [r3, #32]
}
 8003958:	bf00      	nop
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	40010000 	.word	0x40010000

08003968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f023 0210 	bic.w	r2, r3, #16
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800399e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0320 	bic.w	r3, r3, #32
 80039b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a3c <TIM_OC2_SetConfig+0xd4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d10d      	bne.n	80039e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a15      	ldr	r2, [pc, #84]	@ (8003a3c <TIM_OC2_SetConfig+0xd4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d113      	bne.n	8003a14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40010000 	.word	0x40010000

08003a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0303 	bic.w	r3, r3, #3
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <TIM_OC3_SetConfig+0xd0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10d      	bne.n	8003aba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a14      	ldr	r2, [pc, #80]	@ (8003b10 <TIM_OC3_SetConfig+0xd0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d113      	bne.n	8003aea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40010000 	.word	0x40010000

08003b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	031b      	lsls	r3, r3, #12
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a10      	ldr	r2, [pc, #64]	@ (8003bb0 <TIM_OC4_SetConfig+0x9c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d109      	bne.n	8003b88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40010000 	.word	0x40010000

08003bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	431a      	orrs	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e050      	b.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d018      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c64:	d013      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a15      	ldr	r2, [pc, #84]	@ (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a13      	ldr	r2, [pc, #76]	@ (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40000800 	.word	0x40000800
 8003cd4:	40000c00 	.word	0x40000c00
 8003cd8:	40014000 	.word	0x40014000

08003cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e042      	b.n	8003d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd f864 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	@ 0x24
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f82b 	bl	8003d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d80:	b0c0      	sub	sp, #256	@ 0x100
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	68d9      	ldr	r1, [r3, #12]
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	ea40 0301 	orr.w	r3, r0, r1
 8003da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dd4:	f021 010c 	bic.w	r1, r1, #12
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003de2:	430b      	orrs	r3, r1
 8003de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df6:	6999      	ldr	r1, [r3, #24]
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	ea40 0301 	orr.w	r3, r0, r1
 8003e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8004048 <UART_SetConfig+0x2cc>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d005      	beq.n	8003e1c <UART_SetConfig+0xa0>
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b8d      	ldr	r3, [pc, #564]	@ (800404c <UART_SetConfig+0x2d0>)
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d104      	bne.n	8003e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7ff fa5a 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8003e20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e24:	e003      	b.n	8003e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e26:	f7ff fa41 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8003e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e38:	f040 810c 	bne.w	8004054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e4e:	4622      	mov	r2, r4
 8003e50:	462b      	mov	r3, r5
 8003e52:	1891      	adds	r1, r2, r2
 8003e54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e56:	415b      	adcs	r3, r3
 8003e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e5e:	4621      	mov	r1, r4
 8003e60:	eb12 0801 	adds.w	r8, r2, r1
 8003e64:	4629      	mov	r1, r5
 8003e66:	eb43 0901 	adc.w	r9, r3, r1
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e7e:	4690      	mov	r8, r2
 8003e80:	4699      	mov	r9, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	eb18 0303 	adds.w	r3, r8, r3
 8003e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	eb49 0303 	adc.w	r3, r9, r3
 8003e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eaa:	460b      	mov	r3, r1
 8003eac:	18db      	adds	r3, r3, r3
 8003eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	eb42 0303 	adc.w	r3, r2, r3
 8003eb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ec0:	f7fc f9e6 	bl	8000290 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4b61      	ldr	r3, [pc, #388]	@ (8004050 <UART_SetConfig+0x2d4>)
 8003eca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	011c      	lsls	r4, r3, #4
 8003ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003edc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ee4:	4642      	mov	r2, r8
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	1891      	adds	r1, r2, r2
 8003eea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eec:	415b      	adcs	r3, r3
 8003eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8003efa:	4649      	mov	r1, r9
 8003efc:	eb43 0b01 	adc.w	fp, r3, r1
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f14:	4692      	mov	sl, r2
 8003f16:	469b      	mov	fp, r3
 8003f18:	4643      	mov	r3, r8
 8003f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f22:	464b      	mov	r3, r9
 8003f24:	eb4b 0303 	adc.w	r3, fp, r3
 8003f28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f40:	460b      	mov	r3, r1
 8003f42:	18db      	adds	r3, r3, r3
 8003f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f46:	4613      	mov	r3, r2
 8003f48:	eb42 0303 	adc.w	r3, r2, r3
 8003f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f56:	f7fc f99b 	bl	8000290 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <UART_SetConfig+0x2d4>)
 8003f62:	fba3 2301 	umull	r2, r3, r3, r1
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2264      	movs	r2, #100	@ 0x64
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	1acb      	subs	r3, r1, r3
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f76:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <UART_SetConfig+0x2d4>)
 8003f78:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f84:	441c      	add	r4, r3
 8003f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	1891      	adds	r1, r2, r2
 8003f9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fa0:	415b      	adcs	r3, r3
 8003fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fa8:	4641      	mov	r1, r8
 8003faa:	1851      	adds	r1, r2, r1
 8003fac:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fae:	4649      	mov	r1, r9
 8003fb0:	414b      	adcs	r3, r1
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	00cb      	lsls	r3, r1, #3
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fca:	4651      	mov	r1, sl
 8003fcc:	00ca      	lsls	r2, r1, #3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fdc:	464b      	mov	r3, r9
 8003fde:	460a      	mov	r2, r1
 8003fe0:	eb42 0303 	adc.w	r3, r2, r3
 8003fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	18db      	adds	r3, r3, r3
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004002:	4613      	mov	r3, r2
 8004004:	eb42 0303 	adc.w	r3, r2, r3
 8004008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800400e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004012:	f7fc f93d 	bl	8000290 <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <UART_SetConfig+0x2d4>)
 800401c:	fba3 1302 	umull	r1, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	2164      	movs	r1, #100	@ 0x64
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	3332      	adds	r3, #50	@ 0x32
 800402e:	4a08      	ldr	r2, [pc, #32]	@ (8004050 <UART_SetConfig+0x2d4>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	f003 0207 	and.w	r2, r3, #7
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4422      	add	r2, r4
 8004042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004044:	e106      	b.n	8004254 <UART_SetConfig+0x4d8>
 8004046:	bf00      	nop
 8004048:	40011000 	.word	0x40011000
 800404c:	40011400 	.word	0x40011400
 8004050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004058:	2200      	movs	r2, #0
 800405a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800405e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004066:	4642      	mov	r2, r8
 8004068:	464b      	mov	r3, r9
 800406a:	1891      	adds	r1, r2, r2
 800406c:	6239      	str	r1, [r7, #32]
 800406e:	415b      	adcs	r3, r3
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
 8004072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004076:	4641      	mov	r1, r8
 8004078:	1854      	adds	r4, r2, r1
 800407a:	4649      	mov	r1, r9
 800407c:	eb43 0501 	adc.w	r5, r3, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	00eb      	lsls	r3, r5, #3
 800408a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408e:	00e2      	lsls	r2, r4, #3
 8004090:	4614      	mov	r4, r2
 8004092:	461d      	mov	r5, r3
 8004094:	4643      	mov	r3, r8
 8004096:	18e3      	adds	r3, r4, r3
 8004098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800409c:	464b      	mov	r3, r9
 800409e:	eb45 0303 	adc.w	r3, r5, r3
 80040a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040c2:	4629      	mov	r1, r5
 80040c4:	008b      	lsls	r3, r1, #2
 80040c6:	4621      	mov	r1, r4
 80040c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040cc:	4621      	mov	r1, r4
 80040ce:	008a      	lsls	r2, r1, #2
 80040d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040d4:	f7fc f8dc 	bl	8000290 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4b60      	ldr	r3, [pc, #384]	@ (8004260 <UART_SetConfig+0x4e4>)
 80040de:	fba3 2302 	umull	r2, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	011c      	lsls	r4, r3, #4
 80040e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040f8:	4642      	mov	r2, r8
 80040fa:	464b      	mov	r3, r9
 80040fc:	1891      	adds	r1, r2, r2
 80040fe:	61b9      	str	r1, [r7, #24]
 8004100:	415b      	adcs	r3, r3
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004108:	4641      	mov	r1, r8
 800410a:	1851      	adds	r1, r2, r1
 800410c:	6139      	str	r1, [r7, #16]
 800410e:	4649      	mov	r1, r9
 8004110:	414b      	adcs	r3, r1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004120:	4659      	mov	r1, fp
 8004122:	00cb      	lsls	r3, r1, #3
 8004124:	4651      	mov	r1, sl
 8004126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412a:	4651      	mov	r1, sl
 800412c:	00ca      	lsls	r2, r1, #3
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	4603      	mov	r3, r0
 8004134:	4642      	mov	r2, r8
 8004136:	189b      	adds	r3, r3, r2
 8004138:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800413c:	464b      	mov	r3, r9
 800413e:	460a      	mov	r2, r1
 8004140:	eb42 0303 	adc.w	r3, r2, r3
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004152:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004160:	4649      	mov	r1, r9
 8004162:	008b      	lsls	r3, r1, #2
 8004164:	4641      	mov	r1, r8
 8004166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416a:	4641      	mov	r1, r8
 800416c:	008a      	lsls	r2, r1, #2
 800416e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004172:	f7fc f88d 	bl	8000290 <__aeabi_uldivmod>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4611      	mov	r1, r2
 800417c:	4b38      	ldr	r3, [pc, #224]	@ (8004260 <UART_SetConfig+0x4e4>)
 800417e:	fba3 2301 	umull	r2, r3, r3, r1
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2264      	movs	r2, #100	@ 0x64
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	1acb      	subs	r3, r1, r3
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	3332      	adds	r3, #50	@ 0x32
 8004190:	4a33      	ldr	r2, [pc, #204]	@ (8004260 <UART_SetConfig+0x4e4>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800419c:	441c      	add	r4, r3
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80041a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80041a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	415b      	adcs	r3, r3
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041bc:	4641      	mov	r1, r8
 80041be:	1851      	adds	r1, r2, r1
 80041c0:	6039      	str	r1, [r7, #0]
 80041c2:	4649      	mov	r1, r9
 80041c4:	414b      	adcs	r3, r1
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041d4:	4659      	mov	r1, fp
 80041d6:	00cb      	lsls	r3, r1, #3
 80041d8:	4651      	mov	r1, sl
 80041da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041de:	4651      	mov	r1, sl
 80041e0:	00ca      	lsls	r2, r1, #3
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	4642      	mov	r2, r8
 80041ea:	189b      	adds	r3, r3, r2
 80041ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ee:	464b      	mov	r3, r9
 80041f0:	460a      	mov	r2, r1
 80041f2:	eb42 0303 	adc.w	r3, r2, r3
 80041f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	663b      	str	r3, [r7, #96]	@ 0x60
 8004202:	667a      	str	r2, [r7, #100]	@ 0x64
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004210:	4649      	mov	r1, r9
 8004212:	008b      	lsls	r3, r1, #2
 8004214:	4641      	mov	r1, r8
 8004216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421a:	4641      	mov	r1, r8
 800421c:	008a      	lsls	r2, r1, #2
 800421e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004222:	f7fc f835 	bl	8000290 <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4b0d      	ldr	r3, [pc, #52]	@ (8004260 <UART_SetConfig+0x4e4>)
 800422c:	fba3 1302 	umull	r1, r3, r3, r2
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	2164      	movs	r1, #100	@ 0x64
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	3332      	adds	r3, #50	@ 0x32
 800423e:	4a08      	ldr	r2, [pc, #32]	@ (8004260 <UART_SetConfig+0x4e4>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	f003 020f 	and.w	r2, r3, #15
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4422      	add	r2, r4
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800425a:	46bd      	mov	sp, r7
 800425c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004260:	51eb851f 	.word	0x51eb851f

08004264 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004264:	b084      	sub	sp, #16
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	f107 001c 	add.w	r0, r7, #28
 8004272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004276:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800427a:	2b01      	cmp	r3, #1
 800427c:	d123      	bne.n	80042c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f001 fae8 	bl	8005890 <USB_CoreReset>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	e01b      	b.n	80042fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 fadc 	bl	8005890 <USB_CoreReset>
 80042d8:	4603      	mov	r3, r0
 80042da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80042f0:	e005      	b.n	80042fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042fe:	7fbb      	ldrb	r3, [r7, #30]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d10b      	bne.n	800431c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f043 0206 	orr.w	r2, r3, #6
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004328:	b004      	add	sp, #16
 800432a:	4770      	bx	lr

0800432c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d165      	bne.n	800440c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a41      	ldr	r2, [pc, #260]	@ (8004448 <USB_SetTurnaroundTime+0x11c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d906      	bls.n	8004356 <USB_SetTurnaroundTime+0x2a>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4a40      	ldr	r2, [pc, #256]	@ (800444c <USB_SetTurnaroundTime+0x120>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d202      	bcs.n	8004356 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004350:	230f      	movs	r3, #15
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e062      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4a3c      	ldr	r2, [pc, #240]	@ (800444c <USB_SetTurnaroundTime+0x120>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d306      	bcc.n	800436c <USB_SetTurnaroundTime+0x40>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4a3b      	ldr	r2, [pc, #236]	@ (8004450 <USB_SetTurnaroundTime+0x124>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d202      	bcs.n	800436c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004366:	230e      	movs	r3, #14
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e057      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4a38      	ldr	r2, [pc, #224]	@ (8004450 <USB_SetTurnaroundTime+0x124>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d306      	bcc.n	8004382 <USB_SetTurnaroundTime+0x56>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4a37      	ldr	r2, [pc, #220]	@ (8004454 <USB_SetTurnaroundTime+0x128>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d202      	bcs.n	8004382 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800437c:	230d      	movs	r3, #13
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e04c      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4a33      	ldr	r2, [pc, #204]	@ (8004454 <USB_SetTurnaroundTime+0x128>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d306      	bcc.n	8004398 <USB_SetTurnaroundTime+0x6c>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4a32      	ldr	r2, [pc, #200]	@ (8004458 <USB_SetTurnaroundTime+0x12c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d802      	bhi.n	8004398 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004392:	230c      	movs	r3, #12
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e041      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4a2f      	ldr	r2, [pc, #188]	@ (8004458 <USB_SetTurnaroundTime+0x12c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d906      	bls.n	80043ae <USB_SetTurnaroundTime+0x82>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4a2e      	ldr	r2, [pc, #184]	@ (800445c <USB_SetTurnaroundTime+0x130>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d802      	bhi.n	80043ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043a8:	230b      	movs	r3, #11
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e036      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4a2a      	ldr	r2, [pc, #168]	@ (800445c <USB_SetTurnaroundTime+0x130>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d906      	bls.n	80043c4 <USB_SetTurnaroundTime+0x98>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4a29      	ldr	r2, [pc, #164]	@ (8004460 <USB_SetTurnaroundTime+0x134>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d802      	bhi.n	80043c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043be:	230a      	movs	r3, #10
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e02b      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4a26      	ldr	r2, [pc, #152]	@ (8004460 <USB_SetTurnaroundTime+0x134>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d906      	bls.n	80043da <USB_SetTurnaroundTime+0xae>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4a25      	ldr	r2, [pc, #148]	@ (8004464 <USB_SetTurnaroundTime+0x138>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d202      	bcs.n	80043da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043d4:	2309      	movs	r3, #9
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	e020      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4a21      	ldr	r2, [pc, #132]	@ (8004464 <USB_SetTurnaroundTime+0x138>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d306      	bcc.n	80043f0 <USB_SetTurnaroundTime+0xc4>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4a20      	ldr	r2, [pc, #128]	@ (8004468 <USB_SetTurnaroundTime+0x13c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d802      	bhi.n	80043f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043ea:	2308      	movs	r3, #8
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	e015      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <USB_SetTurnaroundTime+0x13c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d906      	bls.n	8004406 <USB_SetTurnaroundTime+0xda>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <USB_SetTurnaroundTime+0x140>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d202      	bcs.n	8004406 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004400:	2307      	movs	r3, #7
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e00a      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004406:	2306      	movs	r3, #6
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	e007      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004412:	2309      	movs	r3, #9
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e001      	b.n	800441c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004418:	2309      	movs	r3, #9
 800441a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	029b      	lsls	r3, r3, #10
 8004430:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004434:	431a      	orrs	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	00d8acbf 	.word	0x00d8acbf
 800444c:	00e4e1c0 	.word	0x00e4e1c0
 8004450:	00f42400 	.word	0x00f42400
 8004454:	01067380 	.word	0x01067380
 8004458:	011a499f 	.word	0x011a499f
 800445c:	01312cff 	.word	0x01312cff
 8004460:	014ca43f 	.word	0x014ca43f
 8004464:	016e3600 	.word	0x016e3600
 8004468:	01a6ab1f 	.word	0x01a6ab1f
 800446c:	01e84800 	.word	0x01e84800

08004470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f043 0201 	orr.w	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d115      	bne.n	8004502 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044e2:	200a      	movs	r0, #10
 80044e4:	f7fc fd58 	bl	8000f98 <HAL_Delay>
      ms += 10U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	330a      	adds	r3, #10
 80044ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f001 f93f 	bl	8005772 <USB_GetMode>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d01e      	beq.n	8004538 <USB_SetCurrentMode+0x84>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80044fe:	d9f0      	bls.n	80044e2 <USB_SetCurrentMode+0x2e>
 8004500:	e01a      	b.n	8004538 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d115      	bne.n	8004534 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004514:	200a      	movs	r0, #10
 8004516:	f7fc fd3f 	bl	8000f98 <HAL_Delay>
      ms += 10U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	330a      	adds	r3, #10
 800451e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f001 f926 	bl	8005772 <USB_GetMode>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <USB_SetCurrentMode+0x84>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004530:	d9f0      	bls.n	8004514 <USB_SetCurrentMode+0x60>
 8004532:	e001      	b.n	8004538 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e005      	b.n	8004544 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2bc8      	cmp	r3, #200	@ 0xc8
 800453c:	d101      	bne.n	8004542 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800454c:	b084      	sub	sp, #16
 800454e:	b580      	push	{r7, lr}
 8004550:	b086      	sub	sp, #24
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800455a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e009      	b.n	8004580 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	3340      	adds	r3, #64	@ 0x40
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	2200      	movs	r2, #0
 8004578:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	3301      	adds	r3, #1
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b0e      	cmp	r3, #14
 8004584:	d9f2      	bls.n	800456c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004586:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11c      	bne.n	80045c8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80045c6:	e00b      	b.n	80045e0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80045e6:	461a      	mov	r2, r3
 80045e8:	2300      	movs	r3, #0
 80045ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d10d      	bne.n	8004610 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d104      	bne.n	8004606 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045fc:	2100      	movs	r1, #0
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f968 	bl	80048d4 <USB_SetDevSpeed>
 8004604:	e008      	b.n	8004618 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004606:	2101      	movs	r1, #1
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f963 	bl	80048d4 <USB_SetDevSpeed>
 800460e:	e003      	b.n	8004618 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004610:	2103      	movs	r1, #3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f95e 	bl	80048d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004618:	2110      	movs	r1, #16
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8fa 	bl	8004814 <USB_FlushTxFifo>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f924 	bl	8004878 <USB_FlushRxFifo>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464c:	461a      	mov	r2, r3
 800464e:	2300      	movs	r3, #0
 8004650:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004658:	461a      	mov	r2, r3
 800465a:	2300      	movs	r3, #0
 800465c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e043      	b.n	80046ec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800467a:	d118      	bne.n	80046ae <USB_DevInit+0x162>
    {
      if (i == 0U)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800468e:	461a      	mov	r2, r3
 8004690:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e013      	b.n	80046c0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a4:	461a      	mov	r2, r3
 80046a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	e008      	b.n	80046c0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ba:	461a      	mov	r2, r3
 80046bc:	2300      	movs	r3, #0
 80046be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046cc:	461a      	mov	r2, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046de:	461a      	mov	r2, r3
 80046e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	3301      	adds	r3, #1
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046f0:	461a      	mov	r2, r3
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d3b5      	bcc.n	8004664 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	e043      	b.n	8004786 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004714:	d118      	bne.n	8004748 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004728:	461a      	mov	r2, r3
 800472a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e013      	b.n	800475a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473e:	461a      	mov	r2, r3
 8004740:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e008      	b.n	800475a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004754:	461a      	mov	r2, r3
 8004756:	2300      	movs	r3, #0
 8004758:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004766:	461a      	mov	r2, r3
 8004768:	2300      	movs	r3, #0
 800476a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004778:	461a      	mov	r2, r3
 800477a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800477e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3301      	adds	r3, #1
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800478a:	461a      	mov	r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4293      	cmp	r3, r2
 8004790:	d3b5      	bcc.n	80046fe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f043 0210 	orr.w	r2, r3, #16
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <USB_DevInit+0x2c4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f043 0208 	orr.w	r2, r3, #8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d107      	bne.n	8004800 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047f8:	f043 0304 	orr.w	r3, r3, #4
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800480c:	b004      	add	sp, #16
 800480e:	4770      	bx	lr
 8004810:	803c3800 	.word	0x803c3800

08004814 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800482e:	d901      	bls.n	8004834 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e01b      	b.n	800486c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	daf2      	bge.n	8004822 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	019b      	lsls	r3, r3, #6
 8004844:	f043 0220 	orr.w	r2, r3, #32
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3301      	adds	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004858:	d901      	bls.n	800485e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e006      	b.n	800486c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b20      	cmp	r3, #32
 8004868:	d0f0      	beq.n	800484c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004890:	d901      	bls.n	8004896 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e018      	b.n	80048c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	daf2      	bge.n	8004884 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2210      	movs	r2, #16
 80048a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048b4:	d901      	bls.n	80048ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e006      	b.n	80048c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d0f0      	beq.n	80048a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004906:	b480      	push	{r7}
 8004908:	b087      	sub	sp, #28
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0306 	and.w	r3, r3, #6
 800491e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]
 800492a:	e00a      	b.n	8004942 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d002      	beq.n	8004938 <USB_GetDevSpeed+0x32>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b06      	cmp	r3, #6
 8004936:	d102      	bne.n	800493e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004938:	2302      	movs	r3, #2
 800493a:	75fb      	strb	r3, [r7, #23]
 800493c:	e001      	b.n	8004942 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800493e:	230f      	movs	r3, #15
 8004940:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d13a      	bne.n	80049e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	2101      	movs	r1, #1
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	b29b      	uxth	r3, r3
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800498a:	4313      	orrs	r3, r2
 800498c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d155      	bne.n	8004a50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	791b      	ldrb	r3, [r3, #4]
 80049be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	059b      	lsls	r3, r3, #22
 80049c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049c8:	4313      	orrs	r3, r2
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e036      	b.n	8004a50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	2101      	movs	r1, #1
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11a      	bne.n	8004a50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	791b      	ldrb	r3, [r3, #4]
 8004a34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a36:	430b      	orrs	r3, r1
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d161      	bne.n	8004b40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a92:	d11f      	bne.n	8004ad4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ab2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ace:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004af4:	4013      	ands	r3, r2
 8004af6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	0159      	lsls	r1, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	440b      	add	r3, r1
 8004b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b36:	4619      	mov	r1, r3
 8004b38:	4b35      	ldr	r3, [pc, #212]	@ (8004c10 <USB_DeactivateEndpoint+0x1b0>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]
 8004b3e:	e060      	b.n	8004c02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b56:	d11f      	bne.n	8004b98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	2101      	movs	r1, #1
 8004baa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bae:	041b      	lsls	r3, r3, #16
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bb8:	4013      	ands	r3, r2
 8004bba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	2101      	movs	r1, #1
 8004bce:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd2:	041b      	lsls	r3, r3, #16
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	0159      	lsls	r1, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	440b      	add	r3, r1
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <USB_DeactivateEndpoint+0x1b4>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	ec337800 	.word	0xec337800
 8004c14:	eff37800 	.word	0xeff37800

08004c18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	@ 0x28
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4613      	mov	r3, r2
 8004c24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	f040 817f 	bne.w	8004f38 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d132      	bne.n	8004ca8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c5c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c60:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca0:	0cdb      	lsrs	r3, r3, #19
 8004ca2:	04db      	lsls	r3, r3, #19
 8004ca4:	6113      	str	r3, [r2, #16]
 8004ca6:	e097      	b.n	8004dd8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc2:	0cdb      	lsrs	r3, r3, #19
 8004cc4:	04db      	lsls	r3, r3, #19
 8004cc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ce6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004cea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d11a      	bne.n	8004d28 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d903      	bls.n	8004d06 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d24:	6113      	str	r3, [r2, #16]
 8004d26:	e044      	b.n	8004db2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4413      	add	r3, r2
 8004d32:	1e5a      	subs	r2, r3, #1
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	8afb      	ldrh	r3, [r7, #22]
 8004d4e:	04d9      	lsls	r1, r3, #19
 8004d50:	4ba4      	ldr	r3, [pc, #656]	@ (8004fe4 <USB_EPStartXfer+0x3cc>)
 8004d52:	400b      	ands	r3, r1
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	0148      	lsls	r0, r1, #5
 8004d58:	69f9      	ldr	r1, [r7, #28]
 8004d5a:	4401      	add	r1, r0
 8004d5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d60:	4313      	orrs	r3, r2
 8004d62:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	791b      	ldrb	r3, [r3, #4]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d122      	bne.n	8004db2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d86:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004d8a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	8afb      	ldrh	r3, [r7, #22]
 8004d9c:	075b      	lsls	r3, r3, #29
 8004d9e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004da2:	69b9      	ldr	r1, [r7, #24]
 8004da4:	0148      	lsls	r0, r1, #5
 8004da6:	69f9      	ldr	r1, [r7, #28]
 8004da8:	4401      	add	r1, r0
 8004daa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004dae:	4313      	orrs	r3, r2
 8004db0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc8:	69b9      	ldr	r1, [r7, #24]
 8004dca:	0148      	lsls	r0, r1, #5
 8004dcc:	69f9      	ldr	r1, [r7, #28]
 8004dce:	4401      	add	r1, r0
 8004dd0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d14b      	bne.n	8004e76 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df2:	461a      	mov	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	791b      	ldrb	r3, [r3, #4]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d128      	bne.n	8004e54 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d110      	bne.n	8004e34 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e00f      	b.n	8004e54 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e52:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	e166      	b.n	8005144 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e90:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e94:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	791b      	ldrb	r3, [r3, #4]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d015      	beq.n	8004eca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 814e 	beq.w	8005144 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	2101      	movs	r1, #1
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	69f9      	ldr	r1, [r7, #28]
 8004ec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	634b      	str	r3, [r1, #52]	@ 0x34
 8004ec8:	e13c      	b.n	8005144 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d110      	bne.n	8004efc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ef4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e00f      	b.n	8004f1c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	68d9      	ldr	r1, [r3, #12]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	b298      	uxth	r0, r3
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4603      	mov	r3, r0
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f9b9 	bl	80052a8 <USB_WritePacket>
 8004f36:	e105      	b.n	8005144 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f52:	0cdb      	lsrs	r3, r3, #19
 8004f54:	04db      	lsls	r3, r3, #19
 8004f56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f72:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f76:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f7a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d132      	bne.n	8004fe8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb0:	69b9      	ldr	r1, [r7, #24]
 8004fb2:	0148      	lsls	r0, r1, #5
 8004fb4:	69f9      	ldr	r1, [r7, #28]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fde:	6113      	str	r3, [r2, #16]
 8004fe0:	e062      	b.n	80050a8 <USB_EPStartXfer+0x490>
 8004fe2:	bf00      	nop
 8004fe4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d123      	bne.n	8005038 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005006:	69b9      	ldr	r1, [r7, #24]
 8005008:	0148      	lsls	r0, r1, #5
 800500a:	69f9      	ldr	r1, [r7, #28]
 800500c:	4401      	add	r1, r0
 800500e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005012:	4313      	orrs	r3, r2
 8005014:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005030:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005034:	6113      	str	r3, [r2, #16]
 8005036:	e037      	b.n	80050a8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4413      	add	r3, r2
 8005042:	1e5a      	subs	r2, r3, #1
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	8afa      	ldrh	r2, [r7, #22]
 8005054:	fb03 f202 	mul.w	r2, r3, r2
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	8afb      	ldrh	r3, [r7, #22]
 800506c:	04d9      	lsls	r1, r3, #19
 800506e:	4b38      	ldr	r3, [pc, #224]	@ (8005150 <USB_EPStartXfer+0x538>)
 8005070:	400b      	ands	r3, r1
 8005072:	69b9      	ldr	r1, [r7, #24]
 8005074:	0148      	lsls	r0, r1, #5
 8005076:	69f9      	ldr	r1, [r7, #28]
 8005078:	4401      	add	r1, r0
 800507a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800507e:	4313      	orrs	r3, r2
 8005080:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005098:	69b9      	ldr	r1, [r7, #24]
 800509a:	0148      	lsls	r0, r1, #5
 800509c:	69f9      	ldr	r1, [r7, #28]
 800509e:	4401      	add	r1, r0
 80050a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050a4:	4313      	orrs	r3, r2
 80050a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d10d      	bne.n	80050ca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	68d9      	ldr	r1, [r3, #12]
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c6:	460a      	mov	r2, r1
 80050c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	791b      	ldrb	r3, [r3, #4]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d128      	bne.n	8005124 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d110      	bne.n	8005104 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	e00f      	b.n	8005124 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800511e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005122:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800513e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005142:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	1ff80000 	.word	0x1ff80000

08005154 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d14a      	bne.n	8005208 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005186:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800518a:	f040 8086 	bne.w	800529a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	7812      	ldrb	r2, [r2, #0]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	7812      	ldrb	r2, [r2, #0]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3301      	adds	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d902      	bls.n	80051ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
          break;
 80051ea:	e056      	b.n	800529a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005204:	d0e7      	beq.n	80051d6 <USB_EPStopXfer+0x82>
 8005206:	e048      	b.n	800529a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800521c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005220:	d13b      	bne.n	800529a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005240:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005244:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	7812      	ldrb	r2, [r2, #0]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005264:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005268:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3301      	adds	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005276:	4293      	cmp	r3, r2
 8005278:	d902      	bls.n	8005280 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
          break;
 800527e:	e00c      	b.n	800529a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005294:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005298:	d0e7      	beq.n	800526a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800529a:	7dfb      	ldrb	r3, [r7, #23]
}
 800529c:	4618      	mov	r0, r3
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b089      	sub	sp, #36	@ 0x24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4611      	mov	r1, r2
 80052b4:	461a      	mov	r2, r3
 80052b6:	460b      	mov	r3, r1
 80052b8:	71fb      	strb	r3, [r7, #7]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d123      	bne.n	8005316 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052ce:	88bb      	ldrh	r3, [r7, #4]
 80052d0:	3303      	adds	r3, #3
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e018      	b.n	800530e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	031a      	lsls	r2, r3, #12
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052e8:	461a      	mov	r2, r3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	3301      	adds	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3301      	adds	r3, #1
 8005306:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	3301      	adds	r3, #1
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	d3e2      	bcc.n	80052dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3724      	adds	r7, #36	@ 0x24
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005324:	b480      	push	{r7}
 8005326:	b08b      	sub	sp, #44	@ 0x2c
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	089b      	lsrs	r3, r3, #2
 800533e:	b29b      	uxth	r3, r3
 8005340:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800534a:	2300      	movs	r3, #0
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	e014      	b.n	800537a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	601a      	str	r2, [r3, #0]
    pDest++;
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	3301      	adds	r3, #1
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	3301      	adds	r3, #1
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	3301      	adds	r3, #1
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	3301      	adds	r3, #1
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	3301      	adds	r3, #1
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	6a3a      	ldr	r2, [r7, #32]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	429a      	cmp	r2, r3
 8005380:	d3e6      	bcc.n	8005350 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005382:	8bfb      	ldrh	r3, [r7, #30]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01e      	beq.n	80053c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005392:	461a      	mov	r2, r3
 8005394:	f107 0310 	add.w	r3, r7, #16
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	701a      	strb	r2, [r3, #0]
      i++;
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	3301      	adds	r3, #1
 80053b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b6:	3301      	adds	r3, #1
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80053ba:	8bfb      	ldrh	r3, [r7, #30]
 80053bc:	3b01      	subs	r3, #1
 80053be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053c0:	8bfb      	ldrh	r3, [r7, #30]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1ea      	bne.n	800539c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	372c      	adds	r7, #44	@ 0x2c
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d12c      	bne.n	800544a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	db12      	blt.n	8005428 <USB_EPSetStall+0x54>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00f      	beq.n	8005428 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005422:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005426:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005442:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e02b      	b.n	80054a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	db12      	blt.n	8005482 <USB_EPSetStall+0xae>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00f      	beq.n	8005482 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800547c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005480:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800549c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d128      	bne.n	800551e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	791b      	ldrb	r3, [r3, #4]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d003      	beq.n	80054fc <USB_EPClearStall+0x4c>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d138      	bne.n	800556e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	e027      	b.n	800556e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005538:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800553c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	791b      	ldrb	r3, [r3, #4]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d003      	beq.n	800554e <USB_EPClearStall+0x9e>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	791b      	ldrb	r3, [r3, #4]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d10f      	bne.n	800556e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800556c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800559a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800559e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80055b0:	68f9      	ldr	r1, [r7, #12]
 80055b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055f6:	f023 0302 	bic.w	r3, r3, #2
 80055fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005624:	f023 0303 	bic.w	r3, r3, #3
 8005628:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005638:	f043 0302 	orr.w	r3, r3, #2
 800563c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4013      	ands	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	4013      	ands	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	0c1b      	lsrs	r3, r3, #16
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	b29b      	uxth	r3, r3
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4013      	ands	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005708:	68bb      	ldr	r3, [r7, #8]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005716:	b480      	push	{r7}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005738:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	fa22 f303 	lsr.w	r3, r2, r3
 8005746:	01db      	lsls	r3, r3, #7
 8005748:	b2db      	uxtb	r3, r3
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005764:	68bb      	ldr	r3, [r7, #8]
}
 8005766:	4618      	mov	r0, r3
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0301 	and.w	r3, r3, #1
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80057ac:	f023 0307 	bic.w	r3, r3, #7
 80057b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	460b      	mov	r3, r1
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	333c      	adds	r3, #60	@ 0x3c
 80057ea:	3304      	adds	r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4a26      	ldr	r2, [pc, #152]	@ (800588c <USB_EP0_OutStart+0xb8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d90a      	bls.n	800580e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005808:	d101      	bne.n	800580e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e037      	b.n	800587e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005814:	461a      	mov	r2, r3
 8005816:	2300      	movs	r3, #0
 8005818:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005828:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800582c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800583c:	f043 0318 	orr.w	r3, r3, #24
 8005840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005850:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005854:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005856:	7afb      	ldrb	r3, [r7, #11]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10f      	bne.n	800587c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005862:	461a      	mov	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005876:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800587a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	4f54300a 	.word	0x4f54300a

08005890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058a8:	d901      	bls.n	80058ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e022      	b.n	80058f4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	daf2      	bge.n	800589c <USB_CoreReset+0xc>

  count = 10U;
 80058b6:	230a      	movs	r3, #10
 80058b8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80058ba:	e002      	b.n	80058c2 <USB_CoreReset+0x32>
  {
    count--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3b01      	subs	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f9      	bne.n	80058bc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f043 0201 	orr.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e0:	d901      	bls.n	80058e6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e006      	b.n	80058f4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d0f0      	beq.n	80058d4 <USB_CoreReset+0x44>

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800590c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005910:	f002 fcc6 	bl	80082a0 <USBD_static_malloc>
 8005914:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	32b0      	adds	r2, #176	@ 0xb0
 8005926:	2100      	movs	r1, #0
 8005928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800592c:	2302      	movs	r3, #2
 800592e:	e0d4      	b.n	8005ada <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005930:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005934:	2100      	movs	r1, #0
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f005 fe6e 	bl	800b618 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	32b0      	adds	r2, #176	@ 0xb0
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	32b0      	adds	r2, #176	@ 0xb0
 8005956:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	7c1b      	ldrb	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d138      	bne.n	80059da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005968:	4b5e      	ldr	r3, [pc, #376]	@ (8005ae4 <USBD_CDC_Init+0x1e4>)
 800596a:	7819      	ldrb	r1, [r3, #0]
 800596c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005970:	2202      	movs	r2, #2
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f002 fb71 	bl	800805a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005978:	4b5a      	ldr	r3, [pc, #360]	@ (8005ae4 <USBD_CDC_Init+0x1e4>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f003 020f 	and.w	r2, r3, #15
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3323      	adds	r3, #35	@ 0x23
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005992:	4b55      	ldr	r3, [pc, #340]	@ (8005ae8 <USBD_CDC_Init+0x1e8>)
 8005994:	7819      	ldrb	r1, [r3, #0]
 8005996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800599a:	2202      	movs	r2, #2
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f002 fb5c 	bl	800805a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059a2:	4b51      	ldr	r3, [pc, #324]	@ (8005ae8 <USBD_CDC_Init+0x1e8>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	f003 020f 	and.w	r2, r3, #15
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059be:	4b4b      	ldr	r3, [pc, #300]	@ (8005aec <USBD_CDC_Init+0x1ec>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	f003 020f 	and.w	r2, r3, #15
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	331c      	adds	r3, #28
 80059d4:	2210      	movs	r2, #16
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	e035      	b.n	8005a46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059da:	4b42      	ldr	r3, [pc, #264]	@ (8005ae4 <USBD_CDC_Init+0x1e4>)
 80059dc:	7819      	ldrb	r1, [r3, #0]
 80059de:	2340      	movs	r3, #64	@ 0x40
 80059e0:	2202      	movs	r2, #2
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f002 fb39 	bl	800805a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059e8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ae4 <USBD_CDC_Init+0x1e4>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f003 020f 	and.w	r2, r3, #15
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	3323      	adds	r3, #35	@ 0x23
 80059fe:	2201      	movs	r2, #1
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a02:	4b39      	ldr	r3, [pc, #228]	@ (8005ae8 <USBD_CDC_Init+0x1e8>)
 8005a04:	7819      	ldrb	r1, [r3, #0]
 8005a06:	2340      	movs	r3, #64	@ 0x40
 8005a08:	2202      	movs	r2, #2
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f002 fb25 	bl	800805a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a10:	4b35      	ldr	r3, [pc, #212]	@ (8005ae8 <USBD_CDC_Init+0x1e8>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005a28:	2201      	movs	r2, #1
 8005a2a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8005aec <USBD_CDC_Init+0x1ec>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 020f 	and.w	r2, r3, #15
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	331c      	adds	r3, #28
 8005a42:	2210      	movs	r2, #16
 8005a44:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a46:	4b29      	ldr	r3, [pc, #164]	@ (8005aec <USBD_CDC_Init+0x1ec>)
 8005a48:	7819      	ldrb	r1, [r3, #0]
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f002 fb03 	bl	800805a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a54:	4b25      	ldr	r3, [pc, #148]	@ (8005aec <USBD_CDC_Init+0x1ec>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	f003 020f 	and.w	r2, r3, #15
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	3323      	adds	r3, #35	@ 0x23
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	33b0      	adds	r3, #176	@ 0xb0
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e018      	b.n	8005ada <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7c1b      	ldrb	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <USBD_CDC_Init+0x1e8>)
 8005ab2:	7819      	ldrb	r1, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f002 fbba 	bl	8008238 <USBD_LL_PrepareReceive>
 8005ac4:	e008      	b.n	8005ad8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ac6:	4b08      	ldr	r3, [pc, #32]	@ (8005ae8 <USBD_CDC_Init+0x1e8>)
 8005ac8:	7819      	ldrb	r1, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ad0:	2340      	movs	r3, #64	@ 0x40
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f002 fbb0 	bl	8008238 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000093 	.word	0x20000093
 8005ae8:	20000094 	.word	0x20000094
 8005aec:	20000095 	.word	0x20000095

08005af0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005afc:	4b3a      	ldr	r3, [pc, #232]	@ (8005be8 <USBD_CDC_DeInit+0xf8>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f002 facf 	bl	80080a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b08:	4b37      	ldr	r3, [pc, #220]	@ (8005be8 <USBD_CDC_DeInit+0xf8>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	f003 020f 	and.w	r2, r3, #15
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3323      	adds	r3, #35	@ 0x23
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b22:	4b32      	ldr	r3, [pc, #200]	@ (8005bec <USBD_CDC_DeInit+0xfc>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f002 fabc 	bl	80080a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bec <USBD_CDC_DeInit+0xfc>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b4a:	4b29      	ldr	r3, [pc, #164]	@ (8005bf0 <USBD_CDC_DeInit+0x100>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f002 faa8 	bl	80080a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b56:	4b26      	ldr	r3, [pc, #152]	@ (8005bf0 <USBD_CDC_DeInit+0x100>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f003 020f 	and.w	r2, r3, #15
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	3323      	adds	r3, #35	@ 0x23
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b70:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf0 <USBD_CDC_DeInit+0x100>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	331c      	adds	r3, #28
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	32b0      	adds	r2, #176	@ 0xb0
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01f      	beq.n	8005bdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	33b0      	adds	r3, #176	@ 0xb0
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	32b0      	adds	r2, #176	@ 0xb0
 8005bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f002 fb7c 	bl	80082bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	32b0      	adds	r2, #176	@ 0xb0
 8005bce:	2100      	movs	r1, #0
 8005bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000093 	.word	0x20000093
 8005bec:	20000094 	.word	0x20000094
 8005bf0:	20000095 	.word	0x20000095

08005bf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	32b0      	adds	r2, #176	@ 0xb0
 8005c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e0bf      	b.n	8005da4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d050      	beq.n	8005cd2 <USBD_CDC_Setup+0xde>
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	f040 80af 	bne.w	8005d94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	88db      	ldrh	r3, [r3, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d03a      	beq.n	8005cb4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	b25b      	sxtb	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	da1b      	bge.n	8005c80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	33b0      	adds	r3, #176	@ 0xb0
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	88d2      	ldrh	r2, [r2, #6]
 8005c64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	88db      	ldrh	r3, [r3, #6]
 8005c6a:	2b07      	cmp	r3, #7
 8005c6c:	bf28      	it	cs
 8005c6e:	2307      	movcs	r3, #7
 8005c70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	89fa      	ldrh	r2, [r7, #14]
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 fda9 	bl	80077d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c7e:	e090      	b.n	8005da2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	785a      	ldrb	r2, [r3, #1]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	88db      	ldrh	r3, [r3, #6]
 8005c8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c90:	d803      	bhi.n	8005c9a <USBD_CDC_Setup+0xa6>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	88db      	ldrh	r3, [r3, #6]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	e000      	b.n	8005c9c <USBD_CDC_Setup+0xa8>
 8005c9a:	2240      	movs	r2, #64	@ 0x40
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005ca2:	6939      	ldr	r1, [r7, #16]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005caa:	461a      	mov	r2, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 fdbe 	bl	800782e <USBD_CtlPrepareRx>
      break;
 8005cb2:	e076      	b.n	8005da2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	33b0      	adds	r3, #176	@ 0xb0
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	7850      	ldrb	r0, [r2, #1]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	4798      	blx	r3
      break;
 8005cd0:	e067      	b.n	8005da2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b0b      	cmp	r3, #11
 8005cd8:	d851      	bhi.n	8005d7e <USBD_CDC_Setup+0x18a>
 8005cda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce0 <USBD_CDC_Setup+0xec>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005d11 	.word	0x08005d11
 8005ce4:	08005d8d 	.word	0x08005d8d
 8005ce8:	08005d7f 	.word	0x08005d7f
 8005cec:	08005d7f 	.word	0x08005d7f
 8005cf0:	08005d7f 	.word	0x08005d7f
 8005cf4:	08005d7f 	.word	0x08005d7f
 8005cf8:	08005d7f 	.word	0x08005d7f
 8005cfc:	08005d7f 	.word	0x08005d7f
 8005d00:	08005d7f 	.word	0x08005d7f
 8005d04:	08005d7f 	.word	0x08005d7f
 8005d08:	08005d3b 	.word	0x08005d3b
 8005d0c:	08005d65 	.word	0x08005d65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d107      	bne.n	8005d2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d1c:	f107 030a 	add.w	r3, r7, #10
 8005d20:	2202      	movs	r2, #2
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 fd53 	bl	80077d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d2a:	e032      	b.n	8005d92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 fcd1 	bl	80076d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d34:	2303      	movs	r3, #3
 8005d36:	75fb      	strb	r3, [r7, #23]
          break;
 8005d38:	e02b      	b.n	8005d92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d107      	bne.n	8005d56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d46:	f107 030d 	add.w	r3, r7, #13
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 fd3e 	bl	80077d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d54:	e01d      	b.n	8005d92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fcbc 	bl	80076d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	75fb      	strb	r3, [r7, #23]
          break;
 8005d62:	e016      	b.n	8005d92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d00f      	beq.n	8005d90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 fcaf 	bl	80076d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d7c:	e008      	b.n	8005d90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 fca8 	bl	80076d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d86:	2303      	movs	r3, #3
 8005d88:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8a:	e002      	b.n	8005d92 <USBD_CDC_Setup+0x19e>
          break;
 8005d8c:	bf00      	nop
 8005d8e:	e008      	b.n	8005da2 <USBD_CDC_Setup+0x1ae>
          break;
 8005d90:	bf00      	nop
      }
      break;
 8005d92:	e006      	b.n	8005da2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 fc9d 	bl	80076d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005da0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005dbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	32b0      	adds	r2, #176	@ 0xb0
 8005dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e065      	b.n	8005ea2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	32b0      	adds	r2, #176	@ 0xb0
 8005de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	f003 020f 	and.w	r2, r3, #15
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	3314      	adds	r3, #20
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d02f      	beq.n	8005e60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	f003 020f 	and.w	r2, r3, #15
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	3314      	adds	r3, #20
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 010f 	and.w	r1, r3, #15
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	440b      	add	r3, r1
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4403      	add	r3, r0
 8005e28:	331c      	adds	r3, #28
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d112      	bne.n	8005e60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	f003 020f 	and.w	r2, r3, #15
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e52:	78f9      	ldrb	r1, [r7, #3]
 8005e54:	2300      	movs	r3, #0
 8005e56:	2200      	movs	r2, #0
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f002 f9cc 	bl	80081f6 <USBD_LL_Transmit>
 8005e5e:	e01f      	b.n	8005ea0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	33b0      	adds	r3, #176	@ 0xb0
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d010      	beq.n	8005ea0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	33b0      	adds	r3, #176	@ 0xb0
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	32b0      	adds	r2, #176	@ 0xb0
 8005ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	32b0      	adds	r2, #176	@ 0xb0
 8005ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e01a      	b.n	8005f12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f002 f9ca 	bl	800827a <USBD_LL_GetRxDataSize>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	33b0      	adds	r3, #176	@ 0xb0
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	32b0      	adds	r2, #176	@ 0xb0
 8005f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e024      	b.n	8005f86 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	33b0      	adds	r3, #176	@ 0xb0
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d019      	beq.n	8005f84 <USBD_CDC_EP0_RxReady+0x6a>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f56:	2bff      	cmp	r3, #255	@ 0xff
 8005f58:	d014      	beq.n	8005f84 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	33b0      	adds	r3, #176	@ 0xb0
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	22ff      	movs	r2, #255	@ 0xff
 8005f80:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f98:	2182      	movs	r1, #130	@ 0x82
 8005f9a:	4818      	ldr	r0, [pc, #96]	@ (8005ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f9c:	f000 fd62 	bl	8006a64 <USBD_GetEpDesc>
 8005fa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4815      	ldr	r0, [pc, #84]	@ (8005ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fa6:	f000 fd5d 	bl	8006a64 <USBD_GetEpDesc>
 8005faa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fac:	2181      	movs	r1, #129	@ 0x81
 8005fae:	4813      	ldr	r0, [pc, #76]	@ (8005ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fb0:	f000 fd58 	bl	8006a64 <USBD_GetEpDesc>
 8005fb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d006      	beq.n	8005fd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fd0:	711a      	strb	r2, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d006      	beq.n	8005fea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fe4:	711a      	strb	r2, [r3, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2243      	movs	r2, #67	@ 0x43
 8005fee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ff0:	4b02      	ldr	r3, [pc, #8]	@ (8005ffc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000050 	.word	0x20000050

08006000 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006008:	2182      	movs	r1, #130	@ 0x82
 800600a:	4818      	ldr	r0, [pc, #96]	@ (800606c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800600c:	f000 fd2a 	bl	8006a64 <USBD_GetEpDesc>
 8006010:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006012:	2101      	movs	r1, #1
 8006014:	4815      	ldr	r0, [pc, #84]	@ (800606c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006016:	f000 fd25 	bl	8006a64 <USBD_GetEpDesc>
 800601a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800601c:	2181      	movs	r1, #129	@ 0x81
 800601e:	4813      	ldr	r0, [pc, #76]	@ (800606c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006020:	f000 fd20 	bl	8006a64 <USBD_GetEpDesc>
 8006024:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2210      	movs	r2, #16
 8006030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2200      	movs	r2, #0
 800603c:	711a      	strb	r2, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f042 0202 	orr.w	r2, r2, #2
 8006044:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d006      	beq.n	800605a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	711a      	strb	r2, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f042 0202 	orr.w	r2, r2, #2
 8006058:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2243      	movs	r2, #67	@ 0x43
 800605e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006060:	4b02      	ldr	r3, [pc, #8]	@ (800606c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000050 	.word	0x20000050

08006070 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006078:	2182      	movs	r1, #130	@ 0x82
 800607a:	4818      	ldr	r0, [pc, #96]	@ (80060dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800607c:	f000 fcf2 	bl	8006a64 <USBD_GetEpDesc>
 8006080:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006082:	2101      	movs	r1, #1
 8006084:	4815      	ldr	r0, [pc, #84]	@ (80060dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006086:	f000 fced 	bl	8006a64 <USBD_GetEpDesc>
 800608a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800608c:	2181      	movs	r1, #129	@ 0x81
 800608e:	4813      	ldr	r0, [pc, #76]	@ (80060dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006090:	f000 fce8 	bl	8006a64 <USBD_GetEpDesc>
 8006094:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2210      	movs	r2, #16
 80060a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d006      	beq.n	80060b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060b0:	711a      	strb	r2, [r3, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d006      	beq.n	80060ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060c4:	711a      	strb	r2, [r3, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2243      	movs	r2, #67	@ 0x43
 80060ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060d0:	4b02      	ldr	r3, [pc, #8]	@ (80060dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000050 	.word	0x20000050

080060e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	220a      	movs	r2, #10
 80060ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060ee:	4b03      	ldr	r3, [pc, #12]	@ (80060fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	2000000c 	.word	0x2000000c

08006100 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006110:	2303      	movs	r3, #3
 8006112:	e009      	b.n	8006128 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	33b0      	adds	r3, #176	@ 0xb0
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	32b0      	adds	r2, #176	@ 0xb0
 800614a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006156:	2303      	movs	r3, #3
 8006158:	e008      	b.n	800616c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	32b0      	adds	r2, #176	@ 0xb0
 800618c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006190:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006198:	2303      	movs	r3, #3
 800619a:	e004      	b.n	80061a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	32b0      	adds	r2, #176	@ 0xb0
 80061c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e025      	b.n	8006226 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d11f      	bne.n	8006224 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80061ec:	4b10      	ldr	r3, [pc, #64]	@ (8006230 <USBD_CDC_TransmitPacket+0x7c>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	f003 020f 	and.w	r2, r3, #15
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4403      	add	r3, r0
 8006206:	3314      	adds	r3, #20
 8006208:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800620a:	4b09      	ldr	r3, [pc, #36]	@ (8006230 <USBD_CDC_TransmitPacket+0x7c>)
 800620c:	7819      	ldrb	r1, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 ffeb 	bl	80081f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000093 	.word	0x20000093

08006234 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	32b0      	adds	r2, #176	@ 0xb0
 8006246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	32b0      	adds	r2, #176	@ 0xb0
 8006256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800625e:	2303      	movs	r3, #3
 8006260:	e018      	b.n	8006294 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	7c1b      	ldrb	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800626a:	4b0c      	ldr	r3, [pc, #48]	@ (800629c <USBD_CDC_ReceivePacket+0x68>)
 800626c:	7819      	ldrb	r1, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 ffdd 	bl	8008238 <USBD_LL_PrepareReceive>
 800627e:	e008      	b.n	8006292 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006280:	4b06      	ldr	r3, [pc, #24]	@ (800629c <USBD_CDC_ReceivePacket+0x68>)
 8006282:	7819      	ldrb	r1, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800628a:	2340      	movs	r3, #64	@ 0x40
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 ffd3 	bl	8008238 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	20000094 	.word	0x20000094

080062a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e01f      	b.n	80062f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	79fa      	ldrb	r2, [r7, #7]
 80062ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f001 fe47 	bl	8007f80 <USBD_LL_Init>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006314:	2303      	movs	r3, #3
 8006316:	e025      	b.n	8006364 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	32ae      	adds	r2, #174	@ 0xae
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00f      	beq.n	8006354 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	32ae      	adds	r2, #174	@ 0xae
 800633e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	f107 020e 	add.w	r2, r7, #14
 8006348:	4610      	mov	r0, r2
 800634a:	4798      	blx	r3
 800634c:	4602      	mov	r2, r0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 fe55 	bl	8008024 <USBD_LL_Start>
 800637a:	4603      	mov	r3, r0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800638c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	78fa      	ldrb	r2, [r7, #3]
 80063be:	4611      	mov	r1, r2
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	4798      	blx	r3
 80063c4:	4603      	mov	r3, r0
 80063c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	78fa      	ldrb	r2, [r7, #3]
 80063ec:	4611      	mov	r1, r2
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063f8:	2303      	movs	r3, #3
 80063fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f001 f922 	bl	8007662 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	2b02      	cmp	r3, #2
 8006440:	d01a      	beq.n	8006478 <USBD_LL_SetupStage+0x72>
 8006442:	2b02      	cmp	r3, #2
 8006444:	d822      	bhi.n	800648c <USBD_LL_SetupStage+0x86>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <USBD_LL_SetupStage+0x4a>
 800644a:	2b01      	cmp	r3, #1
 800644c:	d00a      	beq.n	8006464 <USBD_LL_SetupStage+0x5e>
 800644e:	e01d      	b.n	800648c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fb77 	bl	8006b4c <USBD_StdDevReq>
 800645e:	4603      	mov	r3, r0
 8006460:	73fb      	strb	r3, [r7, #15]
      break;
 8006462:	e020      	b.n	80064a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fbdf 	bl	8006c30 <USBD_StdItfReq>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]
      break;
 8006476:	e016      	b.n	80064a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fc41 	bl	8006d08 <USBD_StdEPReq>
 8006486:	4603      	mov	r3, r0
 8006488:	73fb      	strb	r3, [r7, #15]
      break;
 800648a:	e00c      	b.n	80064a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006492:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006496:	b2db      	uxtb	r3, r3
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 fe22 	bl	80080e4 <USBD_LL_StallEP>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	bf00      	nop
  }

  return ret;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	460b      	mov	r3, r1
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d177      	bne.n	80065b8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80064ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	f040 80a1 	bne.w	800661e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	8992      	ldrh	r2, [r2, #12]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d91c      	bls.n	8006522 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	8992      	ldrh	r2, [r2, #12]
 80064f0:	1a9a      	subs	r2, r3, r2
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	8992      	ldrh	r2, [r2, #12]
 80064fe:	441a      	add	r2, r3
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6919      	ldr	r1, [r3, #16]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	899b      	ldrh	r3, [r3, #12]
 800650c:	461a      	mov	r2, r3
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	4293      	cmp	r3, r2
 8006514:	bf38      	it	cc
 8006516:	4613      	movcc	r3, r2
 8006518:	461a      	mov	r2, r3
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f001 f9a8 	bl	8007870 <USBD_CtlContinueRx>
 8006520:	e07d      	b.n	800661e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2b02      	cmp	r3, #2
 800652e:	d014      	beq.n	800655a <USBD_LL_DataOutStage+0xaa>
 8006530:	2b02      	cmp	r3, #2
 8006532:	d81d      	bhi.n	8006570 <USBD_LL_DataOutStage+0xc0>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <USBD_LL_DataOutStage+0x8e>
 8006538:	2b01      	cmp	r3, #1
 800653a:	d003      	beq.n	8006544 <USBD_LL_DataOutStage+0x94>
 800653c:	e018      	b.n	8006570 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	75bb      	strb	r3, [r7, #22]
            break;
 8006542:	e018      	b.n	8006576 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800654a:	b2db      	uxtb	r3, r3
 800654c:	4619      	mov	r1, r3
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fa6e 	bl	8006a30 <USBD_CoreFindIF>
 8006554:	4603      	mov	r3, r0
 8006556:	75bb      	strb	r3, [r7, #22]
            break;
 8006558:	e00d      	b.n	8006576 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006560:	b2db      	uxtb	r3, r3
 8006562:	4619      	mov	r1, r3
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fa70 	bl	8006a4a <USBD_CoreFindEP>
 800656a:	4603      	mov	r3, r0
 800656c:	75bb      	strb	r3, [r7, #22]
            break;
 800656e:	e002      	b.n	8006576 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	75bb      	strb	r3, [r7, #22]
            break;
 8006574:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006576:	7dbb      	ldrb	r3, [r7, #22]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d119      	bne.n	80065b0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b03      	cmp	r3, #3
 8006586:	d113      	bne.n	80065b0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006588:	7dba      	ldrb	r2, [r7, #22]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	32ae      	adds	r2, #174	@ 0xae
 800658e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006598:	7dba      	ldrb	r2, [r7, #22]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80065a0:	7dba      	ldrb	r2, [r7, #22]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	32ae      	adds	r2, #174	@ 0xae
 80065a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f001 f96e 	bl	8007892 <USBD_CtlSendStatus>
 80065b6:	e032      	b.n	800661e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	4619      	mov	r1, r3
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fa41 	bl	8006a4a <USBD_CoreFindEP>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065cc:	7dbb      	ldrb	r3, [r7, #22]
 80065ce:	2bff      	cmp	r3, #255	@ 0xff
 80065d0:	d025      	beq.n	800661e <USBD_LL_DataOutStage+0x16e>
 80065d2:	7dbb      	ldrb	r3, [r7, #22]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d122      	bne.n	800661e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d117      	bne.n	8006614 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065e4:	7dba      	ldrb	r2, [r7, #22]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	32ae      	adds	r2, #174	@ 0xae
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00f      	beq.n	8006614 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80065f4:	7dba      	ldrb	r2, [r7, #22]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065fc:	7dba      	ldrb	r2, [r7, #22]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	32ae      	adds	r2, #174	@ 0xae
 8006602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	7afa      	ldrb	r2, [r7, #11]
 800660a:	4611      	mov	r1, r2
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	4798      	blx	r3
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	e000      	b.n	8006620 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	460b      	mov	r3, r1
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006636:	7afb      	ldrb	r3, [r7, #11]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d178      	bne.n	800672e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3314      	adds	r3, #20
 8006640:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006648:	2b02      	cmp	r3, #2
 800664a:	d163      	bne.n	8006714 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	8992      	ldrh	r2, [r2, #12]
 8006654:	4293      	cmp	r3, r2
 8006656:	d91c      	bls.n	8006692 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	8992      	ldrh	r2, [r2, #12]
 8006660:	1a9a      	subs	r2, r3, r2
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	8992      	ldrh	r2, [r2, #12]
 800666e:	441a      	add	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	6919      	ldr	r1, [r3, #16]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	461a      	mov	r2, r3
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f001 f8c4 	bl	800780c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006684:	2300      	movs	r3, #0
 8006686:	2200      	movs	r2, #0
 8006688:	2100      	movs	r1, #0
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 fdd4 	bl	8008238 <USBD_LL_PrepareReceive>
 8006690:	e040      	b.n	8006714 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	899b      	ldrh	r3, [r3, #12]
 8006696:	461a      	mov	r2, r3
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	d11c      	bne.n	80066da <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d316      	bcc.n	80066da <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d20f      	bcs.n	80066da <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066ba:	2200      	movs	r2, #0
 80066bc:	2100      	movs	r1, #0
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f001 f8a4 	bl	800780c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066cc:	2300      	movs	r3, #0
 80066ce:	2200      	movs	r2, #0
 80066d0:	2100      	movs	r1, #0
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f001 fdb0 	bl	8008238 <USBD_LL_PrepareReceive>
 80066d8:	e01c      	b.n	8006714 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d10f      	bne.n	8006706 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006706:	2180      	movs	r1, #128	@ 0x80
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f001 fceb 	bl	80080e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f001 f8d2 	bl	80078b8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d03a      	beq.n	8006794 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff fe30 	bl	8006384 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800672c:	e032      	b.n	8006794 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006734:	b2db      	uxtb	r3, r3
 8006736:	4619      	mov	r1, r3
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f986 	bl	8006a4a <USBD_CoreFindEP>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	2bff      	cmp	r3, #255	@ 0xff
 8006746:	d025      	beq.n	8006794 <USBD_LL_DataInStage+0x16c>
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d122      	bne.n	8006794 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b03      	cmp	r3, #3
 8006758:	d11c      	bne.n	8006794 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800675a:	7dfa      	ldrb	r2, [r7, #23]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	32ae      	adds	r2, #174	@ 0xae
 8006760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d014      	beq.n	8006794 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800676a:	7dfa      	ldrb	r2, [r7, #23]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006772:	7dfa      	ldrb	r2, [r7, #23]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	32ae      	adds	r2, #174	@ 0xae
 8006778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	7afa      	ldrb	r2, [r7, #11]
 8006780:	4611      	mov	r1, r2
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	4798      	blx	r3
 8006786:	4603      	mov	r3, r0
 8006788:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800678a:	7dbb      	ldrb	r3, [r7, #22]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006790:	7dbb      	ldrb	r3, [r7, #22]
 8006792:	e000      	b.n	8006796 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d014      	beq.n	8006804 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00e      	beq.n	8006804 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6852      	ldr	r2, [r2, #4]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	4611      	mov	r1, r2
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006800:	2303      	movs	r3, #3
 8006802:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006804:	2340      	movs	r3, #64	@ 0x40
 8006806:	2200      	movs	r2, #0
 8006808:	2100      	movs	r1, #0
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fc25 	bl	800805a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2240      	movs	r2, #64	@ 0x40
 800681c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006820:	2340      	movs	r3, #64	@ 0x40
 8006822:	2200      	movs	r2, #0
 8006824:	2180      	movs	r1, #128	@ 0x80
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fc17 	bl	800805a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2240      	movs	r2, #64	@ 0x40
 8006838:	841a      	strh	r2, [r3, #32]

  return ret;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b04      	cmp	r3, #4
 8006876:	d006      	beq.n	8006886 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800687e:	b2da      	uxtb	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2204      	movs	r2, #4
 800688a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d106      	bne.n	80068be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d110      	bne.n	8006902 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	32ae      	adds	r2, #174	@ 0xae
 8006922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800692a:	2303      	movs	r3, #3
 800692c:	e01c      	b.n	8006968 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b03      	cmp	r3, #3
 8006938:	d115      	bne.n	8006966 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	32ae      	adds	r2, #174	@ 0xae
 8006944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	32ae      	adds	r2, #174	@ 0xae
 8006958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	78fa      	ldrb	r2, [r7, #3]
 8006960:	4611      	mov	r1, r2
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	32ae      	adds	r2, #174	@ 0xae
 8006986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800698e:	2303      	movs	r3, #3
 8006990:	e01c      	b.n	80069cc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b03      	cmp	r3, #3
 800699c:	d115      	bne.n	80069ca <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	32ae      	adds	r2, #174	@ 0xae
 80069a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	32ae      	adds	r2, #174	@ 0xae
 80069bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	78fa      	ldrb	r2, [r7, #3]
 80069c4:	4611      	mov	r1, r2
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00e      	beq.n	8006a26 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6852      	ldr	r2, [r2, #4]
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	4611      	mov	r1, r2
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	4798      	blx	r3
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a22:	2303      	movs	r3, #3
 8006a24:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	460b      	mov	r3, r1
 8006a54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d91f      	bls.n	8006aca <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a90:	e013      	b.n	8006aba <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a92:	f107 030a 	add.w	r3, r7, #10
 8006a96:	4619      	mov	r1, r3
 8006a98:	6978      	ldr	r0, [r7, #20]
 8006a9a:	f000 f81b 	bl	8006ad4 <USBD_GetNextDesc>
 8006a9e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d108      	bne.n	8006aba <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	789b      	ldrb	r3, [r3, #2]
 8006ab0:	78fa      	ldrb	r2, [r7, #3]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d008      	beq.n	8006ac8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	885b      	ldrh	r3, [r3, #2]
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	897b      	ldrh	r3, [r7, #10]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d8e5      	bhi.n	8006a92 <USBD_GetEpDesc+0x2e>
 8006ac6:	e000      	b.n	8006aca <USBD_GetEpDesc+0x66>
          break;
 8006ac8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006aca:	693b      	ldr	r3, [r7, #16]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	7812      	ldrb	r2, [r2, #0]
 8006aea:	4413      	add	r3, r2
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4413      	add	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006afe:	68fb      	ldr	r3, [r7, #12]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	3301      	adds	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	b21a      	sxth	r2, r3
 8006b32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	b21b      	sxth	r3, r3
 8006b3a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b3c:	89fb      	ldrh	r3, [r7, #14]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d005      	beq.n	8006b72 <USBD_StdDevReq+0x26>
 8006b66:	2b40      	cmp	r3, #64	@ 0x40
 8006b68:	d857      	bhi.n	8006c1a <USBD_StdDevReq+0xce>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00f      	beq.n	8006b8e <USBD_StdDevReq+0x42>
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d153      	bne.n	8006c1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	32ae      	adds	r2, #174	@ 0xae
 8006b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b8c:	e04a      	b.n	8006c24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	d83b      	bhi.n	8006c0e <USBD_StdDevReq+0xc2>
 8006b96:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <USBD_StdDevReq+0x50>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006bf1 	.word	0x08006bf1
 8006ba0:	08006c05 	.word	0x08006c05
 8006ba4:	08006c0f 	.word	0x08006c0f
 8006ba8:	08006bfb 	.word	0x08006bfb
 8006bac:	08006c0f 	.word	0x08006c0f
 8006bb0:	08006bcf 	.word	0x08006bcf
 8006bb4:	08006bc5 	.word	0x08006bc5
 8006bb8:	08006c0f 	.word	0x08006c0f
 8006bbc:	08006be7 	.word	0x08006be7
 8006bc0:	08006bd9 	.word	0x08006bd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fa3e 	bl	8007048 <USBD_GetDescriptor>
          break;
 8006bcc:	e024      	b.n	8006c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fba3 	bl	800731c <USBD_SetAddress>
          break;
 8006bd6:	e01f      	b.n	8006c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fbe2 	bl	80073a4 <USBD_SetConfig>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
          break;
 8006be4:	e018      	b.n	8006c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fc85 	bl	80074f8 <USBD_GetConfig>
          break;
 8006bee:	e013      	b.n	8006c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fcb6 	bl	8007564 <USBD_GetStatus>
          break;
 8006bf8:	e00e      	b.n	8006c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fce5 	bl	80075cc <USBD_SetFeature>
          break;
 8006c02:	e009      	b.n	8006c18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fd09 	bl	800761e <USBD_ClrFeature>
          break;
 8006c0c:	e004      	b.n	8006c18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fd60 	bl	80076d6 <USBD_CtlError>
          break;
 8006c16:	bf00      	nop
      }
      break;
 8006c18:	e004      	b.n	8006c24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fd5a 	bl	80076d6 <USBD_CtlError>
      break;
 8006c22:	bf00      	nop
  }

  return ret;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop

08006c30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c46:	2b40      	cmp	r3, #64	@ 0x40
 8006c48:	d005      	beq.n	8006c56 <USBD_StdItfReq+0x26>
 8006c4a:	2b40      	cmp	r3, #64	@ 0x40
 8006c4c:	d852      	bhi.n	8006cf4 <USBD_StdItfReq+0xc4>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <USBD_StdItfReq+0x26>
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d14e      	bne.n	8006cf4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d840      	bhi.n	8006ce6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	889b      	ldrh	r3, [r3, #4]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d836      	bhi.n	8006cdc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	889b      	ldrh	r3, [r3, #4]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff feda 	bl	8006a30 <USBD_CoreFindIF>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	2bff      	cmp	r3, #255	@ 0xff
 8006c84:	d01d      	beq.n	8006cc2 <USBD_StdItfReq+0x92>
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d11a      	bne.n	8006cc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c8c:	7bba      	ldrb	r2, [r7, #14]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	32ae      	adds	r2, #174	@ 0xae
 8006c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00f      	beq.n	8006cbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c9c:	7bba      	ldrb	r2, [r7, #14]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ca4:	7bba      	ldrb	r2, [r7, #14]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	32ae      	adds	r2, #174	@ 0xae
 8006caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cba:	e004      	b.n	8006cc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cc0:	e001      	b.n	8006cc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	88db      	ldrh	r3, [r3, #6]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d110      	bne.n	8006cf0 <USBD_StdItfReq+0xc0>
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10d      	bne.n	8006cf0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fddc 	bl	8007892 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cda:	e009      	b.n	8006cf0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fcf9 	bl	80076d6 <USBD_CtlError>
          break;
 8006ce4:	e004      	b.n	8006cf0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fcf4 	bl	80076d6 <USBD_CtlError>
          break;
 8006cee:	e000      	b.n	8006cf2 <USBD_StdItfReq+0xc2>
          break;
 8006cf0:	bf00      	nop
      }
      break;
 8006cf2:	e004      	b.n	8006cfe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fced 	bl	80076d6 <USBD_CtlError>
      break;
 8006cfc:	bf00      	nop
  }

  return ret;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	889b      	ldrh	r3, [r3, #4]
 8006d1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d24:	2b40      	cmp	r3, #64	@ 0x40
 8006d26:	d007      	beq.n	8006d38 <USBD_StdEPReq+0x30>
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	f200 8181 	bhi.w	8007030 <USBD_StdEPReq+0x328>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d02a      	beq.n	8006d88 <USBD_StdEPReq+0x80>
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	f040 817c 	bne.w	8007030 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff fe84 	bl	8006a4a <USBD_CoreFindEP>
 8006d42:	4603      	mov	r3, r0
 8006d44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d46:	7b7b      	ldrb	r3, [r7, #13]
 8006d48:	2bff      	cmp	r3, #255	@ 0xff
 8006d4a:	f000 8176 	beq.w	800703a <USBD_StdEPReq+0x332>
 8006d4e:	7b7b      	ldrb	r3, [r7, #13]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 8172 	bne.w	800703a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006d56:	7b7a      	ldrb	r2, [r7, #13]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d5e:	7b7a      	ldrb	r2, [r7, #13]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	32ae      	adds	r2, #174	@ 0xae
 8006d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8165 	beq.w	800703a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d70:	7b7a      	ldrb	r2, [r7, #13]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32ae      	adds	r2, #174	@ 0xae
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d86:	e158      	b.n	800703a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d008      	beq.n	8006da2 <USBD_StdEPReq+0x9a>
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	f300 8147 	bgt.w	8007024 <USBD_StdEPReq+0x31c>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 809b 	beq.w	8006ed2 <USBD_StdEPReq+0x1ca>
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d03c      	beq.n	8006e1a <USBD_StdEPReq+0x112>
 8006da0:	e140      	b.n	8007024 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d002      	beq.n	8006db4 <USBD_StdEPReq+0xac>
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d016      	beq.n	8006de0 <USBD_StdEPReq+0xd8>
 8006db2:	e02c      	b.n	8006e0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00d      	beq.n	8006dd6 <USBD_StdEPReq+0xce>
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b80      	cmp	r3, #128	@ 0x80
 8006dbe:	d00a      	beq.n	8006dd6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 f98d 	bl	80080e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dca:	2180      	movs	r1, #128	@ 0x80
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f989 	bl	80080e4 <USBD_LL_StallEP>
 8006dd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dd4:	e020      	b.n	8006e18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fc7c 	bl	80076d6 <USBD_CtlError>
              break;
 8006dde:	e01b      	b.n	8006e18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	885b      	ldrh	r3, [r3, #2]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10e      	bne.n	8006e06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <USBD_StdEPReq+0xfe>
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b80      	cmp	r3, #128	@ 0x80
 8006df2:	d008      	beq.n	8006e06 <USBD_StdEPReq+0xfe>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	88db      	ldrh	r3, [r3, #6]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f96f 	bl	80080e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fd43 	bl	8007892 <USBD_CtlSendStatus>

              break;
 8006e0c:	e004      	b.n	8006e18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fc60 	bl	80076d6 <USBD_CtlError>
              break;
 8006e16:	bf00      	nop
          }
          break;
 8006e18:	e109      	b.n	800702e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d002      	beq.n	8006e2c <USBD_StdEPReq+0x124>
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d016      	beq.n	8006e58 <USBD_StdEPReq+0x150>
 8006e2a:	e04b      	b.n	8006ec4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00d      	beq.n	8006e4e <USBD_StdEPReq+0x146>
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b80      	cmp	r3, #128	@ 0x80
 8006e36:	d00a      	beq.n	8006e4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 f951 	bl	80080e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e42:	2180      	movs	r1, #128	@ 0x80
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f94d 	bl	80080e4 <USBD_LL_StallEP>
 8006e4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e4c:	e040      	b.n	8006ed0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fc40 	bl	80076d6 <USBD_CtlError>
              break;
 8006e56:	e03b      	b.n	8006ed0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	885b      	ldrh	r3, [r3, #2]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d136      	bne.n	8006ece <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d004      	beq.n	8006e74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 f957 	bl	8008122 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fd0c 	bl	8007892 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fde3 	bl	8006a4a <USBD_CoreFindEP>
 8006e84:	4603      	mov	r3, r0
 8006e86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e88:	7b7b      	ldrb	r3, [r7, #13]
 8006e8a:	2bff      	cmp	r3, #255	@ 0xff
 8006e8c:	d01f      	beq.n	8006ece <USBD_StdEPReq+0x1c6>
 8006e8e:	7b7b      	ldrb	r3, [r7, #13]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d11c      	bne.n	8006ece <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e94:	7b7a      	ldrb	r2, [r7, #13]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e9c:	7b7a      	ldrb	r2, [r7, #13]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32ae      	adds	r2, #174	@ 0xae
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d010      	beq.n	8006ece <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006eac:	7b7a      	ldrb	r2, [r7, #13]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	32ae      	adds	r2, #174	@ 0xae
 8006eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ec2:	e004      	b.n	8006ece <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fc05 	bl	80076d6 <USBD_CtlError>
              break;
 8006ecc:	e000      	b.n	8006ed0 <USBD_StdEPReq+0x1c8>
              break;
 8006ece:	bf00      	nop
          }
          break;
 8006ed0:	e0ad      	b.n	800702e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d002      	beq.n	8006ee4 <USBD_StdEPReq+0x1dc>
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d033      	beq.n	8006f4a <USBD_StdEPReq+0x242>
 8006ee2:	e099      	b.n	8007018 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <USBD_StdEPReq+0x1f2>
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	2b80      	cmp	r3, #128	@ 0x80
 8006eee:	d004      	beq.n	8006efa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fbef 	bl	80076d6 <USBD_CtlError>
                break;
 8006ef8:	e093      	b.n	8007022 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006efa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	da0b      	bge.n	8006f1a <USBD_StdEPReq+0x212>
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	3310      	adds	r3, #16
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	3304      	adds	r3, #4
 8006f18:	e00b      	b.n	8006f32 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	4413      	add	r3, r2
 8006f30:	3304      	adds	r3, #4
 8006f32:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2200      	movs	r2, #0
 8006f38:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	330e      	adds	r3, #14
 8006f3e:	2202      	movs	r2, #2
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fc44 	bl	80077d0 <USBD_CtlSendData>
              break;
 8006f48:	e06b      	b.n	8007022 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da11      	bge.n	8006f76 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	f003 020f 	and.w	r2, r3, #15
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	3323      	adds	r3, #35	@ 0x23
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d117      	bne.n	8006f9c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fbb1 	bl	80076d6 <USBD_CtlError>
                  break;
 8006f74:	e055      	b.n	8007022 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb9e 	bl	80076d6 <USBD_CtlError>
                  break;
 8006f9a:	e042      	b.n	8007022 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	da0b      	bge.n	8006fbc <USBD_StdEPReq+0x2b4>
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	3310      	adds	r3, #16
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3304      	adds	r3, #4
 8006fba:	e00b      	b.n	8006fd4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <USBD_StdEPReq+0x2da>
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b80      	cmp	r3, #128	@ 0x80
 8006fe0:	d103      	bne.n	8006fea <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	739a      	strb	r2, [r3, #14]
 8006fe8:	e00e      	b.n	8007008 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 f8b6 	bl	8008160 <USBD_LL_IsStallEP>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	739a      	strb	r2, [r3, #14]
 8007000:	e002      	b.n	8007008 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2200      	movs	r2, #0
 8007006:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	330e      	adds	r3, #14
 800700c:	2202      	movs	r2, #2
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fbdd 	bl	80077d0 <USBD_CtlSendData>
              break;
 8007016:	e004      	b.n	8007022 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fb5b 	bl	80076d6 <USBD_CtlError>
              break;
 8007020:	bf00      	nop
          }
          break;
 8007022:	e004      	b.n	800702e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fb55 	bl	80076d6 <USBD_CtlError>
          break;
 800702c:	bf00      	nop
      }
      break;
 800702e:	e005      	b.n	800703c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fb4f 	bl	80076d6 <USBD_CtlError>
      break;
 8007038:	e000      	b.n	800703c <USBD_StdEPReq+0x334>
      break;
 800703a:	bf00      	nop
  }

  return ret;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	0a1b      	lsrs	r3, r3, #8
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	2b06      	cmp	r3, #6
 800706a:	f200 8128 	bhi.w	80072be <USBD_GetDescriptor+0x276>
 800706e:	a201      	add	r2, pc, #4	@ (adr r2, 8007074 <USBD_GetDescriptor+0x2c>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	08007091 	.word	0x08007091
 8007078:	080070a9 	.word	0x080070a9
 800707c:	080070e9 	.word	0x080070e9
 8007080:	080072bf 	.word	0x080072bf
 8007084:	080072bf 	.word	0x080072bf
 8007088:	0800725f 	.word	0x0800725f
 800708c:	0800728b 	.word	0x0800728b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7c12      	ldrb	r2, [r2, #16]
 800709c:	f107 0108 	add.w	r1, r7, #8
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	60f8      	str	r0, [r7, #12]
      break;
 80070a6:	e112      	b.n	80072ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7c1b      	ldrb	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10d      	bne.n	80070cc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	f107 0208 	add.w	r2, r7, #8
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
 80070c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	2202      	movs	r2, #2
 80070c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070ca:	e100      	b.n	80072ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d4:	f107 0208 	add.w	r2, r7, #8
 80070d8:	4610      	mov	r0, r2
 80070da:	4798      	blx	r3
 80070dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3301      	adds	r3, #1
 80070e2:	2202      	movs	r2, #2
 80070e4:	701a      	strb	r2, [r3, #0]
      break;
 80070e6:	e0f2      	b.n	80072ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	885b      	ldrh	r3, [r3, #2]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	f200 80ac 	bhi.w	800724c <USBD_GetDescriptor+0x204>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <USBD_GetDescriptor+0xb4>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007115 	.word	0x08007115
 8007100:	08007149 	.word	0x08007149
 8007104:	0800717d 	.word	0x0800717d
 8007108:	080071b1 	.word	0x080071b1
 800710c:	080071e5 	.word	0x080071e5
 8007110:	08007219 	.word	0x08007219
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	7c12      	ldrb	r2, [r2, #16]
 800712c:	f107 0108 	add.w	r1, r7, #8
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007136:	e091      	b.n	800725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 facb 	bl	80076d6 <USBD_CtlError>
            err++;
 8007140:	7afb      	ldrb	r3, [r7, #11]
 8007142:	3301      	adds	r3, #1
 8007144:	72fb      	strb	r3, [r7, #11]
          break;
 8007146:	e089      	b.n	800725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	7c12      	ldrb	r2, [r2, #16]
 8007160:	f107 0108 	add.w	r1, r7, #8
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716a:	e077      	b.n	800725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fab1 	bl	80076d6 <USBD_CtlError>
            err++;
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	3301      	adds	r3, #1
 8007178:	72fb      	strb	r3, [r7, #11]
          break;
 800717a:	e06f      	b.n	800725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	7c12      	ldrb	r2, [r2, #16]
 8007194:	f107 0108 	add.w	r1, r7, #8
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
 800719c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800719e:	e05d      	b.n	800725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa97 	bl	80076d6 <USBD_CtlError>
            err++;
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	3301      	adds	r3, #1
 80071ac:	72fb      	strb	r3, [r7, #11]
          break;
 80071ae:	e055      	b.n	800725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7c12      	ldrb	r2, [r2, #16]
 80071c8:	f107 0108 	add.w	r1, r7, #8
 80071cc:	4610      	mov	r0, r2
 80071ce:	4798      	blx	r3
 80071d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d2:	e043      	b.n	800725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa7d 	bl	80076d6 <USBD_CtlError>
            err++;
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	3301      	adds	r3, #1
 80071e0:	72fb      	strb	r3, [r7, #11]
          break;
 80071e2:	e03b      	b.n	800725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	7c12      	ldrb	r2, [r2, #16]
 80071fc:	f107 0108 	add.w	r1, r7, #8
 8007200:	4610      	mov	r0, r2
 8007202:	4798      	blx	r3
 8007204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007206:	e029      	b.n	800725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa63 	bl	80076d6 <USBD_CtlError>
            err++;
 8007210:	7afb      	ldrb	r3, [r7, #11]
 8007212:	3301      	adds	r3, #1
 8007214:	72fb      	strb	r3, [r7, #11]
          break;
 8007216:	e021      	b.n	800725c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	7c12      	ldrb	r2, [r2, #16]
 8007230:	f107 0108 	add.w	r1, r7, #8
 8007234:	4610      	mov	r0, r2
 8007236:	4798      	blx	r3
 8007238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723a:	e00f      	b.n	800725c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fa49 	bl	80076d6 <USBD_CtlError>
            err++;
 8007244:	7afb      	ldrb	r3, [r7, #11]
 8007246:	3301      	adds	r3, #1
 8007248:	72fb      	strb	r3, [r7, #11]
          break;
 800724a:	e007      	b.n	800725c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa41 	bl	80076d6 <USBD_CtlError>
          err++;
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	3301      	adds	r3, #1
 8007258:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800725a:	bf00      	nop
      }
      break;
 800725c:	e037      	b.n	80072ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	7c1b      	ldrb	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800726c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726e:	f107 0208 	add.w	r2, r7, #8
 8007272:	4610      	mov	r0, r2
 8007274:	4798      	blx	r3
 8007276:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007278:	e029      	b.n	80072ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa2a 	bl	80076d6 <USBD_CtlError>
        err++;
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	3301      	adds	r3, #1
 8007286:	72fb      	strb	r3, [r7, #11]
      break;
 8007288:	e021      	b.n	80072ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7c1b      	ldrb	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10d      	bne.n	80072ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729a:	f107 0208 	add.w	r2, r7, #8
 800729e:	4610      	mov	r0, r2
 80072a0:	4798      	blx	r3
 80072a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3301      	adds	r3, #1
 80072a8:	2207      	movs	r2, #7
 80072aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072ac:	e00f      	b.n	80072ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa10 	bl	80076d6 <USBD_CtlError>
        err++;
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	3301      	adds	r3, #1
 80072ba:	72fb      	strb	r3, [r7, #11]
      break;
 80072bc:	e007      	b.n	80072ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fa08 	bl	80076d6 <USBD_CtlError>
      err++;
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	3301      	adds	r3, #1
 80072ca:	72fb      	strb	r3, [r7, #11]
      break;
 80072cc:	bf00      	nop
  }

  if (err != 0U)
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11e      	bne.n	8007312 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	88db      	ldrh	r3, [r3, #6]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d016      	beq.n	800730a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072dc:	893b      	ldrh	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00e      	beq.n	8007300 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	88da      	ldrh	r2, [r3, #6]
 80072e6:	893b      	ldrh	r3, [r7, #8]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bf28      	it	cs
 80072ec:	4613      	movcs	r3, r2
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072f2:	893b      	ldrh	r3, [r7, #8]
 80072f4:	461a      	mov	r2, r3
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fa69 	bl	80077d0 <USBD_CtlSendData>
 80072fe:	e009      	b.n	8007314 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9e7 	bl	80076d6 <USBD_CtlError>
 8007308:	e004      	b.n	8007314 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fac1 	bl	8007892 <USBD_CtlSendStatus>
 8007310:	e000      	b.n	8007314 <USBD_GetDescriptor+0x2cc>
    return;
 8007312:	bf00      	nop
  }
}
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop

0800731c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	889b      	ldrh	r3, [r3, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d131      	bne.n	8007392 <USBD_SetAddress+0x76>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	88db      	ldrh	r3, [r3, #6]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d12d      	bne.n	8007392 <USBD_SetAddress+0x76>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	885b      	ldrh	r3, [r3, #2]
 800733a:	2b7f      	cmp	r3, #127	@ 0x7f
 800733c:	d829      	bhi.n	8007392 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	885b      	ldrh	r3, [r3, #2]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007348:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b03      	cmp	r3, #3
 8007354:	d104      	bne.n	8007360 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f9bc 	bl	80076d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735e:	e01d      	b.n	800739c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7bfa      	ldrb	r2, [r7, #15]
 8007364:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 ff23 	bl	80081b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa8d 	bl	8007892 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d004      	beq.n	8007388 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2202      	movs	r2, #2
 8007382:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007386:	e009      	b.n	800739c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007390:	e004      	b.n	800739c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f99e 	bl	80076d6 <USBD_CtlError>
  }
}
 800739a:	bf00      	nop
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	885b      	ldrh	r3, [r3, #2]
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	4b4e      	ldr	r3, [pc, #312]	@ (80074f4 <USBD_SetConfig+0x150>)
 80073ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073bc:	4b4d      	ldr	r3, [pc, #308]	@ (80074f4 <USBD_SetConfig+0x150>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d905      	bls.n	80073d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f985 	bl	80076d6 <USBD_CtlError>
    return USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e08c      	b.n	80074ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d002      	beq.n	80073e2 <USBD_SetConfig+0x3e>
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d029      	beq.n	8007434 <USBD_SetConfig+0x90>
 80073e0:	e075      	b.n	80074ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073e2:	4b44      	ldr	r3, [pc, #272]	@ (80074f4 <USBD_SetConfig+0x150>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d020      	beq.n	800742c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073ea:	4b42      	ldr	r3, [pc, #264]	@ (80074f4 <USBD_SetConfig+0x150>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073f4:	4b3f      	ldr	r3, [pc, #252]	@ (80074f4 <USBD_SetConfig+0x150>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fe ffcd 	bl	800639a <USBD_SetClassConfig>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f962 	bl	80076d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2202      	movs	r2, #2
 8007416:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800741a:	e065      	b.n	80074e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa38 	bl	8007892 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2203      	movs	r2, #3
 8007426:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800742a:	e05d      	b.n	80074e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa30 	bl	8007892 <USBD_CtlSendStatus>
      break;
 8007432:	e059      	b.n	80074e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007434:	4b2f      	ldr	r3, [pc, #188]	@ (80074f4 <USBD_SetConfig+0x150>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d112      	bne.n	8007462 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007444:	4b2b      	ldr	r3, [pc, #172]	@ (80074f4 <USBD_SetConfig+0x150>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800744e:	4b29      	ldr	r3, [pc, #164]	@ (80074f4 <USBD_SetConfig+0x150>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7fe ffbc 	bl	80063d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa19 	bl	8007892 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007460:	e042      	b.n	80074e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007462:	4b24      	ldr	r3, [pc, #144]	@ (80074f4 <USBD_SetConfig+0x150>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	d02a      	beq.n	80074c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7fe ffaa 	bl	80063d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800747e:	4b1d      	ldr	r3, [pc, #116]	@ (80074f4 <USBD_SetConfig+0x150>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007488:	4b1a      	ldr	r3, [pc, #104]	@ (80074f4 <USBD_SetConfig+0x150>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fe ff83 	bl	800639a <USBD_SetClassConfig>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00f      	beq.n	80074be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f918 	bl	80076d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fe ff8f 	bl	80063d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80074bc:	e014      	b.n	80074e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f9e7 	bl	8007892 <USBD_CtlSendStatus>
      break;
 80074c4:	e010      	b.n	80074e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f9e3 	bl	8007892 <USBD_CtlSendStatus>
      break;
 80074cc:	e00c      	b.n	80074e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f900 	bl	80076d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074d6:	4b07      	ldr	r3, [pc, #28]	@ (80074f4 <USBD_SetConfig+0x150>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fe ff78 	bl	80063d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074e2:	2303      	movs	r3, #3
 80074e4:	73fb      	strb	r3, [r7, #15]
      break;
 80074e6:	bf00      	nop
  }

  return ret;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	2000028c 	.word	0x2000028c

080074f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	88db      	ldrh	r3, [r3, #6]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d004      	beq.n	8007514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8e2 	bl	80076d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007512:	e023      	b.n	800755c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	dc02      	bgt.n	8007526 <USBD_GetConfig+0x2e>
 8007520:	2b00      	cmp	r3, #0
 8007522:	dc03      	bgt.n	800752c <USBD_GetConfig+0x34>
 8007524:	e015      	b.n	8007552 <USBD_GetConfig+0x5a>
 8007526:	2b03      	cmp	r3, #3
 8007528:	d00b      	beq.n	8007542 <USBD_GetConfig+0x4a>
 800752a:	e012      	b.n	8007552 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3308      	adds	r3, #8
 8007536:	2201      	movs	r2, #1
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f948 	bl	80077d0 <USBD_CtlSendData>
        break;
 8007540:	e00c      	b.n	800755c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3304      	adds	r3, #4
 8007546:	2201      	movs	r2, #1
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f940 	bl	80077d0 <USBD_CtlSendData>
        break;
 8007550:	e004      	b.n	800755c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f8be 	bl	80076d6 <USBD_CtlError>
        break;
 800755a:	bf00      	nop
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007574:	b2db      	uxtb	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	2b02      	cmp	r3, #2
 800757a:	d81e      	bhi.n	80075ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	88db      	ldrh	r3, [r3, #6]
 8007580:	2b02      	cmp	r3, #2
 8007582:	d004      	beq.n	800758e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8a5 	bl	80076d6 <USBD_CtlError>
        break;
 800758c:	e01a      	b.n	80075c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f043 0202 	orr.w	r2, r3, #2
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	330c      	adds	r3, #12
 80075ae:	2202      	movs	r2, #2
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f90c 	bl	80077d0 <USBD_CtlSendData>
      break;
 80075b8:	e004      	b.n	80075c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f88a 	bl	80076d6 <USBD_CtlError>
      break;
 80075c2:	bf00      	nop
  }
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	885b      	ldrh	r3, [r3, #2]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d107      	bne.n	80075ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f953 	bl	8007892 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075ec:	e013      	b.n	8007616 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	885b      	ldrh	r3, [r3, #2]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d10b      	bne.n	800760e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	889b      	ldrh	r3, [r3, #4]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f943 	bl	8007892 <USBD_CtlSendStatus>
}
 800760c:	e003      	b.n	8007616 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f860 	bl	80076d6 <USBD_CtlError>
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800762e:	b2db      	uxtb	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	2b02      	cmp	r3, #2
 8007634:	d80b      	bhi.n	800764e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	885b      	ldrh	r3, [r3, #2]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d10c      	bne.n	8007658 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f923 	bl	8007892 <USBD_CtlSendStatus>
      }
      break;
 800764c:	e004      	b.n	8007658 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f840 	bl	80076d6 <USBD_CtlError>
      break;
 8007656:	e000      	b.n	800765a <USBD_ClrFeature+0x3c>
      break;
 8007658:	bf00      	nop
  }
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3301      	adds	r3, #1
 800767c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	781a      	ldrb	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fa3d 	bl	8006b0c <SWAPBYTE>
 8007692:	4603      	mov	r3, r0
 8007694:	461a      	mov	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7ff fa30 	bl	8006b0c <SWAPBYTE>
 80076ac:	4603      	mov	r3, r0
 80076ae:	461a      	mov	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3301      	adds	r3, #1
 80076be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff fa23 	bl	8006b0c <SWAPBYTE>
 80076c6:	4603      	mov	r3, r0
 80076c8:	461a      	mov	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	80da      	strh	r2, [r3, #6]
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076e0:	2180      	movs	r1, #128	@ 0x80
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fcfe 	bl	80080e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076e8:	2100      	movs	r1, #0
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fcfa 	bl	80080e4 <USBD_LL_StallEP>
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d042      	beq.n	8007794 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007712:	6938      	ldr	r0, [r7, #16]
 8007714:	f000 f842 	bl	800779c <USBD_GetLen>
 8007718:	4603      	mov	r3, r0
 800771a:	3301      	adds	r3, #1
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007722:	d808      	bhi.n	8007736 <USBD_GetString+0x3e>
 8007724:	6938      	ldr	r0, [r7, #16]
 8007726:	f000 f839 	bl	800779c <USBD_GetLen>
 800772a:	4603      	mov	r3, r0
 800772c:	3301      	adds	r3, #1
 800772e:	b29b      	uxth	r3, r3
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	e001      	b.n	800773a <USBD_GetString+0x42>
 8007736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	4413      	add	r3, r2
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7812      	ldrb	r2, [r2, #0]
 8007748:	701a      	strb	r2, [r3, #0]
  idx++;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	3301      	adds	r3, #1
 800774e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	4413      	add	r3, r2
 8007756:	2203      	movs	r2, #3
 8007758:	701a      	strb	r2, [r3, #0]
  idx++;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	3301      	adds	r3, #1
 800775e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007760:	e013      	b.n	800778a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	4413      	add	r3, r2
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	7812      	ldrb	r2, [r2, #0]
 800776c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	3301      	adds	r3, #1
 8007772:	613b      	str	r3, [r7, #16]
    idx++;
 8007774:	7dfb      	ldrb	r3, [r7, #23]
 8007776:	3301      	adds	r3, #1
 8007778:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	4413      	add	r3, r2
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
    idx++;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	3301      	adds	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e7      	bne.n	8007762 <USBD_GetString+0x6a>
 8007792:	e000      	b.n	8007796 <USBD_GetString+0x9e>
    return;
 8007794:	bf00      	nop
  }
}
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80077ac:	e005      	b.n	80077ba <USBD_GetLen+0x1e>
  {
    len++;
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	3301      	adds	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	3301      	adds	r3, #1
 80077b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f5      	bne.n	80077ae <USBD_GetLen+0x12>
  }

  return len;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2202      	movs	r2, #2
 80077e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	2100      	movs	r1, #0
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fcfa 	bl	80081f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	2100      	movs	r1, #0
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fce9 	bl	80081f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2203      	movs	r2, #3
 800783e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	2100      	movs	r1, #0
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fce9 	bl	8008238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	2100      	movs	r1, #0
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 fcd8 	bl	8008238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2204      	movs	r2, #4
 800789e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078a2:	2300      	movs	r3, #0
 80078a4:	2200      	movs	r2, #0
 80078a6:	2100      	movs	r1, #0
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fca4 	bl	80081f6 <USBD_LL_Transmit>

  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2205      	movs	r2, #5
 80078c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078c8:	2300      	movs	r3, #0
 80078ca:	2200      	movs	r2, #0
 80078cc:	2100      	movs	r1, #0
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fcb2 	bl	8008238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078e4:	2200      	movs	r2, #0
 80078e6:	4916      	ldr	r1, [pc, #88]	@ (8007940 <MX_USB_DEVICE_Init+0x60>)
 80078e8:	4816      	ldr	r0, [pc, #88]	@ (8007944 <MX_USB_DEVICE_Init+0x64>)
 80078ea:	f7fe fcd9 	bl	80062a0 <USBD_Init>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 80078f4:	2149      	movs	r1, #73	@ 0x49
 80078f6:	4814      	ldr	r0, [pc, #80]	@ (8007948 <MX_USB_DEVICE_Init+0x68>)
 80078f8:	f7f8 ffdb 	bl	80008b2 <_Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078fc:	4913      	ldr	r1, [pc, #76]	@ (800794c <MX_USB_DEVICE_Init+0x6c>)
 80078fe:	4811      	ldr	r0, [pc, #68]	@ (8007944 <MX_USB_DEVICE_Init+0x64>)
 8007900:	f7fe fcfe 	bl	8006300 <USBD_RegisterClass>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
 800790a:	214d      	movs	r1, #77	@ 0x4d
 800790c:	480e      	ldr	r0, [pc, #56]	@ (8007948 <MX_USB_DEVICE_Init+0x68>)
 800790e:	f7f8 ffd0 	bl	80008b2 <_Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007912:	490f      	ldr	r1, [pc, #60]	@ (8007950 <MX_USB_DEVICE_Init+0x70>)
 8007914:	480b      	ldr	r0, [pc, #44]	@ (8007944 <MX_USB_DEVICE_Init+0x64>)
 8007916:	f7fe fbf3 	bl	8006100 <USBD_CDC_RegisterInterface>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <MX_USB_DEVICE_Init+0x48>
  {
    Error_Handler();
 8007920:	2151      	movs	r1, #81	@ 0x51
 8007922:	4809      	ldr	r0, [pc, #36]	@ (8007948 <MX_USB_DEVICE_Init+0x68>)
 8007924:	f7f8 ffc5 	bl	80008b2 <_Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007928:	4806      	ldr	r0, [pc, #24]	@ (8007944 <MX_USB_DEVICE_Init+0x64>)
 800792a:	f7fe fd1f 	bl	800636c <USBD_Start>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
 8007934:	2155      	movs	r1, #85	@ 0x55
 8007936:	4804      	ldr	r0, [pc, #16]	@ (8007948 <MX_USB_DEVICE_Init+0x68>)
 8007938:	f7f8 ffbb 	bl	80008b2 <_Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800793c:	bf00      	nop
 800793e:	bd80      	pop	{r7, pc}
 8007940:	200000ac 	.word	0x200000ac
 8007944:	20000290 	.word	0x20000290
 8007948:	0800c0c0 	.word	0x0800c0c0
 800794c:	20000018 	.word	0x20000018
 8007950:	20000098 	.word	0x20000098

08007954 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007958:	2200      	movs	r2, #0
 800795a:	4905      	ldr	r1, [pc, #20]	@ (8007970 <CDC_Init_FS+0x1c>)
 800795c:	4805      	ldr	r0, [pc, #20]	@ (8007974 <CDC_Init_FS+0x20>)
 800795e:	f7fe fbe9 	bl	8006134 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007962:	4905      	ldr	r1, [pc, #20]	@ (8007978 <CDC_Init_FS+0x24>)
 8007964:	4803      	ldr	r0, [pc, #12]	@ (8007974 <CDC_Init_FS+0x20>)
 8007966:	f7fe fc07 	bl	8006178 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800796a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800796c:	4618      	mov	r0, r3
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000d6c 	.word	0x20000d6c
 8007974:	20000290 	.word	0x20000290
 8007978:	2000056c 	.word	0x2000056c

0800797c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007980:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007982:	4618      	mov	r0, r3
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
 8007998:	4613      	mov	r3, r2
 800799a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	2b23      	cmp	r3, #35	@ 0x23
 80079a0:	d84a      	bhi.n	8007a38 <CDC_Control_FS+0xac>
 80079a2:	a201      	add	r2, pc, #4	@ (adr r2, 80079a8 <CDC_Control_FS+0x1c>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	08007a39 	.word	0x08007a39
 80079ac:	08007a39 	.word	0x08007a39
 80079b0:	08007a39 	.word	0x08007a39
 80079b4:	08007a39 	.word	0x08007a39
 80079b8:	08007a39 	.word	0x08007a39
 80079bc:	08007a39 	.word	0x08007a39
 80079c0:	08007a39 	.word	0x08007a39
 80079c4:	08007a39 	.word	0x08007a39
 80079c8:	08007a39 	.word	0x08007a39
 80079cc:	08007a39 	.word	0x08007a39
 80079d0:	08007a39 	.word	0x08007a39
 80079d4:	08007a39 	.word	0x08007a39
 80079d8:	08007a39 	.word	0x08007a39
 80079dc:	08007a39 	.word	0x08007a39
 80079e0:	08007a39 	.word	0x08007a39
 80079e4:	08007a39 	.word	0x08007a39
 80079e8:	08007a39 	.word	0x08007a39
 80079ec:	08007a39 	.word	0x08007a39
 80079f0:	08007a39 	.word	0x08007a39
 80079f4:	08007a39 	.word	0x08007a39
 80079f8:	08007a39 	.word	0x08007a39
 80079fc:	08007a39 	.word	0x08007a39
 8007a00:	08007a39 	.word	0x08007a39
 8007a04:	08007a39 	.word	0x08007a39
 8007a08:	08007a39 	.word	0x08007a39
 8007a0c:	08007a39 	.word	0x08007a39
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a39 	.word	0x08007a39
 8007a18:	08007a39 	.word	0x08007a39
 8007a1c:	08007a39 	.word	0x08007a39
 8007a20:	08007a39 	.word	0x08007a39
 8007a24:	08007a39 	.word	0x08007a39
 8007a28:	08007a39 	.word	0x08007a39
 8007a2c:	08007a39 	.word	0x08007a39
 8007a30:	08007a39 	.word	0x08007a39
 8007a34:	08007a39 	.word	0x08007a39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a38:	bf00      	nop
  }

  return (USBD_OK);
 8007a3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	4805      	ldr	r0, [pc, #20]	@ (8007a6c <CDC_Receive_FS+0x24>)
 8007a56:	f7fe fb8f 	bl	8006178 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a5a:	4804      	ldr	r0, [pc, #16]	@ (8007a6c <CDC_Receive_FS+0x24>)
 8007a5c:	f7fe fbea 	bl	8006234 <USBD_CDC_ReceivePacket>
  //CDC_Transmit_FS(Buf, *Len); // ничего не получилось
  return (USBD_OK);
 8007a60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000290 	.word	0x20000290

08007a70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a80:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab8 <CDC_Transmit_FS+0x48>)
 8007a82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e00b      	b.n	8007aae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a96:	887b      	ldrh	r3, [r7, #2]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	4806      	ldr	r0, [pc, #24]	@ (8007ab8 <CDC_Transmit_FS+0x48>)
 8007a9e:	f7fe fb49 	bl	8006134 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007aa2:	4805      	ldr	r0, [pc, #20]	@ (8007ab8 <CDC_Transmit_FS+0x48>)
 8007aa4:	f7fe fb86 	bl	80061b4 <USBD_CDC_TransmitPacket>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000290 	.word	0x20000290

08007abc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2212      	movs	r2, #18
 8007af0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007af2:	4b03      	ldr	r3, [pc, #12]	@ (8007b00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	200000c8 	.word	0x200000c8

08007b04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	6039      	str	r1, [r7, #0]
 8007b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2204      	movs	r2, #4
 8007b14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b16:	4b03      	ldr	r3, [pc, #12]	@ (8007b24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	200000dc 	.word	0x200000dc

08007b28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b34:	79fb      	ldrb	r3, [r7, #7]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d105      	bne.n	8007b46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	4907      	ldr	r1, [pc, #28]	@ (8007b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b3e:	4808      	ldr	r0, [pc, #32]	@ (8007b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b40:	f7ff fdda 	bl	80076f8 <USBD_GetString>
 8007b44:	e004      	b.n	8007b50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4904      	ldr	r1, [pc, #16]	@ (8007b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b4a:	4805      	ldr	r0, [pc, #20]	@ (8007b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b4c:	f7ff fdd4 	bl	80076f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b50:	4b02      	ldr	r3, [pc, #8]	@ (8007b5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	2000156c 	.word	0x2000156c
 8007b60:	0800c0e0 	.word	0x0800c0e0

08007b64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	4904      	ldr	r1, [pc, #16]	@ (8007b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b74:	4804      	ldr	r0, [pc, #16]	@ (8007b88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b76:	f7ff fdbf 	bl	80076f8 <USBD_GetString>
  return USBD_StrDesc;
 8007b7a:	4b02      	ldr	r3, [pc, #8]	@ (8007b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	2000156c 	.word	0x2000156c
 8007b88:	0800c0f8 	.word	0x0800c0f8

08007b8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	221a      	movs	r2, #26
 8007b9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b9e:	f000 f843 	bl	8007c28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ba2:	4b02      	ldr	r3, [pc, #8]	@ (8007bac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	200000e0 	.word	0x200000e0

08007bb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4907      	ldr	r1, [pc, #28]	@ (8007be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bc6:	4808      	ldr	r0, [pc, #32]	@ (8007be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bc8:	f7ff fd96 	bl	80076f8 <USBD_GetString>
 8007bcc:	e004      	b.n	8007bd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4904      	ldr	r1, [pc, #16]	@ (8007be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bd2:	4805      	ldr	r0, [pc, #20]	@ (8007be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bd4:	f7ff fd90 	bl	80076f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd8:	4b02      	ldr	r3, [pc, #8]	@ (8007be4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	2000156c 	.word	0x2000156c
 8007be8:	0800c10c 	.word	0x0800c10c

08007bec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d105      	bne.n	8007c0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4907      	ldr	r1, [pc, #28]	@ (8007c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c02:	4808      	ldr	r0, [pc, #32]	@ (8007c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c04:	f7ff fd78 	bl	80076f8 <USBD_GetString>
 8007c08:	e004      	b.n	8007c14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	4904      	ldr	r1, [pc, #16]	@ (8007c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c0e:	4805      	ldr	r0, [pc, #20]	@ (8007c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c10:	f7ff fd72 	bl	80076f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c14:	4b02      	ldr	r3, [pc, #8]	@ (8007c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	2000156c 	.word	0x2000156c
 8007c24:	0800c118 	.word	0x0800c118

08007c28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c6c <Get_SerialNum+0x44>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c34:	4b0e      	ldr	r3, [pc, #56]	@ (8007c70 <Get_SerialNum+0x48>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c74 <Get_SerialNum+0x4c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4413      	add	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c4e:	2208      	movs	r2, #8
 8007c50:	4909      	ldr	r1, [pc, #36]	@ (8007c78 <Get_SerialNum+0x50>)
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 f814 	bl	8007c80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c58:	2204      	movs	r2, #4
 8007c5a:	4908      	ldr	r1, [pc, #32]	@ (8007c7c <Get_SerialNum+0x54>)
 8007c5c:	68b8      	ldr	r0, [r7, #8]
 8007c5e:	f000 f80f 	bl	8007c80 <IntToUnicode>
  }
}
 8007c62:	bf00      	nop
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	1fff7a10 	.word	0x1fff7a10
 8007c70:	1fff7a14 	.word	0x1fff7a14
 8007c74:	1fff7a18 	.word	0x1fff7a18
 8007c78:	200000e2 	.word	0x200000e2
 8007c7c:	200000f2 	.word	0x200000f2

08007c80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c92:	2300      	movs	r3, #0
 8007c94:	75fb      	strb	r3, [r7, #23]
 8007c96:	e027      	b.n	8007ce8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	0f1b      	lsrs	r3, r3, #28
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d80b      	bhi.n	8007cb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	0f1b      	lsrs	r3, r3, #28
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	4619      	mov	r1, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	440b      	add	r3, r1
 8007cb0:	3230      	adds	r2, #48	@ 0x30
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	e00a      	b.n	8007cce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	0f1b      	lsrs	r3, r3, #28
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	440b      	add	r3, r1
 8007cc8:	3237      	adds	r2, #55	@ 0x37
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	3301      	adds	r3, #1
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	4413      	add	r3, r2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	75fb      	strb	r3, [r7, #23]
 8007ce8:	7dfa      	ldrb	r2, [r7, #23]
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d3d3      	bcc.n	8007c98 <IntToUnicode+0x18>
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
	...

08007d00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	@ 0x28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d08:	f107 0314 	add.w	r3, r7, #20
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	605a      	str	r2, [r3, #4]
 8007d12:	609a      	str	r2, [r3, #8]
 8007d14:	60da      	str	r2, [r3, #12]
 8007d16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d20:	d13a      	bne.n	8007d98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d22:	2300      	movs	r3, #0
 8007d24:	613b      	str	r3, [r7, #16]
 8007d26:	4b1e      	ldr	r3, [pc, #120]	@ (8007da0 <HAL_PCD_MspInit+0xa0>)
 8007d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8007da0 <HAL_PCD_MspInit+0xa0>)
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d32:	4b1b      	ldr	r3, [pc, #108]	@ (8007da0 <HAL_PCD_MspInit+0xa0>)
 8007d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	613b      	str	r3, [r7, #16]
 8007d3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007d3e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d44:	2302      	movs	r3, #2
 8007d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d50:	230a      	movs	r3, #10
 8007d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d54:	f107 0314 	add.w	r3, r7, #20
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4812      	ldr	r0, [pc, #72]	@ (8007da4 <HAL_PCD_MspInit+0xa4>)
 8007d5c:	f7f9 fa6e 	bl	800123c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d60:	4b0f      	ldr	r3, [pc, #60]	@ (8007da0 <HAL_PCD_MspInit+0xa0>)
 8007d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d64:	4a0e      	ldr	r2, [pc, #56]	@ (8007da0 <HAL_PCD_MspInit+0xa0>)
 8007d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d6a:	6353      	str	r3, [r2, #52]	@ 0x34
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	4b0b      	ldr	r3, [pc, #44]	@ (8007da0 <HAL_PCD_MspInit+0xa0>)
 8007d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d74:	4a0a      	ldr	r2, [pc, #40]	@ (8007da0 <HAL_PCD_MspInit+0xa0>)
 8007d76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d7c:	4b08      	ldr	r3, [pc, #32]	@ (8007da0 <HAL_PCD_MspInit+0xa0>)
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	2043      	movs	r0, #67	@ 0x43
 8007d8e:	f7f9 fa02 	bl	8001196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d92:	2043      	movs	r0, #67	@ 0x43
 8007d94:	f7f9 fa1b 	bl	80011ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d98:	bf00      	nop
 8007d9a:	3728      	adds	r7, #40	@ 0x28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40023800 	.word	0x40023800
 8007da4:	40020000 	.word	0x40020000

08007da8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	f7fe fb21 	bl	8006406 <USBD_LL_SetupStage>
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	4619      	mov	r1, r3
 8007df6:	f7fe fb5b 	bl	80064b0 <USBD_LL_DataOutStage>
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007e14:	78fa      	ldrb	r2, [r7, #3]
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	440b      	add	r3, r1
 8007e22:	3320      	adds	r3, #32
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f7fe fbfd 	bl	8006628 <USBD_LL_DataInStage>
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fd41 	bl	80068cc <USBD_LL_SOF>
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	79db      	ldrb	r3, [r3, #7]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d003      	beq.n	8007e70 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007e68:	21c8      	movs	r1, #200	@ 0xc8
 8007e6a:	480a      	ldr	r0, [pc, #40]	@ (8007e94 <HAL_PCD_ResetCallback+0x40>)
 8007e6c:	f7f8 fd21 	bl	80008b2 <_Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e76:	7bfa      	ldrb	r2, [r7, #15]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fce2 	bl	8006844 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fc89 	bl	800679e <USBD_LL_Reset>
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	0800c128 	.word	0x0800c128

08007e98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe fcdc 	bl	8006864 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ebe:	f043 0301 	orr.w	r3, r3, #1
 8007ec2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7adb      	ldrb	r3, [r3, #11]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ecc:	4b04      	ldr	r3, [pc, #16]	@ (8007ee0 <HAL_PCD_SuspendCallback+0x48>)
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	4a03      	ldr	r2, [pc, #12]	@ (8007ee0 <HAL_PCD_SuspendCallback+0x48>)
 8007ed2:	f043 0306 	orr.w	r3, r3, #6
 8007ed6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	e000ed00 	.word	0xe000ed00

08007ee4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fcd2 	bl	800689c <USBD_LL_Resume>
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f12:	78fa      	ldrb	r2, [r7, #3]
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fd2a 	bl	8006970 <USBD_LL_IsoOUTIncomplete>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fce6 	bl	800690c <USBD_LL_IsoINIncomplete>
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fd3c 	bl	80069d4 <USBD_LL_DevConnected>
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fd39 	bl	80069ea <USBD_LL_DevDisconnected>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d13f      	bne.n	8008010 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f90:	4a22      	ldr	r2, [pc, #136]	@ (800801c <USBD_LL_Init+0x9c>)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a20      	ldr	r2, [pc, #128]	@ (800801c <USBD_LL_Init+0x9c>)
 8007f9c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fa2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007fa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800801c <USBD_LL_Init+0x9c>)
 8007faa:	2204      	movs	r2, #4
 8007fac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007fae:	4b1b      	ldr	r3, [pc, #108]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fb4:	4b19      	ldr	r3, [pc, #100]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fba:	4b18      	ldr	r3, [pc, #96]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fc0:	4b16      	ldr	r3, [pc, #88]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007fc6:	4b15      	ldr	r3, [pc, #84]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fcc:	4b13      	ldr	r3, [pc, #76]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007fd2:	4b12      	ldr	r3, [pc, #72]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fd8:	4b10      	ldr	r3, [pc, #64]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fde:	480f      	ldr	r0, [pc, #60]	@ (800801c <USBD_LL_Init+0x9c>)
 8007fe0:	f7f9 fae1 	bl	80015a6 <HAL_PCD_Init>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d004      	beq.n	8007ff4 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8007fea:	f240 1153 	movw	r1, #339	@ 0x153
 8007fee:	480c      	ldr	r0, [pc, #48]	@ (8008020 <USBD_LL_Init+0xa0>)
 8007ff0:	f7f8 fc5f 	bl	80008b2 <_Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ff4:	2180      	movs	r1, #128	@ 0x80
 8007ff6:	4809      	ldr	r0, [pc, #36]	@ (800801c <USBD_LL_Init+0x9c>)
 8007ff8:	f7fa fd0b 	bl	8002a12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ffc:	2240      	movs	r2, #64	@ 0x40
 8007ffe:	2100      	movs	r1, #0
 8008000:	4806      	ldr	r0, [pc, #24]	@ (800801c <USBD_LL_Init+0x9c>)
 8008002:	f7fa fcbf 	bl	8002984 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008006:	2280      	movs	r2, #128	@ 0x80
 8008008:	2101      	movs	r1, #1
 800800a:	4804      	ldr	r0, [pc, #16]	@ (800801c <USBD_LL_Init+0x9c>)
 800800c:	f7fa fcba 	bl	8002984 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	2000176c 	.word	0x2000176c
 8008020:	0800c128 	.word	0x0800c128

08008024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800803a:	4618      	mov	r0, r3
 800803c:	f7f9 fbc2 	bl	80017c4 <HAL_PCD_Start>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f942 	bl	80082d0 <USBD_Get_USB_Status>
 800804c:	4603      	mov	r3, r0
 800804e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008050:	7bbb      	ldrb	r3, [r7, #14]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	4608      	mov	r0, r1
 8008064:	4611      	mov	r1, r2
 8008066:	461a      	mov	r2, r3
 8008068:	4603      	mov	r3, r0
 800806a:	70fb      	strb	r3, [r7, #3]
 800806c:	460b      	mov	r3, r1
 800806e:	70bb      	strb	r3, [r7, #2]
 8008070:	4613      	mov	r3, r2
 8008072:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008082:	78bb      	ldrb	r3, [r7, #2]
 8008084:	883a      	ldrh	r2, [r7, #0]
 8008086:	78f9      	ldrb	r1, [r7, #3]
 8008088:	f7fa f896 	bl	80021b8 <HAL_PCD_EP_Open>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f91c 	bl	80082d0 <USBD_Get_USB_Status>
 8008098:	4603      	mov	r3, r0
 800809a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809c:	7bbb      	ldrb	r3, [r7, #14]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080c0:	78fa      	ldrb	r2, [r7, #3]
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fa f8e1 	bl	800228c <HAL_PCD_EP_Close>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 f8fd 	bl	80082d0 <USBD_Get_USB_Status>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080da:	7bbb      	ldrb	r3, [r7, #14]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f7fa f999 	bl	800243a <HAL_PCD_EP_SetStall>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f8de 	bl	80082d0 <USBD_Get_USB_Status>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008118:	7bbb      	ldrb	r3, [r7, #14]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	4611      	mov	r1, r2
 8008140:	4618      	mov	r0, r3
 8008142:	f7fa f9dd 	bl	8002500 <HAL_PCD_EP_ClrStall>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f8bf 	bl	80082d0 <USBD_Get_USB_Status>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008156:	7bbb      	ldrb	r3, [r7, #14]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008172:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008178:	2b00      	cmp	r3, #0
 800817a:	da0b      	bge.n	8008194 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008182:	68f9      	ldr	r1, [r7, #12]
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	3316      	adds	r3, #22
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	e00b      	b.n	80081ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	4613      	mov	r3, r2
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80081aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7f9 ffca 	bl	8002170 <HAL_PCD_SetAddress>
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f874 	bl	80082d0 <USBD_Get_USB_Status>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b086      	sub	sp, #24
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
 8008202:	460b      	mov	r3, r1
 8008204:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008214:	7af9      	ldrb	r1, [r7, #11]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	f7fa f8d4 	bl	80023c6 <HAL_PCD_EP_Transmit>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f853 	bl	80082d0 <USBD_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800822e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	460b      	mov	r3, r1
 8008246:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008256:	7af9      	ldrb	r1, [r7, #11]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	f7fa f860 	bl	8002320 <HAL_PCD_EP_Receive>
 8008260:	4603      	mov	r3, r0
 8008262:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f832 	bl	80082d0 <USBD_Get_USB_Status>
 800826c:	4603      	mov	r3, r0
 800826e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008270:	7dbb      	ldrb	r3, [r7, #22]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800828c:	78fa      	ldrb	r2, [r7, #3]
 800828e:	4611      	mov	r1, r2
 8008290:	4618      	mov	r0, r3
 8008292:	f7fa f880 	bl	8002396 <HAL_PCD_EP_GetRxCount>
 8008296:	4603      	mov	r3, r0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082a8:	4b03      	ldr	r3, [pc, #12]	@ (80082b8 <USBD_static_malloc+0x18>)
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	20001c50 	.word	0x20001c50

080082bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]

}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d817      	bhi.n	8008314 <USBD_Get_USB_Status+0x44>
 80082e4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <USBD_Get_USB_Status+0x1c>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	080082fd 	.word	0x080082fd
 80082f0:	08008303 	.word	0x08008303
 80082f4:	08008309 	.word	0x08008309
 80082f8:	0800830f 	.word	0x0800830f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008300:	e00b      	b.n	800831a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008302:	2303      	movs	r3, #3
 8008304:	73fb      	strb	r3, [r7, #15]
    break;
 8008306:	e008      	b.n	800831a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008308:	2301      	movs	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
    break;
 800830c:	e005      	b.n	800831a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800830e:	2303      	movs	r3, #3
 8008310:	73fb      	strb	r3, [r7, #15]
    break;
 8008312:	e002      	b.n	800831a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008314:	2303      	movs	r3, #3
 8008316:	73fb      	strb	r3, [r7, #15]
    break;
 8008318:	bf00      	nop
  }
  return usb_status;
 800831a:	7bfb      	ldrb	r3, [r7, #15]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
#if USE_SPI_4W
    printf("USE 4wire spi\r\n");
 800832c:	4802      	ldr	r0, [pc, #8]	@ (8008338 <System_Init+0x10>)
 800832e:	f003 f893 	bl	800b458 <puts>
#elif USE_IIC
    printf("USE i2c\r\n");
#endif
    return 0;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	bd80      	pop	{r7, pc}
 8008338:	0800c14c 	.word	0x0800c14c

0800833c <PWM_SetValue>:
{

}

void PWM_SetValue(uint16_t value)
{		
 800833c:	b580      	push	{r7, lr}
 800833e:	b08a      	sub	sp, #40	@ 0x28
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	80fb      	strh	r3, [r7, #6]
////	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	
    TIM_OC_InitTypeDef sConfigOC;
	
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008346:	2360      	movs	r3, #96	@ 0x60
 8008348:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008352:	2300      	movs	r3, #0
 8008354:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8008356:	f107 030c 	add.w	r3, r7, #12
 800835a:	2204      	movs	r2, #4
 800835c:	4619      	mov	r1, r3
 800835e:	4805      	ldr	r0, [pc, #20]	@ (8008374 <PWM_SetValue+0x38>)
 8008360:	f7fb f954 	bl	800360c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  
 8008364:	2104      	movs	r1, #4
 8008366:	4803      	ldr	r0, [pc, #12]	@ (8008374 <PWM_SetValue+0x38>)
 8008368:	f7fb f8a0 	bl	80034ac <HAL_TIM_PWM_Start>
}
 800836c:	bf00      	nop
 800836e:	3728      	adds	r7, #40	@ 0x28
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	200001f8 	.word	0x200001f8

08008378 <SPI4W_Write_Byte>:
note:
	SPI4W_Write_Byte(value) : 
		Register hardware SPI
*********************************************/	
uint8_t SPI4W_Write_Byte(uint8_t value)                                    
{   
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	71fb      	strb	r3, [r7, #7]
    __HAL_SPI_ENABLE(&hspi1);
 8008382:	4b17      	ldr	r3, [pc, #92]	@ (80083e0 <SPI4W_Write_Byte+0x68>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	4b15      	ldr	r3, [pc, #84]	@ (80083e0 <SPI4W_Write_Byte+0x68>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008390:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 8008392:	4b14      	ldr	r3, [pc, #80]	@ (80083e4 <SPI4W_Write_Byte+0x6c>)
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	4a13      	ldr	r2, [pc, #76]	@ (80083e4 <SPI4W_Write_Byte+0x6c>)
 8008398:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800839c:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 800839e:	bf00      	nop
 80083a0:	4b10      	ldr	r3, [pc, #64]	@ (80083e4 <SPI4W_Write_Byte+0x6c>)
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0f9      	beq.n	80083a0 <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 80083ac:	4a0e      	ldr	r2, [pc, #56]	@ (80083e8 <SPI4W_Write_Byte+0x70>)
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 80083b2:	bf00      	nop
 80083b4:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <SPI4W_Write_Byte+0x6c>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1f9      	bne.n	80083b4 <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 80083c0:	bf00      	nop
 80083c2:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <SPI4W_Write_Byte+0x6c>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0f9      	beq.n	80083c2 <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 80083ce:	4b06      	ldr	r3, [pc, #24]	@ (80083e8 <SPI4W_Write_Byte+0x70>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b2db      	uxtb	r3, r3
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	2000019c 	.word	0x2000019c
 80083e4:	40013000 	.word	0x40013000
 80083e8:	4001300c 	.word	0x4001300c

080083ec <SPI4W_Read_Byte>:

uint8_t SPI4W_Read_Byte(uint8_t value)                                    
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	71fb      	strb	r3, [r7, #7]
	return SPI4W_Write_Byte(value);
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff ffbd 	bl	8008378 <SPI4W_Write_Byte>
 80083fe:	4603      	mov	r3, r0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7f8 fdc1 	bl	8000f98 <HAL_Delay>
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <Driver_Delay_us>:

void Driver_Delay_us(uint32_t xus)
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
	int j;
    for(j=xus; j > 0; j--);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	e002      	b.n	8008432 <Driver_Delay_us+0x14>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3b01      	subs	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	dcf9      	bgt.n	800842c <Driver_Delay_us+0xe>
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <disk_initialize>:

//��ʼ������
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive nmuber (0..) */
)
{	
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	4603      	mov	r3, r0
 800844e:	71fb      	strb	r3, [r7, #7]
	uint8_t res=0;	    
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
	switch(drv)
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10e      	bne.n	8008478 <disk_initialize+0x32>
	{
		case SD_CARD://SD��
			res = SD_Initialize();//SD_Initialize() 
 800845a:	f002 fc75 	bl	800ad48 <SD_Initialize>
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
		 	if(res)//STM32 SPI��bug,��sd������ʧ�ܵ�ʱ�������ִ����������,���ܵ���SPI��д�쳣
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <disk_initialize+0x38>
			{
				SD_SPI_SpeedLow();
 8008468:	f002 fb4c 	bl	800ab04 <SD_SPI_SpeedLow>
				SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 800846c:	20ff      	movs	r0, #255	@ 0xff
 800846e:	f002 fb3b 	bl	800aae8 <SD_SPI_ReadWriteByte>
				SD_SPI_SpeedHigh();
 8008472:	f002 fb4e 	bl	800ab12 <SD_SPI_SpeedHigh>
			}
  			break;
 8008476:	e002      	b.n	800847e <disk_initialize+0x38>
		default:
			res=1; 
 8008478:	2301      	movs	r3, #1
 800847a:	73fb      	strb	r3, [r7, #15]
 800847c:	e000      	b.n	8008480 <disk_initialize+0x3a>
  			break;
 800847e:	bf00      	nop
	}		 
	if(res)return  STA_NOINIT;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <disk_initialize+0x44>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <disk_initialize+0x46>
	else return 0; //��ʼ���ɹ�
 800848a:	2300      	movs	r3, #0
}   
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <disk_status>:
//��ô���״̬
DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0..) */
)
{		   
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	71fb      	strb	r3, [r7, #7]
    return 0;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <disk_read>:
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	461a      	mov	r2, r3
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
 80084bc:	4613      	mov	r3, r2
 80084be:	73bb      	strb	r3, [r7, #14]
	uint8_t res=0; 
 80084c0:	2300      	movs	r3, #0
 80084c2:	75fb      	strb	r3, [r7, #23]
    if (!count)return RES_PARERR;//count���ܵ���0�����򷵻ز�������		 	 
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <disk_read+0x22>
 80084ca:	2304      	movs	r3, #4
 80084cc:	e01f      	b.n	800850e <disk_read+0x62>
	switch(drv)
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d112      	bne.n	80084fa <disk_read+0x4e>
	{
		case SD_CARD://SD��
			res=SD_ReadDisk(buff,sector,count);	 
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	461a      	mov	r2, r3
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	68b8      	ldr	r0, [r7, #8]
 80084dc:	f002 fd32 	bl	800af44 <SD_ReadDisk>
 80084e0:	4603      	mov	r3, r0
 80084e2:	75fb      	strb	r3, [r7, #23]
		 	if(res)//STM32 SPI��bug,��sd������ʧ�ܵ�ʱ�������ִ����������,���ܵ���SPI��д�쳣
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <disk_read+0x54>
			{
				SD_SPI_SpeedLow();
 80084ea:	f002 fb0b 	bl	800ab04 <SD_SPI_SpeedLow>
				SD_SPI_ReadWriteByte(0xff);//�ṩ�����8��ʱ��
 80084ee:	20ff      	movs	r0, #255	@ 0xff
 80084f0:	f002 fafa 	bl	800aae8 <SD_SPI_ReadWriteByte>
				SD_SPI_SpeedHigh();
 80084f4:	f002 fb0d 	bl	800ab12 <SD_SPI_SpeedHigh>
			}
			break;
 80084f8:	e002      	b.n	8008500 <disk_read+0x54>
		default:
			res=1; 
 80084fa:	2301      	movs	r3, #1
 80084fc:	75fb      	strb	r3, [r7, #23]
 80084fe:	e000      	b.n	8008502 <disk_read+0x56>
			break;
 8008500:	bf00      	nop
	}
   //������ֵ����SPI_SD_driver.c�ķ���ֵת��ff.c�ķ���ֵ
    if(res==0x00)return RES_OK;	 
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <disk_read+0x60>
 8008508:	2300      	movs	r3, #0
 800850a:	e000      	b.n	800850e <disk_read+0x62>
    else return RES_ERROR;	   
 800850c:	2301      	movs	r3, #1
}  
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	        /* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b086      	sub	sp, #24
 800851a:	af00      	add	r7, sp, #0
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	461a      	mov	r2, r3
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
 8008526:	4613      	mov	r3, r2
 8008528:	73bb      	strb	r3, [r7, #14]
	uint8_t res=0;  
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]
    if (!count)return RES_PARERR;//count���ܵ���0�����򷵻ز�������		 	 
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <disk_write+0x22>
 8008534:	2304      	movs	r3, #4
 8008536:	e013      	b.n	8008560 <disk_write+0x4a>
	switch(drv)
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d108      	bne.n	8008550 <disk_write+0x3a>
	{
		case SD_CARD://SD��
			res=SD_WriteDisk((uint8_t*)buff,sector,count);
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	461a      	mov	r2, r3
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	68b8      	ldr	r0, [r7, #8]
 8008546:	f002 fd49 	bl	800afdc <SD_WriteDisk>
 800854a:	4603      	mov	r3, r0
 800854c:	75fb      	strb	r3, [r7, #23]
			break;
 800854e:	e001      	b.n	8008554 <disk_write+0x3e>
		default:
			res=1; 
 8008550:	2301      	movs	r3, #1
 8008552:	75fb      	strb	r3, [r7, #23]
	}
    //������ֵ����SPI_SD_driver.c�ķ���ֵת��ff.c�ķ���ֵ
    if(res == 0x00)return RES_OK;	 
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <disk_write+0x48>
 800855a:	2300      	movs	r3, #0
 800855c:	e000      	b.n	8008560 <disk_write+0x4a>
    else return RES_ERROR;		 
 800855e:	2301      	movs	r3, #1
}
 8008560:	4618      	mov	r0, r3
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	791b      	ldrb	r3, [r3, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d033      	beq.n	80085e0 <sync_window+0x78>
		wsect = fs->winsect;	/* Current sector number */
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857c:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	7858      	ldrb	r0, [r3, #1]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008588:	2301      	movs	r3, #1
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	f7ff ffc3 	bl	8008516 <disk_write>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <sync_window+0x32>
			return FR_DISK_ERR;
 8008596:	2301      	movs	r3, #1
 8008598:	e023      	b.n	80085e2 <sync_window+0x7a>
		fs->wflag = 0;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	711a      	strb	r2, [r3, #4]
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	1ad2      	subs	r2, r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d217      	bcs.n	80085e0 <sync_window+0x78>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	78db      	ldrb	r3, [r3, #3]
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	e010      	b.n	80085da <sync_window+0x72>
				wsect += fs->fsize;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4413      	add	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	7858      	ldrb	r0, [r3, #1]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80085cc:	2301      	movs	r3, #1
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	f7ff ffa1 	bl	8008516 <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	60bb      	str	r3, [r7, #8]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d8eb      	bhi.n	80085b8 <sync_window+0x50>
			}
		}
	}
	return FR_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d018      	beq.n	8008630 <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7ff ffb2 	bl	8008568 <sync_window>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <move_window+0x24>
			return FR_DISK_ERR;
 800860a:	2301      	movs	r3, #1
 800860c:	e011      	b.n	8008632 <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7858      	ldrb	r0, [r3, #1]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008618:	2301      	movs	r3, #1
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	f7ff ff46 	bl	80084ac <disk_read>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <move_window+0x40>
			return FR_DISK_ERR;
 8008626:	2301      	movs	r3, #1
 8008628:	e003      	b.n	8008632 <move_window+0x48>
		fs->winsect = sector;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	return FR_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
	int vol = -1;
 8008642:	f04f 33ff 	mov.w	r3, #4294967295
 8008646:	60fb      	str	r3, [r7, #12]


	if (*path) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01b      	beq.n	8008688 <get_ldnumber+0x4e>
		vol = (*path)[0] - '0';
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	3b30      	subs	r3, #48	@ 0x30
 8008658:	60fb      	str	r3, [r7, #12]
		if ((UINT)vol < 9 && (*path)[1] == ':') {	/* There is a drive number */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b08      	cmp	r3, #8
 800865e:	d811      	bhi.n	8008684 <get_ldnumber+0x4a>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3301      	adds	r3, #1
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b3a      	cmp	r3, #58	@ 0x3a
 800866a:	d10b      	bne.n	8008684 <get_ldnumber+0x4a>
			*path += 2;		/* Get value and strip it */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	1c9a      	adds	r2, r3, #2
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	601a      	str	r2, [r3, #0]
			if (vol >= _VOLUMES) vol = -1;	/* Check if the drive number is valid */
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	dd05      	ble.n	8008688 <get_ldnumber+0x4e>
 800867c:	f04f 33ff 	mov.w	r3, #4294967295
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	e001      	b.n	8008688 <get_ldnumber+0x4e>
		} else {			/* No drive number use default drive */
#if _FS_RPATH && _VOLUMES >= 2
			vol = CurrVol;	/* Current drive */
#else
			vol = 0;		/* Drive 0 */
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]
#endif
		}
	}

	return vol;
 8008688:	68fb      	ldr	r3, [r7, #12]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
	...

08008698 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	711a      	strb	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f04f 32ff 	mov.w	r2, #4294967295
 80086ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff ff99 	bl	80085ea <move_window>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <check_fs+0x2a>
		return 3;
 80086be:	2303      	movs	r3, #3
 80086c0:	e04b      	b.n	800875a <check_fs+0xc2>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f203 232e 	addw	r3, r3, #558	@ 0x22e
 80086c8:	3301      	adds	r3, #1
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	b21b      	sxth	r3, r3
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	b21a      	sxth	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 80086d8:	b21b      	sxth	r3, r3
 80086da:	4313      	orrs	r3, r2
 80086dc:	b21b      	sxth	r3, r3
 80086de:	4a21      	ldr	r2, [pc, #132]	@ (8008764 <check_fs+0xcc>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d001      	beq.n	80086e8 <check_fs+0x50>
		return 2;
 80086e4:	2302      	movs	r3, #2
 80086e6:	e038      	b.n	800875a <check_fs+0xc2>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3366      	adds	r3, #102	@ 0x66
 80086ec:	3303      	adds	r3, #3
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	061a      	lsls	r2, r3, #24
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3366      	adds	r3, #102	@ 0x66
 80086f6:	3302      	adds	r3, #2
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	431a      	orrs	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3366      	adds	r3, #102	@ 0x66
 8008702:	3301      	adds	r3, #1
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	4313      	orrs	r3, r2
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 8008710:	4313      	orrs	r3, r2
 8008712:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008716:	4a14      	ldr	r2, [pc, #80]	@ (8008768 <check_fs+0xd0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d101      	bne.n	8008720 <check_fs+0x88>
		return 0;
 800871c:	2300      	movs	r3, #0
 800871e:	e01c      	b.n	800875a <check_fs+0xc2>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3382      	adds	r3, #130	@ 0x82
 8008724:	3303      	adds	r3, #3
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	061a      	lsls	r2, r3, #24
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	3382      	adds	r3, #130	@ 0x82
 800872e:	3302      	adds	r3, #2
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	041b      	lsls	r3, r3, #16
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3382      	adds	r3, #130	@ 0x82
 800873a:	3301      	adds	r3, #1
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	021b      	lsls	r3, r3, #8
 8008740:	4313      	orrs	r3, r2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
 8008748:	4313      	orrs	r3, r2
 800874a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800874e:	4a06      	ldr	r2, [pc, #24]	@ (8008768 <check_fs+0xd0>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d101      	bne.n	8008758 <check_fs+0xc0>
		return 0;
 8008754:	2300      	movs	r3, #0
 8008756:	e000      	b.n	800875a <check_fs+0xc2>

	return 1;
 8008758:	2301      	movs	r3, #1
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	ffffaa55 	.word	0xffffaa55
 8008768:	00544146 	.word	0x00544146

0800876c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b096      	sub	sp, #88	@ 0x58
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008780:	68b8      	ldr	r0, [r7, #8]
 8008782:	f7ff ff5a 	bl	800863a <get_ldnumber>
 8008786:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800878a:	2b00      	cmp	r3, #0
 800878c:	da01      	bge.n	8008792 <find_volume+0x26>
 800878e:	230b      	movs	r3, #11
 8008790:	e294      	b.n	8008cbc <find_volume+0x550>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008792:	4a9b      	ldr	r2, [pc, #620]	@ (8008a00 <find_volume+0x294>)
 8008794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800879a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <find_volume+0x3a>
 80087a2:	230c      	movs	r3, #12
 80087a4:	e28a      	b.n	8008cbc <find_volume+0x550>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087aa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80087ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d01a      	beq.n	80087ea <find_volume+0x7e>
		stat = disk_status(fs->drv);
 80087b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b6:	785b      	ldrb	r3, [r3, #1]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fe6b 	bl	8008494 <disk_status>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80087c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10c      	bne.n	80087ea <find_volume+0x7e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d007      	beq.n	80087e6 <find_volume+0x7a>
 80087d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <find_volume+0x7a>
				return FR_WRITE_PROTECTED;
 80087e2:	230a      	movs	r3, #10
 80087e4:	e26a      	b.n	8008cbc <find_volume+0x550>
			return FR_OK;				/* The file system object is valid */
 80087e6:	2300      	movs	r3, #0
 80087e8:	e268      	b.n	8008cbc <find_volume+0x550>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80087ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80087f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fe22 	bl	8008446 <disk_initialize>
 8008802:	4603      	mov	r3, r0
 8008804:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008808:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <find_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008814:	2303      	movs	r3, #3
 8008816:	e251      	b.n	8008cbc <find_volume+0x550>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <find_volume+0xc2>
 800881e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008822:	f003 0304 	and.w	r3, r3, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <find_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800882a:	230a      	movs	r3, #10
 800882c:	e246      	b.n	8008cbc <find_volume+0x550>
#if _MAX_SS != 512						/* Get sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008832:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008834:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008836:	f7ff ff2f 	bl	8008698 <check_fs>
 800883a:	4603      	mov	r3, r0
 800883c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008840:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008844:	2b01      	cmp	r3, #1
 8008846:	d155      	bne.n	80088f4 <find_volume+0x188>
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008848:	2300      	movs	r3, #0
 800884a:	643b      	str	r3, [r7, #64]	@ 0x40
 800884c:	e02a      	b.n	80088a4 <find_volume+0x138>
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
 800884e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008850:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800885c:	4413      	add	r3, r2
 800885e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	3304      	adds	r3, #4
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d012      	beq.n	8008890 <find_volume+0x124>
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	330b      	adds	r3, #11
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	061a      	lsls	r2, r3, #24
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	330a      	adds	r3, #10
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	041b      	lsls	r3, r3, #16
 800887a:	431a      	orrs	r2, r3
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	3309      	adds	r3, #9
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	021b      	lsls	r3, r3, #8
 8008884:	4313      	orrs	r3, r2
 8008886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008888:	3208      	adds	r2, #8
 800888a:	7812      	ldrb	r2, [r2, #0]
 800888c:	431a      	orrs	r2, r3
 800888e:	e000      	b.n	8008892 <find_volume+0x126>
 8008890:	2200      	movs	r2, #0
 8008892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	3358      	adds	r3, #88	@ 0x58
 8008898:	443b      	add	r3, r7
 800889a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800889e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a0:	3301      	adds	r3, #1
 80088a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80088a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d9d1      	bls.n	800884e <find_volume+0xe2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80088aa:	2300      	movs	r3, #0
 80088ac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80088ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <find_volume+0x14e>
 80088b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b6:	3b01      	subs	r3, #1
 80088b8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80088ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	3358      	adds	r3, #88	@ 0x58
 80088c0:	443b      	add	r3, r7
 80088c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80088c6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80088c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d005      	beq.n	80088da <find_volume+0x16e>
 80088ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80088d2:	f7ff fee1 	bl	8008698 <check_fs>
 80088d6:	4603      	mov	r3, r0
 80088d8:	e000      	b.n	80088dc <find_volume+0x170>
 80088da:	2302      	movs	r3, #2
 80088dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80088e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <find_volume+0x188>
 80088e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088ea:	3301      	adds	r3, #1
 80088ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d9e2      	bls.n	80088ba <find_volume+0x14e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80088f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d101      	bne.n	8008900 <find_volume+0x194>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e1dd      	b.n	8008cbc <find_volume+0x550>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008900:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <find_volume+0x1a0>
 8008908:	230d      	movs	r3, #13
 800890a:	e1d7      	b.n	8008cbc <find_volume+0x550>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008912:	b21b      	sxth	r3, r3
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	b21a      	sxth	r2, r3
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800891e:	b21b      	sxth	r3, r3
 8008920:	4313      	orrs	r3, r2
 8008922:	b21b      	sxth	r3, r3
 8008924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008928:	d001      	beq.n	800892e <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800892a:	230d      	movs	r3, #13
 800892c:	e1c6      	b.n	8008cbc <find_volume+0x550>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 800892e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008930:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008934:	b21b      	sxth	r3, r3
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	b21a      	sxth	r2, r3
 800893a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008940:	b21b      	sxth	r3, r3
 8008942:	4313      	orrs	r3, r2
 8008944:	b21b      	sxth	r3, r3
 8008946:	b29b      	uxth	r3, r3
 8008948:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 800894a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d112      	bne.n	8008976 <find_volume+0x20a>
 8008950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008952:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8008956:	061a      	lsls	r2, r3, #24
 8008958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800895e:	041b      	lsls	r3, r3, #16
 8008960:	431a      	orrs	r2, r3
 8008962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008964:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8008968:	021b      	lsls	r3, r3, #8
 800896a:	4313      	orrs	r3, r2
 800896c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800896e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8008972:	4313      	orrs	r3, r2
 8008974:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8008976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008978:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800897a:	619a      	str	r2, [r3, #24]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 800897c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897e:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008984:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	78db      	ldrb	r3, [r3, #3]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d005      	beq.n	800899a <find_volume+0x22e>
 800898e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008990:	78db      	ldrb	r3, [r3, #3]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d001      	beq.n	800899a <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8008996:	230d      	movs	r3, #13
 8008998:	e190      	b.n	8008cbc <find_volume+0x550>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800899a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899c:	78db      	ldrb	r3, [r3, #3]
 800899e:	461a      	mov	r2, r3
 80089a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089a2:	fb02 f303 	mul.w	r3, r2, r3
 80089a6:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80089ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b0:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	789b      	ldrb	r3, [r3, #2]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <find_volume+0x260>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	789b      	ldrb	r3, [r3, #2]
 80089be:	461a      	mov	r2, r3
 80089c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c2:	789b      	ldrb	r3, [r3, #2]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	4013      	ands	r3, r2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <find_volume+0x264>
		return FR_NO_FILESYSTEM;
 80089cc:	230d      	movs	r3, #13
 80089ce:	e175      	b.n	8008cbc <find_volume+0x550>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 80089d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089d6:	b21b      	sxth	r3, r3
 80089d8:	021b      	lsls	r3, r3, #8
 80089da:	b21a      	sxth	r2, r3
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089e2:	b21b      	sxth	r3, r3
 80089e4:	4313      	orrs	r3, r2
 80089e6:	b21b      	sxth	r3, r3
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 80089ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f0:	891b      	ldrh	r3, [r3, #8]
 80089f2:	f003 030f 	and.w	r3, r3, #15
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d003      	beq.n	8008a04 <find_volume+0x298>
		return FR_NO_FILESYSTEM;
 80089fc:	230d      	movs	r3, #13
 80089fe:	e15d      	b.n	8008cbc <find_volume+0x550>
 8008a00:	20001e70 	.word	0x20001e70

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a0a:	b21b      	sxth	r3, r3
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	b21a      	sxth	r2, r3
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a16:	b21b      	sxth	r3, r3
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	b21b      	sxth	r3, r3
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8008a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d112      	bne.n	8008a4c <find_volume+0x2e0>
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8008a2c:	061a      	lsls	r2, r3, #24
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a30:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8008a34:	041b      	lsls	r3, r3, #16
 8008a36:	431a      	orrs	r2, r3
 8008a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	4313      	orrs	r3, r2
 8008a42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a44:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a52:	b21b      	sxth	r3, r3
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	b21a      	sxth	r2, r3
 8008a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a5e:	b21b      	sxth	r3, r3
 8008a60:	4313      	orrs	r3, r2
 8008a62:	b21b      	sxth	r3, r3
 8008a64:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008a66:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <find_volume+0x304>
 8008a6c:	230d      	movs	r3, #13
 8008a6e:	e125      	b.n	8008cbc <find_volume+0x550>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8008a70:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a74:	4413      	add	r3, r2
 8008a76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a78:	8912      	ldrh	r2, [r2, #8]
 8008a7a:	0912      	lsrs	r2, r2, #4
 8008a7c:	b292      	uxth	r2, r2
 8008a7e:	4413      	add	r3, r2
 8008a80:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d201      	bcs.n	8008a8e <find_volume+0x322>
 8008a8a:	230d      	movs	r3, #13
 8008a8c:	e116      	b.n	8008cbc <find_volume+0x550>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a96:	7892      	ldrb	r2, [r2, #2]
 8008a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a9c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <find_volume+0x33c>
 8008aa4:	230d      	movs	r3, #13
 8008aa6:	e109      	b.n	8008cbc <find_volume+0x550>
	fmt = FS_FAT12;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d902      	bls.n	8008abe <find_volume+0x352>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d902      	bls.n	8008ace <find_volume+0x362>
 8008ac8:	2303      	movs	r3, #3
 8008aca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	1c9a      	adds	r2, r3, #2
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	615a      	str	r2, [r3, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ada:	61da      	str	r2, [r3, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008adc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ae0:	441a      	add	r2, r3
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae4:	621a      	str	r2, [r3, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8008ae6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	441a      	add	r2, r3
 8008aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aee:	629a      	str	r2, [r3, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8008af0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d11e      	bne.n	8008b36 <find_volume+0x3ca>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afa:	891b      	ldrh	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <find_volume+0x398>
 8008b00:	230d      	movs	r3, #13
 8008b02:	e0db      	b.n	8008cbc <find_volume+0x550>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8008b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b06:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 8008b0a:	061a      	lsls	r2, r3, #24
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8008b12:	041b      	lsls	r3, r3, #16
 8008b14:	431a      	orrs	r2, r3
 8008b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b22:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8008b26:	431a      	orrs	r2, r3
 8008b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2a:	625a      	str	r2, [r3, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b34:	e01f      	b.n	8008b76 <find_volume+0x40a>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	891b      	ldrh	r3, [r3, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <find_volume+0x3d6>
 8008b3e:	230d      	movs	r3, #13
 8008b40:	e0bc      	b.n	8008cbc <find_volume+0x550>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	6a1a      	ldr	r2, [r3, #32]
 8008b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b48:	441a      	add	r2, r3
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4c:	625a      	str	r2, [r3, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008b4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d103      	bne.n	8008b5e <find_volume+0x3f2>
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	e00a      	b.n	8008b74 <find_volume+0x408>
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	695a      	ldr	r2, [r3, #20]
 8008b62:	4613      	mov	r3, r2
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	4413      	add	r3, r2
 8008b68:	085a      	lsrs	r2, r3, #1
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 8008b74:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	699a      	ldr	r2, [r3, #24]
 8008b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b7c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008b80:	0a5b      	lsrs	r3, r3, #9
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d201      	bcs.n	8008b8a <find_volume+0x41e>
		return FR_NO_FILESYSTEM;
 8008b86:	230d      	movs	r3, #13
 8008b88:	e098      	b.n	8008cbc <find_volume+0x550>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b90:	611a      	str	r2, [r3, #16]
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	691a      	ldr	r2, [r3, #16]
 8008b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b98:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9c:	2280      	movs	r2, #128	@ 0x80
 8008b9e:	715a      	strb	r2, [r3, #5]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008ba0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d17a      	bne.n	8008c9e <find_volume+0x532>
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008baa:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8008bae:	b21b      	sxth	r3, r3
 8008bb0:	021b      	lsls	r3, r3, #8
 8008bb2:	b21a      	sxth	r2, r3
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8008bba:	b21b      	sxth	r3, r3
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	b21b      	sxth	r3, r3
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d16c      	bne.n	8008c9e <find_volume+0x532>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008bcc:	f7ff fd0d 	bl	80085ea <move_window>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d163      	bne.n	8008c9e <find_volume+0x532>
	{
		fs->fsi_flag = 0;
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd8:	2200      	movs	r2, #0
 8008bda:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bde:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 8008be2:	b21b      	sxth	r3, r3
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	b21a      	sxth	r2, r3
 8008be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bea:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8008bee:	b21b      	sxth	r3, r3
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	b21b      	sxth	r3, r3
 8008bf4:	4a33      	ldr	r2, [pc, #204]	@ (8008cc4 <find_volume+0x558>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d151      	bne.n	8008c9e <find_volume+0x532>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008c00:	061a      	lsls	r2, r3, #24
 8008c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c04:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008c12:	021b      	lsls	r3, r3, #8
 8008c14:	4313      	orrs	r3, r2
 8008c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c18:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8008cc8 <find_volume+0x55c>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d13c      	bne.n	8008c9e <find_volume+0x532>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 8008c2a:	061a      	lsls	r2, r3, #24
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2e:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8008c32:	041b      	lsls	r3, r3, #16
 8008c34:	431a      	orrs	r2, r3
 8008c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c38:	f893 3215 	ldrb.w	r3, [r3, #533]	@ 0x215
 8008c3c:	021b      	lsls	r3, r3, #8
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c42:	f892 2214 	ldrb.w	r2, [r2, #532]	@ 0x214
 8008c46:	4313      	orrs	r3, r2
 8008c48:	4a20      	ldr	r2, [pc, #128]	@ (8008ccc <find_volume+0x560>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d127      	bne.n	8008c9e <find_volume+0x532>
		{
#if !_FS_NOFSINFO
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	f893 321b 	ldrb.w	r3, [r3, #539]	@ 0x21b
 8008c54:	061a      	lsls	r2, r3, #24
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	f893 321a 	ldrb.w	r3, [r3, #538]	@ 0x21a
 8008c5c:	041b      	lsls	r3, r3, #16
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	f893 3219 	ldrb.w	r3, [r3, #537]	@ 0x219
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c6c:	f892 2218 	ldrb.w	r2, [r2, #536]	@ 0x218
 8008c70:	431a      	orrs	r2, r3
 8008c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c74:	611a      	str	r2, [r3, #16]
#endif
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	f893 321f 	ldrb.w	r3, [r3, #543]	@ 0x21f
 8008c7c:	061a      	lsls	r2, r3, #24
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8008c84:	041b      	lsls	r3, r3, #16
 8008c86:	431a      	orrs	r2, r3
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	4313      	orrs	r3, r2
 8008c92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c94:	f892 221c 	ldrb.w	r2, [r2, #540]	@ 0x21c
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	60da      	str	r2, [r3, #12]
		}
	}
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008ca4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd0 <find_volume+0x564>)
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	4b08      	ldr	r3, [pc, #32]	@ (8008cd0 <find_volume+0x564>)
 8008cb0:	801a      	strh	r2, [r3, #0]
 8008cb2:	4b07      	ldr	r3, [pc, #28]	@ (8008cd0 <find_volume+0x564>)
 8008cb4:	881a      	ldrh	r2, [r3, #0]
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3758      	adds	r7, #88	@ 0x58
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	ffffaa55 	.word	0xffffaa55
 8008cc8:	41615252 	.word	0x41615252
 8008ccc:	61417272 	.word	0x61417272
 8008cd0:	20001e74 	.word	0x20001e74

08008cd4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b088      	sub	sp, #32
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;


	vol = get_ldnumber(&path);
 8008ce2:	f107 0308 	add.w	r3, r7, #8
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff fca7 	bl	800863a <get_ldnumber>
 8008cec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	da01      	bge.n	8008cf8 <f_mount+0x24>
 8008cf4:	230b      	movs	r3, #11
 8008cf6:	e028      	b.n	8008d4a <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008cf8:	4a16      	ldr	r2, [pc, #88]	@ (8008d54 <f_mount+0x80>)
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <f_mount+0x3a>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	490d      	ldr	r1, [pc, #52]	@ (8008d54 <f_mount+0x80>)
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <f_mount+0x5c>
 8008d2a:	79fb      	ldrb	r3, [r7, #7]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d001      	beq.n	8008d34 <f_mount+0x60>
 8008d30:	2300      	movs	r3, #0
 8008d32:	e00a      	b.n	8008d4a <f_mount+0x76>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008d34:	f107 0108 	add.w	r1, r7, #8
 8008d38:	f107 030c 	add.w	r3, r7, #12
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fd14 	bl	800876c <find_volume>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3720      	adds	r7, #32
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20001e70 	.word	0x20001e70

08008d58 <SD_Init>:
char* pDirectoryFiles[ MAX_BMP_FILES ];
uint8_t str[20];
FRESULT f_res;
FATFS microSDFatFs;

void SD_Init(void){
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
	
	SD_CS_1;
 8008d5e:	2201      	movs	r2, #1
 8008d60:	2110      	movs	r1, #16
 8008d62:	481f      	ldr	r0, [pc, #124]	@ (8008de0 <SD_Init+0x88>)
 8008d64:	f7f8 fc06 	bl	8001574 <HAL_GPIO_WritePin>
	LCD_CS_1;
 8008d68:	2201      	movs	r2, #1
 8008d6a:	2140      	movs	r1, #64	@ 0x40
 8008d6c:	481c      	ldr	r0, [pc, #112]	@ (8008de0 <SD_Init+0x88>)
 8008d6e:	f7f8 fc01 	bl	8001574 <HAL_GPIO_WritePin>
	TP_CS_1;
 8008d72:	2201      	movs	r2, #1
 8008d74:	2180      	movs	r1, #128	@ 0x80
 8008d76:	481a      	ldr	r0, [pc, #104]	@ (8008de0 <SD_Init+0x88>)
 8008d78:	f7f8 fbfc 	bl	8001574 <HAL_GPIO_WritePin>
	
	int counter = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	607b      	str	r3, [r7, #4]
    //Check the mounted device
	f_res = f_mount(&microSDFatFs,(TCHAR const*)"/",1);
 8008d80:	2201      	movs	r2, #1
 8008d82:	4918      	ldr	r1, [pc, #96]	@ (8008de4 <SD_Init+0x8c>)
 8008d84:	4818      	ldr	r0, [pc, #96]	@ (8008de8 <SD_Init+0x90>)
 8008d86:	f7ff ffa5 	bl	8008cd4 <f_mount>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	4b17      	ldr	r3, [pc, #92]	@ (8008dec <SD_Init+0x94>)
 8008d90:	701a      	strb	r2, [r3, #0]
	if(f_res!=FR_OK){
 8008d92:	4b16      	ldr	r3, [pc, #88]	@ (8008dec <SD_Init+0x94>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d006      	beq.n	8008da8 <SD_Init+0x50>
		printf("SD card mount file system failed ,error code :(%d)\r\n",f_res);
 8008d9a:	4b14      	ldr	r3, [pc, #80]	@ (8008dec <SD_Init+0x94>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4813      	ldr	r0, [pc, #76]	@ (8008df0 <SD_Init+0x98>)
 8008da2:	f002 faf1 	bl	800b388 <iprintf>
		USB_Send_Message("SD card mount file system success!!\r\n");
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
			pDirectoryFiles[counter] = malloc(11); 
		}	
	}
}
 8008da6:	e017      	b.n	8008dd8 <SD_Init+0x80>
		printf("SD card mount file system success!! \r\n");
 8008da8:	4812      	ldr	r0, [pc, #72]	@ (8008df4 <SD_Init+0x9c>)
 8008daa:	f002 fb55 	bl	800b458 <puts>
		USB_Send_Message("SD card mount file system success!!\r\n");
 8008dae:	4812      	ldr	r0, [pc, #72]	@ (8008df8 <SD_Init+0xa0>)
 8008db0:	f7f7 fd6c 	bl	800088c <USB_Send_Message>
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
 8008db4:	2300      	movs	r3, #0
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	e00b      	b.n	8008dd2 <SD_Init+0x7a>
			pDirectoryFiles[counter] = malloc(11); 
 8008dba:	200b      	movs	r0, #11
 8008dbc:	f002 f96c 	bl	800b098 <malloc>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8008dfc <SD_Init+0xa4>)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (counter = 0; counter < MAX_BMP_FILES; counter++){
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	607b      	str	r3, [r7, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b18      	cmp	r3, #24
 8008dd6:	ddf0      	ble.n	8008dba <SD_Init+0x62>
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	40020400 	.word	0x40020400
 8008de4:	0800c15c 	.word	0x0800c15c
 8008de8:	20001ee0 	.word	0x20001ee0
 8008dec:	20001edc 	.word	0x20001edc
 8008df0:	0800c160 	.word	0x0800c160
 8008df4:	0800c198 	.word	0x0800c198
 8008df8:	0800c1c0 	.word	0x0800c1c0
 8008dfc:	20001e78 	.word	0x20001e78

08008e00 <LCD_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_Reset(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
    LCD_RST_1;
 8008e04:	2201      	movs	r2, #1
 8008e06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e0a:	480e      	ldr	r0, [pc, #56]	@ (8008e44 <LCD_Reset+0x44>)
 8008e0c:	f7f8 fbb2 	bl	8001574 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8008e10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e14:	f7ff faf8 	bl	8008408 <Driver_Delay_ms>
    LCD_RST_0;
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e1e:	4809      	ldr	r0, [pc, #36]	@ (8008e44 <LCD_Reset+0x44>)
 8008e20:	f7f8 fba8 	bl	8001574 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8008e24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e28:	f7ff faee 	bl	8008408 <Driver_Delay_ms>
    LCD_RST_1;
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e32:	4804      	ldr	r0, [pc, #16]	@ (8008e44 <LCD_Reset+0x44>)
 8008e34:	f7f8 fb9e 	bl	8001574 <HAL_GPIO_WritePin>
    Driver_Delay_ms(500);
 8008e38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e3c:	f7ff fae4 	bl	8008408 <Driver_Delay_ms>
}
 8008e40:	bf00      	nop
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	40020000 	.word	0x40020000

08008e48 <LCD_SetBackLight>:

static void LCD_SetBackLight(uint16_t value)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	80fb      	strh	r3, [r7, #6]
	PWM_SetValue(value);
 8008e52:	88fb      	ldrh	r3, [r7, #6]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fa71 	bl	800833c <PWM_SetValue>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <LCD_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
void LCD_WriteReg(uint8_t Reg)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	71fb      	strb	r3, [r7, #7]
    LCD_DC_0;
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008e74:	480a      	ldr	r0, [pc, #40]	@ (8008ea0 <LCD_WriteReg+0x3c>)
 8008e76:	f7f8 fb7d 	bl	8001574 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2140      	movs	r1, #64	@ 0x40
 8008e7e:	4809      	ldr	r0, [pc, #36]	@ (8008ea4 <LCD_WriteReg+0x40>)
 8008e80:	f7f8 fb78 	bl	8001574 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7ff fa76 	bl	8008378 <SPI4W_Write_Byte>
    LCD_CS_1;
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	2140      	movs	r1, #64	@ 0x40
 8008e90:	4804      	ldr	r0, [pc, #16]	@ (8008ea4 <LCD_WriteReg+0x40>)
 8008e92:	f7f8 fb6f 	bl	8001574 <HAL_GPIO_WritePin>
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40020000 	.word	0x40020000
 8008ea4:	40020400 	.word	0x40020400

08008ea8 <LCD_WriteData>:

void LCD_WriteData(uint8_t Data)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
    LCD_DC_1;
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008eb8:	480d      	ldr	r0, [pc, #52]	@ (8008ef0 <LCD_WriteData+0x48>)
 8008eba:	f7f8 fb5b 	bl	8001574 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2140      	movs	r1, #64	@ 0x40
 8008ec2:	480c      	ldr	r0, [pc, #48]	@ (8008ef4 <LCD_WriteData+0x4c>)
 8008ec4:	f7f8 fb56 	bl	8001574 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data >> 8);
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	121b      	asrs	r3, r3, #8
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff fa52 	bl	8008378 <SPI4W_Write_Byte>
    SPI4W_Write_Byte(Data & 0XFF);
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff fa4e 	bl	8008378 <SPI4W_Write_Byte>
    LCD_CS_1;
 8008edc:	2201      	movs	r2, #1
 8008ede:	2140      	movs	r1, #64	@ 0x40
 8008ee0:	4804      	ldr	r0, [pc, #16]	@ (8008ef4 <LCD_WriteData+0x4c>)
 8008ee2:	f7f8 fb47 	bl	8001574 <HAL_GPIO_WritePin>
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	40020000 	.word	0x40020000
 8008ef4:	40020400 	.word	0x40020400

08008ef8 <LCD_Write_AllData>:
/*******************************************************************************
function:
		Write register data
*******************************************************************************/
static void LCD_Write_AllData(uint16_t Data, uint32_t DataLen)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_DC_1;
 8008f04:	2201      	movs	r2, #1
 8008f06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008f0a:	4813      	ldr	r0, [pc, #76]	@ (8008f58 <LCD_Write_AllData+0x60>)
 8008f0c:	f7f8 fb32 	bl	8001574 <HAL_GPIO_WritePin>
    LCD_CS_0;
 8008f10:	2200      	movs	r2, #0
 8008f12:	2140      	movs	r1, #64	@ 0x40
 8008f14:	4811      	ldr	r0, [pc, #68]	@ (8008f5c <LCD_Write_AllData+0x64>)
 8008f16:	f7f8 fb2d 	bl	8001574 <HAL_GPIO_WritePin>
    for(i = 0; i < DataLen; i++) {
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e00e      	b.n	8008f3e <LCD_Write_AllData+0x46>
        SPI4W_Write_Byte(Data >> 8);
 8008f20:	88fb      	ldrh	r3, [r7, #6]
 8008f22:	0a1b      	lsrs	r3, r3, #8
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff fa25 	bl	8008378 <SPI4W_Write_Byte>
        SPI4W_Write_Byte(Data & 0XFF);
 8008f2e:	88fb      	ldrh	r3, [r7, #6]
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7ff fa20 	bl	8008378 <SPI4W_Write_Byte>
    for(i = 0; i < DataLen; i++) {
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d3ec      	bcc.n	8008f20 <LCD_Write_AllData+0x28>
    }
    LCD_CS_1;
 8008f46:	2201      	movs	r2, #1
 8008f48:	2140      	movs	r1, #64	@ 0x40
 8008f4a:	4804      	ldr	r0, [pc, #16]	@ (8008f5c <LCD_Write_AllData+0x64>)
 8008f4c:	f7f8 fb12 	bl	8001574 <HAL_GPIO_WritePin>
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	40020000 	.word	0x40020000
 8008f5c:	40020400 	.word	0x40020400

08008f60 <LCD_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
    LCD_WriteReg(0XF9);
 8008f64:	20f9      	movs	r0, #249	@ 0xf9
 8008f66:	f7ff ff7d 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	f7ff ff9c 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x08);
 8008f70:	2008      	movs	r0, #8
 8008f72:	f7ff ff99 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0xC0);
 8008f76:	20c0      	movs	r0, #192	@ 0xc0
 8008f78:	f7ff ff74 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x19);//VREG1OUT POSITIVE
 8008f7c:	2019      	movs	r0, #25
 8008f7e:	f7ff ff93 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x1a);//VREG2OUT NEGATIVE
 8008f82:	201a      	movs	r0, #26
 8008f84:	f7ff ff90 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0xC1);
 8008f88:	20c1      	movs	r0, #193	@ 0xc1
 8008f8a:	f7ff ff6b 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x45);//VGH,VGL    VGH>=14V.
 8008f8e:	2045      	movs	r0, #69	@ 0x45
 8008f90:	f7ff ff8a 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8008f94:	2000      	movs	r0, #0
 8008f96:	f7ff ff87 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0xC2);	//Normal mode, increase can change the display quality, while increasing power consumption
 8008f9a:	20c2      	movs	r0, #194	@ 0xc2
 8008f9c:	f7ff ff62 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x33);
 8008fa0:	2033      	movs	r0, #51	@ 0x33
 8008fa2:	f7ff ff81 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0XC5);
 8008fa6:	20c5      	movs	r0, #197	@ 0xc5
 8008fa8:	f7ff ff5c 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8008fac:	2000      	movs	r0, #0
 8008fae:	f7ff ff7b 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x28);//VCM_REG[7:0]. <=0X80.
 8008fb2:	2028      	movs	r0, #40	@ 0x28
 8008fb4:	f7ff ff78 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0xB1);//Sets the frame frequency of full color normal mode
 8008fb8:	20b1      	movs	r0, #177	@ 0xb1
 8008fba:	f7ff ff53 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0xA0);//0XB0 =70HZ, <=0XB0.0xA0=62HZ
 8008fbe:	20a0      	movs	r0, #160	@ 0xa0
 8008fc0:	f7ff ff72 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x11);
 8008fc4:	2011      	movs	r0, #17
 8008fc6:	f7ff ff6f 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0xB4);
 8008fca:	20b4      	movs	r0, #180	@ 0xb4
 8008fcc:	f7ff ff4a 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x02); //2 DOT FRAME MODE,F<=70HZ.
 8008fd0:	2002      	movs	r0, #2
 8008fd2:	f7ff ff69 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0xB6);//
 8008fd6:	20b6      	movs	r0, #182	@ 0xb6
 8008fd8:	f7ff ff44 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x00);
 8008fdc:	2000      	movs	r0, #0
 8008fde:	f7ff ff63 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x42);//0 GS SS SM ISC[3:0];
 8008fe2:	2042      	movs	r0, #66	@ 0x42
 8008fe4:	f7ff ff60 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x3B);
 8008fe8:	203b      	movs	r0, #59	@ 0x3b
 8008fea:	f7ff ff5d 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0xB7);
 8008fee:	20b7      	movs	r0, #183	@ 0xb7
 8008ff0:	f7ff ff38 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x07);
 8008ff4:	2007      	movs	r0, #7
 8008ff6:	f7ff ff57 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0xE0);
 8008ffa:	20e0      	movs	r0, #224	@ 0xe0
 8008ffc:	f7ff ff32 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8009000:	201f      	movs	r0, #31
 8009002:	f7ff ff51 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x25);
 8009006:	2025      	movs	r0, #37	@ 0x25
 8009008:	f7ff ff4e 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x22);
 800900c:	2022      	movs	r0, #34	@ 0x22
 800900e:	f7ff ff4b 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x0B);
 8009012:	200b      	movs	r0, #11
 8009014:	f7ff ff48 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x06);
 8009018:	2006      	movs	r0, #6
 800901a:	f7ff ff45 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x0A);
 800901e:	200a      	movs	r0, #10
 8009020:	f7ff ff42 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x4E);
 8009024:	204e      	movs	r0, #78	@ 0x4e
 8009026:	f7ff ff3f 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0xC6);
 800902a:	20c6      	movs	r0, #198	@ 0xc6
 800902c:	f7ff ff3c 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x39);
 8009030:	2039      	movs	r0, #57	@ 0x39
 8009032:	f7ff ff39 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009036:	2000      	movs	r0, #0
 8009038:	f7ff ff36 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 800903c:	2000      	movs	r0, #0
 800903e:	f7ff ff33 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009042:	2000      	movs	r0, #0
 8009044:	f7ff ff30 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009048:	2000      	movs	r0, #0
 800904a:	f7ff ff2d 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 800904e:	2000      	movs	r0, #0
 8009050:	f7ff ff2a 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009054:	2000      	movs	r0, #0
 8009056:	f7ff ff27 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0XE1);
 800905a:	20e1      	movs	r0, #225	@ 0xe1
 800905c:	f7ff ff02 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x1F);
 8009060:	201f      	movs	r0, #31
 8009062:	f7ff ff21 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8009066:	203f      	movs	r0, #63	@ 0x3f
 8009068:	f7ff ff1e 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x3F);
 800906c:	203f      	movs	r0, #63	@ 0x3f
 800906e:	f7ff ff1b 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x0F);
 8009072:	200f      	movs	r0, #15
 8009074:	f7ff ff18 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x1F);
 8009078:	201f      	movs	r0, #31
 800907a:	f7ff ff15 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x0F);
 800907e:	200f      	movs	r0, #15
 8009080:	f7ff ff12 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x46);
 8009084:	2046      	movs	r0, #70	@ 0x46
 8009086:	f7ff ff0f 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x49);
 800908a:	2049      	movs	r0, #73	@ 0x49
 800908c:	f7ff ff0c 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x31);
 8009090:	2031      	movs	r0, #49	@ 0x31
 8009092:	f7ff ff09 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x05);
 8009096:	2005      	movs	r0, #5
 8009098:	f7ff ff06 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x09);
 800909c:	2009      	movs	r0, #9
 800909e:	f7ff ff03 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x03);
 80090a2:	2003      	movs	r0, #3
 80090a4:	f7ff ff00 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x1C);
 80090a8:	201c      	movs	r0, #28
 80090aa:	f7ff fefd 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x1A);
 80090ae:	201a      	movs	r0, #26
 80090b0:	f7ff fefa 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80090b4:	2000      	movs	r0, #0
 80090b6:	f7ff fef7 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0XF1);
 80090ba:	20f1      	movs	r0, #241	@ 0xf1
 80090bc:	f7ff fed2 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x36);
 80090c0:	2036      	movs	r0, #54	@ 0x36
 80090c2:	f7ff fef1 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x04);
 80090c6:	2004      	movs	r0, #4
 80090c8:	f7ff feee 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80090cc:	2000      	movs	r0, #0
 80090ce:	f7ff feeb 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x3C);
 80090d2:	203c      	movs	r0, #60	@ 0x3c
 80090d4:	f7ff fee8 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x0F);
 80090d8:	200f      	movs	r0, #15
 80090da:	f7ff fee5 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x0F);
 80090de:	200f      	movs	r0, #15
 80090e0:	f7ff fee2 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0xA4);
 80090e4:	20a4      	movs	r0, #164	@ 0xa4
 80090e6:	f7ff fedf 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x02);
 80090ea:	2002      	movs	r0, #2
 80090ec:	f7ff fedc 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0XF2);
 80090f0:	20f2      	movs	r0, #242	@ 0xf2
 80090f2:	f7ff feb7 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x18);
 80090f6:	2018      	movs	r0, #24
 80090f8:	f7ff fed6 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0xA3);
 80090fc:	20a3      	movs	r0, #163	@ 0xa3
 80090fe:	f7ff fed3 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x12);
 8009102:	2012      	movs	r0, #18
 8009104:	f7ff fed0 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x02);
 8009108:	2002      	movs	r0, #2
 800910a:	f7ff fecd 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x32);
 800910e:	2032      	movs	r0, #50	@ 0x32
 8009110:	f7ff feca 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x12);
 8009114:	2012      	movs	r0, #18
 8009116:	f7ff fec7 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0xFF);
 800911a:	20ff      	movs	r0, #255	@ 0xff
 800911c:	f7ff fec4 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x32);
 8009120:	2032      	movs	r0, #50	@ 0x32
 8009122:	f7ff fec1 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009126:	2000      	movs	r0, #0
 8009128:	f7ff febe 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0XF4);
 800912c:	20f4      	movs	r0, #244	@ 0xf4
 800912e:	f7ff fe99 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x40);
 8009132:	2040      	movs	r0, #64	@ 0x40
 8009134:	f7ff feb8 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8009138:	2000      	movs	r0, #0
 800913a:	f7ff feb5 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x08);
 800913e:	2008      	movs	r0, #8
 8009140:	f7ff feb2 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x91);
 8009144:	2091      	movs	r0, #145	@ 0x91
 8009146:	f7ff feaf 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x04);
 800914a:	2004      	movs	r0, #4
 800914c:	f7ff feac 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0XF8);
 8009150:	20f8      	movs	r0, #248	@ 0xf8
 8009152:	f7ff fe87 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x21);
 8009156:	2021      	movs	r0, #33	@ 0x21
 8009158:	f7ff fea6 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(0x04);
 800915c:	2004      	movs	r0, #4
 800915e:	f7ff fea3 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0X3A);	//Set Interface Pixel Format
 8009162:	203a      	movs	r0, #58	@ 0x3a
 8009164:	f7ff fe7e 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0x55);
 8009168:	2055      	movs	r0, #85	@ 0x55
 800916a:	f7ff fe9d 	bl	8008ea8 <LCD_WriteData>

}
 800916e:	bf00      	nop
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <LCD_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	71fb      	strb	r3, [r7, #7]
    uint16_t MemoryAccessReg_Data = 0; //addr:0x36
 800917e:	2300      	movs	r3, #0
 8009180:	81fb      	strh	r3, [r7, #14]
    uint16_t DisFunReg_Data = 0; //addr:0xB6
 8009182:	2300      	movs	r3, #0
 8009184:	81bb      	strh	r3, [r7, #12]

    // Gets the scan direction of GRAM
    switch (Scan_dir) {
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	2b07      	cmp	r3, #7
 800918a:	d83b      	bhi.n	8009204 <LCD_SetGramScanWay+0x90>
 800918c:	a201      	add	r2, pc, #4	@ (adr r2, 8009194 <LCD_SetGramScanWay+0x20>)
 800918e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009192:	bf00      	nop
 8009194:	080091b5 	.word	0x080091b5
 8009198:	080091bf 	.word	0x080091bf
 800919c:	080091c9 	.word	0x080091c9
 80091a0:	080091d3 	.word	0x080091d3
 80091a4:	080091dd 	.word	0x080091dd
 80091a8:	080091e7 	.word	0x080091e7
 80091ac:	080091f1 	.word	0x080091f1
 80091b0:	080091fb 	.word	0x080091fb
    case L2R_U2D:
        MemoryAccessReg_Data = 0x08;//0x08 | 0X8
 80091b4:	2308      	movs	r3, #8
 80091b6:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 80091b8:	2322      	movs	r3, #34	@ 0x22
 80091ba:	81bb      	strh	r3, [r7, #12]
        break;
 80091bc:	e022      	b.n	8009204 <LCD_SetGramScanWay+0x90>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x08;
 80091be:	2308      	movs	r3, #8
 80091c0:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 80091c2:	2362      	movs	r3, #98	@ 0x62
 80091c4:	81bb      	strh	r3, [r7, #12]
        break;
 80091c6:	e01d      	b.n	8009204 <LCD_SetGramScanWay+0x90>
    case R2L_U2D: //0X4
        MemoryAccessReg_Data = 0x08;
 80091c8:	2308      	movs	r3, #8
 80091ca:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 80091cc:	2302      	movs	r3, #2
 80091ce:	81bb      	strh	r3, [r7, #12]
        break;
 80091d0:	e018      	b.n	8009204 <LCD_SetGramScanWay+0x90>
    case R2L_D2U: //0XC
        MemoryAccessReg_Data = 0x08;
 80091d2:	2308      	movs	r3, #8
 80091d4:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 80091d6:	2342      	movs	r3, #66	@ 0x42
 80091d8:	81bb      	strh	r3, [r7, #12]
        break;
 80091da:	e013      	b.n	8009204 <LCD_SetGramScanWay+0x90>
    case U2D_L2R: //0X2
        MemoryAccessReg_Data = 0x28;
 80091dc:	2328      	movs	r3, #40	@ 0x28
 80091de:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x22;
 80091e0:	2322      	movs	r3, #34	@ 0x22
 80091e2:	81bb      	strh	r3, [r7, #12]
        break;
 80091e4:	e00e      	b.n	8009204 <LCD_SetGramScanWay+0x90>
    case U2D_R2L: //0X6
        MemoryAccessReg_Data = 0x28;
 80091e6:	2328      	movs	r3, #40	@ 0x28
 80091e8:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x02;
 80091ea:	2302      	movs	r3, #2
 80091ec:	81bb      	strh	r3, [r7, #12]
        break;
 80091ee:	e009      	b.n	8009204 <LCD_SetGramScanWay+0x90>
    case D2U_L2R: //0XA
        MemoryAccessReg_Data = 0x28;
 80091f0:	2328      	movs	r3, #40	@ 0x28
 80091f2:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x62;
 80091f4:	2362      	movs	r3, #98	@ 0x62
 80091f6:	81bb      	strh	r3, [r7, #12]
        break;
 80091f8:	e004      	b.n	8009204 <LCD_SetGramScanWay+0x90>
    case D2U_R2L: //0XE
        MemoryAccessReg_Data = 0x28;
 80091fa:	2328      	movs	r3, #40	@ 0x28
 80091fc:	81fb      	strh	r3, [r7, #14]
        DisFunReg_Data = 0x42;
 80091fe:	2342      	movs	r3, #66	@ 0x42
 8009200:	81bb      	strh	r3, [r7, #12]
        break;
 8009202:	bf00      	nop
    }

    //Get the screen scan direction
    sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 8009204:	4a1b      	ldr	r2, [pc, #108]	@ (8009274 <LCD_SetGramScanWay+0x100>)
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	7113      	strb	r3, [r2, #4]

    //Get GRAM and LCD width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d008      	beq.n	8009222 <LCD_SetGramScanWay+0xae>
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d005      	beq.n	8009222 <LCD_SetGramScanWay+0xae>
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d002      	beq.n	8009222 <LCD_SetGramScanWay+0xae>
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	2b03      	cmp	r3, #3
 8009220:	d108      	bne.n	8009234 <LCD_SetGramScanWay+0xc0>
        sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 8009222:	4b14      	ldr	r3, [pc, #80]	@ (8009274 <LCD_SetGramScanWay+0x100>)
 8009224:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009228:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;
 800922a:	4b12      	ldr	r3, [pc, #72]	@ (8009274 <LCD_SetGramScanWay+0x100>)
 800922c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009230:	805a      	strh	r2, [r3, #2]
 8009232:	e007      	b.n	8009244 <LCD_SetGramScanWay+0xd0>
    } else {
        sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 8009234:	4b0f      	ldr	r3, [pc, #60]	@ (8009274 <LCD_SetGramScanWay+0x100>)
 8009236:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800923a:	801a      	strh	r2, [r3, #0]
        sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;
 800923c:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <LCD_SetGramScanWay+0x100>)
 800923e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8009242:	805a      	strh	r2, [r3, #2]
    }

    // Set the read / write scan direction of the frame memory
    LCD_WriteReg(0xB6);
 8009244:	20b6      	movs	r0, #182	@ 0xb6
 8009246:	f7ff fe0d 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(0X00);
 800924a:	2000      	movs	r0, #0
 800924c:	f7ff fe2c 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(DisFunReg_Data);
 8009250:	89bb      	ldrh	r3, [r7, #12]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff fe27 	bl	8008ea8 <LCD_WriteData>

    LCD_WriteReg(0x36);
 800925a:	2036      	movs	r0, #54	@ 0x36
 800925c:	f7ff fe02 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(MemoryAccessReg_Data);
 8009260:	89fb      	ldrh	r3, [r7, #14]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff fe1f 	bl	8008ea8 <LCD_WriteData>
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20002110 	.word	0x20002110

08009278 <LCD_Init>:
/********************************************************************************
function:
	initialization
********************************************************************************/
void LCD_Init(LCD_SCAN_DIR LCD_ScanDir, uint16_t LCD_BLval)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	460a      	mov	r2, r1
 8009282:	71fb      	strb	r3, [r7, #7]
 8009284:	4613      	mov	r3, r2
 8009286:	80bb      	strh	r3, [r7, #4]
    //Hardware reset
    LCD_Reset();
 8009288:	f7ff fdba 	bl	8008e00 <LCD_Reset>

	if(LCD_BLval > 65535)
		LCD_BLval = 65535;
	LCD_SetBackLight(LCD_BLval);
 800928c:	88bb      	ldrh	r3, [r7, #4]
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff fdda 	bl	8008e48 <LCD_SetBackLight>
	
    //Set the initialization register
    LCD_InitReg();
 8009294:	f7ff fe64 	bl	8008f60 <LCD_InitReg>

    //Set the display scan and color transfer modes
    LCD_SetGramScanWay( LCD_ScanDir);
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff ff6a 	bl	8009174 <LCD_SetGramScanWay>
    Driver_Delay_ms(200);
 80092a0:	20c8      	movs	r0, #200	@ 0xc8
 80092a2:	f7ff f8b1 	bl	8008408 <Driver_Delay_ms>

    //sleep out
    LCD_WriteReg(0x11);
 80092a6:	2011      	movs	r0, #17
 80092a8:	f7ff fddc 	bl	8008e64 <LCD_WriteReg>
    Driver_Delay_ms(120);
 80092ac:	2078      	movs	r0, #120	@ 0x78
 80092ae:	f7ff f8ab 	bl	8008408 <Driver_Delay_ms>

    //Turn on the LCD display
    LCD_WriteReg(0x29);
 80092b2:	2029      	movs	r0, #41	@ 0x29
 80092b4:	f7ff fdd6 	bl	8008e64 <LCD_WriteReg>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <LCD_SetWindow>:
	Ystart  :   Y direction Start coordinates
	Xend    :   X direction end coordinates
	Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindow(POINT Xstart, POINT Ystart,	POINT Xend, POINT Yend)
{
 80092c0:	b590      	push	{r4, r7, lr}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	4611      	mov	r1, r2
 80092cc:	461a      	mov	r2, r3
 80092ce:	4623      	mov	r3, r4
 80092d0:	80fb      	strh	r3, [r7, #6]
 80092d2:	4603      	mov	r3, r0
 80092d4:	80bb      	strh	r3, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	807b      	strh	r3, [r7, #2]
 80092da:	4613      	mov	r3, r2
 80092dc:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_WriteReg(0x2A);
 80092de:	202a      	movs	r0, #42	@ 0x2a
 80092e0:	f7ff fdc0 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(Xstart >> 8);	 				//Set the horizontal starting point to the high octet
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	0a1b      	lsrs	r3, r3, #8
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff fddb 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(Xstart & 0xff);	 				//Set the horizontal starting point to the low octet
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff fdd6 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData((Xend - 1) >> 8);	//Set the horizontal end to the high octet
 80092fc:	887b      	ldrh	r3, [r7, #2]
 80092fe:	3b01      	subs	r3, #1
 8009300:	121b      	asrs	r3, r3, #8
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff fdcf 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData((Xend - 1) & 0xff);	//Set the horizontal end to the low octet
 800930a:	887b      	ldrh	r3, [r7, #2]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	b2db      	uxtb	r3, r3
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff fdc8 	bl	8008ea8 <LCD_WriteData>

    //set the Y coordinates
    LCD_WriteReg(0x2B);
 8009318:	202b      	movs	r0, #43	@ 0x2b
 800931a:	f7ff fda3 	bl	8008e64 <LCD_WriteReg>
    LCD_WriteData(Ystart >> 8);
 800931e:	88bb      	ldrh	r3, [r7, #4]
 8009320:	0a1b      	lsrs	r3, r3, #8
 8009322:	b29b      	uxth	r3, r3
 8009324:	b2db      	uxtb	r3, r3
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fdbe 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData(Ystart & 0xff );
 800932c:	88bb      	ldrh	r3, [r7, #4]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff fdb9 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData((Yend - 1) >> 8);
 8009336:	883b      	ldrh	r3, [r7, #0]
 8009338:	3b01      	subs	r3, #1
 800933a:	121b      	asrs	r3, r3, #8
 800933c:	b2db      	uxtb	r3, r3
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff fdb2 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteData((Yend - 1) & 0xff);
 8009344:	883b      	ldrh	r3, [r7, #0]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	b2db      	uxtb	r3, r3
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff fdab 	bl	8008ea8 <LCD_WriteData>
    LCD_WriteReg(0x2C);
 8009352:	202c      	movs	r0, #44	@ 0x2c
 8009354:	f7ff fd86 	bl	8008e64 <LCD_WriteReg>
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	bd90      	pop	{r4, r7, pc}

08009360 <LCD_SetCursor>:
parameter:
	xStart :   X direction Start coordinates
	xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor(POINT Xpoint, POINT Ypoint)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	460a      	mov	r2, r1
 800936a:	80fb      	strh	r3, [r7, #6]
 800936c:	4613      	mov	r3, r2
 800936e:	80bb      	strh	r3, [r7, #4]
    LCD_SetWindow(Xpoint, Ypoint, Xpoint, Ypoint);
 8009370:	88bb      	ldrh	r3, [r7, #4]
 8009372:	88fa      	ldrh	r2, [r7, #6]
 8009374:	88b9      	ldrh	r1, [r7, #4]
 8009376:	88f8      	ldrh	r0, [r7, #6]
 8009378:	f7ff ffa2 	bl	80092c0 <LCD_SetWindow>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <LCD_SetColor>:
parameter:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void LCD_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor(COLOR Color , POINT Xpoint, POINT Ypoint)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	80fb      	strh	r3, [r7, #6]
 800938e:	460b      	mov	r3, r1
 8009390:	80bb      	strh	r3, [r7, #4]
 8009392:	4613      	mov	r3, r2
 8009394:	807b      	strh	r3, [r7, #2]
    LCD_Write_AllData(Color , (uint32_t)Xpoint * (uint32_t)Ypoint);
 8009396:	88bb      	ldrh	r3, [r7, #4]
 8009398:	887a      	ldrh	r2, [r7, #2]
 800939a:	fb03 f202 	mul.w	r2, r3, r2
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fda8 	bl	8008ef8 <LCD_Write_AllData>
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <LCD_SetPointlColor>:
	Xpoint :   The x coordinate of the point
	Ypoint :   The y coordinate of the point
	Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor( POINT Xpoint, POINT Ypoint, COLOR Color)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	80fb      	strh	r3, [r7, #6]
 80093ba:	460b      	mov	r3, r1
 80093bc:	80bb      	strh	r3, [r7, #4]
 80093be:	4613      	mov	r3, r2
 80093c0:	807b      	strh	r3, [r7, #2]
    if ((Xpoint <= sLCD_DIS.LCD_Dis_Column) && (Ypoint <= sLCD_DIS.LCD_Dis_Page)) {
 80093c2:	4b0d      	ldr	r3, [pc, #52]	@ (80093f8 <LCD_SetPointlColor+0x48>)
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	88fa      	ldrh	r2, [r7, #6]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d810      	bhi.n	80093ee <LCD_SetPointlColor+0x3e>
 80093cc:	4b0a      	ldr	r3, [pc, #40]	@ (80093f8 <LCD_SetPointlColor+0x48>)
 80093ce:	885b      	ldrh	r3, [r3, #2]
 80093d0:	88ba      	ldrh	r2, [r7, #4]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d80b      	bhi.n	80093ee <LCD_SetPointlColor+0x3e>
        LCD_SetCursor (Xpoint, Ypoint);
 80093d6:	88ba      	ldrh	r2, [r7, #4]
 80093d8:	88fb      	ldrh	r3, [r7, #6]
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff ffbf 	bl	8009360 <LCD_SetCursor>
        LCD_SetColor(Color, 1, 1);
 80093e2:	887b      	ldrh	r3, [r7, #2]
 80093e4:	2201      	movs	r2, #1
 80093e6:	2101      	movs	r1, #1
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7ff ffcb 	bl	8009384 <LCD_SetColor>
    }
}
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20002110 	.word	0x20002110

080093fc <LCD_SetArealColor>:
	Xend   :   End point coordinates
	Yend   :   End point coordinates
	Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR Color)
{
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	4604      	mov	r4, r0
 8009404:	4608      	mov	r0, r1
 8009406:	4611      	mov	r1, r2
 8009408:	461a      	mov	r2, r3
 800940a:	4623      	mov	r3, r4
 800940c:	80fb      	strh	r3, [r7, #6]
 800940e:	4603      	mov	r3, r0
 8009410:	80bb      	strh	r3, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	807b      	strh	r3, [r7, #2]
 8009416:	4613      	mov	r3, r2
 8009418:	803b      	strh	r3, [r7, #0]
    if((Xend > Xstart) && (Yend > Ystart)) {
 800941a:	887a      	ldrh	r2, [r7, #2]
 800941c:	88fb      	ldrh	r3, [r7, #6]
 800941e:	429a      	cmp	r2, r3
 8009420:	d915      	bls.n	800944e <LCD_SetArealColor+0x52>
 8009422:	883a      	ldrh	r2, [r7, #0]
 8009424:	88bb      	ldrh	r3, [r7, #4]
 8009426:	429a      	cmp	r2, r3
 8009428:	d911      	bls.n	800944e <LCD_SetArealColor+0x52>
        LCD_SetWindow(Xstart , Ystart , Xend , Yend  );
 800942a:	883b      	ldrh	r3, [r7, #0]
 800942c:	887a      	ldrh	r2, [r7, #2]
 800942e:	88b9      	ldrh	r1, [r7, #4]
 8009430:	88f8      	ldrh	r0, [r7, #6]
 8009432:	f7ff ff45 	bl	80092c0 <LCD_SetWindow>
        LCD_SetColor ( Color , Xend - Xstart, Yend - Ystart);
 8009436:	887a      	ldrh	r2, [r7, #2]
 8009438:	88fb      	ldrh	r3, [r7, #6]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	b299      	uxth	r1, r3
 800943e:	883a      	ldrh	r2, [r7, #0]
 8009440:	88bb      	ldrh	r3, [r7, #4]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	b29a      	uxth	r2, r3
 8009446:	8b3b      	ldrh	r3, [r7, #24]
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff ff9b 	bl	8009384 <LCD_SetColor>
    }
}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	bd90      	pop	{r4, r7, pc}
	...

08009458 <LCD_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_Clear(COLOR  Color)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af02      	add	r7, sp, #8
 800945e:	4603      	mov	r3, r0
 8009460:	80fb      	strh	r3, [r7, #6]
    LCD_SetArealColor(0, 0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page , Color);
 8009462:	4b07      	ldr	r3, [pc, #28]	@ (8009480 <LCD_Clear+0x28>)
 8009464:	881a      	ldrh	r2, [r3, #0]
 8009466:	4b06      	ldr	r3, [pc, #24]	@ (8009480 <LCD_Clear+0x28>)
 8009468:	8859      	ldrh	r1, [r3, #2]
 800946a:	88fb      	ldrh	r3, [r7, #6]
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	460b      	mov	r3, r1
 8009470:	2100      	movs	r1, #0
 8009472:	2000      	movs	r0, #0
 8009474:	f7ff ffc2 	bl	80093fc <LCD_SetArealColor>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20002110 	.word	0x20002110

08009484 <GUI_Swop>:
extern LCD_DIS sLCD_DIS;
/******************************************************************************
function:	Coordinate conversion
******************************************************************************/
void GUI_Swop(POINT Point1, POINT Point2)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	460a      	mov	r2, r1
 800948e:	80fb      	strh	r3, [r7, #6]
 8009490:	4613      	mov	r3, r2
 8009492:	80bb      	strh	r3, [r7, #4]
    POINT Temp;
    Temp = Point1;
 8009494:	88fb      	ldrh	r3, [r7, #6]
 8009496:	81fb      	strh	r3, [r7, #14]
    Point1 = Point2;
 8009498:	88bb      	ldrh	r3, [r7, #4]
 800949a:	80fb      	strh	r3, [r7, #6]
    Point2 = Temp;
 800949c:	89fb      	ldrh	r3, [r7, #14]
 800949e:	80bb      	strh	r3, [r7, #4]
}
 80094a0:	bf00      	nop
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <GUI_DrawPoint>:
	Color		:   Set color
	Dot_Pixel	:	point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	4623      	mov	r3, r4
 80094bc:	80fb      	strh	r3, [r7, #6]
 80094be:	4603      	mov	r3, r0
 80094c0:	80bb      	strh	r3, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	807b      	strh	r3, [r7, #2]
 80094c6:	4613      	mov	r3, r2
 80094c8:	707b      	strb	r3, [r7, #1]
    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 80094ca:	4b34      	ldr	r3, [pc, #208]	@ (800959c <GUI_DrawPoint+0xf0>)
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	88fa      	ldrh	r2, [r7, #6]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d804      	bhi.n	80094de <GUI_DrawPoint+0x32>
 80094d4:	4b31      	ldr	r3, [pc, #196]	@ (800959c <GUI_DrawPoint+0xf0>)
 80094d6:	885b      	ldrh	r3, [r3, #2]
 80094d8:	88ba      	ldrh	r2, [r7, #4]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d903      	bls.n	80094e6 <GUI_DrawPoint+0x3a>
        DEBUG("GUI_DrawPoint Input exceeds the normal display range\r\n");
 80094de:	4830      	ldr	r0, [pc, #192]	@ (80095a0 <GUI_DrawPoint+0xf4>)
 80094e0:	f001 ffba 	bl	800b458 <puts>
        return;
 80094e4:	e056      	b.n	8009594 <GUI_DrawPoint+0xe8>
    }

    uint16_t XDir_Num , YDir_Num;
    if(DOT_STYLE == DOT_STYLE_DFT) {
 80094e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d12c      	bne.n	8009548 <GUI_DrawPoint+0x9c>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80094ee:	2300      	movs	r3, #0
 80094f0:	81fb      	strh	r3, [r7, #14]
 80094f2:	e022      	b.n	800953a <GUI_DrawPoint+0x8e>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80094f4:	2300      	movs	r3, #0
 80094f6:	81bb      	strh	r3, [r7, #12]
 80094f8:	e016      	b.n	8009528 <GUI_DrawPoint+0x7c>
                LCD_SetPointlColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80094fa:	88fa      	ldrh	r2, [r7, #6]
 80094fc:	89fb      	ldrh	r3, [r7, #14]
 80094fe:	4413      	add	r3, r2
 8009500:	b29a      	uxth	r2, r3
 8009502:	787b      	ldrb	r3, [r7, #1]
 8009504:	b29b      	uxth	r3, r3
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	b298      	uxth	r0, r3
 800950a:	88ba      	ldrh	r2, [r7, #4]
 800950c:	89bb      	ldrh	r3, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	b29a      	uxth	r2, r3
 8009512:	787b      	ldrb	r3, [r7, #1]
 8009514:	b29b      	uxth	r3, r3
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	b29b      	uxth	r3, r3
 800951a:	887a      	ldrh	r2, [r7, #2]
 800951c:	4619      	mov	r1, r3
 800951e:	f7ff ff47 	bl	80093b0 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8009522:	89bb      	ldrh	r3, [r7, #12]
 8009524:	3301      	adds	r3, #1
 8009526:	81bb      	strh	r3, [r7, #12]
 8009528:	89ba      	ldrh	r2, [r7, #12]
 800952a:	787b      	ldrb	r3, [r7, #1]
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	3b01      	subs	r3, #1
 8009530:	429a      	cmp	r2, r3
 8009532:	dbe2      	blt.n	80094fa <GUI_DrawPoint+0x4e>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8009534:	89fb      	ldrh	r3, [r7, #14]
 8009536:	3301      	adds	r3, #1
 8009538:	81fb      	strh	r3, [r7, #14]
 800953a:	89fa      	ldrh	r2, [r7, #14]
 800953c:	787b      	ldrb	r3, [r7, #1]
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	3b01      	subs	r3, #1
 8009542:	429a      	cmp	r2, r3
 8009544:	dbd6      	blt.n	80094f4 <GUI_DrawPoint+0x48>
 8009546:	e025      	b.n	8009594 <GUI_DrawPoint+0xe8>
            }
        }
    } else {
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8009548:	2300      	movs	r3, #0
 800954a:	81fb      	strh	r3, [r7, #14]
 800954c:	e01d      	b.n	800958a <GUI_DrawPoint+0xde>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800954e:	2300      	movs	r3, #0
 8009550:	81bb      	strh	r3, [r7, #12]
 8009552:	e012      	b.n	800957a <GUI_DrawPoint+0xce>
                LCD_SetPointlColor(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8009554:	88fa      	ldrh	r2, [r7, #6]
 8009556:	89fb      	ldrh	r3, [r7, #14]
 8009558:	4413      	add	r3, r2
 800955a:	b29b      	uxth	r3, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	b298      	uxth	r0, r3
 8009560:	88ba      	ldrh	r2, [r7, #4]
 8009562:	89bb      	ldrh	r3, [r7, #12]
 8009564:	4413      	add	r3, r2
 8009566:	b29b      	uxth	r3, r3
 8009568:	3b01      	subs	r3, #1
 800956a:	b29b      	uxth	r3, r3
 800956c:	887a      	ldrh	r2, [r7, #2]
 800956e:	4619      	mov	r1, r3
 8009570:	f7ff ff1e 	bl	80093b0 <LCD_SetPointlColor>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8009574:	89bb      	ldrh	r3, [r7, #12]
 8009576:	3301      	adds	r3, #1
 8009578:	81bb      	strh	r3, [r7, #12]
 800957a:	787b      	ldrb	r3, [r7, #1]
 800957c:	b29b      	uxth	r3, r3
 800957e:	89ba      	ldrh	r2, [r7, #12]
 8009580:	429a      	cmp	r2, r3
 8009582:	d3e7      	bcc.n	8009554 <GUI_DrawPoint+0xa8>
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8009584:	89fb      	ldrh	r3, [r7, #14]
 8009586:	3301      	adds	r3, #1
 8009588:	81fb      	strh	r3, [r7, #14]
 800958a:	787b      	ldrb	r3, [r7, #1]
 800958c:	b29b      	uxth	r3, r3
 800958e:	89fa      	ldrh	r2, [r7, #14]
 8009590:	429a      	cmp	r2, r3
 8009592:	d3dc      	bcc.n	800954e <GUI_DrawPoint+0xa2>
            }
        }
    }
}
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	bd90      	pop	{r4, r7, pc}
 800959a:	bf00      	nop
 800959c:	20002110 	.word	0x20002110
 80095a0:	0800c25c 	.word	0x0800c25c

080095a4 <GUI_DrawLine>:
	Yend   ：End point y coordinate
	Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 80095a4:	b590      	push	{r4, r7, lr}
 80095a6:	b08d      	sub	sp, #52	@ 0x34
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	4604      	mov	r4, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	4611      	mov	r1, r2
 80095b0:	461a      	mov	r2, r3
 80095b2:	4623      	mov	r3, r4
 80095b4:	80fb      	strh	r3, [r7, #6]
 80095b6:	4603      	mov	r3, r0
 80095b8:	80bb      	strh	r3, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	807b      	strh	r3, [r7, #2]
 80095be:	4613      	mov	r3, r2
 80095c0:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80095c2:	4b58      	ldr	r3, [pc, #352]	@ (8009724 <GUI_DrawLine+0x180>)
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	88fa      	ldrh	r2, [r7, #6]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d80e      	bhi.n	80095ea <GUI_DrawLine+0x46>
 80095cc:	4b55      	ldr	r3, [pc, #340]	@ (8009724 <GUI_DrawLine+0x180>)
 80095ce:	885b      	ldrh	r3, [r3, #2]
 80095d0:	88ba      	ldrh	r2, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d809      	bhi.n	80095ea <GUI_DrawLine+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80095d6:	4b53      	ldr	r3, [pc, #332]	@ (8009724 <GUI_DrawLine+0x180>)
 80095d8:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 80095da:	887a      	ldrh	r2, [r7, #2]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d804      	bhi.n	80095ea <GUI_DrawLine+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 80095e0:	4b50      	ldr	r3, [pc, #320]	@ (8009724 <GUI_DrawLine+0x180>)
 80095e2:	885b      	ldrh	r3, [r3, #2]
 80095e4:	883a      	ldrh	r2, [r7, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d903      	bls.n	80095f2 <GUI_DrawLine+0x4e>
        DEBUG("GUI_DrawLine Input exceeds the normal display range\r\n");
 80095ea:	484f      	ldr	r0, [pc, #316]	@ (8009728 <GUI_DrawLine+0x184>)
 80095ec:	f001 ff34 	bl	800b458 <puts>
        return;
 80095f0:	e094      	b.n	800971c <GUI_DrawLine+0x178>
    }

    if(Xstart > Xend)
 80095f2:	88fa      	ldrh	r2, [r7, #6]
 80095f4:	887b      	ldrh	r3, [r7, #2]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d905      	bls.n	8009606 <GUI_DrawLine+0x62>
        GUI_Swop(Xstart, Xend);
 80095fa:	887a      	ldrh	r2, [r7, #2]
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff ff3f 	bl	8009484 <GUI_Swop>
    if(Ystart > Yend)
 8009606:	88ba      	ldrh	r2, [r7, #4]
 8009608:	883b      	ldrh	r3, [r7, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d905      	bls.n	800961a <GUI_DrawLine+0x76>
        GUI_Swop(Ystart, Yend);
 800960e:	883a      	ldrh	r2, [r7, #0]
 8009610:	88bb      	ldrh	r3, [r7, #4]
 8009612:	4611      	mov	r1, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f7ff ff35 	bl	8009484 <GUI_Swop>

    POINT Xpoint = Xstart;
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    POINT Ypoint = Ystart;
 800961e:	88bb      	ldrh	r3, [r7, #4]
 8009620:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int32_t dx = (int32_t)Xend - (int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8009622:	887a      	ldrh	r2, [r7, #2]
 8009624:	88fb      	ldrh	r3, [r7, #6]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	bfb8      	it	lt
 800962c:	425b      	neglt	r3, r3
 800962e:	61bb      	str	r3, [r7, #24]
    int32_t dy = (int32_t)Yend - (int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8009630:	883a      	ldrh	r2, [r7, #0]
 8009632:	88bb      	ldrh	r3, [r7, #4]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	bfb8      	it	lt
 800963a:	425b      	neglt	r3, r3
 800963c:	425b      	negs	r3, r3
 800963e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int32_t XAddway = Xstart < Xend ? 1 : -1;
 8009640:	88fa      	ldrh	r2, [r7, #6]
 8009642:	887b      	ldrh	r3, [r7, #2]
 8009644:	429a      	cmp	r2, r3
 8009646:	d201      	bcs.n	800964c <GUI_DrawLine+0xa8>
 8009648:	2301      	movs	r3, #1
 800964a:	e001      	b.n	8009650 <GUI_DrawLine+0xac>
 800964c:	f04f 33ff 	mov.w	r3, #4294967295
 8009650:	613b      	str	r3, [r7, #16]
    int32_t YAddway = Ystart < Yend ? 1 : -1;
 8009652:	88ba      	ldrh	r2, [r7, #4]
 8009654:	883b      	ldrh	r3, [r7, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d201      	bcs.n	800965e <GUI_DrawLine+0xba>
 800965a:	2301      	movs	r3, #1
 800965c:	e001      	b.n	8009662 <GUI_DrawLine+0xbe>
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int32_t Esp = dx + dy;
 8009664:	69ba      	ldr	r2, [r7, #24]
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	4413      	add	r3, r2
 800966a:	623b      	str	r3, [r7, #32]
    int8_t Line_Style_Temp = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	77fb      	strb	r3, [r7, #31]

    for(;;) {
        Line_Style_Temp++;
 8009670:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	3301      	adds	r3, #1
 8009678:	b2db      	uxtb	r3, r3
 800967a:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if(Line_Style == LINE_DOTTED && Line_Style_Temp % 3 == 0) {
 800967c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8009680:	2b01      	cmp	r3, #1
 8009682:	d11a      	bne.n	80096ba <GUI_DrawLine+0x116>
 8009684:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8009688:	4b28      	ldr	r3, [pc, #160]	@ (800972c <GUI_DrawLine+0x188>)
 800968a:	fb83 3102 	smull	r3, r1, r3, r2
 800968e:	17d3      	asrs	r3, r2, #31
 8009690:	1ac9      	subs	r1, r1, r3
 8009692:	460b      	mov	r3, r1
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	440b      	add	r3, r1
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	b25b      	sxtb	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10c      	bne.n	80096ba <GUI_DrawLine+0x116>
            //DEBUG("LINE_DOTTED\r\n");
            GUI_DrawPoint(Xpoint, Ypoint, LCD_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 80096a0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80096a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80096a6:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80096a8:	2201      	movs	r2, #1
 80096aa:	9200      	str	r2, [sp, #0]
 80096ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096b0:	f7ff fefc 	bl	80094ac <GUI_DrawPoint>
            Line_Style_Temp = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	77fb      	strb	r3, [r7, #31]
 80096b8:	e008      	b.n	80096cc <GUI_DrawLine+0x128>
        } else {
            GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 80096ba:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80096be:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80096c0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80096c2:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80096c4:	2401      	movs	r4, #1
 80096c6:	9400      	str	r4, [sp, #0]
 80096c8:	f7ff fef0 	bl	80094ac <GUI_DrawPoint>
        }
        if(2 * Esp >= dy) {
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	dc0c      	bgt.n	80096f0 <GUI_DrawLine+0x14c>
            if(Xpoint == Xend) break;
 80096d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80096d8:	887b      	ldrh	r3, [r7, #2]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d01b      	beq.n	8009716 <GUI_DrawLine+0x172>
            Esp += dy;
 80096de:	6a3a      	ldr	r2, [r7, #32]
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	4413      	add	r3, r2
 80096e4:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80096ec:	4413      	add	r3, r2
 80096ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        if(2 * Esp <= dx) {
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	dbba      	blt.n	8009670 <GUI_DrawLine+0xcc>
            if(Ypoint == Yend) break;
 80096fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80096fc:	883b      	ldrh	r3, [r7, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d00b      	beq.n	800971a <GUI_DrawLine+0x176>
            Esp += dx;
 8009702:	6a3a      	ldr	r2, [r7, #32]
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	4413      	add	r3, r2
 8009708:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	b29a      	uxth	r2, r3
 800970e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009710:	4413      	add	r3, r2
 8009712:	84bb      	strh	r3, [r7, #36]	@ 0x24
        Line_Style_Temp++;
 8009714:	e7ac      	b.n	8009670 <GUI_DrawLine+0xcc>
            if(Xpoint == Xend) break;
 8009716:	bf00      	nop
 8009718:	e000      	b.n	800971c <GUI_DrawLine+0x178>
            if(Ypoint == Yend) break;
 800971a:	bf00      	nop
        }
    }
}
 800971c:	372c      	adds	r7, #44	@ 0x2c
 800971e:	46bd      	mov	sp, r7
 8009720:	bd90      	pop	{r4, r7, pc}
 8009722:	bf00      	nop
 8009724:	20002110 	.word	0x20002110
 8009728:	0800c29c 	.word	0x0800c29c
 800972c:	55555556 	.word	0x55555556

08009730 <GUI_DrawRectangle>:
	Color  ：The color of the Rectangular segment
	Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel)
{
 8009730:	b590      	push	{r4, r7, lr}
 8009732:	b087      	sub	sp, #28
 8009734:	af04      	add	r7, sp, #16
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	461a      	mov	r2, r3
 800973e:	4623      	mov	r3, r4
 8009740:	80fb      	strh	r3, [r7, #6]
 8009742:	4603      	mov	r3, r0
 8009744:	80bb      	strh	r3, [r7, #4]
 8009746:	460b      	mov	r3, r1
 8009748:	807b      	strh	r3, [r7, #2]
 800974a:	4613      	mov	r3, r2
 800974c:	803b      	strh	r3, [r7, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 800974e:	4b3a      	ldr	r3, [pc, #232]	@ (8009838 <GUI_DrawRectangle+0x108>)
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	88fa      	ldrh	r2, [r7, #6]
 8009754:	429a      	cmp	r2, r3
 8009756:	d80e      	bhi.n	8009776 <GUI_DrawRectangle+0x46>
 8009758:	4b37      	ldr	r3, [pc, #220]	@ (8009838 <GUI_DrawRectangle+0x108>)
 800975a:	885b      	ldrh	r3, [r3, #2]
 800975c:	88ba      	ldrh	r2, [r7, #4]
 800975e:	429a      	cmp	r2, r3
 8009760:	d809      	bhi.n	8009776 <GUI_DrawRectangle+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 8009762:	4b35      	ldr	r3, [pc, #212]	@ (8009838 <GUI_DrawRectangle+0x108>)
 8009764:	881b      	ldrh	r3, [r3, #0]
    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page ||
 8009766:	887a      	ldrh	r2, [r7, #2]
 8009768:	429a      	cmp	r2, r3
 800976a:	d804      	bhi.n	8009776 <GUI_DrawRectangle+0x46>
       Xend > sLCD_DIS.LCD_Dis_Column || Yend > sLCD_DIS.LCD_Dis_Page) {
 800976c:	4b32      	ldr	r3, [pc, #200]	@ (8009838 <GUI_DrawRectangle+0x108>)
 800976e:	885b      	ldrh	r3, [r3, #2]
 8009770:	883a      	ldrh	r2, [r7, #0]
 8009772:	429a      	cmp	r2, r3
 8009774:	d903      	bls.n	800977e <GUI_DrawRectangle+0x4e>
        DEBUG("Input exceeds the normal display range\r\n");
 8009776:	4831      	ldr	r0, [pc, #196]	@ (800983c <GUI_DrawRectangle+0x10c>)
 8009778:	f001 fe6e 	bl	800b458 <puts>
        return;
 800977c:	e058      	b.n	8009830 <GUI_DrawRectangle+0x100>
    }

    if(Xstart > Xend)
 800977e:	88fa      	ldrh	r2, [r7, #6]
 8009780:	887b      	ldrh	r3, [r7, #2]
 8009782:	429a      	cmp	r2, r3
 8009784:	d905      	bls.n	8009792 <GUI_DrawRectangle+0x62>
        GUI_Swop(Xstart, Xend);
 8009786:	887a      	ldrh	r2, [r7, #2]
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	4611      	mov	r1, r2
 800978c:	4618      	mov	r0, r3
 800978e:	f7ff fe79 	bl	8009484 <GUI_Swop>
    if(Ystart > Yend)
 8009792:	88ba      	ldrh	r2, [r7, #4]
 8009794:	883b      	ldrh	r3, [r7, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d905      	bls.n	80097a6 <GUI_DrawRectangle+0x76>
        GUI_Swop(Ystart, Yend);
 800979a:	883a      	ldrh	r2, [r7, #0]
 800979c:	88bb      	ldrh	r3, [r7, #4]
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fe6f 	bl	8009484 <GUI_Swop>

    
    if(Filled ) {
 80097a6:	7f3b      	ldrb	r3, [r7, #28]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d009      	beq.n	80097c0 <GUI_DrawRectangle+0x90>
		POINT Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
        }
	#elif HIGH_Speed_Show
		LCD_SetArealColor( Xstart, Ystart, Xend, Yend, Color);
 80097ac:	883c      	ldrh	r4, [r7, #0]
 80097ae:	887a      	ldrh	r2, [r7, #2]
 80097b0:	88b9      	ldrh	r1, [r7, #4]
 80097b2:	88f8      	ldrh	r0, [r7, #6]
 80097b4:	8b3b      	ldrh	r3, [r7, #24]
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	4623      	mov	r3, r4
 80097ba:	f7ff fe1f 	bl	80093fc <LCD_SetArealColor>
 80097be:	e037      	b.n	8009830 <GUI_DrawRectangle+0x100>
	#endif
    } else {
        GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 80097c0:	88bc      	ldrh	r4, [r7, #4]
 80097c2:	887a      	ldrh	r2, [r7, #2]
 80097c4:	88b9      	ldrh	r1, [r7, #4]
 80097c6:	88f8      	ldrh	r0, [r7, #6]
 80097c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097cc:	9302      	str	r3, [sp, #8]
 80097ce:	2300      	movs	r3, #0
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	8b3b      	ldrh	r3, [r7, #24]
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	4623      	mov	r3, r4
 80097d8:	f7ff fee4 	bl	80095a4 <GUI_DrawLine>
        GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 80097dc:	883c      	ldrh	r4, [r7, #0]
 80097de:	88fa      	ldrh	r2, [r7, #6]
 80097e0:	88b9      	ldrh	r1, [r7, #4]
 80097e2:	88f8      	ldrh	r0, [r7, #6]
 80097e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097e8:	9302      	str	r3, [sp, #8]
 80097ea:	2300      	movs	r3, #0
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	8b3b      	ldrh	r3, [r7, #24]
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	4623      	mov	r3, r4
 80097f4:	f7ff fed6 	bl	80095a4 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 80097f8:	88bc      	ldrh	r4, [r7, #4]
 80097fa:	887a      	ldrh	r2, [r7, #2]
 80097fc:	8839      	ldrh	r1, [r7, #0]
 80097fe:	8878      	ldrh	r0, [r7, #2]
 8009800:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009804:	9302      	str	r3, [sp, #8]
 8009806:	2300      	movs	r3, #0
 8009808:	9301      	str	r3, [sp, #4]
 800980a:	8b3b      	ldrh	r3, [r7, #24]
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	4623      	mov	r3, r4
 8009810:	f7ff fec8 	bl	80095a4 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 8009814:	883c      	ldrh	r4, [r7, #0]
 8009816:	88fa      	ldrh	r2, [r7, #6]
 8009818:	8839      	ldrh	r1, [r7, #0]
 800981a:	8878      	ldrh	r0, [r7, #2]
 800981c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009820:	9302      	str	r3, [sp, #8]
 8009822:	2300      	movs	r3, #0
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	8b3b      	ldrh	r3, [r7, #24]
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	4623      	mov	r3, r4
 800982c:	f7ff feba 	bl	80095a4 <GUI_DrawLine>
    }
}
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	bd90      	pop	{r4, r7, pc}
 8009836:	bf00      	nop
 8009838:	20002110 	.word	0x20002110
 800983c:	0800c2dc 	.word	0x0800c2dc

08009840 <GUI_DisChar>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08a      	sub	sp, #40	@ 0x28
 8009844:	af02      	add	r7, sp, #8
 8009846:	607b      	str	r3, [r7, #4]
 8009848:	4603      	mov	r3, r0
 800984a:	81fb      	strh	r3, [r7, #14]
 800984c:	460b      	mov	r3, r1
 800984e:	81bb      	strh	r3, [r7, #12]
 8009850:	4613      	mov	r3, r2
 8009852:	72fb      	strb	r3, [r7, #11]
    POINT Page, Column;

    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8009854:	4b50      	ldr	r3, [pc, #320]	@ (8009998 <GUI_DisChar+0x158>)
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	89fa      	ldrh	r2, [r7, #14]
 800985a:	429a      	cmp	r2, r3
 800985c:	d804      	bhi.n	8009868 <GUI_DisChar+0x28>
 800985e:	4b4e      	ldr	r3, [pc, #312]	@ (8009998 <GUI_DisChar+0x158>)
 8009860:	885b      	ldrh	r3, [r3, #2]
 8009862:	89ba      	ldrh	r2, [r7, #12]
 8009864:	429a      	cmp	r2, r3
 8009866:	d903      	bls.n	8009870 <GUI_DisChar+0x30>
        DEBUG("GUI_DisChar Input exceeds the normal display range\r\n");
 8009868:	484c      	ldr	r0, [pc, #304]	@ (800999c <GUI_DisChar+0x15c>)
 800986a:	f001 fdf5 	bl	800b458 <puts>
        return;
 800986e:	e08f      	b.n	8009990 <GUI_DisChar+0x150>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8009870:	7afb      	ldrb	r3, [r7, #11]
 8009872:	3b20      	subs	r3, #32
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	88d2      	ldrh	r2, [r2, #6]
 8009878:	fb02 f303 	mul.w	r3, r2, r3
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	8892      	ldrh	r2, [r2, #4]
 8009880:	08d2      	lsrs	r2, r2, #3
 8009882:	b292      	uxth	r2, r2
 8009884:	4611      	mov	r1, r2
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	8892      	ldrh	r2, [r2, #4]
 800988a:	f002 0207 	and.w	r2, r2, #7
 800988e:	b292      	uxth	r2, r2
 8009890:	2a00      	cmp	r2, #0
 8009892:	bf14      	ite	ne
 8009894:	2201      	movne	r2, #1
 8009896:	2200      	moveq	r2, #0
 8009898:	b2d2      	uxtb	r2, r2
 800989a:	440a      	add	r2, r1
 800989c:	fb02 f303 	mul.w	r3, r2, r3
 80098a0:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	4413      	add	r3, r2
 80098aa:	61bb      	str	r3, [r7, #24]

    for(Page = 0; Page < Font->Height; Page ++ ) {
 80098ac:	2300      	movs	r3, #0
 80098ae:	83fb      	strh	r3, [r7, #30]
 80098b0:	e069      	b.n	8009986 <GUI_DisChar+0x146>
        for(Column = 0; Column < Font->Width; Column ++ ) {
 80098b2:	2300      	movs	r3, #0
 80098b4:	83bb      	strh	r3, [r7, #28]
 80098b6:	e054      	b.n	8009962 <GUI_DisChar+0x122>

            //To determine whether the font background color and screen background color is consistent
            if(FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80098b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80098ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80098be:	4293      	cmp	r3, r2
 80098c0:	d11a      	bne.n	80098f8 <GUI_DisChar+0xb8>
                if(*ptr & (0x80 >> (Column % 8)))
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	4619      	mov	r1, r3
 80098c8:	8bbb      	ldrh	r3, [r7, #28]
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	2280      	movs	r2, #128	@ 0x80
 80098d0:	fa42 f303 	asr.w	r3, r2, r3
 80098d4:	400b      	ands	r3, r1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d037      	beq.n	800994a <GUI_DisChar+0x10a>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 80098da:	89fa      	ldrh	r2, [r7, #14]
 80098dc:	8bbb      	ldrh	r3, [r7, #28]
 80098de:	4413      	add	r3, r2
 80098e0:	b298      	uxth	r0, r3
 80098e2:	89ba      	ldrh	r2, [r7, #12]
 80098e4:	8bfb      	ldrh	r3, [r7, #30]
 80098e6:	4413      	add	r3, r2
 80098e8:	b299      	uxth	r1, r3
 80098ea:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80098ec:	2301      	movs	r3, #1
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2301      	movs	r3, #1
 80098f2:	f7ff fddb 	bl	80094ac <GUI_DrawPoint>
 80098f6:	e028      	b.n	800994a <GUI_DisChar+0x10a>
            } else {
                if(*ptr & (0x80 >> (Column % 8))) {
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	4619      	mov	r1, r3
 80098fe:	8bbb      	ldrh	r3, [r7, #28]
 8009900:	f003 0307 	and.w	r3, r3, #7
 8009904:	2280      	movs	r2, #128	@ 0x80
 8009906:	fa42 f303 	asr.w	r3, r2, r3
 800990a:	400b      	ands	r3, r1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00e      	beq.n	800992e <GUI_DisChar+0xee>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8009910:	89fa      	ldrh	r2, [r7, #14]
 8009912:	8bbb      	ldrh	r3, [r7, #28]
 8009914:	4413      	add	r3, r2
 8009916:	b298      	uxth	r0, r3
 8009918:	89ba      	ldrh	r2, [r7, #12]
 800991a:	8bfb      	ldrh	r3, [r7, #30]
 800991c:	4413      	add	r3, r2
 800991e:	b299      	uxth	r1, r3
 8009920:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009922:	2301      	movs	r3, #1
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	2301      	movs	r3, #1
 8009928:	f7ff fdc0 	bl	80094ac <GUI_DrawPoint>
 800992c:	e00d      	b.n	800994a <GUI_DisChar+0x10a>
                } else {
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800992e:	89fa      	ldrh	r2, [r7, #14]
 8009930:	8bbb      	ldrh	r3, [r7, #28]
 8009932:	4413      	add	r3, r2
 8009934:	b298      	uxth	r0, r3
 8009936:	89ba      	ldrh	r2, [r7, #12]
 8009938:	8bfb      	ldrh	r3, [r7, #30]
 800993a:	4413      	add	r3, r2
 800993c:	b299      	uxth	r1, r3
 800993e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009940:	2301      	movs	r3, #1
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	2301      	movs	r3, #1
 8009946:	f7ff fdb1 	bl	80094ac <GUI_DrawPoint>
                }
            }
            //One pixel is 8 bits
            if(Column % 8 == 7)
 800994a:	8bbb      	ldrh	r3, [r7, #28]
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	b29b      	uxth	r3, r3
 8009952:	2b07      	cmp	r3, #7
 8009954:	d102      	bne.n	800995c <GUI_DisChar+0x11c>
                ptr++;
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	3301      	adds	r3, #1
 800995a:	61bb      	str	r3, [r7, #24]
        for(Column = 0; Column < Font->Width; Column ++ ) {
 800995c:	8bbb      	ldrh	r3, [r7, #28]
 800995e:	3301      	adds	r3, #1
 8009960:	83bb      	strh	r3, [r7, #28]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	889b      	ldrh	r3, [r3, #4]
 8009966:	8bba      	ldrh	r2, [r7, #28]
 8009968:	429a      	cmp	r2, r3
 800996a:	d3a5      	bcc.n	80098b8 <GUI_DisChar+0x78>
        }/* Write a line */
        if(Font->Width % 8 != 0)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	889b      	ldrh	r3, [r3, #4]
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	b29b      	uxth	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <GUI_DisChar+0x140>
            ptr++;
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	3301      	adds	r3, #1
 800997e:	61bb      	str	r3, [r7, #24]
    for(Page = 0; Page < Font->Height; Page ++ ) {
 8009980:	8bfb      	ldrh	r3, [r7, #30]
 8009982:	3301      	adds	r3, #1
 8009984:	83fb      	strh	r3, [r7, #30]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	88db      	ldrh	r3, [r3, #6]
 800998a:	8bfa      	ldrh	r2, [r7, #30]
 800998c:	429a      	cmp	r2, r3
 800998e:	d390      	bcc.n	80098b2 <GUI_DisChar+0x72>
    }/* Write all */
}
 8009990:	3720      	adds	r7, #32
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20002110 	.word	0x20002110
 800999c:	0800c34c 	.word	0x0800c34c

080099a0 <GUI_DisString_EN>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	60ba      	str	r2, [r7, #8]
 80099a8:	607b      	str	r3, [r7, #4]
 80099aa:	4603      	mov	r3, r0
 80099ac:	81fb      	strh	r3, [r7, #14]
 80099ae:	460b      	mov	r3, r1
 80099b0:	81bb      	strh	r3, [r7, #12]
    POINT Xpoint = Xstart;
 80099b2:	89fb      	ldrh	r3, [r7, #14]
 80099b4:	82fb      	strh	r3, [r7, #22]
    POINT Ypoint = Ystart;
 80099b6:	89bb      	ldrh	r3, [r7, #12]
 80099b8:	82bb      	strh	r3, [r7, #20]

    if(Xstart > sLCD_DIS.LCD_Dis_Column || Ystart > sLCD_DIS.LCD_Dis_Page) {
 80099ba:	4b21      	ldr	r3, [pc, #132]	@ (8009a40 <GUI_DisString_EN+0xa0>)
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	89fa      	ldrh	r2, [r7, #14]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d804      	bhi.n	80099ce <GUI_DisString_EN+0x2e>
 80099c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009a40 <GUI_DisString_EN+0xa0>)
 80099c6:	885b      	ldrh	r3, [r3, #2]
 80099c8:	89ba      	ldrh	r2, [r7, #12]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d931      	bls.n	8009a32 <GUI_DisString_EN+0x92>
        DEBUG("GUI_DisString_EN Input exceeds the normal display range\r\n");
 80099ce:	481d      	ldr	r0, [pc, #116]	@ (8009a44 <GUI_DisString_EN+0xa4>)
 80099d0:	f001 fd42 	bl	800b458 <puts>
        return;
 80099d4:	e031      	b.n	8009a3a <GUI_DisString_EN+0x9a>
    }

    while(* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
        if((Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ) {
 80099d6:	8afb      	ldrh	r3, [r7, #22]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	8892      	ldrh	r2, [r2, #4]
 80099dc:	4413      	add	r3, r2
 80099de:	4a18      	ldr	r2, [pc, #96]	@ (8009a40 <GUI_DisString_EN+0xa0>)
 80099e0:	8812      	ldrh	r2, [r2, #0]
 80099e2:	4293      	cmp	r3, r2
 80099e4:	dd06      	ble.n	80099f4 <GUI_DisString_EN+0x54>
            Xpoint = Xstart;
 80099e6:	89fb      	ldrh	r3, [r7, #14]
 80099e8:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	88da      	ldrh	r2, [r3, #6]
 80099ee:	8abb      	ldrh	r3, [r7, #20]
 80099f0:	4413      	add	r3, r2
 80099f2:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if((Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ) {
 80099f4:	8abb      	ldrh	r3, [r7, #20]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	88d2      	ldrh	r2, [r2, #6]
 80099fa:	4413      	add	r3, r2
 80099fc:	4a10      	ldr	r2, [pc, #64]	@ (8009a40 <GUI_DisString_EN+0xa0>)
 80099fe:	8852      	ldrh	r2, [r2, #2]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	dd03      	ble.n	8009a0c <GUI_DisString_EN+0x6c>
            Xpoint = Xstart;
 8009a04:	89fb      	ldrh	r3, [r7, #14]
 8009a06:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8009a08:	89bb      	ldrh	r3, [r7, #12]
 8009a0a:	82bb      	strh	r3, [r7, #20]
        }
        GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	781a      	ldrb	r2, [r3, #0]
 8009a10:	8ab9      	ldrh	r1, [r7, #20]
 8009a12:	8af8      	ldrh	r0, [r7, #22]
 8009a14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	8c3b      	ldrh	r3, [r7, #32]
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f7ff ff0f 	bl	8009840 <GUI_DisChar>

        //The next character of the address
        pString ++;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	3301      	adds	r3, #1
 8009a26:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	889a      	ldrh	r2, [r3, #4]
 8009a2c:	8afb      	ldrh	r3, [r7, #22]
 8009a2e:	4413      	add	r3, r2
 8009a30:	82fb      	strh	r3, [r7, #22]
    while(* pString != '\0') {
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1cd      	bne.n	80099d6 <GUI_DisString_EN+0x36>
    }
}
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20002110 	.word	0x20002110
 8009a44:	0800c388 	.word	0x0800c388

08009a48 <GUI_DisFloatNum>:
}


void GUI_DisFloatNum(POINT Xpoint, POINT Ypoint, float Nummber,
                sFONT* Font, COLOR Color_Background, COLOR Color_Foreground )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b094      	sub	sp, #80	@ 0x50
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	ed87 0a04 	vstr	s0, [r7, #16]
 8009a52:	60fa      	str	r2, [r7, #12]
 8009a54:	461a      	mov	r2, r3
 8009a56:	4603      	mov	r3, r0
 8009a58:	82fb      	strh	r3, [r7, #22]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	82bb      	strh	r3, [r7, #20]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	817b      	strh	r3, [r7, #10]
    if(Xpoint > sLCD_DIS.LCD_Dis_Column || Ypoint > sLCD_DIS.LCD_Dis_Page) {
 8009a62:	4b7f      	ldr	r3, [pc, #508]	@ (8009c60 <GUI_DisFloatNum+0x218>)
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	8afa      	ldrh	r2, [r7, #22]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d804      	bhi.n	8009a76 <GUI_DisFloatNum+0x2e>
 8009a6c:	4b7c      	ldr	r3, [pc, #496]	@ (8009c60 <GUI_DisFloatNum+0x218>)
 8009a6e:	885b      	ldrh	r3, [r3, #2]
 8009a70:	8aba      	ldrh	r2, [r7, #20]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d903      	bls.n	8009a7e <GUI_DisFloatNum+0x36>
        DEBUG("GUI_DisNum Input exceeds the normal display range\r\n");
 8009a76:	487b      	ldr	r0, [pc, #492]	@ (8009c64 <GUI_DisFloatNum+0x21c>)
 8009a78:	f001 fcee 	bl	800b458 <puts>
 8009a7c:	e0ed      	b.n	8009c5a <GUI_DisFloatNum+0x212>
        return;
    }

    // Проверяем, является ли число отрицательным
    uint8_t isNegative = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (Nummber < 0) {
 8009a84:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a90:	d508      	bpl.n	8009aa4 <GUI_DisFloatNum+0x5c>
        isNegative = 1;
 8009a92:	2301      	movs	r3, #1
 8009a94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        Nummber = -Nummber;
 8009a98:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a9c:	eef1 7a67 	vneg.f32	s15, s15
 8009aa0:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    // Разделяем число на целую и дробную части
    uint8_t integerPart = (int)Nummber;
 8009aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8009aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009aac:	edc7 7a01 	vstr	s15, [r7, #4]
 8009ab0:	793b      	ldrb	r3, [r7, #4]
 8009ab2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    float fractionalPart = Nummber - integerPart;
 8009ab6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ac2:	ed97 7a04 	vldr	s14, [r7, #16]
 8009ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009aca:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Извлекаем сотые доли (округляем до двух знаков)
    uint8_t hundredths = (int)(fractionalPart * 100 + 0.5f); // +0.5 для округления
 8009ace:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8009ad2:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8009c68 <GUI_DisFloatNum+0x220>
 8009ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ada:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009ade:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ae6:	edc7 7a01 	vstr	s15, [r7, #4]
 8009aea:	793b      	ldrb	r3, [r7, #4]
 8009aec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Обрабатываем целую часть (разбиваем на цифры)
    uint8_t intDigits[10] = {0}; // Максимум 10 цифр для int
 8009af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	605a      	str	r2, [r3, #4]
 8009afa:	811a      	strh	r2, [r3, #8]
    uint8_t Str_Array[10] = {0};
 8009afc:	f107 0318 	add.w	r3, r7, #24
 8009b00:	2200      	movs	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	605a      	str	r2, [r3, #4]
 8009b06:	811a      	strh	r2, [r3, #8]
    uint8_t *pStr = Str_Array;
 8009b08:	f107 0318 	add.w	r3, r7, #24
 8009b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t intLen = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    // Если целая часть = 0, то всё равно записываем 0
    if (integerPart == 0) {
 8009b14:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d12d      	bne.n	8009b78 <GUI_DisFloatNum+0x130>
        intDigits[intLen++] = 0;
 8009b1c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 8009b26:	3340      	adds	r3, #64	@ 0x40
 8009b28:	f107 0208 	add.w	r2, r7, #8
 8009b2c:	4413      	add	r3, r2
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f803 2c24 	strb.w	r2, [r3, #-36]
 8009b34:	e028      	b.n	8009b88 <GUI_DisFloatNum+0x140>
    } else {
        while (integerPart > 0 && intLen < 10) {
            intDigits[intLen++] = integerPart % 10;
 8009b36:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	f887 2045 	strb.w	r2, [r7, #69]	@ 0x45
 8009b40:	4618      	mov	r0, r3
 8009b42:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009b46:	4b49      	ldr	r3, [pc, #292]	@ (8009c6c <GUI_DisFloatNum+0x224>)
 8009b48:	fba3 1302 	umull	r1, r3, r3, r2
 8009b4c:	08d9      	lsrs	r1, r3, #3
 8009b4e:	460b      	mov	r3, r1
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	440b      	add	r3, r1
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	f100 0340 	add.w	r3, r0, #64	@ 0x40
 8009b5e:	f107 0108 	add.w	r1, r7, #8
 8009b62:	440b      	add	r3, r1
 8009b64:	f803 2c24 	strb.w	r2, [r3, #-36]
            integerPart /= 10;
 8009b68:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c6c <GUI_DisFloatNum+0x224>)
 8009b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b72:	08db      	lsrs	r3, r3, #3
 8009b74:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        while (integerPart > 0 && intLen < 10) {
 8009b78:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <GUI_DisFloatNum+0x140>
 8009b80:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009b84:	2b09      	cmp	r3, #9
 8009b86:	d9d6      	bls.n	8009b36 <GUI_DisFloatNum+0xee>
        }
    }

    // Записываем цифры целой части в обратном порядке
    size_t pos = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (isNegative) {
 8009b8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d009      	beq.n	8009ba8 <GUI_DisFloatNum+0x160>
    	Str_Array[pos++] = '-'; // Можно заменить на 255 или другое значение, если нужны только цифры
 8009b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	643a      	str	r2, [r7, #64]	@ 0x40
 8009b9a:	3340      	adds	r3, #64	@ 0x40
 8009b9c:	f107 0208 	add.w	r2, r7, #8
 8009ba0:	4413      	add	r3, r2
 8009ba2:	222d      	movs	r2, #45	@ 0x2d
 8009ba4:	f803 2c30 	strb.w	r2, [r3, #-48]
    }

    for (int i = intLen - 1; i >= 0; i--) {
 8009ba8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009bac:	3b01      	subs	r3, #1
 8009bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bb0:	e012      	b.n	8009bd8 <GUI_DisFloatNum+0x190>
    	Str_Array[pos++] = intDigits[i] + '0';
 8009bb2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8009bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb8:	4413      	add	r3, r2
 8009bba:	781a      	ldrb	r2, [r3, #0]
 8009bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bbe:	1c59      	adds	r1, r3, #1
 8009bc0:	6439      	str	r1, [r7, #64]	@ 0x40
 8009bc2:	3230      	adds	r2, #48	@ 0x30
 8009bc4:	b2d2      	uxtb	r2, r2
 8009bc6:	3340      	adds	r3, #64	@ 0x40
 8009bc8:	f107 0108 	add.w	r1, r7, #8
 8009bcc:	440b      	add	r3, r1
 8009bce:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (int i = intLen - 1; i >= 0; i--) {
 8009bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dae9      	bge.n	8009bb2 <GUI_DisFloatNum+0x16a>
    }

    // Добавляем запятую
    Str_Array[pos++] = ','; // ASCII-код ',' = 44
 8009bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009be0:	1c5a      	adds	r2, r3, #1
 8009be2:	643a      	str	r2, [r7, #64]	@ 0x40
 8009be4:	3340      	adds	r3, #64	@ 0x40
 8009be6:	f107 0208 	add.w	r2, r7, #8
 8009bea:	4413      	add	r3, r2
 8009bec:	222c      	movs	r2, #44	@ 0x2c
 8009bee:	f803 2c30 	strb.w	r2, [r3, #-48]

    // Добавляем сотые доли (две цифры)
    Str_Array[pos++] = hundredths / 10 + '0';  // Десятые
 8009bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8009c6c <GUI_DisFloatNum+0x224>)
 8009bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfc:	08db      	lsrs	r3, r3, #3
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c02:	1c59      	adds	r1, r3, #1
 8009c04:	6439      	str	r1, [r7, #64]	@ 0x40
 8009c06:	3230      	adds	r2, #48	@ 0x30
 8009c08:	b2d2      	uxtb	r2, r2
 8009c0a:	3340      	adds	r3, #64	@ 0x40
 8009c0c:	f107 0108 	add.w	r1, r7, #8
 8009c10:	440b      	add	r3, r1
 8009c12:	f803 2c30 	strb.w	r2, [r3, #-48]
    Str_Array[pos++] = hundredths % 10 + '0';  // Сотые
 8009c16:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009c1a:	4b14      	ldr	r3, [pc, #80]	@ (8009c6c <GUI_DisFloatNum+0x224>)
 8009c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c20:	08d9      	lsrs	r1, r3, #3
 8009c22:	460b      	mov	r3, r1
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	440b      	add	r3, r1
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c30:	1c59      	adds	r1, r3, #1
 8009c32:	6439      	str	r1, [r7, #64]	@ 0x40
 8009c34:	3230      	adds	r2, #48	@ 0x30
 8009c36:	b2d2      	uxtb	r2, r2
 8009c38:	3340      	adds	r3, #64	@ 0x40
 8009c3a:	f107 0108 	add.w	r1, r7, #8
 8009c3e:	440b      	add	r3, r1
 8009c40:	f803 2c30 	strb.w	r2, [r3, #-48]

    //show
    GUI_DisString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground );
 8009c44:	8ab9      	ldrh	r1, [r7, #20]
 8009c46:	8af8      	ldrh	r0, [r7, #22]
 8009c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	897b      	ldrh	r3, [r7, #10]
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c56:	f7ff fea3 	bl	80099a0 <GUI_DisString_EN>
}
 8009c5a:	3748      	adds	r7, #72	@ 0x48
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20002110 	.word	0x20002110
 8009c64:	0800c3cc 	.word	0x0800c3cc
 8009c68:	42c80000 	.word	0x42c80000
 8009c6c:	cccccccd 	.word	0xcccccccd

08009c70 <GUI_GetFontSize>:
    }
}

// подбор размера шрифта
sFONT *GUI_GetFontSize(POINT Dx, POINT Dy)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	460a      	mov	r2, r1
 8009c7a:	80fb      	strh	r3, [r7, #6]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	80bb      	strh	r3, [r7, #4]
    sFONT *Font;
    if (Dx > Font24.Width && Dy > Font24.Height) {
 8009c80:	4b38      	ldr	r3, [pc, #224]	@ (8009d64 <GUI_GetFontSize+0xf4>)
 8009c82:	889b      	ldrh	r3, [r3, #4]
 8009c84:	88fa      	ldrh	r2, [r7, #6]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d907      	bls.n	8009c9a <GUI_GetFontSize+0x2a>
 8009c8a:	4b36      	ldr	r3, [pc, #216]	@ (8009d64 <GUI_GetFontSize+0xf4>)
 8009c8c:	88db      	ldrh	r3, [r3, #6]
 8009c8e:	88ba      	ldrh	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d902      	bls.n	8009c9a <GUI_GetFontSize+0x2a>
        Font = &Font24;
 8009c94:	4b33      	ldr	r3, [pc, #204]	@ (8009d64 <GUI_GetFontSize+0xf4>)
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	e05e      	b.n	8009d58 <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font20.Width && Dx < Font24.Width) &&
 8009c9a:	4b33      	ldr	r3, [pc, #204]	@ (8009d68 <GUI_GetFontSize+0xf8>)
 8009c9c:	889b      	ldrh	r3, [r3, #4]
 8009c9e:	88fa      	ldrh	r2, [r7, #6]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d911      	bls.n	8009cc8 <GUI_GetFontSize+0x58>
 8009ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8009d64 <GUI_GetFontSize+0xf4>)
 8009ca6:	889b      	ldrh	r3, [r3, #4]
 8009ca8:	88fa      	ldrh	r2, [r7, #6]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d20c      	bcs.n	8009cc8 <GUI_GetFontSize+0x58>
               (Dy > Font20.Height && Dy < Font24.Height)) {
 8009cae:	4b2e      	ldr	r3, [pc, #184]	@ (8009d68 <GUI_GetFontSize+0xf8>)
 8009cb0:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font20.Width && Dx < Font24.Width) &&
 8009cb2:	88ba      	ldrh	r2, [r7, #4]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d907      	bls.n	8009cc8 <GUI_GetFontSize+0x58>
               (Dy > Font20.Height && Dy < Font24.Height)) {
 8009cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8009d64 <GUI_GetFontSize+0xf4>)
 8009cba:	88db      	ldrh	r3, [r3, #6]
 8009cbc:	88ba      	ldrh	r2, [r7, #4]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d202      	bcs.n	8009cc8 <GUI_GetFontSize+0x58>
        Font = &Font20;
 8009cc2:	4b29      	ldr	r3, [pc, #164]	@ (8009d68 <GUI_GetFontSize+0xf8>)
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	e047      	b.n	8009d58 <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font16.Width && Dx < Font20.Width) &&
 8009cc8:	4b28      	ldr	r3, [pc, #160]	@ (8009d6c <GUI_GetFontSize+0xfc>)
 8009cca:	889b      	ldrh	r3, [r3, #4]
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d911      	bls.n	8009cf6 <GUI_GetFontSize+0x86>
 8009cd2:	4b25      	ldr	r3, [pc, #148]	@ (8009d68 <GUI_GetFontSize+0xf8>)
 8009cd4:	889b      	ldrh	r3, [r3, #4]
 8009cd6:	88fa      	ldrh	r2, [r7, #6]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d20c      	bcs.n	8009cf6 <GUI_GetFontSize+0x86>
               (Dy > Font16.Height && Dy < Font20.Height)) {
 8009cdc:	4b23      	ldr	r3, [pc, #140]	@ (8009d6c <GUI_GetFontSize+0xfc>)
 8009cde:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font16.Width && Dx < Font20.Width) &&
 8009ce0:	88ba      	ldrh	r2, [r7, #4]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d907      	bls.n	8009cf6 <GUI_GetFontSize+0x86>
               (Dy > Font16.Height && Dy < Font20.Height)) {
 8009ce6:	4b20      	ldr	r3, [pc, #128]	@ (8009d68 <GUI_GetFontSize+0xf8>)
 8009ce8:	88db      	ldrh	r3, [r3, #6]
 8009cea:	88ba      	ldrh	r2, [r7, #4]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d202      	bcs.n	8009cf6 <GUI_GetFontSize+0x86>
        Font = &Font16;
 8009cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8009d6c <GUI_GetFontSize+0xfc>)
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e030      	b.n	8009d58 <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font12.Width && Dx < Font16.Width) &&
 8009cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8009d70 <GUI_GetFontSize+0x100>)
 8009cf8:	889b      	ldrh	r3, [r3, #4]
 8009cfa:	88fa      	ldrh	r2, [r7, #6]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d911      	bls.n	8009d24 <GUI_GetFontSize+0xb4>
 8009d00:	4b1a      	ldr	r3, [pc, #104]	@ (8009d6c <GUI_GetFontSize+0xfc>)
 8009d02:	889b      	ldrh	r3, [r3, #4]
 8009d04:	88fa      	ldrh	r2, [r7, #6]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d20c      	bcs.n	8009d24 <GUI_GetFontSize+0xb4>
               (Dy > Font12.Height && Dy < Font16.Height)) {
 8009d0a:	4b19      	ldr	r3, [pc, #100]	@ (8009d70 <GUI_GetFontSize+0x100>)
 8009d0c:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font12.Width && Dx < Font16.Width) &&
 8009d0e:	88ba      	ldrh	r2, [r7, #4]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d907      	bls.n	8009d24 <GUI_GetFontSize+0xb4>
               (Dy > Font12.Height && Dy < Font16.Height)) {
 8009d14:	4b15      	ldr	r3, [pc, #84]	@ (8009d6c <GUI_GetFontSize+0xfc>)
 8009d16:	88db      	ldrh	r3, [r3, #6]
 8009d18:	88ba      	ldrh	r2, [r7, #4]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d202      	bcs.n	8009d24 <GUI_GetFontSize+0xb4>
        Font = &Font12;
 8009d1e:	4b14      	ldr	r3, [pc, #80]	@ (8009d70 <GUI_GetFontSize+0x100>)
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	e019      	b.n	8009d58 <GUI_GetFontSize+0xe8>
    } else if ((Dx > Font8.Width && Dx < Font12.Width) &&
 8009d24:	4b13      	ldr	r3, [pc, #76]	@ (8009d74 <GUI_GetFontSize+0x104>)
 8009d26:	889b      	ldrh	r3, [r3, #4]
 8009d28:	88fa      	ldrh	r2, [r7, #6]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d911      	bls.n	8009d52 <GUI_GetFontSize+0xe2>
 8009d2e:	4b10      	ldr	r3, [pc, #64]	@ (8009d70 <GUI_GetFontSize+0x100>)
 8009d30:	889b      	ldrh	r3, [r3, #4]
 8009d32:	88fa      	ldrh	r2, [r7, #6]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d20c      	bcs.n	8009d52 <GUI_GetFontSize+0xe2>
               (Dy > Font8.Height && Dy < Font12.Height)) {
 8009d38:	4b0e      	ldr	r3, [pc, #56]	@ (8009d74 <GUI_GetFontSize+0x104>)
 8009d3a:	88db      	ldrh	r3, [r3, #6]
    } else if ((Dx > Font8.Width && Dx < Font12.Width) &&
 8009d3c:	88ba      	ldrh	r2, [r7, #4]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d907      	bls.n	8009d52 <GUI_GetFontSize+0xe2>
               (Dy > Font8.Height && Dy < Font12.Height)) {
 8009d42:	4b0b      	ldr	r3, [pc, #44]	@ (8009d70 <GUI_GetFontSize+0x100>)
 8009d44:	88db      	ldrh	r3, [r3, #6]
 8009d46:	88ba      	ldrh	r2, [r7, #4]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d202      	bcs.n	8009d52 <GUI_GetFontSize+0xe2>
        Font = &Font8;
 8009d4c:	4b09      	ldr	r3, [pc, #36]	@ (8009d74 <GUI_GetFontSize+0x104>)
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	e002      	b.n	8009d58 <GUI_GetFontSize+0xe8>
    } else {
        DEBUG("Please change the display area size, or add a larger font to modify\r\n");
 8009d52:	4809      	ldr	r0, [pc, #36]	@ (8009d78 <GUI_GetFontSize+0x108>)
 8009d54:	f001 fb80 	bl	800b458 <puts>
    }
    return Font;
 8009d58:	68fb      	ldr	r3, [r7, #12]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20000114 	.word	0x20000114
 8009d68:	2000010c 	.word	0x2000010c
 8009d6c:	20000104 	.word	0x20000104
 8009d70:	200000fc 	.word	0x200000fc
 8009d74:	2000011c 	.word	0x2000011c
 8009d78:	0800c428 	.word	0x0800c428

08009d7c <GUI_Showtime>:
		Color  :   Set show color
  note:
******************************************************************************/
void GUI_Showtime(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  DEV_TIME *pTime, COLOR Color)
{
 8009d7c:	b590      	push	{r4, r7, lr}
 8009d7e:	b08b      	sub	sp, #44	@ 0x2c
 8009d80:	af02      	add	r7, sp, #8
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	80fb      	strh	r3, [r7, #6]
 8009d8e:	4603      	mov	r3, r0
 8009d90:	80bb      	strh	r3, [r7, #4]
 8009d92:	460b      	mov	r3, r1
 8009d94:	807b      	strh	r3, [r7, #2]
 8009d96:	4613      	mov	r3, r2
 8009d98:	803b      	strh	r3, [r7, #0]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8009d9a:	4a6b      	ldr	r2, [pc, #428]	@ (8009f48 <GUI_Showtime+0x1cc>)
 8009d9c:	f107 030c 	add.w	r3, r7, #12
 8009da0:	ca07      	ldmia	r2, {r0, r1, r2}
 8009da2:	c303      	stmia	r3!, {r0, r1}
 8009da4:	801a      	strh	r2, [r3, #0]
    sFONT *Font;

    //According to the display area adaptive font size
    POINT Dx = (Xend - Xstart) / 7;//Determine the spacing between characters
 8009da6:	887a      	ldrh	r2, [r7, #2]
 8009da8:	88fb      	ldrh	r3, [r7, #6]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	4a67      	ldr	r2, [pc, #412]	@ (8009f4c <GUI_Showtime+0x1d0>)
 8009dae:	fb82 1203 	smull	r1, r2, r2, r3
 8009db2:	441a      	add	r2, r3
 8009db4:	1092      	asrs	r2, r2, #2
 8009db6:	17db      	asrs	r3, r3, #31
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	83fb      	strh	r3, [r7, #30]
    POINT Dy = Yend - Ystart;      //determine the font size
 8009dbc:	883a      	ldrh	r2, [r7, #0]
 8009dbe:	88bb      	ldrh	r3, [r7, #4]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	83bb      	strh	r3, [r7, #28]
    Yend -= 5; // убрал немного расстояние отрисовки белого фона снизу
 8009dc4:	883b      	ldrh	r3, [r7, #0]
 8009dc6:	3b05      	subs	r3, #5
 8009dc8:	803b      	strh	r3, [r7, #0]
    Font = GUI_GetFontSize(Dx, Dy);
 8009dca:	8bba      	ldrh	r2, [r7, #28]
 8009dcc:	8bfb      	ldrh	r3, [r7, #30]
 8009dce:	4611      	mov	r1, r2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff ff4d 	bl	8009c70 <GUI_GetFontSize>
 8009dd6:	61b8      	str	r0, [r7, #24]
	
	if ((pTime->Sec % 10) < 10 && (pTime->Sec % 10) > 0) {
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dda:	799a      	ldrb	r2, [r3, #6]
 8009ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8009f50 <GUI_Showtime+0x1d4>)
 8009dde:	fba3 1302 	umull	r1, r3, r3, r2
 8009de2:	08d9      	lsrs	r1, r3, #3
 8009de4:	460b      	mov	r3, r1
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d011      	beq.n	8009e18 <GUI_Showtime+0x9c>
		LCD_SetArealColor(Xstart + Dx * 6, Ystart, Xend, Yend, WHITE);// xx:xx:x0
 8009df4:	8bfb      	ldrh	r3, [r7, #30]
 8009df6:	461a      	mov	r2, r3
 8009df8:	0052      	lsls	r2, r2, #1
 8009dfa:	4413      	add	r3, r2
 8009dfc:	005b      	lsls	r3, r3, #1
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	88fb      	ldrh	r3, [r7, #6]
 8009e02:	4413      	add	r3, r2
 8009e04:	b298      	uxth	r0, r3
 8009e06:	883b      	ldrh	r3, [r7, #0]
 8009e08:	887a      	ldrh	r2, [r7, #2]
 8009e0a:	88b9      	ldrh	r1, [r7, #4]
 8009e0c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009e10:	9400      	str	r4, [sp, #0]
 8009e12:	f7ff faf3 	bl	80093fc <LCD_SetArealColor>
 8009e16:	e0af      	b.n	8009f78 <GUI_Showtime+0x1fc>
	} else {
		if ((pTime->Sec / 10) < 6 && (pTime->Sec / 10) > 0) {
 8009e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1a:	799b      	ldrb	r3, [r3, #6]
 8009e1c:	2b3b      	cmp	r3, #59	@ 0x3b
 8009e1e:	d814      	bhi.n	8009e4a <GUI_Showtime+0xce>
 8009e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e22:	799b      	ldrb	r3, [r3, #6]
 8009e24:	2b09      	cmp	r3, #9
 8009e26:	d910      	bls.n	8009e4a <GUI_Showtime+0xce>
			LCD_SetArealColor(Xstart + Dx * 5, Ystart, Xend, Yend, WHITE);// xx:xx:00
 8009e28:	8bfb      	ldrh	r3, [r7, #30]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	0092      	lsls	r2, r2, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	88fb      	ldrh	r3, [r7, #6]
 8009e34:	4413      	add	r3, r2
 8009e36:	b298      	uxth	r0, r3
 8009e38:	883b      	ldrh	r3, [r7, #0]
 8009e3a:	887a      	ldrh	r2, [r7, #2]
 8009e3c:	88b9      	ldrh	r1, [r7, #4]
 8009e3e:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009e42:	9400      	str	r4, [sp, #0]
 8009e44:	f7ff fada 	bl	80093fc <LCD_SetArealColor>
 8009e48:	e096      	b.n	8009f78 <GUI_Showtime+0x1fc>
		} else {//sec = 60
			pTime->Min = pTime->Min + 1;
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4c:	795b      	ldrb	r3, [r3, #5]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	715a      	strb	r2, [r3, #5]
			pTime->Sec = 0;
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	2200      	movs	r2, #0
 8009e5a:	719a      	strb	r2, [r3, #6]
			if ((pTime->Min % 10) < 10 && (pTime->Min % 10) > 0) {
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5e:	795a      	ldrb	r2, [r3, #5]
 8009e60:	4b3b      	ldr	r3, [pc, #236]	@ (8009f50 <GUI_Showtime+0x1d4>)
 8009e62:	fba3 1302 	umull	r1, r3, r3, r2
 8009e66:	08d9      	lsrs	r1, r3, #3
 8009e68:	460b      	mov	r3, r1
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	440b      	add	r3, r1
 8009e6e:	005b      	lsls	r3, r3, #1
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d015      	beq.n	8009ea4 <GUI_Showtime+0x128>
				LCD_SetArealColor(Xstart + Dx * 3 + Dx / 2, Ystart, Xend, Yend, WHITE);// xx:x0:00
 8009e78:	8bfb      	ldrh	r3, [r7, #30]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	0052      	lsls	r2, r2, #1
 8009e7e:	4413      	add	r3, r2
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	88fb      	ldrh	r3, [r7, #6]
 8009e84:	4413      	add	r3, r2
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	8bfb      	ldrh	r3, [r7, #30]
 8009e8a:	085b      	lsrs	r3, r3, #1
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	4413      	add	r3, r2
 8009e90:	b298      	uxth	r0, r3
 8009e92:	883b      	ldrh	r3, [r7, #0]
 8009e94:	887a      	ldrh	r2, [r7, #2]
 8009e96:	88b9      	ldrh	r1, [r7, #4]
 8009e98:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009e9c:	9400      	str	r4, [sp, #0]
 8009e9e:	f7ff faad 	bl	80093fc <LCD_SetArealColor>
 8009ea2:	e069      	b.n	8009f78 <GUI_Showtime+0x1fc>
			} else {
				if ((pTime->Min / 10) < 6 && (pTime->Min / 10) > 0) {
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea6:	795b      	ldrb	r3, [r3, #5]
 8009ea8:	2b3b      	cmp	r3, #59	@ 0x3b
 8009eaa:	d817      	bhi.n	8009edc <GUI_Showtime+0x160>
 8009eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eae:	795b      	ldrb	r3, [r3, #5]
 8009eb0:	2b09      	cmp	r3, #9
 8009eb2:	d913      	bls.n	8009edc <GUI_Showtime+0x160>
					LCD_SetArealColor(Xstart + Dx * 2 + Dx / 2, Ystart, Xend, Yend, WHITE);// xx:00:00
 8009eb4:	8bfb      	ldrh	r3, [r7, #30]
 8009eb6:	005b      	lsls	r3, r3, #1
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	88fb      	ldrh	r3, [r7, #6]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	8bfb      	ldrh	r3, [r7, #30]
 8009ec2:	085b      	lsrs	r3, r3, #1
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	4413      	add	r3, r2
 8009ec8:	b298      	uxth	r0, r3
 8009eca:	883b      	ldrh	r3, [r7, #0]
 8009ecc:	887a      	ldrh	r2, [r7, #2]
 8009ece:	88b9      	ldrh	r1, [r7, #4]
 8009ed0:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009ed4:	9400      	str	r4, [sp, #0]
 8009ed6:	f7ff fa91 	bl	80093fc <LCD_SetArealColor>
 8009eda:	e04d      	b.n	8009f78 <GUI_Showtime+0x1fc>
				} else {//min = 60
					pTime->Hour =  pTime->Hour + 1;
 8009edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ede:	791b      	ldrb	r3, [r3, #4]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee6:	711a      	strb	r2, [r3, #4]
					pTime->Min = 0;
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	2200      	movs	r2, #0
 8009eec:	715a      	strb	r2, [r3, #5]
					if ((pTime->Hour % 10) < 4 && (pTime->Hour % 10) > 0 && pTime->Hour < 24) {// x0:00:00
 8009eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef0:	791a      	ldrb	r2, [r3, #4]
 8009ef2:	4b17      	ldr	r3, [pc, #92]	@ (8009f50 <GUI_Showtime+0x1d4>)
 8009ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ef8:	08d9      	lsrs	r1, r3, #3
 8009efa:	460b      	mov	r3, r1
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	440b      	add	r3, r1
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d824      	bhi.n	8009f54 <GUI_Showtime+0x1d8>
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0c:	791a      	ldrb	r2, [r3, #4]
 8009f0e:	4b10      	ldr	r3, [pc, #64]	@ (8009f50 <GUI_Showtime+0x1d4>)
 8009f10:	fba3 1302 	umull	r1, r3, r3, r2
 8009f14:	08d9      	lsrs	r1, r3, #3
 8009f16:	460b      	mov	r3, r1
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	440b      	add	r3, r1
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d016      	beq.n	8009f54 <GUI_Showtime+0x1d8>
 8009f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f28:	791b      	ldrb	r3, [r3, #4]
 8009f2a:	2b17      	cmp	r3, #23
 8009f2c:	d812      	bhi.n	8009f54 <GUI_Showtime+0x1d8>
						LCD_SetArealColor(Xstart + Dx, Ystart, Xend, Yend, WHITE);
 8009f2e:	88fa      	ldrh	r2, [r7, #6]
 8009f30:	8bfb      	ldrh	r3, [r7, #30]
 8009f32:	4413      	add	r3, r2
 8009f34:	b298      	uxth	r0, r3
 8009f36:	883b      	ldrh	r3, [r7, #0]
 8009f38:	887a      	ldrh	r2, [r7, #2]
 8009f3a:	88b9      	ldrh	r1, [r7, #4]
 8009f3c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009f40:	9400      	str	r4, [sp, #0]
 8009f42:	f7ff fa5b 	bl	80093fc <LCD_SetArealColor>
 8009f46:	e017      	b.n	8009f78 <GUI_Showtime+0x1fc>
 8009f48:	0800c478 	.word	0x0800c478
 8009f4c:	92492493 	.word	0x92492493
 8009f50:	cccccccd 	.word	0xcccccccd
					} else {
						pTime->Hour = 0;
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	2200      	movs	r2, #0
 8009f58:	711a      	strb	r2, [r3, #4]
						pTime->Min = 0;
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	715a      	strb	r2, [r3, #5]
						pTime->Sec = 0;
 8009f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f62:	2200      	movs	r2, #0
 8009f64:	719a      	strb	r2, [r3, #6]
						LCD_SetArealColor(Xstart, Ystart, Xend, Yend, WHITE);// 00:00:00
 8009f66:	883b      	ldrh	r3, [r7, #0]
 8009f68:	887a      	ldrh	r2, [r7, #2]
 8009f6a:	88b9      	ldrh	r1, [r7, #4]
 8009f6c:	88f8      	ldrh	r0, [r7, #6]
 8009f6e:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8009f72:	9400      	str	r4, [sp, #0]
 8009f74:	f7ff fa42 	bl	80093fc <LCD_SetArealColor>
			}
		}
	}
    
    //Write data into the cache
    GUI_DisChar(Xstart                           , Ystart, value[pTime->Hour / 10], Font, FONT_BACKGROUND, Color);
 8009f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7a:	791b      	ldrb	r3, [r3, #4]
 8009f7c:	4a74      	ldr	r2, [pc, #464]	@ (800a150 <GUI_Showtime+0x3d4>)
 8009f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f82:	08db      	lsrs	r3, r3, #3
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	3320      	adds	r3, #32
 8009f88:	443b      	add	r3, r7
 8009f8a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8009f8e:	88b9      	ldrh	r1, [r7, #4]
 8009f90:	88f8      	ldrh	r0, [r7, #6]
 8009f92:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	f7ff fc4f 	bl	8009840 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx                      , Ystart, value[pTime->Hour % 10], Font, FONT_BACKGROUND, Color);
 8009fa2:	88fa      	ldrh	r2, [r7, #6]
 8009fa4:	8bfb      	ldrh	r3, [r7, #30]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	b298      	uxth	r0, r3
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	791a      	ldrb	r2, [r3, #4]
 8009fae:	4b68      	ldr	r3, [pc, #416]	@ (800a150 <GUI_Showtime+0x3d4>)
 8009fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8009fb4:	08d9      	lsrs	r1, r3, #3
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	440b      	add	r3, r1
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	3320      	adds	r3, #32
 8009fc4:	443b      	add	r3, r7
 8009fc6:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8009fca:	88b9      	ldrh	r1, [r7, #4]
 8009fcc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	f7ff fc32 	bl	8009840 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, FONT_BACKGROUND, Color);
 8009fdc:	88fa      	ldrh	r2, [r7, #6]
 8009fde:	8bfb      	ldrh	r3, [r7, #30]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	8bfb      	ldrh	r3, [r7, #30]
 8009fe6:	089b      	lsrs	r3, r3, #2
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	4413      	add	r3, r2
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	8bfb      	ldrh	r3, [r7, #30]
 8009ff0:	085b      	lsrs	r3, r3, #1
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	4413      	add	r3, r2
 8009ff6:	b298      	uxth	r0, r3
 8009ff8:	88b9      	ldrh	r1, [r7, #4]
 8009ffa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009ffc:	9301      	str	r3, [sp, #4]
 8009ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	223a      	movs	r2, #58	@ 0x3a
 800a008:	f7ff fc1a 	bl	8009840 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Min / 10] , Font, FONT_BACKGROUND, Color);
 800a00c:	8bfb      	ldrh	r3, [r7, #30]
 800a00e:	005b      	lsls	r3, r3, #1
 800a010:	b29a      	uxth	r2, r3
 800a012:	88fb      	ldrh	r3, [r7, #6]
 800a014:	4413      	add	r3, r2
 800a016:	b29a      	uxth	r2, r3
 800a018:	8bfb      	ldrh	r3, [r7, #30]
 800a01a:	085b      	lsrs	r3, r3, #1
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	4413      	add	r3, r2
 800a020:	b298      	uxth	r0, r3
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	795b      	ldrb	r3, [r3, #5]
 800a026:	4a4a      	ldr	r2, [pc, #296]	@ (800a150 <GUI_Showtime+0x3d4>)
 800a028:	fba2 2303 	umull	r2, r3, r2, r3
 800a02c:	08db      	lsrs	r3, r3, #3
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	3320      	adds	r3, #32
 800a032:	443b      	add	r3, r7
 800a034:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a038:	88b9      	ldrh	r1, [r7, #4]
 800a03a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	f7ff fbfb 	bl	8009840 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Min % 10] , Font, FONT_BACKGROUND, Color);
 800a04a:	8bfb      	ldrh	r3, [r7, #30]
 800a04c:	461a      	mov	r2, r3
 800a04e:	0052      	lsls	r2, r2, #1
 800a050:	4413      	add	r3, r2
 800a052:	b29a      	uxth	r2, r3
 800a054:	88fb      	ldrh	r3, [r7, #6]
 800a056:	4413      	add	r3, r2
 800a058:	b29a      	uxth	r2, r3
 800a05a:	8bfb      	ldrh	r3, [r7, #30]
 800a05c:	085b      	lsrs	r3, r3, #1
 800a05e:	b29b      	uxth	r3, r3
 800a060:	4413      	add	r3, r2
 800a062:	b298      	uxth	r0, r3
 800a064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a066:	795a      	ldrb	r2, [r3, #5]
 800a068:	4b39      	ldr	r3, [pc, #228]	@ (800a150 <GUI_Showtime+0x3d4>)
 800a06a:	fba3 1302 	umull	r1, r3, r3, r2
 800a06e:	08d9      	lsrs	r1, r3, #3
 800a070:	460b      	mov	r3, r1
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	440b      	add	r3, r1
 800a076:	005b      	lsls	r3, r3, #1
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	3320      	adds	r3, #32
 800a07e:	443b      	add	r3, r7
 800a080:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a084:	88b9      	ldrh	r1, [r7, #4]
 800a086:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	f7ff fbd5 	bl	8009840 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, FONT_BACKGROUND, Color);
 800a096:	8bfb      	ldrh	r3, [r7, #30]
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	88fb      	ldrh	r3, [r7, #6]
 800a09e:	4413      	add	r3, r2
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	8bfb      	ldrh	r3, [r7, #30]
 800a0a4:	085b      	lsrs	r3, r3, #1
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	4413      	add	r3, r2
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	8bfb      	ldrh	r3, [r7, #30]
 800a0ae:	089b      	lsrs	r3, r3, #2
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	b298      	uxth	r0, r3
 800a0b6:	88b9      	ldrh	r1, [r7, #4]
 800a0b8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	223a      	movs	r2, #58	@ 0x3a
 800a0c6:	f7ff fbbb 	bl	8009840 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 5                  , Ystart, value[pTime->Sec / 10] , Font, FONT_BACKGROUND, Color);
 800a0ca:	8bfb      	ldrh	r3, [r7, #30]
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	0092      	lsls	r2, r2, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	88fb      	ldrh	r3, [r7, #6]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	b298      	uxth	r0, r3
 800a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0dc:	799b      	ldrb	r3, [r3, #6]
 800a0de:	4a1c      	ldr	r2, [pc, #112]	@ (800a150 <GUI_Showtime+0x3d4>)
 800a0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e4:	08db      	lsrs	r3, r3, #3
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	3320      	adds	r3, #32
 800a0ea:	443b      	add	r3, r7
 800a0ec:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a0f0:	88b9      	ldrh	r1, [r7, #4]
 800a0f2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a0f4:	9301      	str	r3, [sp, #4]
 800a0f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	f7ff fb9f 	bl	8009840 <GUI_DisChar>
    GUI_DisChar(Xstart + Dx * 6                  , Ystart, value[pTime->Sec % 10] , Font, FONT_BACKGROUND, Color);
 800a102:	8bfb      	ldrh	r3, [r7, #30]
 800a104:	461a      	mov	r2, r3
 800a106:	0052      	lsls	r2, r2, #1
 800a108:	4413      	add	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	88fb      	ldrh	r3, [r7, #6]
 800a110:	4413      	add	r3, r2
 800a112:	b298      	uxth	r0, r3
 800a114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a116:	799a      	ldrb	r2, [r3, #6]
 800a118:	4b0d      	ldr	r3, [pc, #52]	@ (800a150 <GUI_Showtime+0x3d4>)
 800a11a:	fba3 1302 	umull	r1, r3, r3, r2
 800a11e:	08d9      	lsrs	r1, r3, #3
 800a120:	460b      	mov	r3, r1
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	440b      	add	r3, r1
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	3320      	adds	r3, #32
 800a12e:	443b      	add	r3, r7
 800a130:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a134:	88b9      	ldrh	r1, [r7, #4]
 800a136:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a138:	9301      	str	r3, [sp, #4]
 800a13a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f7ff fb7d 	bl	8009840 <GUI_DisChar>
}
 800a146:	bf00      	nop
 800a148:	3724      	adds	r7, #36	@ 0x24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd90      	pop	{r4, r7, pc}
 800a14e:	bf00      	nop
 800a150:	cccccccd 	.word	0xcccccccd

0800a154 <TP_Read_ADC>:
parameter:
	Channel_Cmd :	0x90: Read channel Y +, select the ADC resolution is 12 bits, set to differential mode
					0xd0: Read channel x +, select the ADC resolution is 12 bits, set to differential mode
*******************************************************************************/
static uint16_t TP_Read_ADC(uint8_t CMD)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	71fb      	strb	r3, [r7, #7]
    uint16_t Data = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	81fb      	strh	r3, [r7, #14]

    //A cycle of at least 400ns.
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800a162:	4b1a      	ldr	r3, [pc, #104]	@ (800a1cc <TP_Read_ADC+0x78>)
 800a164:	2228      	movs	r2, #40	@ 0x28
 800a166:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800a168:	4818      	ldr	r0, [pc, #96]	@ (800a1cc <TP_Read_ADC+0x78>)
 800a16a:	f7f9 f8c7 	bl	80032fc <HAL_SPI_Init>

	TP_CS_0;
 800a16e:	2200      	movs	r2, #0
 800a170:	2180      	movs	r1, #128	@ 0x80
 800a172:	4817      	ldr	r0, [pc, #92]	@ (800a1d0 <TP_Read_ADC+0x7c>)
 800a174:	f7f7 f9fe 	bl	8001574 <HAL_GPIO_WritePin>

	SPI4W_Write_Byte(CMD);
 800a178:	79fb      	ldrb	r3, [r7, #7]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe f8fc 	bl	8008378 <SPI4W_Write_Byte>
	Driver_Delay_us(200);
 800a180:	20c8      	movs	r0, #200	@ 0xc8
 800a182:	f7fe f94c 	bl	800841e <Driver_Delay_us>
	
	Data = SPI4W_Read_Byte(0XFF);
 800a186:	20ff      	movs	r0, #255	@ 0xff
 800a188:	f7fe f930 	bl	80083ec <SPI4W_Read_Byte>
 800a18c:	4603      	mov	r3, r0
 800a18e:	81fb      	strh	r3, [r7, #14]
	Data <<= 8;//7bit
 800a190:	89fb      	ldrh	r3, [r7, #14]
 800a192:	021b      	lsls	r3, r3, #8
 800a194:	81fb      	strh	r3, [r7, #14]
	Data |= SPI4W_Read_Byte(0XFF);
 800a196:	20ff      	movs	r0, #255	@ 0xff
 800a198:	f7fe f928 	bl	80083ec <SPI4W_Read_Byte>
 800a19c:	4603      	mov	r3, r0
 800a19e:	461a      	mov	r2, r3
 800a1a0:	89fb      	ldrh	r3, [r7, #14]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	81fb      	strh	r3, [r7, #14]
	Data >>= 3;//5bit
 800a1a6:	89fb      	ldrh	r3, [r7, #14]
 800a1a8:	08db      	lsrs	r3, r3, #3
 800a1aa:	81fb      	strh	r3, [r7, #14]
	TP_CS_1;
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	2180      	movs	r1, #128	@ 0x80
 800a1b0:	4807      	ldr	r0, [pc, #28]	@ (800a1d0 <TP_Read_ADC+0x7c>)
 800a1b2:	f7f7 f9df 	bl	8001574 <HAL_GPIO_WritePin>
	
	//LCD SPI speed = 18 MHz
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800a1b6:	4b05      	ldr	r3, [pc, #20]	@ (800a1cc <TP_Read_ADC+0x78>)
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800a1bc:	4803      	ldr	r0, [pc, #12]	@ (800a1cc <TP_Read_ADC+0x78>)
 800a1be:	f7f9 f89d 	bl	80032fc <HAL_SPI_Init>

    return Data;
 800a1c2:	89fb      	ldrh	r3, [r7, #14]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	2000019c 	.word	0x2000019c
 800a1d0:	40020400 	.word	0x40020400

0800a1d4 <TP_Read_ADC_Average>:
					0xd0 :Read channel x +
*******************************************************************************/
#define READ_TIMES  5	//Number of readings
#define LOST_NUM    1	//Discard value
static uint16_t TP_Read_ADC_Average(uint8_t Channel_Cmd)
{
 800a1d4:	b590      	push	{r4, r7, lr}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	71fb      	strb	r3, [r7, #7]
    uint8_t i, j;
    uint16_t Read_Buff[READ_TIMES];
    uint16_t Read_Sum = 0, Read_Temp = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	82bb      	strh	r3, [r7, #20]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	827b      	strh	r3, [r7, #18]

    //Read and save multiple samples
    for(i = 0; i < READ_TIMES; i++){
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75fb      	strb	r3, [r7, #23]
 800a1ea:	e011      	b.n	800a210 <TP_Read_ADC_Average+0x3c>
		Read_Buff[i] = TP_Read_ADC(Channel_Cmd);
 800a1ec:	7dfc      	ldrb	r4, [r7, #23]
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7ff ffaf 	bl	800a154 <TP_Read_ADC>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	0063      	lsls	r3, r4, #1
 800a1fc:	3318      	adds	r3, #24
 800a1fe:	443b      	add	r3, r7
 800a200:	f823 2c10 	strh.w	r2, [r3, #-16]
		Driver_Delay_us(200);
 800a204:	20c8      	movs	r0, #200	@ 0xc8
 800a206:	f7fe f90a 	bl	800841e <Driver_Delay_us>
    for(i = 0; i < READ_TIMES; i++){
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	3301      	adds	r3, #1
 800a20e:	75fb      	strb	r3, [r7, #23]
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	2b04      	cmp	r3, #4
 800a214:	d9ea      	bls.n	800a1ec <TP_Read_ADC_Average+0x18>
	}
	
    //Sort from small to large
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 800a216:	2300      	movs	r3, #0
 800a218:	75fb      	strb	r3, [r7, #23]
 800a21a:	e035      	b.n	800a288 <TP_Read_ADC_Average+0xb4>
        for (j = i + 1; j < READ_TIMES; j ++) {
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
 800a21e:	3301      	adds	r3, #1
 800a220:	75bb      	strb	r3, [r7, #22]
 800a222:	e02b      	b.n	800a27c <TP_Read_ADC_Average+0xa8>
            if (Read_Buff[i] > Read_Buff[j]) {
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	3318      	adds	r3, #24
 800a22a:	443b      	add	r3, r7
 800a22c:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800a230:	7dbb      	ldrb	r3, [r7, #22]
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	3318      	adds	r3, #24
 800a236:	443b      	add	r3, r7
 800a238:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d91a      	bls.n	800a276 <TP_Read_ADC_Average+0xa2>
                Read_Temp = Read_Buff[i];
 800a240:	7dfb      	ldrb	r3, [r7, #23]
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	3318      	adds	r3, #24
 800a246:	443b      	add	r3, r7
 800a248:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800a24c:	827b      	strh	r3, [r7, #18]
                Read_Buff[i] = Read_Buff[j];
 800a24e:	7dbb      	ldrb	r3, [r7, #22]
 800a250:	7dfa      	ldrb	r2, [r7, #23]
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	3318      	adds	r3, #24
 800a256:	443b      	add	r3, r7
 800a258:	f833 1c10 	ldrh.w	r1, [r3, #-16]
 800a25c:	0053      	lsls	r3, r2, #1
 800a25e:	3318      	adds	r3, #24
 800a260:	443b      	add	r3, r7
 800a262:	460a      	mov	r2, r1
 800a264:	f823 2c10 	strh.w	r2, [r3, #-16]
                Read_Buff[j] = Read_Temp;
 800a268:	7dbb      	ldrb	r3, [r7, #22]
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	3318      	adds	r3, #24
 800a26e:	443b      	add	r3, r7
 800a270:	8a7a      	ldrh	r2, [r7, #18]
 800a272:	f823 2c10 	strh.w	r2, [r3, #-16]
        for (j = i + 1; j < READ_TIMES; j ++) {
 800a276:	7dbb      	ldrb	r3, [r7, #22]
 800a278:	3301      	adds	r3, #1
 800a27a:	75bb      	strb	r3, [r7, #22]
 800a27c:	7dbb      	ldrb	r3, [r7, #22]
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d9d0      	bls.n	800a224 <TP_Read_ADC_Average+0x50>
    for (i = 0; i < READ_TIMES  -  1; i ++) {
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	3301      	adds	r3, #1
 800a286:	75fb      	strb	r3, [r7, #23]
 800a288:	7dfb      	ldrb	r3, [r7, #23]
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d9c6      	bls.n	800a21c <TP_Read_ADC_Average+0x48>
            }
        }
    }

    //Exclude the largest and the smallest
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 800a28e:	2301      	movs	r3, #1
 800a290:	75fb      	strb	r3, [r7, #23]
 800a292:	e00b      	b.n	800a2ac <TP_Read_ADC_Average+0xd8>
        Read_Sum += Read_Buff[i];
 800a294:	7dfb      	ldrb	r3, [r7, #23]
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	3318      	adds	r3, #24
 800a29a:	443b      	add	r3, r7
 800a29c:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800a2a0:	8abb      	ldrh	r3, [r7, #20]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	82bb      	strh	r3, [r7, #20]
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++)
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	75fb      	strb	r3, [r7, #23]
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d9f0      	bls.n	800a294 <TP_Read_ADC_Average+0xc0>

    //Averaging
    Read_Temp = Read_Sum / (READ_TIMES - 2 * LOST_NUM);
 800a2b2:	8abb      	ldrh	r3, [r7, #20]
 800a2b4:	4a04      	ldr	r2, [pc, #16]	@ (800a2c8 <TP_Read_ADC_Average+0xf4>)
 800a2b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ba:	085b      	lsrs	r3, r3, #1
 800a2bc:	827b      	strh	r3, [r7, #18]

    return Read_Temp;
 800a2be:	8a7b      	ldrh	r3, [r7, #18]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd90      	pop	{r4, r7, pc}
 800a2c8:	aaaaaaab 	.word	0xaaaaaaab

0800a2cc <TP_Read_ADC_XY>:
parameter:
	Channel_Cmd :	0x90 :Read channel Y +
					0xd0 :Read channel x +
*******************************************************************************/
static void TP_Read_ADC_XY(uint16_t *pXCh_Adc, uint16_t  *pYCh_Adc )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
    *pXCh_Adc = TP_Read_ADC_Average(0xD0);
 800a2d6:	20d0      	movs	r0, #208	@ 0xd0
 800a2d8:	f7ff ff7c 	bl	800a1d4 <TP_Read_ADC_Average>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	461a      	mov	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	801a      	strh	r2, [r3, #0]
    *pYCh_Adc = TP_Read_ADC_Average(0x90);
 800a2e4:	2090      	movs	r0, #144	@ 0x90
 800a2e6:	f7ff ff75 	bl	800a1d4 <TP_Read_ADC_Average>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	801a      	strh	r2, [r3, #0]
}
 800a2f2:	bf00      	nop
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <TP_Read_TwiceADC>:
	Channel_Cmd :	pYCh_Adc = 0x90 :Read channel Y +
					pXCh_Adc = 0xd0 :Read channel x +
*******************************************************************************/
#define ERR_RANGE 50	//tolerance scope
static bool TP_Read_TwiceADC(uint16_t *pXCh_Adc, uint16_t  *pYCh_Adc )
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
    uint16_t XCh_Adc1, YCh_Adc1, XCh_Adc2, YCh_Adc2;

    //Read the ADC values Read the ADC values twice
    TP_Read_ADC_XY(&XCh_Adc1, &YCh_Adc1);
 800a304:	f107 020c 	add.w	r2, r7, #12
 800a308:	f107 030e 	add.w	r3, r7, #14
 800a30c:	4611      	mov	r1, r2
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff ffdc 	bl	800a2cc <TP_Read_ADC_XY>
//	Driver_Delay_us(10);
    TP_Read_ADC_XY(&XCh_Adc2, &YCh_Adc2);
 800a314:	f107 0208 	add.w	r2, r7, #8
 800a318:	f107 030a 	add.w	r3, r7, #10
 800a31c:	4611      	mov	r1, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff ffd4 	bl	800a2cc <TP_Read_ADC_XY>
//	Driver_Delay_us(10);
	
    //The ADC error used twice is greater than ERR_RANGE to take the average
    if( ((XCh_Adc2 <= XCh_Adc1 && XCh_Adc1 < XCh_Adc2 + ERR_RANGE) ||
 800a324:	897a      	ldrh	r2, [r7, #10]
 800a326:	89fb      	ldrh	r3, [r7, #14]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d804      	bhi.n	800a336 <TP_Read_TwiceADC+0x3c>
 800a32c:	897b      	ldrh	r3, [r7, #10]
 800a32e:	3331      	adds	r3, #49	@ 0x31
 800a330:	89fa      	ldrh	r2, [r7, #14]
 800a332:	4293      	cmp	r3, r2
 800a334:	da08      	bge.n	800a348 <TP_Read_TwiceADC+0x4e>
         (XCh_Adc1 <= XCh_Adc2 && XCh_Adc2 < XCh_Adc1 + ERR_RANGE))
 800a336:	89fa      	ldrh	r2, [r7, #14]
 800a338:	897b      	ldrh	r3, [r7, #10]
    if( ((XCh_Adc2 <= XCh_Adc1 && XCh_Adc1 < XCh_Adc2 + ERR_RANGE) ||
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d82c      	bhi.n	800a398 <TP_Read_TwiceADC+0x9e>
         (XCh_Adc1 <= XCh_Adc2 && XCh_Adc2 < XCh_Adc1 + ERR_RANGE))
 800a33e:	89fb      	ldrh	r3, [r7, #14]
 800a340:	3331      	adds	r3, #49	@ 0x31
 800a342:	897a      	ldrh	r2, [r7, #10]
 800a344:	4293      	cmp	r3, r2
 800a346:	db27      	blt.n	800a398 <TP_Read_TwiceADC+0x9e>
        && ((YCh_Adc2 <= YCh_Adc1 && YCh_Adc1 < YCh_Adc2 + ERR_RANGE) ||
 800a348:	893a      	ldrh	r2, [r7, #8]
 800a34a:	89bb      	ldrh	r3, [r7, #12]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d804      	bhi.n	800a35a <TP_Read_TwiceADC+0x60>
 800a350:	893b      	ldrh	r3, [r7, #8]
 800a352:	3331      	adds	r3, #49	@ 0x31
 800a354:	89ba      	ldrh	r2, [r7, #12]
 800a356:	4293      	cmp	r3, r2
 800a358:	da08      	bge.n	800a36c <TP_Read_TwiceADC+0x72>
            (YCh_Adc1 <= YCh_Adc2 && YCh_Adc2 < YCh_Adc1 + ERR_RANGE))) {
 800a35a:	89ba      	ldrh	r2, [r7, #12]
 800a35c:	893b      	ldrh	r3, [r7, #8]
        && ((YCh_Adc2 <= YCh_Adc1 && YCh_Adc1 < YCh_Adc2 + ERR_RANGE) ||
 800a35e:	429a      	cmp	r2, r3
 800a360:	d81a      	bhi.n	800a398 <TP_Read_TwiceADC+0x9e>
            (YCh_Adc1 <= YCh_Adc2 && YCh_Adc2 < YCh_Adc1 + ERR_RANGE))) {
 800a362:	89bb      	ldrh	r3, [r7, #12]
 800a364:	3331      	adds	r3, #49	@ 0x31
 800a366:	893a      	ldrh	r2, [r7, #8]
 800a368:	4293      	cmp	r3, r2
 800a36a:	db15      	blt.n	800a398 <TP_Read_TwiceADC+0x9e>
        *pXCh_Adc = (XCh_Adc1 + XCh_Adc2) / 2;
 800a36c:	89fb      	ldrh	r3, [r7, #14]
 800a36e:	461a      	mov	r2, r3
 800a370:	897b      	ldrh	r3, [r7, #10]
 800a372:	4413      	add	r3, r2
 800a374:	0fda      	lsrs	r2, r3, #31
 800a376:	4413      	add	r3, r2
 800a378:	105b      	asrs	r3, r3, #1
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	801a      	strh	r2, [r3, #0]
        *pYCh_Adc = (YCh_Adc1 + YCh_Adc2) / 2;
 800a380:	89bb      	ldrh	r3, [r7, #12]
 800a382:	461a      	mov	r2, r3
 800a384:	893b      	ldrh	r3, [r7, #8]
 800a386:	4413      	add	r3, r2
 800a388:	0fda      	lsrs	r2, r3, #31
 800a38a:	4413      	add	r3, r2
 800a38c:	105b      	asrs	r3, r3, #1
 800a38e:	b29a      	uxth	r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	801a      	strh	r2, [r3, #0]
        return true;
 800a394:	2301      	movs	r3, #1
 800a396:	e000      	b.n	800a39a <TP_Read_TwiceADC+0xa0>
    }

    //The ADC error used twice is less than ERR_RANGE returns failed
    return false;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <TP_Scan>:
		chCoordType:
					1 : calibration
					0 : relative position
*******************************************************************************/
static uint8_t TP_Scan(uint8_t chCoordType)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	71fb      	strb	r3, [r7, #7]
    //In X, Y coordinate measurement, IRQ is disabled and output is low
    if (!GET_TP_IRQ) {//Press the button to press
 800a3ae:	2108      	movs	r1, #8
 800a3b0:	48a9      	ldr	r0, [pc, #676]	@ (800a658 <TP_Scan+0x2b4>)
 800a3b2:	f7f7 f8c7 	bl	8001544 <HAL_GPIO_ReadPin>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f040 8128 	bne.w	800a60e <TP_Scan+0x26a>
        //Read the physical coordinates
        if (chCoordType) {
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d004      	beq.n	800a3ce <TP_Scan+0x2a>
            TP_Read_TwiceADC(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint);
 800a3c4:	49a5      	ldr	r1, [pc, #660]	@ (800a65c <TP_Scan+0x2b8>)
 800a3c6:	48a6      	ldr	r0, [pc, #664]	@ (800a660 <TP_Scan+0x2bc>)
 800a3c8:	f7ff ff97 	bl	800a2fa <TP_Read_TwiceADC>
 800a3cc:	e10e      	b.n	800a5ec <TP_Scan+0x248>
            //Read the screen coordinates
        } else if (TP_Read_TwiceADC(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint)) {
 800a3ce:	49a3      	ldr	r1, [pc, #652]	@ (800a65c <TP_Scan+0x2b8>)
 800a3d0:	48a3      	ldr	r0, [pc, #652]	@ (800a660 <TP_Scan+0x2bc>)
 800a3d2:	f7ff ff92 	bl	800a2fa <TP_Read_TwiceADC>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 8107 	beq.w	800a5ec <TP_Scan+0x248>
//			DEBUG("(Xad,Yad) = %d,%d\r\n",sTP_DEV.Xpoint,sTP_DEV.Ypoint);
            if(sTP_DEV.TP_Scan_Dir == R2L_D2U) {		//Converts the result to screen coordinates
 800a3de:	4ba1      	ldr	r3, [pc, #644]	@ (800a664 <TP_Scan+0x2c0>)
 800a3e0:	7e1b      	ldrb	r3, [r3, #24]
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d136      	bne.n	800a454 <TP_Scan+0xb0>
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Xpoint +
 800a3e6:	4b9f      	ldr	r3, [pc, #636]	@ (800a664 <TP_Scan+0x2c0>)
 800a3e8:	ed93 7a04 	vldr	s14, [r3, #16]
 800a3ec:	4b9d      	ldr	r3, [pc, #628]	@ (800a664 <TP_Scan+0x2c0>)
 800a3ee:	889b      	ldrh	r3, [r3, #4]
 800a3f0:	ee07 3a90 	vmov	s15, r3
 800a3f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3f8:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a3fc:	4b99      	ldr	r3, [pc, #612]	@ (800a664 <TP_Scan+0x2c0>)
 800a3fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Xpoint +
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a40a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a40e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a412:	ee17 3a90 	vmov	r3, s15
 800a416:	b29a      	uxth	r2, r3
 800a418:	4b93      	ldr	r3, [pc, #588]	@ (800a668 <TP_Scan+0x2c4>)
 800a41a:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Ypoint +
 800a41c:	4b91      	ldr	r3, [pc, #580]	@ (800a664 <TP_Scan+0x2c0>)
 800a41e:	ed93 7a05 	vldr	s14, [r3, #20]
 800a422:	4b90      	ldr	r3, [pc, #576]	@ (800a664 <TP_Scan+0x2c0>)
 800a424:	88db      	ldrh	r3, [r3, #6]
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a42e:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a432:	4b8c      	ldr	r3, [pc, #560]	@ (800a664 <TP_Scan+0x2c0>)
 800a434:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Ypoint +
 800a438:	ee07 3a90 	vmov	s15, r3
 800a43c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a440:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a448:	ee17 3a90 	vmov	r3, s15
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	4b86      	ldr	r3, [pc, #536]	@ (800a668 <TP_Scan+0x2c4>)
 800a450:	805a      	strh	r2, [r3, #2]
 800a452:	e0cb      	b.n	800a5ec <TP_Scan+0x248>
            } else if(sTP_DEV.TP_Scan_Dir == L2R_U2D) {
 800a454:	4b83      	ldr	r3, [pc, #524]	@ (800a664 <TP_Scan+0x2c0>)
 800a456:	7e1b      	ldrb	r3, [r3, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d146      	bne.n	800a4ea <TP_Scan+0x146>
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a45c:	4b83      	ldr	r3, [pc, #524]	@ (800a66c <TP_Scan+0x2c8>)
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	ee07 3a90 	vmov	s15, r3
 800a464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fXfac * sTP_DEV.Xpoint -
 800a468:	4b7e      	ldr	r3, [pc, #504]	@ (800a664 <TP_Scan+0x2c0>)
 800a46a:	edd3 6a04 	vldr	s13, [r3, #16]
 800a46e:	4b7d      	ldr	r3, [pc, #500]	@ (800a664 <TP_Scan+0x2c0>)
 800a470:	889b      	ldrh	r3, [r3, #4]
 800a472:	ee07 3a90 	vmov	s15, r3
 800a476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a47a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a47e:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a482:	4b78      	ldr	r3, [pc, #480]	@ (800a664 <TP_Scan+0x2c0>)
 800a484:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                                  sTP_DEV.fXfac * sTP_DEV.Xpoint -
 800a488:	ee07 3a90 	vmov	s15, r3
 800a48c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a490:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a498:	ee17 3a90 	vmov	r3, s15
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	4b72      	ldr	r3, [pc, #456]	@ (800a668 <TP_Scan+0x2c4>)
 800a4a0:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a4a2:	4b72      	ldr	r3, [pc, #456]	@ (800a66c <TP_Scan+0x2c8>)
 800a4a4:	885b      	ldrh	r3, [r3, #2]
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fYfac * sTP_DEV.Ypoint -
 800a4ae:	4b6d      	ldr	r3, [pc, #436]	@ (800a664 <TP_Scan+0x2c0>)
 800a4b0:	edd3 6a05 	vldr	s13, [r3, #20]
 800a4b4:	4b6b      	ldr	r3, [pc, #428]	@ (800a664 <TP_Scan+0x2c0>)
 800a4b6:	88db      	ldrh	r3, [r3, #6]
 800a4b8:	ee07 3a90 	vmov	s15, r3
 800a4bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a4c4:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a4c8:	4b66      	ldr	r3, [pc, #408]	@ (800a664 <TP_Scan+0x2c0>)
 800a4ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                                  sTP_DEV.fYfac * sTP_DEV.Ypoint -
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4d6:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a4da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4de:	ee17 3a90 	vmov	r3, s15
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	4b60      	ldr	r3, [pc, #384]	@ (800a668 <TP_Scan+0x2c4>)
 800a4e6:	805a      	strh	r2, [r3, #2]
 800a4e8:	e080      	b.n	800a5ec <TP_Scan+0x248>
            } else if(sTP_DEV.TP_Scan_Dir == U2D_R2L) {
 800a4ea:	4b5e      	ldr	r3, [pc, #376]	@ (800a664 <TP_Scan+0x2c0>)
 800a4ec:	7e1b      	ldrb	r3, [r3, #24]
 800a4ee:	2b05      	cmp	r3, #5
 800a4f0:	d136      	bne.n	800a560 <TP_Scan+0x1bc>
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Ypoint +
 800a4f2:	4b5c      	ldr	r3, [pc, #368]	@ (800a664 <TP_Scan+0x2c0>)
 800a4f4:	ed93 7a04 	vldr	s14, [r3, #16]
 800a4f8:	4b5a      	ldr	r3, [pc, #360]	@ (800a664 <TP_Scan+0x2c0>)
 800a4fa:	88db      	ldrh	r3, [r3, #6]
 800a4fc:	ee07 3a90 	vmov	s15, r3
 800a500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a504:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a508:	4b56      	ldr	r3, [pc, #344]	@ (800a664 <TP_Scan+0x2c0>)
 800a50a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                sTP_Draw.Xpoint = sTP_DEV.fXfac * sTP_DEV.Ypoint +
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a51a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a51e:	ee17 3a90 	vmov	r3, s15
 800a522:	b29a      	uxth	r2, r3
 800a524:	4b50      	ldr	r3, [pc, #320]	@ (800a668 <TP_Scan+0x2c4>)
 800a526:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Xpoint +
 800a528:	4b4e      	ldr	r3, [pc, #312]	@ (800a664 <TP_Scan+0x2c0>)
 800a52a:	ed93 7a05 	vldr	s14, [r3, #20]
 800a52e:	4b4d      	ldr	r3, [pc, #308]	@ (800a664 <TP_Scan+0x2c0>)
 800a530:	889b      	ldrh	r3, [r3, #4]
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a53a:	ee27 7a27 	vmul.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a53e:	4b49      	ldr	r3, [pc, #292]	@ (800a664 <TP_Scan+0x2c0>)
 800a540:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                sTP_Draw.Ypoint = sTP_DEV.fYfac * sTP_DEV.Xpoint +
 800a544:	ee07 3a90 	vmov	s15, r3
 800a548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a54c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a554:	ee17 3a90 	vmov	r3, s15
 800a558:	b29a      	uxth	r2, r3
 800a55a:	4b43      	ldr	r3, [pc, #268]	@ (800a668 <TP_Scan+0x2c4>)
 800a55c:	805a      	strh	r2, [r3, #2]
 800a55e:	e045      	b.n	800a5ec <TP_Scan+0x248>
            } else {
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a560:	4b42      	ldr	r3, [pc, #264]	@ (800a66c <TP_Scan+0x2c8>)
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	ee07 3a90 	vmov	s15, r3
 800a568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fXfac * sTP_DEV.Ypoint -
 800a56c:	4b3d      	ldr	r3, [pc, #244]	@ (800a664 <TP_Scan+0x2c0>)
 800a56e:	edd3 6a04 	vldr	s13, [r3, #16]
 800a572:	4b3c      	ldr	r3, [pc, #240]	@ (800a664 <TP_Scan+0x2c0>)
 800a574:	88db      	ldrh	r3, [r3, #6]
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a57e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a582:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iXoff;
 800a586:	4b37      	ldr	r3, [pc, #220]	@ (800a664 <TP_Scan+0x2c0>)
 800a588:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                                  sTP_DEV.fXfac * sTP_DEV.Ypoint -
 800a58c:	ee07 3a90 	vmov	s15, r3
 800a590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a594:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Xpoint = sLCD_DIS.LCD_Dis_Column -
 800a598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a59c:	ee17 3a90 	vmov	r3, s15
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	4b31      	ldr	r3, [pc, #196]	@ (800a668 <TP_Scan+0x2c4>)
 800a5a4:	801a      	strh	r2, [r3, #0]
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a5a6:	4b31      	ldr	r3, [pc, #196]	@ (800a66c <TP_Scan+0x2c8>)
 800a5a8:	885b      	ldrh	r3, [r3, #2]
 800a5aa:	ee07 3a90 	vmov	s15, r3
 800a5ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                  sTP_DEV.fYfac * sTP_DEV.Xpoint -
 800a5b2:	4b2c      	ldr	r3, [pc, #176]	@ (800a664 <TP_Scan+0x2c0>)
 800a5b4:	edd3 6a05 	vldr	s13, [r3, #20]
 800a5b8:	4b2a      	ldr	r3, [pc, #168]	@ (800a664 <TP_Scan+0x2c0>)
 800a5ba:	889b      	ldrh	r3, [r3, #4]
 800a5bc:	ee07 3a90 	vmov	s15, r3
 800a5c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a5c8:	ee37 7a67 	vsub.f32	s14, s14, s15
                                  sTP_DEV.iYoff;
 800a5cc:	4b25      	ldr	r3, [pc, #148]	@ (800a664 <TP_Scan+0x2c0>)
 800a5ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                                  sTP_DEV.fYfac * sTP_DEV.Xpoint -
 800a5d2:	ee07 3a90 	vmov	s15, r3
 800a5d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5da:	ee77 7a67 	vsub.f32	s15, s14, s15
                sTP_Draw.Ypoint = sLCD_DIS.LCD_Dis_Page -
 800a5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e2:	ee17 3a90 	vmov	r3, s15
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	4b1f      	ldr	r3, [pc, #124]	@ (800a668 <TP_Scan+0x2c4>)
 800a5ea:	805a      	strh	r2, [r3, #2]
            }
//			DEBUG("( x , y ) = %d,%d\r\n",sTP_Draw.Xpoint,sTP_Draw.Ypoint);
        }
        if (0 == (sTP_DEV.chStatus & TP_PRESS_DOWN)) {	//Not being pressed
 800a5ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a664 <TP_Scan+0x2c0>)
 800a5ee:	7a1b      	ldrb	r3, [r3, #8]
 800a5f0:	b25b      	sxtb	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	db26      	blt.n	800a644 <TP_Scan+0x2a0>
            sTP_DEV.chStatus = TP_PRESS_DOWN | TP_PRESSED;
 800a5f6:	4b1b      	ldr	r3, [pc, #108]	@ (800a664 <TP_Scan+0x2c0>)
 800a5f8:	22c0      	movs	r2, #192	@ 0xc0
 800a5fa:	721a      	strb	r2, [r3, #8]
            sTP_DEV.Xpoint0 = sTP_DEV.Xpoint;
 800a5fc:	4b19      	ldr	r3, [pc, #100]	@ (800a664 <TP_Scan+0x2c0>)
 800a5fe:	889a      	ldrh	r2, [r3, #4]
 800a600:	4b18      	ldr	r3, [pc, #96]	@ (800a664 <TP_Scan+0x2c0>)
 800a602:	801a      	strh	r2, [r3, #0]
            sTP_DEV.Ypoint0 = sTP_DEV.Ypoint;
 800a604:	4b17      	ldr	r3, [pc, #92]	@ (800a664 <TP_Scan+0x2c0>)
 800a606:	88da      	ldrh	r2, [r3, #6]
 800a608:	4b16      	ldr	r3, [pc, #88]	@ (800a664 <TP_Scan+0x2c0>)
 800a60a:	805a      	strh	r2, [r3, #2]
 800a60c:	e01a      	b.n	800a644 <TP_Scan+0x2a0>
        }
    } else {
        if (sTP_DEV.chStatus & TP_PRESS_DOWN) {	//0x80
 800a60e:	4b15      	ldr	r3, [pc, #84]	@ (800a664 <TP_Scan+0x2c0>)
 800a610:	7a1b      	ldrb	r3, [r3, #8]
 800a612:	b25b      	sxtb	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	da07      	bge.n	800a628 <TP_Scan+0x284>
            sTP_DEV.chStatus &= ~(1 << 7);		//0x00
 800a618:	4b12      	ldr	r3, [pc, #72]	@ (800a664 <TP_Scan+0x2c0>)
 800a61a:	7a1b      	ldrb	r3, [r3, #8]
 800a61c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a620:	b2da      	uxtb	r2, r3
 800a622:	4b10      	ldr	r3, [pc, #64]	@ (800a664 <TP_Scan+0x2c0>)
 800a624:	721a      	strb	r2, [r3, #8]
 800a626:	e00d      	b.n	800a644 <TP_Scan+0x2a0>
        } else {
            sTP_DEV.Xpoint0 = 0;
 800a628:	4b0e      	ldr	r3, [pc, #56]	@ (800a664 <TP_Scan+0x2c0>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	801a      	strh	r2, [r3, #0]
            sTP_DEV.Ypoint0 = 0;
 800a62e:	4b0d      	ldr	r3, [pc, #52]	@ (800a664 <TP_Scan+0x2c0>)
 800a630:	2200      	movs	r2, #0
 800a632:	805a      	strh	r2, [r3, #2]
            sTP_DEV.Xpoint = 0xffff;
 800a634:	4b0b      	ldr	r3, [pc, #44]	@ (800a664 <TP_Scan+0x2c0>)
 800a636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a63a:	809a      	strh	r2, [r3, #4]
            sTP_DEV.Ypoint = 0xffff;
 800a63c:	4b09      	ldr	r3, [pc, #36]	@ (800a664 <TP_Scan+0x2c0>)
 800a63e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a642:	80da      	strh	r2, [r3, #6]
        }
    }

    return (sTP_DEV.chStatus & TP_PRESS_DOWN);
 800a644:	4b07      	ldr	r3, [pc, #28]	@ (800a664 <TP_Scan+0x2c0>)
 800a646:	7a1b      	ldrb	r3, [r3, #8]
 800a648:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a64c:	b2db      	uxtb	r3, r3
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	40020400 	.word	0x40020400
 800a65c:	20002122 	.word	0x20002122
 800a660:	20002120 	.word	0x20002120
 800a664:	2000211c 	.word	0x2000211c
 800a668:	20002138 	.word	0x20002138
 800a66c:	20002110 	.word	0x20002110

0800a670 <TP_GetAdFac>:
/*******************************************************************************
function:
		Use the default calibration factor
*******************************************************************************/
void TP_GetAdFac(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af02      	add	r7, sp, #8
    if(	sTP_DEV.TP_Scan_Dir == D2U_L2R ) { //SCAN_DIR_DFT = D2U_L2R
 800a676:	4b2f      	ldr	r3, [pc, #188]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a678:	7e1b      	ldrb	r3, [r3, #24]
 800a67a:	2b06      	cmp	r3, #6
 800a67c:	d10e      	bne.n	800a69c <TP_GetAdFac+0x2c>
        sTP_DEV.fXfac = -0.132443F ;
 800a67e:	4b2d      	ldr	r3, [pc, #180]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a680:	4a2d      	ldr	r2, [pc, #180]	@ (800a738 <TP_GetAdFac+0xc8>)
 800a682:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.089997F ;
 800a684:	4b2b      	ldr	r3, [pc, #172]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a686:	4a2d      	ldr	r2, [pc, #180]	@ (800a73c <TP_GetAdFac+0xcc>)
 800a688:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 516L ;
 800a68a:	4b2a      	ldr	r3, [pc, #168]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a68c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a690:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -22L ;
 800a692:	4b28      	ldr	r3, [pc, #160]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a694:	f64f 72ea 	movw	r2, #65514	@ 0xffea
 800a698:	819a      	strh	r2, [r3, #12]
        LCD_Clear(LCD_BACKGROUND);
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
						calibration in this direction",
                         &Font16, FONT_BACKGROUND, RED);
    }
}
 800a69a:	e048      	b.n	800a72e <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == L2R_U2D ) {
 800a69c:	4b25      	ldr	r3, [pc, #148]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a69e:	7e1b      	ldrb	r3, [r3, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10e      	bne.n	800a6c2 <TP_GetAdFac+0x52>
        sTP_DEV.fXfac = 0.089697F ;
 800a6a4:	4b23      	ldr	r3, [pc, #140]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6a6:	4a26      	ldr	r2, [pc, #152]	@ (800a740 <TP_GetAdFac+0xd0>)
 800a6a8:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.134792F ;
 800a6aa:	4b22      	ldr	r3, [pc, #136]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6ac:	4a25      	ldr	r2, [pc, #148]	@ (800a744 <TP_GetAdFac+0xd4>)
 800a6ae:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -21L ;
 800a6b0:	4b20      	ldr	r3, [pc, #128]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6b2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800a6b6:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -39L ;
 800a6b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6ba:	f64f 72d9 	movw	r2, #65497	@ 0xffd9
 800a6be:	819a      	strh	r2, [r3, #12]
}
 800a6c0:	e035      	b.n	800a72e <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == R2L_D2U ) {
 800a6c2:	4b1c      	ldr	r3, [pc, #112]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6c4:	7e1b      	ldrb	r3, [r3, #24]
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d10e      	bne.n	800a6e8 <TP_GetAdFac+0x78>
        sTP_DEV.fXfac = 0.089915F ;
 800a6ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6cc:	4a1e      	ldr	r2, [pc, #120]	@ (800a748 <TP_GetAdFac+0xd8>)
 800a6ce:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac =  0.133178F ;
 800a6d0:	4b18      	ldr	r3, [pc, #96]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6d2:	4a1e      	ldr	r2, [pc, #120]	@ (800a74c <TP_GetAdFac+0xdc>)
 800a6d4:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = -22L ;
 800a6d6:	4b17      	ldr	r3, [pc, #92]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6d8:	f64f 72ea 	movw	r2, #65514	@ 0xffea
 800a6dc:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -38L ;
 800a6de:	4b15      	ldr	r3, [pc, #84]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6e0:	f64f 72da 	movw	r2, #65498	@ 0xffda
 800a6e4:	819a      	strh	r2, [r3, #12]
}
 800a6e6:	e022      	b.n	800a72e <TP_GetAdFac+0xbe>
    } else if( sTP_DEV.TP_Scan_Dir == U2D_R2L ) {
 800a6e8:	4b12      	ldr	r3, [pc, #72]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6ea:	7e1b      	ldrb	r3, [r3, #24]
 800a6ec:	2b05      	cmp	r3, #5
 800a6ee:	d10e      	bne.n	800a70e <TP_GetAdFac+0x9e>
        sTP_DEV.fXfac = -0.132906F ;
 800a6f0:	4b10      	ldr	r3, [pc, #64]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6f2:	4a17      	ldr	r2, [pc, #92]	@ (800a750 <TP_GetAdFac+0xe0>)
 800a6f4:	611a      	str	r2, [r3, #16]
        sTP_DEV.fYfac = 0.087964F ;
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6f8:	4a16      	ldr	r2, [pc, #88]	@ (800a754 <TP_GetAdFac+0xe4>)
 800a6fa:	615a      	str	r2, [r3, #20]
        sTP_DEV.iXoff = 517L ;
 800a6fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a6fe:	f240 2205 	movw	r2, #517	@ 0x205
 800a702:	815a      	strh	r2, [r3, #10]
        sTP_DEV.iYoff = -20L ;
 800a704:	4b0b      	ldr	r3, [pc, #44]	@ (800a734 <TP_GetAdFac+0xc4>)
 800a706:	f64f 72ec 	movw	r2, #65516	@ 0xffec
 800a70a:	819a      	strh	r2, [r3, #12]
}
 800a70c:	e00f      	b.n	800a72e <TP_GetAdFac+0xbe>
        LCD_Clear(LCD_BACKGROUND);
 800a70e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a712:	f7fe fea1 	bl	8009458 <LCD_Clear>
        GUI_DisString_EN(0, 60, "Does not support touch-screen \
 800a716:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	4b0d      	ldr	r3, [pc, #52]	@ (800a758 <TP_GetAdFac+0xe8>)
 800a724:	4a0d      	ldr	r2, [pc, #52]	@ (800a75c <TP_GetAdFac+0xec>)
 800a726:	213c      	movs	r1, #60	@ 0x3c
 800a728:	2000      	movs	r0, #0
 800a72a:	f7ff f939 	bl	80099a0 <GUI_DisString_EN>
}
 800a72e:	bf00      	nop
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	2000211c 	.word	0x2000211c
 800a738:	be079f23 	.word	0xbe079f23
 800a73c:	3db85059 	.word	0x3db85059
 800a740:	3db7b310 	.word	0x3db7b310
 800a744:	3e0a06ea 	.word	0x3e0a06ea
 800a748:	3db8255b 	.word	0x3db8255b
 800a74c:	3e085fd0 	.word	0x3e085fd0
 800a750:	be081883 	.word	0xbe081883
 800a754:	3db42678 	.word	0x3db42678
 800a758:	20000104 	.word	0x20000104
 800a75c:	0800c808 	.word	0x0800c808

0800a760 <TP_MenuDialog>:

/*******************************************************************************
function:
		Paint menu options
*******************************************************************************/
void TP_MenuDialog(void) {
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af04      	add	r7, sp, #16
    //LCD_Clear(LCD_BACKGROUND);
    DEBUG("Menu return ...\r\n");
 800a766:	485f      	ldr	r0, [pc, #380]	@ (800a8e4 <TP_MenuDialog+0x184>)
 800a768:	f000 fe76 	bl	800b458 <puts>

    // Current show
	GUI_DrawRectangle(0, 20,
					  sLCD_DIS.LCD_Dis_Column/2, 220,
 800a76c:	4b5e      	ldr	r3, [pc, #376]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a76e:	881b      	ldrh	r3, [r3, #0]
	GUI_DrawRectangle(0, 20,
 800a770:	085b      	lsrs	r3, r3, #1
 800a772:	b29a      	uxth	r2, r3
 800a774:	2301      	movs	r3, #1
 800a776:	9302      	str	r3, [sp, #8]
 800a778:	2301      	movs	r3, #1
 800a77a:	9301      	str	r3, [sp, #4]
 800a77c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	23dc      	movs	r3, #220	@ 0xdc
 800a784:	2114      	movs	r1, #20
 800a786:	2000      	movs	r0, #0
 800a788:	f7fe ffd2 	bl	8009730 <GUI_DrawRectangle>
					  MAGENTA, DRAW_FULL, DOT_PIXEL_1X1);
	GUI_DisString_EN(10, 30, "Current:", &Font24, MAGENTA, BLACK);
 800a78c:	2300      	movs	r3, #0
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	4b55      	ldr	r3, [pc, #340]	@ (800a8ec <TP_MenuDialog+0x18c>)
 800a798:	4a55      	ldr	r2, [pc, #340]	@ (800a8f0 <TP_MenuDialog+0x190>)
 800a79a:	211e      	movs	r1, #30
 800a79c:	200a      	movs	r0, #10
 800a79e:	f7ff f8ff 	bl	80099a0 <GUI_DisString_EN>

	// Voltage show
	GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 20,
 800a7a2:	4b51      	ldr	r3, [pc, #324]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	085b      	lsrs	r3, r3, #1
 800a7a8:	b298      	uxth	r0, r3
 800a7aa:	4b4f      	ldr	r3, [pc, #316]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a7ac:	881a      	ldrh	r2, [r3, #0]
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	9302      	str	r3, [sp, #8]
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	23dc      	movs	r3, #220	@ 0xdc
 800a7be:	2114      	movs	r1, #20
 800a7c0:	f7fe ffb6 	bl	8009730 <GUI_DrawRectangle>
					  sLCD_DIS.LCD_Dis_Column, 220,
					  GBLUE, DRAW_FULL, DOT_PIXEL_1X1);
	GUI_DisString_EN(250, 30, "Voltage:", &Font24, GBLUE, BLACK);
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	4b47      	ldr	r3, [pc, #284]	@ (800a8ec <TP_MenuDialog+0x18c>)
 800a7d0:	4a48      	ldr	r2, [pc, #288]	@ (800a8f4 <TP_MenuDialog+0x194>)
 800a7d2:	211e      	movs	r1, #30
 800a7d4:	20fa      	movs	r0, #250	@ 0xfa
 800a7d6:	f7ff f8e3 	bl	80099a0 <GUI_DisString_EN>

	// AC/DC Switch (BRRED/YELLOW)
	if (sELECTONIC_LOAD_PARAMETERS.currentType) {
 800a7da:	4b47      	ldr	r3, [pc, #284]	@ (800a8f8 <TP_MenuDialog+0x198>)
 800a7dc:	785b      	ldrb	r3, [r3, #1]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d01f      	beq.n	800a822 <TP_MenuDialog+0xc2>
		GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 220,
 800a7e2:	4b41      	ldr	r3, [pc, #260]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	085b      	lsrs	r3, r3, #1
 800a7e8:	b298      	uxth	r0, r3
 800a7ea:	4b3f      	ldr	r3, [pc, #252]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a7ec:	881a      	ldrh	r2, [r3, #0]
 800a7ee:	4b3e      	ldr	r3, [pc, #248]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a7f0:	885b      	ldrh	r3, [r3, #2]
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	9102      	str	r1, [sp, #8]
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	9101      	str	r1, [sp, #4]
 800a7fa:	f64f 4107 	movw	r1, #64519	@ 0xfc07
 800a7fe:	9100      	str	r1, [sp, #0]
 800a800:	21dc      	movs	r1, #220	@ 0xdc
 800a802:	f7fe ff95 	bl	8009730 <GUI_DrawRectangle>
				sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page,
				BRRED, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(345, 260, "AC", &Font24, BRRED, BLACK);
 800a806:	2300      	movs	r3, #0
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	4b36      	ldr	r3, [pc, #216]	@ (800a8ec <TP_MenuDialog+0x18c>)
 800a812:	4a3a      	ldr	r2, [pc, #232]	@ (800a8fc <TP_MenuDialog+0x19c>)
 800a814:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a818:	f240 1059 	movw	r0, #345	@ 0x159
 800a81c:	f7ff f8c0 	bl	80099a0 <GUI_DisString_EN>
 800a820:	e01e      	b.n	800a860 <TP_MenuDialog+0x100>
	} else {
		GUI_DrawRectangle(sLCD_DIS.LCD_Dis_Column/2, 220,
 800a822:	4b31      	ldr	r3, [pc, #196]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	085b      	lsrs	r3, r3, #1
 800a828:	b298      	uxth	r0, r3
 800a82a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a82c:	881a      	ldrh	r2, [r3, #0]
 800a82e:	4b2e      	ldr	r3, [pc, #184]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a830:	885b      	ldrh	r3, [r3, #2]
 800a832:	2101      	movs	r1, #1
 800a834:	9102      	str	r1, [sp, #8]
 800a836:	2101      	movs	r1, #1
 800a838:	9101      	str	r1, [sp, #4]
 800a83a:	f64f 71e0 	movw	r1, #65504	@ 0xffe0
 800a83e:	9100      	str	r1, [sp, #0]
 800a840:	21dc      	movs	r1, #220	@ 0xdc
 800a842:	f7fe ff75 	bl	8009730 <GUI_DrawRectangle>
				sLCD_DIS.LCD_Dis_Column, sLCD_DIS.LCD_Dis_Page,
				YELLOW, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(345, 260, "DC", &Font24, YELLOW, BLACK);
 800a846:	2300      	movs	r3, #0
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	4b26      	ldr	r3, [pc, #152]	@ (800a8ec <TP_MenuDialog+0x18c>)
 800a852:	4a2b      	ldr	r2, [pc, #172]	@ (800a900 <TP_MenuDialog+0x1a0>)
 800a854:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a858:	f240 1059 	movw	r0, #345	@ 0x159
 800a85c:	f7ff f8a0 	bl	80099a0 <GUI_DisString_EN>
	}

	// ON/OFF switch (GREEN/RED)
	if (sELECTONIC_LOAD_PARAMETERS.condition) {
 800a860:	4b25      	ldr	r3, [pc, #148]	@ (800a8f8 <TP_MenuDialog+0x198>)
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01d      	beq.n	800a8a4 <TP_MenuDialog+0x144>
		GUI_DrawRectangle(0, 220,
			sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
 800a868:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a86a:	881b      	ldrh	r3, [r3, #0]
		GUI_DrawRectangle(0, 220,
 800a86c:	085b      	lsrs	r3, r3, #1
 800a86e:	b29a      	uxth	r2, r3
 800a870:	4b1d      	ldr	r3, [pc, #116]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a872:	885b      	ldrh	r3, [r3, #2]
 800a874:	2101      	movs	r1, #1
 800a876:	9102      	str	r1, [sp, #8]
 800a878:	2101      	movs	r1, #1
 800a87a:	9101      	str	r1, [sp, #4]
 800a87c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800a880:	9100      	str	r1, [sp, #0]
 800a882:	21dc      	movs	r1, #220	@ 0xdc
 800a884:	2000      	movs	r0, #0
 800a886:	f7fe ff53 	bl	8009730 <GUI_DrawRectangle>
			GREEN, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(103, 260, "ON", &Font24, GREEN, BLACK);
 800a88a:	2300      	movs	r3, #0
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	4b15      	ldr	r3, [pc, #84]	@ (800a8ec <TP_MenuDialog+0x18c>)
 800a896:	4a1b      	ldr	r2, [pc, #108]	@ (800a904 <TP_MenuDialog+0x1a4>)
 800a898:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a89c:	2067      	movs	r0, #103	@ 0x67
 800a89e:	f7ff f87f 	bl	80099a0 <GUI_DisString_EN>
		GUI_DrawRectangle(0, 220,
		sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
		RED, DRAW_FULL, DOT_PIXEL_1X1);
		GUI_DisString_EN(95, 260, "OFF", &Font24, RED, BLACK);
	}
}
 800a8a2:	e01c      	b.n	800a8de <TP_MenuDialog+0x17e>
		sLCD_DIS.LCD_Dis_Column/2, sLCD_DIS.LCD_Dis_Page,
 800a8a4:	4b10      	ldr	r3, [pc, #64]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a8a6:	881b      	ldrh	r3, [r3, #0]
		GUI_DrawRectangle(0, 220,
 800a8a8:	085b      	lsrs	r3, r3, #1
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e8 <TP_MenuDialog+0x188>)
 800a8ae:	885b      	ldrh	r3, [r3, #2]
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	9102      	str	r1, [sp, #8]
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	9101      	str	r1, [sp, #4]
 800a8b8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800a8bc:	9100      	str	r1, [sp, #0]
 800a8be:	21dc      	movs	r1, #220	@ 0xdc
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f7fe ff35 	bl	8009730 <GUI_DrawRectangle>
		GUI_DisString_EN(95, 260, "OFF", &Font24, RED, BLACK);
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	9301      	str	r3, [sp, #4]
 800a8ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	4b06      	ldr	r3, [pc, #24]	@ (800a8ec <TP_MenuDialog+0x18c>)
 800a8d2:	4a0d      	ldr	r2, [pc, #52]	@ (800a908 <TP_MenuDialog+0x1a8>)
 800a8d4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a8d8:	205f      	movs	r0, #95	@ 0x5f
 800a8da:	f7ff f861 	bl	80099a0 <GUI_DisString_EN>
}
 800a8de:	bf00      	nop
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	0800c86c 	.word	0x0800c86c
 800a8e8:	20002110 	.word	0x20002110
 800a8ec:	20000114 	.word	0x20000114
 800a8f0:	0800c888 	.word	0x0800c888
 800a8f4:	0800c894 	.word	0x0800c894
 800a8f8:	20002140 	.word	0x20002140
 800a8fc:	0800c8a0 	.word	0x0800c8a0
 800a900:	0800c8a4 	.word	0x0800c8a4
 800a904:	0800c8a8 	.word	0x0800c8a8
 800a908:	0800c8ac 	.word	0x0800c8ac

0800a90c <TP_IndicationsUnit>:

/*******************************************************************************
function:
		Paint numbers
*******************************************************************************/
void TP_IndicationsUnit(void) {
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af02      	add	r7, sp, #8
	GUI_DisFloatNum(280, 120, 131.5487, &Font24, GBLUE, BLACK);
 800a912:	2300      	movs	r3, #0
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a91a:	4a16      	ldr	r2, [pc, #88]	@ (800a974 <TP_IndicationsUnit+0x68>)
 800a91c:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800a978 <TP_IndicationsUnit+0x6c>
 800a920:	2178      	movs	r1, #120	@ 0x78
 800a922:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800a926:	f7ff f88f 	bl	8009a48 <GUI_DisFloatNum>
	GUI_DisString_EN(400, 120, "Volt", &Font24, GBLUE, BLACK);
 800a92a:	2300      	movs	r3, #0
 800a92c:	9301      	str	r3, [sp, #4]
 800a92e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	4b0f      	ldr	r3, [pc, #60]	@ (800a974 <TP_IndicationsUnit+0x68>)
 800a936:	4a11      	ldr	r2, [pc, #68]	@ (800a97c <TP_IndicationsUnit+0x70>)
 800a938:	2178      	movs	r1, #120	@ 0x78
 800a93a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800a93e:	f7ff f82f 	bl	80099a0 <GUI_DisString_EN>

	GUI_DisFloatNum(60, 120, 6.01647, &Font24, MAGENTA, BLACK);
 800a942:	2300      	movs	r3, #0
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a94a:	4a0a      	ldr	r2, [pc, #40]	@ (800a974 <TP_IndicationsUnit+0x68>)
 800a94c:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800a980 <TP_IndicationsUnit+0x74>
 800a950:	2178      	movs	r1, #120	@ 0x78
 800a952:	203c      	movs	r0, #60	@ 0x3c
 800a954:	f7ff f878 	bl	8009a48 <GUI_DisFloatNum>
	GUI_DisString_EN(180, 120, "Amp", &Font24, MAGENTA, BLACK);
 800a958:	2300      	movs	r3, #0
 800a95a:	9301      	str	r3, [sp, #4]
 800a95c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	4b04      	ldr	r3, [pc, #16]	@ (800a974 <TP_IndicationsUnit+0x68>)
 800a964:	4a07      	ldr	r2, [pc, #28]	@ (800a984 <TP_IndicationsUnit+0x78>)
 800a966:	2178      	movs	r1, #120	@ 0x78
 800a968:	20b4      	movs	r0, #180	@ 0xb4
 800a96a:	f7ff f819 	bl	80099a0 <GUI_DisString_EN>
}
 800a96e:	bf00      	nop
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20000114 	.word	0x20000114
 800a978:	43038c78 	.word	0x43038c78
 800a97c:	0800c8b0 	.word	0x0800c8b0
 800a980:	40c086ec 	.word	0x40c086ec
 800a984:	0800c8b8 	.word	0x0800c8b8

0800a988 <TP_MenuTouch>:
/*******************************************************************************
function:
		Touch position on menu
*******************************************************************************/
void TP_MenuTouch(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
	sTP_Draw.Xpoint = 0;
 800a98c:	4b37      	ldr	r3, [pc, #220]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800a98e:	2200      	movs	r2, #0
 800a990:	801a      	strh	r2, [r3, #0]
	sTP_Draw.Ypoint = 0;
 800a992:	4b36      	ldr	r3, [pc, #216]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800a994:	2200      	movs	r2, #0
 800a996:	805a      	strh	r2, [r3, #2]
    TP_Scan(0);
 800a998:	2000      	movs	r0, #0
 800a99a:	f7ff fd03 	bl	800a3a4 <TP_Scan>
    if ((sTP_DEV.chStatus & TP_PRESS_DOWN) && (sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column && sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page)) {		//Press the button
 800a99e:	4b34      	ldr	r3, [pc, #208]	@ (800aa70 <TP_MenuTouch+0xe8>)
 800a9a0:	7a1b      	ldrb	r3, [r3, #8]
 800a9a2:	b25b      	sxtb	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	da5e      	bge.n	800aa66 <TP_MenuTouch+0xde>
 800a9a8:	4b30      	ldr	r3, [pc, #192]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800a9aa:	881a      	ldrh	r2, [r3, #0]
 800a9ac:	4b31      	ldr	r3, [pc, #196]	@ (800aa74 <TP_MenuTouch+0xec>)
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d258      	bcs.n	800aa66 <TP_MenuTouch+0xde>
 800a9b4:	4b2d      	ldr	r3, [pc, #180]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800a9b6:	885a      	ldrh	r2, [r3, #2]
 800a9b8:	4b2e      	ldr	r3, [pc, #184]	@ (800aa74 <TP_MenuTouch+0xec>)
 800a9ba:	885b      	ldrh	r3, [r3, #2]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d252      	bcs.n	800aa66 <TP_MenuTouch+0xde>
		// ON/OFF Switch
		if (sTP_Draw.Xpoint > 0 &&
 800a9c0:	4b2a      	ldr	r3, [pc, #168]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d025      	beq.n	800aa14 <TP_MenuTouch+0x8c>
				sTP_Draw.Xpoint < (sLCD_DIS.LCD_Dis_Column/2 - 1) &&
 800a9c8:	4b28      	ldr	r3, [pc, #160]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800a9ca:	881b      	ldrh	r3, [r3, #0]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	4b29      	ldr	r3, [pc, #164]	@ (800aa74 <TP_MenuTouch+0xec>)
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	085b      	lsrs	r3, r3, #1
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	3b01      	subs	r3, #1
		if (sTP_Draw.Xpoint > 0 &&
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	da1b      	bge.n	800aa14 <TP_MenuTouch+0x8c>
				sTP_Draw.Ypoint > 220 &&
 800a9dc:	4b23      	ldr	r3, [pc, #140]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800a9de:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Xpoint < (sLCD_DIS.LCD_Dis_Column/2 - 1) &&
 800a9e0:	2bdc      	cmp	r3, #220	@ 0xdc
 800a9e2:	d917      	bls.n	800aa14 <TP_MenuTouch+0x8c>
				sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page) {
 800a9e4:	4b21      	ldr	r3, [pc, #132]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800a9e6:	885a      	ldrh	r2, [r3, #2]
 800a9e8:	4b22      	ldr	r3, [pc, #136]	@ (800aa74 <TP_MenuTouch+0xec>)
 800a9ea:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Ypoint > 220 &&
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d211      	bcs.n	800aa14 <TP_MenuTouch+0x8c>
			sELECTONIC_LOAD_PARAMETERS.condition = !sELECTONIC_LOAD_PARAMETERS.condition;
 800a9f0:	4b21      	ldr	r3, [pc, #132]	@ (800aa78 <TP_MenuTouch+0xf0>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	bf14      	ite	ne
 800a9f8:	2301      	movne	r3, #1
 800a9fa:	2300      	moveq	r3, #0
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	f083 0301 	eor.w	r3, r3, #1
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	f003 0301 	and.w	r3, r3, #1
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	4b1b      	ldr	r3, [pc, #108]	@ (800aa78 <TP_MenuTouch+0xf0>)
 800aa0c:	701a      	strb	r2, [r3, #0]
			TP_MenuDialog();
 800aa0e:	f7ff fea7 	bl	800a760 <TP_MenuDialog>
			TP_MenuDialog();
		} else {
			//TP_MenuDialog(); // можно использовать как костыль
		}
    }
}
 800aa12:	e028      	b.n	800aa66 <TP_MenuTouch+0xde>
		} else if(sTP_Draw.Xpoint > sLCD_DIS.LCD_Dis_Column/2 &&
 800aa14:	4b15      	ldr	r3, [pc, #84]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800aa16:	881a      	ldrh	r2, [r3, #0]
 800aa18:	4b16      	ldr	r3, [pc, #88]	@ (800aa74 <TP_MenuTouch+0xec>)
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	085b      	lsrs	r3, r3, #1
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d920      	bls.n	800aa66 <TP_MenuTouch+0xde>
				sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column &&
 800aa24:	4b11      	ldr	r3, [pc, #68]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800aa26:	881a      	ldrh	r2, [r3, #0]
 800aa28:	4b12      	ldr	r3, [pc, #72]	@ (800aa74 <TP_MenuTouch+0xec>)
 800aa2a:	881b      	ldrh	r3, [r3, #0]
		} else if(sTP_Draw.Xpoint > sLCD_DIS.LCD_Dis_Column/2 &&
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d21a      	bcs.n	800aa66 <TP_MenuTouch+0xde>
				sTP_Draw.Ypoint > 220 &&
 800aa30:	4b0e      	ldr	r3, [pc, #56]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800aa32:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Xpoint < sLCD_DIS.LCD_Dis_Column &&
 800aa34:	2bdc      	cmp	r3, #220	@ 0xdc
 800aa36:	d916      	bls.n	800aa66 <TP_MenuTouch+0xde>
				sTP_Draw.Ypoint < sLCD_DIS.LCD_Dis_Page) {
 800aa38:	4b0c      	ldr	r3, [pc, #48]	@ (800aa6c <TP_MenuTouch+0xe4>)
 800aa3a:	885a      	ldrh	r2, [r3, #2]
 800aa3c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa74 <TP_MenuTouch+0xec>)
 800aa3e:	885b      	ldrh	r3, [r3, #2]
				sTP_Draw.Ypoint > 220 &&
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d210      	bcs.n	800aa66 <TP_MenuTouch+0xde>
			sELECTONIC_LOAD_PARAMETERS.currentType = !sELECTONIC_LOAD_PARAMETERS.currentType;
 800aa44:	4b0c      	ldr	r3, [pc, #48]	@ (800aa78 <TP_MenuTouch+0xf0>)
 800aa46:	785b      	ldrb	r3, [r3, #1]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	bf14      	ite	ne
 800aa4c:	2301      	movne	r3, #1
 800aa4e:	2300      	moveq	r3, #0
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	f083 0301 	eor.w	r3, r3, #1
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	4b06      	ldr	r3, [pc, #24]	@ (800aa78 <TP_MenuTouch+0xf0>)
 800aa60:	705a      	strb	r2, [r3, #1]
			TP_MenuDialog();
 800aa62:	f7ff fe7d 	bl	800a760 <TP_MenuDialog>
}
 800aa66:	bf00      	nop
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20002138 	.word	0x20002138
 800aa70:	2000211c 	.word	0x2000211c
 800aa74:	20002110 	.word	0x20002110
 800aa78:	20002140 	.word	0x20002140

0800aa7c <TP_Init>:
/*******************************************************************************
function:
		Touch pad initialization
*******************************************************************************/
void TP_Init( LCD_SCAN_DIR Lcd_ScanDir )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	71fb      	strb	r3, [r7, #7]
    TP_CS_1;
 800aa86:	2201      	movs	r2, #1
 800aa88:	2180      	movs	r1, #128	@ 0x80
 800aa8a:	4807      	ldr	r0, [pc, #28]	@ (800aaa8 <TP_Init+0x2c>)
 800aa8c:	f7f6 fd72 	bl	8001574 <HAL_GPIO_WritePin>

    sTP_DEV.TP_Scan_Dir = Lcd_ScanDir;
 800aa90:	4a06      	ldr	r2, [pc, #24]	@ (800aaac <TP_Init+0x30>)
 800aa92:	79fb      	ldrb	r3, [r7, #7]
 800aa94:	7613      	strb	r3, [r2, #24]

    TP_Read_ADC_XY(&sTP_DEV.Xpoint, &sTP_DEV.Ypoint);
 800aa96:	4906      	ldr	r1, [pc, #24]	@ (800aab0 <TP_Init+0x34>)
 800aa98:	4806      	ldr	r0, [pc, #24]	@ (800aab4 <TP_Init+0x38>)
 800aa9a:	f7ff fc17 	bl	800a2cc <TP_Read_ADC_XY>
}
 800aa9e:	bf00      	nop
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	40020400 	.word	0x40020400
 800aaac:	2000211c 	.word	0x2000211c
 800aab0:	20002122 	.word	0x20002122
 800aab4:	20002120 	.word	0x20002120

0800aab8 <LOAD_Init>:

void LOAD_Init(void)
{
 800aab8:	b480      	push	{r7}
 800aaba:	af00      	add	r7, sp, #0
    sELECTONIC_LOAD_PARAMETERS.condition = 1;
 800aabc:	4b09      	ldr	r3, [pc, #36]	@ (800aae4 <LOAD_Init+0x2c>)
 800aabe:	2201      	movs	r2, #1
 800aac0:	701a      	strb	r2, [r3, #0]

    sELECTONIC_LOAD_PARAMETERS.currentType = 1;
 800aac2:	4b08      	ldr	r3, [pc, #32]	@ (800aae4 <LOAD_Init+0x2c>)
 800aac4:	2201      	movs	r2, #1
 800aac6:	705a      	strb	r2, [r3, #1]

    sELECTONIC_LOAD_PARAMETERS.currentValue = 0;
 800aac8:	4b06      	ldr	r3, [pc, #24]	@ (800aae4 <LOAD_Init+0x2c>)
 800aaca:	f04f 0200 	mov.w	r2, #0
 800aace:	605a      	str	r2, [r3, #4]

    sELECTONIC_LOAD_PARAMETERS.voltageValue = 0;
 800aad0:	4b04      	ldr	r3, [pc, #16]	@ (800aae4 <LOAD_Init+0x2c>)
 800aad2:	f04f 0200 	mov.w	r2, #0
 800aad6:	609a      	str	r2, [r3, #8]
}
 800aad8:	bf00      	nop
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	20002140 	.word	0x20002140

0800aae8 <SD_SPI_ReadWriteByte>:
unsigned char  SD_Type=0;  //version of the sd card

//data: data to be written to sd card.
//return: data read from sd card.
unsigned char SD_SPI_ReadWriteByte(unsigned char CMD)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	4603      	mov	r3, r0
 800aaf0:	71fb      	strb	r3, [r7, #7]
	return SPI4W_Write_Byte(CMD);
 800aaf2:	79fb      	ldrb	r3, [r7, #7]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fd fc3f 	bl	8008378 <SPI4W_Write_Byte>
 800aafa:	4603      	mov	r3, r0
//	return SPI_Read_Byte();
}	  
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <SD_SPI_SpeedLow>:

//set spi in low speed mode.
void SD_SPI_SpeedLow(void)
{
 800ab04:	b480      	push	{r7}
 800ab06:	af00      	add	r7, sp, #0
//	SPI1->CR1&=0XFFC7; 
//	SPI1->CR1|=SPI_BaudRatePrescaler_256;
//	SPI_Cmd(SPI1,ENABLE); 
}
 800ab08:	bf00      	nop
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <SD_SPI_SpeedHigh>:


//set spi in high speed mode.
void SD_SPI_SpeedHigh(void)
{
 800ab12:	b480      	push	{r7}
 800ab14:	af00      	add	r7, sp, #0
//	SPI1->CR1&=0XFFC7; 
//	SPI1->CR1|=SPI_BaudRatePrescaler_32;
//	SPI_Cmd(SPI1,ENABLE); 
}
 800ab16:	bf00      	nop
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <SD_DisSelect>:


//released spi bus
void SD_DisSelect(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	af00      	add	r7, sp, #0
	SD_CS_1;
 800ab24:	2201      	movs	r2, #1
 800ab26:	2110      	movs	r1, #16
 800ab28:	4803      	ldr	r0, [pc, #12]	@ (800ab38 <SD_DisSelect+0x18>)
 800ab2a:	f7f6 fd23 	bl	8001574 <HAL_GPIO_WritePin>
 	SD_SPI_ReadWriteByte(0xff);//providing extra 8 clocks  
 800ab2e:	20ff      	movs	r0, #255	@ 0xff
 800ab30:	f7ff ffda 	bl	800aae8 <SD_SPI_ReadWriteByte>
}
 800ab34:	bf00      	nop
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	40020400 	.word	0x40020400

0800ab3c <SD_Select>:

//pick sd card and waiting until until it's ready
//return: 0: succed 1: failure
unsigned char SD_Select(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
	SD_CS_0;
 800ab40:	2200      	movs	r2, #0
 800ab42:	2110      	movs	r1, #16
 800ab44:	4807      	ldr	r0, [pc, #28]	@ (800ab64 <SD_Select+0x28>)
 800ab46:	f7f6 fd15 	bl	8001574 <HAL_GPIO_WritePin>
	if(SD_WaitReady()==0)return 0; 
 800ab4a:	f000 f80d 	bl	800ab68 <SD_WaitReady>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <SD_Select+0x1c>
 800ab54:	2300      	movs	r3, #0
 800ab56:	e002      	b.n	800ab5e <SD_Select+0x22>
	SD_DisSelect();
 800ab58:	f7ff ffe2 	bl	800ab20 <SD_DisSelect>
	return 1;
 800ab5c:	2301      	movs	r3, #1
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	40020400 	.word	0x40020400

0800ab68 <SD_WaitReady>:

//waiting for sd card until it's ready
unsigned char SD_WaitReady(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
	unsigned int t=0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	607b      	str	r3, [r7, #4]
	do{
		if(SD_SPI_ReadWriteByte(0XFF) == 0XFF)
 800ab72:	20ff      	movs	r0, #255	@ 0xff
 800ab74:	f7ff ffb8 	bl	800aae8 <SD_SPI_ReadWriteByte>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2bff      	cmp	r3, #255	@ 0xff
 800ab7c:	d101      	bne.n	800ab82 <SD_WaitReady+0x1a>
			return 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e008      	b.n	800ab94 <SD_WaitReady+0x2c>
		t++;		  	
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	3301      	adds	r3, #1
 800ab86:	607b      	str	r3, [r7, #4]
	}while(t<0XFFFFFF);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d3ef      	bcc.n	800ab72 <SD_WaitReady+0xa>
	return 1;
 800ab92:	2301      	movs	r3, #1
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <SD_GetResponse>:
//waiting for response from sd card.
//Response: expect from sd card.
//return: succeed for 0, fail for other else 
//return: 0 for success, other for failure.   
unsigned char SD_GetResponse(unsigned char Response)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	71fb      	strb	r3, [r7, #7]
	unsigned short Count=0xFFFF;	   						  
 800aba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800abaa:	81fb      	strh	r3, [r7, #14]
	while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)
 800abac:	e002      	b.n	800abb4 <SD_GetResponse+0x18>
		Count--; 	  
 800abae:	89fb      	ldrh	r3, [r7, #14]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	81fb      	strh	r3, [r7, #14]
	while ((SD_SPI_ReadWriteByte(0XFF) != Response) && Count)
 800abb4:	20ff      	movs	r0, #255	@ 0xff
 800abb6:	f7ff ff97 	bl	800aae8 <SD_SPI_ReadWriteByte>
 800abba:	4603      	mov	r3, r0
 800abbc:	461a      	mov	r2, r3
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d002      	beq.n	800abca <SD_GetResponse+0x2e>
 800abc4:	89fb      	ldrh	r3, [r7, #14]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1f1      	bne.n	800abae <SD_GetResponse+0x12>
	if (Count==0)
 800abca:	89fb      	ldrh	r3, [r7, #14]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <SD_GetResponse+0x38>
		return MSD_RESPONSE_FAILURE;  
 800abd0:	23ff      	movs	r3, #255	@ 0xff
 800abd2:	e000      	b.n	800abd6 <SD_GetResponse+0x3a>
	else 
		return MSD_RESPONSE_NO_ERROR;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <SD_RecvData>:
//read a buffer from sd card.
//*buf: pointer to a buffer.
//len: length of the buffer.
//return: 0 for success, other for failure.   
unsigned char SD_RecvData(unsigned char *buf,unsigned short len)
{			  	  
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	460b      	mov	r3, r1
 800abe8:	807b      	strh	r3, [r7, #2]
	if(SD_GetResponse(0xFE))
 800abea:	20fe      	movs	r0, #254	@ 0xfe
 800abec:	f7ff ffd6 	bl	800ab9c <SD_GetResponse>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00b      	beq.n	800ac0e <SD_RecvData+0x30>
		return 1;//waiting for start command send back from sd card.
 800abf6:	2301      	movs	r3, #1
 800abf8:	e015      	b.n	800ac26 <SD_RecvData+0x48>
    while(len--){//receiving data...
        *buf = SD_SPI_ReadWriteByte(0xFF);
 800abfa:	20ff      	movs	r0, #255	@ 0xff
 800abfc:	f7ff ff74 	bl	800aae8 <SD_SPI_ReadWriteByte>
 800ac00:	4603      	mov	r3, r0
 800ac02:	461a      	mov	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	701a      	strb	r2, [r3, #0]
        buf++;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	607b      	str	r3, [r7, #4]
    while(len--){//receiving data...
 800ac0e:	887b      	ldrh	r3, [r7, #2]
 800ac10:	1e5a      	subs	r2, r3, #1
 800ac12:	807a      	strh	r2, [r7, #2]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1f0      	bne.n	800abfa <SD_RecvData+0x1c>
    }

    //send 2 dummy write (dummy CRC)
    SD_SPI_ReadWriteByte(0xFF);
 800ac18:	20ff      	movs	r0, #255	@ 0xff
 800ac1a:	f7ff ff65 	bl	800aae8 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(0xFF);									  					    
 800ac1e:	20ff      	movs	r0, #255	@ 0xff
 800ac20:	f7ff ff62 	bl	800aae8 <SD_SPI_ReadWriteByte>
    return 0;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <SD_SendBlock>:
//write a buffer containing 512 bytes to sd card.
//buf: data buffer
//cmd: command
//return: 0 for success, other for failure.   
unsigned char SD_SendBlock(unsigned char*buf,unsigned char cmd)
{	
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	460b      	mov	r3, r1
 800ac38:	70fb      	strb	r3, [r7, #3]
	unsigned short t;		  	  
	if(SD_WaitReady())return 1;
 800ac3a:	f7ff ff95 	bl	800ab68 <SD_WaitReady>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <SD_SendBlock+0x1a>
 800ac44:	2301      	movs	r3, #1
 800ac46:	e02a      	b.n	800ac9e <SD_SendBlock+0x70>
	SD_SPI_ReadWriteByte(cmd);
 800ac48:	78fb      	ldrb	r3, [r7, #3]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7ff ff4c 	bl	800aae8 <SD_SPI_ReadWriteByte>
	if(cmd!=0XFD){
 800ac50:	78fb      	ldrb	r3, [r7, #3]
 800ac52:	2bfd      	cmp	r3, #253	@ 0xfd
 800ac54:	d022      	beq.n	800ac9c <SD_SendBlock+0x6e>
		for(t=0;t<512;t++)
 800ac56:	2300      	movs	r3, #0
 800ac58:	81fb      	strh	r3, [r7, #14]
 800ac5a:	e009      	b.n	800ac70 <SD_SendBlock+0x42>
			SD_SPI_ReadWriteByte(buf[t]);
 800ac5c:	89fb      	ldrh	r3, [r7, #14]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	4413      	add	r3, r2
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff ff3f 	bl	800aae8 <SD_SPI_ReadWriteByte>
		for(t=0;t<512;t++)
 800ac6a:	89fb      	ldrh	r3, [r7, #14]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	81fb      	strh	r3, [r7, #14]
 800ac70:	89fb      	ldrh	r3, [r7, #14]
 800ac72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac76:	d3f1      	bcc.n	800ac5c <SD_SendBlock+0x2e>
	    SD_SPI_ReadWriteByte(0xFF);//ignoring CRC
 800ac78:	20ff      	movs	r0, #255	@ 0xff
 800ac7a:	f7ff ff35 	bl	800aae8 <SD_SPI_ReadWriteByte>
	    SD_SPI_ReadWriteByte(0xFF);
 800ac7e:	20ff      	movs	r0, #255	@ 0xff
 800ac80:	f7ff ff32 	bl	800aae8 <SD_SPI_ReadWriteByte>
		t = SD_SPI_ReadWriteByte(0xFF);
 800ac84:	20ff      	movs	r0, #255	@ 0xff
 800ac86:	f7ff ff2f 	bl	800aae8 <SD_SPI_ReadWriteByte>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	81fb      	strh	r3, [r7, #14]
		if((t&0x1F)!=0x05)
 800ac8e:	89fb      	ldrh	r3, [r7, #14]
 800ac90:	f003 031f 	and.w	r3, r3, #31
 800ac94:	2b05      	cmp	r3, #5
 800ac96:	d001      	beq.n	800ac9c <SD_SendBlock+0x6e>
			return 2;								  					    
 800ac98:	2302      	movs	r3, #2
 800ac9a:	e000      	b.n	800ac9e <SD_SendBlock+0x70>
	}						 									  					    
    return 0;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <SD_SendCmd>:
//cmd��command
//arg: parameter
//crc: crc
//return: response sent back from sd card.
unsigned char SD_SendCmd(unsigned char cmd, unsigned int arg, unsigned char crc)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	4603      	mov	r3, r0
 800acae:	6039      	str	r1, [r7, #0]
 800acb0:	71fb      	strb	r3, [r7, #7]
 800acb2:	4613      	mov	r3, r2
 800acb4:	71bb      	strb	r3, [r7, #6]
    unsigned char r1;	
	unsigned char Retry=0; 
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]
	SD_DisSelect();
 800acba:	f7ff ff31 	bl	800ab20 <SD_DisSelect>
	if(SD_Select())return 0XFF;
 800acbe:	f7ff ff3d 	bl	800ab3c <SD_Select>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d001      	beq.n	800accc <SD_SendCmd+0x26>
 800acc8:	23ff      	movs	r3, #255	@ 0xff
 800acca:	e038      	b.n	800ad3e <SD_SendCmd+0x98>

    SD_SPI_ReadWriteByte(cmd | 0x40);
 800accc:	79fb      	ldrb	r3, [r7, #7]
 800acce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7ff ff07 	bl	800aae8 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 24);
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	0e1b      	lsrs	r3, r3, #24
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff ff01 	bl	800aae8 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 16);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	0c1b      	lsrs	r3, r3, #16
 800acea:	b2db      	uxtb	r3, r3
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff fefb 	bl	800aae8 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg >> 8);
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	0a1b      	lsrs	r3, r3, #8
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7ff fef5 	bl	800aae8 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(arg);	  
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff fef0 	bl	800aae8 <SD_SPI_ReadWriteByte>
    SD_SPI_ReadWriteByte(crc); 
 800ad08:	79bb      	ldrb	r3, [r7, #6]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7ff feec 	bl	800aae8 <SD_SPI_ReadWriteByte>
	if(cmd == CMD12)SD_SPI_ReadWriteByte(0xff); //Skip a stuff byte when stop reading
 800ad10:	79fb      	ldrb	r3, [r7, #7]
 800ad12:	2b0c      	cmp	r3, #12
 800ad14:	d102      	bne.n	800ad1c <SD_SendCmd+0x76>
 800ad16:	20ff      	movs	r0, #255	@ 0xff
 800ad18:	f7ff fee6 	bl	800aae8 <SD_SPI_ReadWriteByte>
	Retry = 0X1F;
 800ad1c:	231f      	movs	r3, #31
 800ad1e:	73fb      	strb	r3, [r7, #15]
	do{
		r1 = SD_SPI_ReadWriteByte(0xFF);
 800ad20:	20ff      	movs	r0, #255	@ 0xff
 800ad22:	f7ff fee1 	bl	800aae8 <SD_SPI_ReadWriteByte>
 800ad26:	4603      	mov	r3, r0
 800ad28:	73bb      	strb	r3, [r7, #14]
	}while((r1&0X80) && Retry--);	 
 800ad2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	da04      	bge.n	800ad3c <SD_SendCmd+0x96>
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	1e5a      	subs	r2, r3, #1
 800ad36:	73fa      	strb	r2, [r7, #15]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1f1      	bne.n	800ad20 <SD_SendCmd+0x7a>

    return r1;
 800ad3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
	...

0800ad48 <SD_Initialize>:
    return Capacity;
}

//initialize sd card 
unsigned char SD_Initialize(void)
{
 800ad48:	b590      	push	{r4, r7, lr}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
    unsigned char r1;      
    unsigned short retry;  
    unsigned char buf[4];  
	unsigned short i;
    
    SD_CS_1;
 800ad4e:	2201      	movs	r2, #1
 800ad50:	2110      	movs	r1, #16
 800ad52:	487a      	ldr	r0, [pc, #488]	@ (800af3c <SD_Initialize+0x1f4>)
 800ad54:	f7f6 fc0e 	bl	8001574 <HAL_GPIO_WritePin>
 	SD_SPI_SpeedLow();	
 800ad58:	f7ff fed4 	bl	800ab04 <SD_SPI_SpeedLow>
 	for(i=0;i<10;i++)SD_SPI_ReadWriteByte(0XFF);
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	817b      	strh	r3, [r7, #10]
 800ad60:	e005      	b.n	800ad6e <SD_Initialize+0x26>
 800ad62:	20ff      	movs	r0, #255	@ 0xff
 800ad64:	f7ff fec0 	bl	800aae8 <SD_SPI_ReadWriteByte>
 800ad68:	897b      	ldrh	r3, [r7, #10]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	817b      	strh	r3, [r7, #10]
 800ad6e:	897b      	ldrh	r3, [r7, #10]
 800ad70:	2b09      	cmp	r3, #9
 800ad72:	d9f6      	bls.n	800ad62 <SD_Initialize+0x1a>
	retry=20;
 800ad74:	2314      	movs	r3, #20
 800ad76:	81bb      	strh	r3, [r7, #12]
	do
	{
		r1=SD_SendCmd(CMD0,0,0x95);//enter to idle state
 800ad78:	2295      	movs	r2, #149	@ 0x95
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	f7ff ff92 	bl	800aca6 <SD_SendCmd>
 800ad82:	4603      	mov	r3, r0
 800ad84:	73fb      	strb	r3, [r7, #15]
	}while((r1!=0X01) && retry--);
 800ad86:	7bfb      	ldrb	r3, [r7, #15]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d004      	beq.n	800ad96 <SD_Initialize+0x4e>
 800ad8c:	89bb      	ldrh	r3, [r7, #12]
 800ad8e:	1e5a      	subs	r2, r3, #1
 800ad90:	81ba      	strh	r2, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1f0      	bne.n	800ad78 <SD_Initialize+0x30>
 	SD_Type=0;
 800ad96:	4b6a      	ldr	r3, [pc, #424]	@ (800af40 <SD_Initialize+0x1f8>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	701a      	strb	r2, [r3, #0]
    
	if(r1==0X01)
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	f040 80b7 	bne.w	800af12 <SD_Initialize+0x1ca>
	{
		if(SD_SendCmd(CMD8,0x1AA,0x87)==1)//SD V2.0
 800ada4:	2287      	movs	r2, #135	@ 0x87
 800ada6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800adaa:	2008      	movs	r0, #8
 800adac:	f7ff ff7b 	bl	800aca6 <SD_SendCmd>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d15f      	bne.n	800ae76 <SD_Initialize+0x12e>
		{
			for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);	//Get trailing return value of R7 resp
 800adb6:	2300      	movs	r3, #0
 800adb8:	817b      	strh	r3, [r7, #10]
 800adba:	e00d      	b.n	800add8 <SD_Initialize+0x90>
 800adbc:	897c      	ldrh	r4, [r7, #10]
 800adbe:	20ff      	movs	r0, #255	@ 0xff
 800adc0:	f7ff fe92 	bl	800aae8 <SD_SPI_ReadWriteByte>
 800adc4:	4603      	mov	r3, r0
 800adc6:	461a      	mov	r2, r3
 800adc8:	f104 0310 	add.w	r3, r4, #16
 800adcc:	443b      	add	r3, r7
 800adce:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800add2:	897b      	ldrh	r3, [r7, #10]
 800add4:	3301      	adds	r3, #1
 800add6:	817b      	strh	r3, [r7, #10]
 800add8:	897b      	ldrh	r3, [r7, #10]
 800adda:	2b03      	cmp	r3, #3
 800addc:	d9ee      	bls.n	800adbc <SD_Initialize+0x74>
			if(buf[2]==0X01&&buf[3]==0XAA)//is it support of 2.7~3.6V 
 800adde:	79bb      	ldrb	r3, [r7, #6]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	f040 8096 	bne.w	800af12 <SD_Initialize+0x1ca>
 800ade6:	79fb      	ldrb	r3, [r7, #7]
 800ade8:	2baa      	cmp	r3, #170	@ 0xaa
 800adea:	f040 8092 	bne.w	800af12 <SD_Initialize+0x1ca>
			{
				retry=0XFFFE;
 800adee:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800adf2:	81bb      	strh	r3, [r7, #12]
				do
				{
					SD_SendCmd(CMD55,0,0X01);	
 800adf4:	2201      	movs	r2, #1
 800adf6:	2100      	movs	r1, #0
 800adf8:	2037      	movs	r0, #55	@ 0x37
 800adfa:	f7ff ff54 	bl	800aca6 <SD_SendCmd>
					r1=SD_SendCmd(CMD41,0x40000000,0X01);
 800adfe:	2201      	movs	r2, #1
 800ae00:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ae04:	2029      	movs	r0, #41	@ 0x29
 800ae06:	f7ff ff4e 	bl	800aca6 <SD_SendCmd>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d004      	beq.n	800ae1e <SD_Initialize+0xd6>
 800ae14:	89bb      	ldrh	r3, [r7, #12]
 800ae16:	1e5a      	subs	r2, r3, #1
 800ae18:	81ba      	strh	r2, [r7, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1ea      	bne.n	800adf4 <SD_Initialize+0xac>
				if(retry&&SD_SendCmd(CMD58,0,0X01)==0) //start to identify the SD2.0 version of sd card.
 800ae1e:	89bb      	ldrh	r3, [r7, #12]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d076      	beq.n	800af12 <SD_Initialize+0x1ca>
 800ae24:	2201      	movs	r2, #1
 800ae26:	2100      	movs	r1, #0
 800ae28:	203a      	movs	r0, #58	@ 0x3a
 800ae2a:	f7ff ff3c 	bl	800aca6 <SD_SendCmd>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d16e      	bne.n	800af12 <SD_Initialize+0x1ca>
				{
					for(i=0;i<4;i++)buf[i]=SD_SPI_ReadWriteByte(0XFF);//get OCR
 800ae34:	2300      	movs	r3, #0
 800ae36:	817b      	strh	r3, [r7, #10]
 800ae38:	e00d      	b.n	800ae56 <SD_Initialize+0x10e>
 800ae3a:	897c      	ldrh	r4, [r7, #10]
 800ae3c:	20ff      	movs	r0, #255	@ 0xff
 800ae3e:	f7ff fe53 	bl	800aae8 <SD_SPI_ReadWriteByte>
 800ae42:	4603      	mov	r3, r0
 800ae44:	461a      	mov	r2, r3
 800ae46:	f104 0310 	add.w	r3, r4, #16
 800ae4a:	443b      	add	r3, r7
 800ae4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800ae50:	897b      	ldrh	r3, [r7, #10]
 800ae52:	3301      	adds	r3, #1
 800ae54:	817b      	strh	r3, [r7, #10]
 800ae56:	897b      	ldrh	r3, [r7, #10]
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d9ee      	bls.n	800ae3a <SD_Initialize+0xf2>
					if(buf[0]&0x40)SD_Type=SD_TYPE_V2HC;    //check CCS
 800ae5c:	793b      	ldrb	r3, [r7, #4]
 800ae5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <SD_Initialize+0x126>
 800ae66:	4b36      	ldr	r3, [pc, #216]	@ (800af40 <SD_Initialize+0x1f8>)
 800ae68:	2206      	movs	r2, #6
 800ae6a:	701a      	strb	r2, [r3, #0]
 800ae6c:	e051      	b.n	800af12 <SD_Initialize+0x1ca>
					else SD_Type=SD_TYPE_V2;   
 800ae6e:	4b34      	ldr	r3, [pc, #208]	@ (800af40 <SD_Initialize+0x1f8>)
 800ae70:	2204      	movs	r2, #4
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	e04d      	b.n	800af12 <SD_Initialize+0x1ca>
				}
			}
		}else//SD V1.x/ MMC	V3
		{
			SD_SendCmd(CMD55,0,0X01);		
 800ae76:	2201      	movs	r2, #1
 800ae78:	2100      	movs	r1, #0
 800ae7a:	2037      	movs	r0, #55	@ 0x37
 800ae7c:	f7ff ff13 	bl	800aca6 <SD_SendCmd>
			r1=SD_SendCmd(CMD41,0,0X01);	
 800ae80:	2201      	movs	r2, #1
 800ae82:	2100      	movs	r1, #0
 800ae84:	2029      	movs	r0, #41	@ 0x29
 800ae86:	f7ff ff0e 	bl	800aca6 <SD_SendCmd>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
			if(r1<=1)
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d81a      	bhi.n	800aeca <SD_Initialize+0x182>
			{		
				SD_Type=SD_TYPE_V1;
 800ae94:	4b2a      	ldr	r3, [pc, #168]	@ (800af40 <SD_Initialize+0x1f8>)
 800ae96:	2202      	movs	r2, #2
 800ae98:	701a      	strb	r2, [r3, #0]
				retry=0XFFFE;
 800ae9a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800ae9e:	81bb      	strh	r3, [r7, #12]
				do //exit idle state
				{
					SD_SendCmd(CMD55,0,0X01);	
 800aea0:	2201      	movs	r2, #1
 800aea2:	2100      	movs	r1, #0
 800aea4:	2037      	movs	r0, #55	@ 0x37
 800aea6:	f7ff fefe 	bl	800aca6 <SD_SendCmd>
					r1=SD_SendCmd(CMD41,0,0X01);
 800aeaa:	2201      	movs	r2, #1
 800aeac:	2100      	movs	r1, #0
 800aeae:	2029      	movs	r0, #41	@ 0x29
 800aeb0:	f7ff fef9 	bl	800aca6 <SD_SendCmd>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d01a      	beq.n	800aef4 <SD_Initialize+0x1ac>
 800aebe:	89bb      	ldrh	r3, [r7, #12]
 800aec0:	1e5a      	subs	r2, r3, #1
 800aec2:	81ba      	strh	r2, [r7, #12]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1eb      	bne.n	800aea0 <SD_Initialize+0x158>
 800aec8:	e014      	b.n	800aef4 <SD_Initialize+0x1ac>
			}else
			{
				SD_Type=SD_TYPE_MMC;//MMC V3
 800aeca:	4b1d      	ldr	r3, [pc, #116]	@ (800af40 <SD_Initialize+0x1f8>)
 800aecc:	2201      	movs	r2, #1
 800aece:	701a      	strb	r2, [r3, #0]
				retry=0XFFFE;
 800aed0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800aed4:	81bb      	strh	r3, [r7, #12]
				do 
				{											    
					r1=SD_SendCmd(CMD1,0,0X01);
 800aed6:	2201      	movs	r2, #1
 800aed8:	2100      	movs	r1, #0
 800aeda:	2001      	movs	r0, #1
 800aedc:	f7ff fee3 	bl	800aca6 <SD_SendCmd>
 800aee0:	4603      	mov	r3, r0
 800aee2:	73fb      	strb	r3, [r7, #15]
				}while(r1&&retry--);  
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d004      	beq.n	800aef4 <SD_Initialize+0x1ac>
 800aeea:	89bb      	ldrh	r3, [r7, #12]
 800aeec:	1e5a      	subs	r2, r3, #1
 800aeee:	81ba      	strh	r2, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1f0      	bne.n	800aed6 <SD_Initialize+0x18e>
			}
			if(retry==0||SD_SendCmd(CMD16,512,0X01)!=0)SD_Type=SD_TYPE_ERR;
 800aef4:	89bb      	ldrh	r3, [r7, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d008      	beq.n	800af0c <SD_Initialize+0x1c4>
 800aefa:	2201      	movs	r2, #1
 800aefc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af00:	2010      	movs	r0, #16
 800af02:	f7ff fed0 	bl	800aca6 <SD_SendCmd>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <SD_Initialize+0x1ca>
 800af0c:	4b0c      	ldr	r3, [pc, #48]	@ (800af40 <SD_Initialize+0x1f8>)
 800af0e:	2200      	movs	r2, #0
 800af10:	701a      	strb	r2, [r3, #0]
		}
	}
	SD_DisSelect();
 800af12:	f7ff fe05 	bl	800ab20 <SD_DisSelect>
	SD_SPI_SpeedHigh();
 800af16:	f7ff fdfc 	bl	800ab12 <SD_SPI_SpeedHigh>
	if(SD_Type)return 0;
 800af1a:	4b09      	ldr	r3, [pc, #36]	@ (800af40 <SD_Initialize+0x1f8>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <SD_Initialize+0x1de>
 800af22:	2300      	movs	r3, #0
 800af24:	e005      	b.n	800af32 <SD_Initialize+0x1ea>
	else if(r1)return r1; 	   
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <SD_Initialize+0x1e8>
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
 800af2e:	e000      	b.n	800af32 <SD_Initialize+0x1ea>
	return 0xaa;
 800af30:	23aa      	movs	r3, #170	@ 0xaa
}
 800af32:	4618      	mov	r0, r3
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	bd90      	pop	{r4, r7, pc}
 800af3a:	bf00      	nop
 800af3c:	40020400 	.word	0x40020400
 800af40:	2000214c 	.word	0x2000214c

0800af44 <SD_ReadDisk>:
//buf: data buffer
//sector: sector
//cnt: totals of sectors]
//return: 0 ok, other for failure
unsigned char SD_ReadDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	4613      	mov	r3, r2
 800af50:	71fb      	strb	r3, [r7, #7]
	unsigned char r1;
	if(SD_Type!=SD_TYPE_V2HC)sector <<= 9;
 800af52:	4b21      	ldr	r3, [pc, #132]	@ (800afd8 <SD_ReadDisk+0x94>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	2b06      	cmp	r3, #6
 800af58:	d002      	beq.n	800af60 <SD_ReadDisk+0x1c>
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	025b      	lsls	r3, r3, #9
 800af5e:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800af60:	79fb      	ldrb	r3, [r7, #7]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d111      	bne.n	800af8a <SD_ReadDisk+0x46>
	{
		r1=SD_SendCmd(CMD17,sector,0X01);
 800af66:	2201      	movs	r2, #1
 800af68:	68b9      	ldr	r1, [r7, #8]
 800af6a:	2011      	movs	r0, #17
 800af6c:	f7ff fe9b 	bl	800aca6 <SD_SendCmd>
 800af70:	4603      	mov	r3, r0
 800af72:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800af74:	7dfb      	ldrb	r3, [r7, #23]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d127      	bne.n	800afca <SD_ReadDisk+0x86>
		{
			r1=SD_RecvData(buf,512);   
 800af7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7ff fe2d 	bl	800abde <SD_RecvData>
 800af84:	4603      	mov	r3, r0
 800af86:	75fb      	strb	r3, [r7, #23]
 800af88:	e01f      	b.n	800afca <SD_ReadDisk+0x86>
		}
	}else
	{
		r1=SD_SendCmd(CMD18,sector,0X01);
 800af8a:	2201      	movs	r2, #1
 800af8c:	68b9      	ldr	r1, [r7, #8]
 800af8e:	2012      	movs	r0, #18
 800af90:	f7ff fe89 	bl	800aca6 <SD_SendCmd>
 800af94:	4603      	mov	r3, r0
 800af96:	75fb      	strb	r3, [r7, #23]
		do
		{
			r1=SD_RecvData(buf,512);
 800af98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f7ff fe1e 	bl	800abde <SD_RecvData>
 800afa2:	4603      	mov	r3, r0
 800afa4:	75fb      	strb	r3, [r7, #23]
			buf+=512;  
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800afac:	60fb      	str	r3, [r7, #12]
		}while(--cnt && r1==0); 	
 800afae:	79fb      	ldrb	r3, [r7, #7]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	71fb      	strb	r3, [r7, #7]
 800afb4:	79fb      	ldrb	r3, [r7, #7]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <SD_ReadDisk+0x7c>
 800afba:	7dfb      	ldrb	r3, [r7, #23]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0eb      	beq.n	800af98 <SD_ReadDisk+0x54>
		SD_SendCmd(CMD12,0,0X01);	
 800afc0:	2201      	movs	r2, #1
 800afc2:	2100      	movs	r1, #0
 800afc4:	200c      	movs	r0, #12
 800afc6:	f7ff fe6e 	bl	800aca6 <SD_SendCmd>
	}   
	SD_DisSelect();
 800afca:	f7ff fda9 	bl	800ab20 <SD_DisSelect>
	return r1;//
 800afce:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3718      	adds	r7, #24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	2000214c 	.word	0x2000214c

0800afdc <SD_WriteDisk>:
//buf: data buffer
//sector: start sector
//cnt: totals of sectors]
//return: 0 ok, other for failure
unsigned char SD_WriteDisk(uint8_t*buf, uint32_t sector, uint8_t cnt)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	4613      	mov	r3, r2
 800afe8:	71fb      	strb	r3, [r7, #7]
	unsigned char r1;
	if(SD_Type!=SD_TYPE_V2HC)sector *= 512;
 800afea:	4b2a      	ldr	r3, [pc, #168]	@ (800b094 <SD_WriteDisk+0xb8>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	2b06      	cmp	r3, #6
 800aff0:	d002      	beq.n	800aff8 <SD_WriteDisk+0x1c>
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	025b      	lsls	r3, r3, #9
 800aff6:	60bb      	str	r3, [r7, #8]
	if(cnt==1)
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d110      	bne.n	800b020 <SD_WriteDisk+0x44>
	{
		r1=SD_SendCmd(CMD24,sector,0X01);
 800affe:	2201      	movs	r2, #1
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	2018      	movs	r0, #24
 800b004:	f7ff fe4f 	bl	800aca6 <SD_SendCmd>
 800b008:	4603      	mov	r3, r0
 800b00a:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d138      	bne.n	800b084 <SD_WriteDisk+0xa8>
		{
			r1=SD_SendBlock(buf,0xFE); 
 800b012:	21fe      	movs	r1, #254	@ 0xfe
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f7ff fe0a 	bl	800ac2e <SD_SendBlock>
 800b01a:	4603      	mov	r3, r0
 800b01c:	75fb      	strb	r3, [r7, #23]
 800b01e:	e031      	b.n	800b084 <SD_WriteDisk+0xa8>
		}
	}else
	{
		if(SD_Type!=SD_TYPE_MMC)
 800b020:	4b1c      	ldr	r3, [pc, #112]	@ (800b094 <SD_WriteDisk+0xb8>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d00a      	beq.n	800b03e <SD_WriteDisk+0x62>
		{
			SD_SendCmd(CMD55,0,0X01);	
 800b028:	2201      	movs	r2, #1
 800b02a:	2100      	movs	r1, #0
 800b02c:	2037      	movs	r0, #55	@ 0x37
 800b02e:	f7ff fe3a 	bl	800aca6 <SD_SendCmd>
			SD_SendCmd(CMD23,cnt,0X01);	
 800b032:	79fb      	ldrb	r3, [r7, #7]
 800b034:	2201      	movs	r2, #1
 800b036:	4619      	mov	r1, r3
 800b038:	2017      	movs	r0, #23
 800b03a:	f7ff fe34 	bl	800aca6 <SD_SendCmd>
		}
 		r1=SD_SendCmd(CMD25,sector,0X01);
 800b03e:	2201      	movs	r2, #1
 800b040:	68b9      	ldr	r1, [r7, #8]
 800b042:	2019      	movs	r0, #25
 800b044:	f7ff fe2f 	bl	800aca6 <SD_SendCmd>
 800b048:	4603      	mov	r3, r0
 800b04a:	75fb      	strb	r3, [r7, #23]
		if(r1==0)
 800b04c:	7dfb      	ldrb	r3, [r7, #23]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d118      	bne.n	800b084 <SD_WriteDisk+0xa8>
		{
			do
			{
				r1=SD_SendBlock(buf,0xFC); 
 800b052:	21fc      	movs	r1, #252	@ 0xfc
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7ff fdea 	bl	800ac2e <SD_SendBlock>
 800b05a:	4603      	mov	r3, r0
 800b05c:	75fb      	strb	r3, [r7, #23]
				buf+=512;  
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b064:	60fb      	str	r3, [r7, #12]
			}while(--cnt && r1==0);
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	3b01      	subs	r3, #1
 800b06a:	71fb      	strb	r3, [r7, #7]
 800b06c:	79fb      	ldrb	r3, [r7, #7]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <SD_WriteDisk+0x9c>
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0ec      	beq.n	800b052 <SD_WriteDisk+0x76>
			r1=SD_SendBlock(0,0xFD);
 800b078:	21fd      	movs	r1, #253	@ 0xfd
 800b07a:	2000      	movs	r0, #0
 800b07c:	f7ff fdd7 	bl	800ac2e <SD_SendBlock>
 800b080:	4603      	mov	r3, r0
 800b082:	75fb      	strb	r3, [r7, #23]
		}
	}   
	SD_DisSelect();
 800b084:	f7ff fd4c 	bl	800ab20 <SD_DisSelect>
	return r1;
 800b088:	7dfb      	ldrb	r3, [r7, #23]
}	   
 800b08a:	4618      	mov	r0, r3
 800b08c:	3718      	adds	r7, #24
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	2000214c 	.word	0x2000214c

0800b098 <malloc>:
 800b098:	4b02      	ldr	r3, [pc, #8]	@ (800b0a4 <malloc+0xc>)
 800b09a:	4601      	mov	r1, r0
 800b09c:	6818      	ldr	r0, [r3, #0]
 800b09e:	f000 b825 	b.w	800b0ec <_malloc_r>
 800b0a2:	bf00      	nop
 800b0a4:	20000130 	.word	0x20000130

0800b0a8 <sbrk_aligned>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	4e0f      	ldr	r6, [pc, #60]	@ (800b0e8 <sbrk_aligned+0x40>)
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	6831      	ldr	r1, [r6, #0]
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	b911      	cbnz	r1, 800b0ba <sbrk_aligned+0x12>
 800b0b4:	f000 faec 	bl	800b690 <_sbrk_r>
 800b0b8:	6030      	str	r0, [r6, #0]
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4628      	mov	r0, r5
 800b0be:	f000 fae7 	bl	800b690 <_sbrk_r>
 800b0c2:	1c43      	adds	r3, r0, #1
 800b0c4:	d103      	bne.n	800b0ce <sbrk_aligned+0x26>
 800b0c6:	f04f 34ff 	mov.w	r4, #4294967295
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	bd70      	pop	{r4, r5, r6, pc}
 800b0ce:	1cc4      	adds	r4, r0, #3
 800b0d0:	f024 0403 	bic.w	r4, r4, #3
 800b0d4:	42a0      	cmp	r0, r4
 800b0d6:	d0f8      	beq.n	800b0ca <sbrk_aligned+0x22>
 800b0d8:	1a21      	subs	r1, r4, r0
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f000 fad8 	bl	800b690 <_sbrk_r>
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d1f2      	bne.n	800b0ca <sbrk_aligned+0x22>
 800b0e4:	e7ef      	b.n	800b0c6 <sbrk_aligned+0x1e>
 800b0e6:	bf00      	nop
 800b0e8:	20002150 	.word	0x20002150

0800b0ec <_malloc_r>:
 800b0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f0:	1ccd      	adds	r5, r1, #3
 800b0f2:	f025 0503 	bic.w	r5, r5, #3
 800b0f6:	3508      	adds	r5, #8
 800b0f8:	2d0c      	cmp	r5, #12
 800b0fa:	bf38      	it	cc
 800b0fc:	250c      	movcc	r5, #12
 800b0fe:	2d00      	cmp	r5, #0
 800b100:	4606      	mov	r6, r0
 800b102:	db01      	blt.n	800b108 <_malloc_r+0x1c>
 800b104:	42a9      	cmp	r1, r5
 800b106:	d904      	bls.n	800b112 <_malloc_r+0x26>
 800b108:	230c      	movs	r3, #12
 800b10a:	6033      	str	r3, [r6, #0]
 800b10c:	2000      	movs	r0, #0
 800b10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1e8 <_malloc_r+0xfc>
 800b116:	f000 f869 	bl	800b1ec <__malloc_lock>
 800b11a:	f8d8 3000 	ldr.w	r3, [r8]
 800b11e:	461c      	mov	r4, r3
 800b120:	bb44      	cbnz	r4, 800b174 <_malloc_r+0x88>
 800b122:	4629      	mov	r1, r5
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff ffbf 	bl	800b0a8 <sbrk_aligned>
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	4604      	mov	r4, r0
 800b12e:	d158      	bne.n	800b1e2 <_malloc_r+0xf6>
 800b130:	f8d8 4000 	ldr.w	r4, [r8]
 800b134:	4627      	mov	r7, r4
 800b136:	2f00      	cmp	r7, #0
 800b138:	d143      	bne.n	800b1c2 <_malloc_r+0xd6>
 800b13a:	2c00      	cmp	r4, #0
 800b13c:	d04b      	beq.n	800b1d6 <_malloc_r+0xea>
 800b13e:	6823      	ldr	r3, [r4, #0]
 800b140:	4639      	mov	r1, r7
 800b142:	4630      	mov	r0, r6
 800b144:	eb04 0903 	add.w	r9, r4, r3
 800b148:	f000 faa2 	bl	800b690 <_sbrk_r>
 800b14c:	4581      	cmp	r9, r0
 800b14e:	d142      	bne.n	800b1d6 <_malloc_r+0xea>
 800b150:	6821      	ldr	r1, [r4, #0]
 800b152:	1a6d      	subs	r5, r5, r1
 800b154:	4629      	mov	r1, r5
 800b156:	4630      	mov	r0, r6
 800b158:	f7ff ffa6 	bl	800b0a8 <sbrk_aligned>
 800b15c:	3001      	adds	r0, #1
 800b15e:	d03a      	beq.n	800b1d6 <_malloc_r+0xea>
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	442b      	add	r3, r5
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	f8d8 3000 	ldr.w	r3, [r8]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	bb62      	cbnz	r2, 800b1c8 <_malloc_r+0xdc>
 800b16e:	f8c8 7000 	str.w	r7, [r8]
 800b172:	e00f      	b.n	800b194 <_malloc_r+0xa8>
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	1b52      	subs	r2, r2, r5
 800b178:	d420      	bmi.n	800b1bc <_malloc_r+0xd0>
 800b17a:	2a0b      	cmp	r2, #11
 800b17c:	d917      	bls.n	800b1ae <_malloc_r+0xc2>
 800b17e:	1961      	adds	r1, r4, r5
 800b180:	42a3      	cmp	r3, r4
 800b182:	6025      	str	r5, [r4, #0]
 800b184:	bf18      	it	ne
 800b186:	6059      	strne	r1, [r3, #4]
 800b188:	6863      	ldr	r3, [r4, #4]
 800b18a:	bf08      	it	eq
 800b18c:	f8c8 1000 	streq.w	r1, [r8]
 800b190:	5162      	str	r2, [r4, r5]
 800b192:	604b      	str	r3, [r1, #4]
 800b194:	4630      	mov	r0, r6
 800b196:	f000 f82f 	bl	800b1f8 <__malloc_unlock>
 800b19a:	f104 000b 	add.w	r0, r4, #11
 800b19e:	1d23      	adds	r3, r4, #4
 800b1a0:	f020 0007 	bic.w	r0, r0, #7
 800b1a4:	1ac2      	subs	r2, r0, r3
 800b1a6:	bf1c      	itt	ne
 800b1a8:	1a1b      	subne	r3, r3, r0
 800b1aa:	50a3      	strne	r3, [r4, r2]
 800b1ac:	e7af      	b.n	800b10e <_malloc_r+0x22>
 800b1ae:	6862      	ldr	r2, [r4, #4]
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	bf0c      	ite	eq
 800b1b4:	f8c8 2000 	streq.w	r2, [r8]
 800b1b8:	605a      	strne	r2, [r3, #4]
 800b1ba:	e7eb      	b.n	800b194 <_malloc_r+0xa8>
 800b1bc:	4623      	mov	r3, r4
 800b1be:	6864      	ldr	r4, [r4, #4]
 800b1c0:	e7ae      	b.n	800b120 <_malloc_r+0x34>
 800b1c2:	463c      	mov	r4, r7
 800b1c4:	687f      	ldr	r7, [r7, #4]
 800b1c6:	e7b6      	b.n	800b136 <_malloc_r+0x4a>
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	42a3      	cmp	r3, r4
 800b1ce:	d1fb      	bne.n	800b1c8 <_malloc_r+0xdc>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	6053      	str	r3, [r2, #4]
 800b1d4:	e7de      	b.n	800b194 <_malloc_r+0xa8>
 800b1d6:	230c      	movs	r3, #12
 800b1d8:	6033      	str	r3, [r6, #0]
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f000 f80c 	bl	800b1f8 <__malloc_unlock>
 800b1e0:	e794      	b.n	800b10c <_malloc_r+0x20>
 800b1e2:	6005      	str	r5, [r0, #0]
 800b1e4:	e7d6      	b.n	800b194 <_malloc_r+0xa8>
 800b1e6:	bf00      	nop
 800b1e8:	20002154 	.word	0x20002154

0800b1ec <__malloc_lock>:
 800b1ec:	4801      	ldr	r0, [pc, #4]	@ (800b1f4 <__malloc_lock+0x8>)
 800b1ee:	f000 ba9c 	b.w	800b72a <__retarget_lock_acquire_recursive>
 800b1f2:	bf00      	nop
 800b1f4:	20002298 	.word	0x20002298

0800b1f8 <__malloc_unlock>:
 800b1f8:	4801      	ldr	r0, [pc, #4]	@ (800b200 <__malloc_unlock+0x8>)
 800b1fa:	f000 ba97 	b.w	800b72c <__retarget_lock_release_recursive>
 800b1fe:	bf00      	nop
 800b200:	20002298 	.word	0x20002298

0800b204 <std>:
 800b204:	2300      	movs	r3, #0
 800b206:	b510      	push	{r4, lr}
 800b208:	4604      	mov	r4, r0
 800b20a:	e9c0 3300 	strd	r3, r3, [r0]
 800b20e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b212:	6083      	str	r3, [r0, #8]
 800b214:	8181      	strh	r1, [r0, #12]
 800b216:	6643      	str	r3, [r0, #100]	@ 0x64
 800b218:	81c2      	strh	r2, [r0, #14]
 800b21a:	6183      	str	r3, [r0, #24]
 800b21c:	4619      	mov	r1, r3
 800b21e:	2208      	movs	r2, #8
 800b220:	305c      	adds	r0, #92	@ 0x5c
 800b222:	f000 f9f9 	bl	800b618 <memset>
 800b226:	4b0d      	ldr	r3, [pc, #52]	@ (800b25c <std+0x58>)
 800b228:	6263      	str	r3, [r4, #36]	@ 0x24
 800b22a:	4b0d      	ldr	r3, [pc, #52]	@ (800b260 <std+0x5c>)
 800b22c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b22e:	4b0d      	ldr	r3, [pc, #52]	@ (800b264 <std+0x60>)
 800b230:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b232:	4b0d      	ldr	r3, [pc, #52]	@ (800b268 <std+0x64>)
 800b234:	6323      	str	r3, [r4, #48]	@ 0x30
 800b236:	4b0d      	ldr	r3, [pc, #52]	@ (800b26c <std+0x68>)
 800b238:	6224      	str	r4, [r4, #32]
 800b23a:	429c      	cmp	r4, r3
 800b23c:	d006      	beq.n	800b24c <std+0x48>
 800b23e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b242:	4294      	cmp	r4, r2
 800b244:	d002      	beq.n	800b24c <std+0x48>
 800b246:	33d0      	adds	r3, #208	@ 0xd0
 800b248:	429c      	cmp	r4, r3
 800b24a:	d105      	bne.n	800b258 <std+0x54>
 800b24c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b254:	f000 ba68 	b.w	800b728 <__retarget_lock_init_recursive>
 800b258:	bd10      	pop	{r4, pc}
 800b25a:	bf00      	nop
 800b25c:	0800b469 	.word	0x0800b469
 800b260:	0800b48b 	.word	0x0800b48b
 800b264:	0800b4c3 	.word	0x0800b4c3
 800b268:	0800b4e7 	.word	0x0800b4e7
 800b26c:	20002158 	.word	0x20002158

0800b270 <stdio_exit_handler>:
 800b270:	4a02      	ldr	r2, [pc, #8]	@ (800b27c <stdio_exit_handler+0xc>)
 800b272:	4903      	ldr	r1, [pc, #12]	@ (800b280 <stdio_exit_handler+0x10>)
 800b274:	4803      	ldr	r0, [pc, #12]	@ (800b284 <stdio_exit_handler+0x14>)
 800b276:	f000 b869 	b.w	800b34c <_fwalk_sglue>
 800b27a:	bf00      	nop
 800b27c:	20000124 	.word	0x20000124
 800b280:	0800be69 	.word	0x0800be69
 800b284:	20000134 	.word	0x20000134

0800b288 <cleanup_stdio>:
 800b288:	6841      	ldr	r1, [r0, #4]
 800b28a:	4b0c      	ldr	r3, [pc, #48]	@ (800b2bc <cleanup_stdio+0x34>)
 800b28c:	4299      	cmp	r1, r3
 800b28e:	b510      	push	{r4, lr}
 800b290:	4604      	mov	r4, r0
 800b292:	d001      	beq.n	800b298 <cleanup_stdio+0x10>
 800b294:	f000 fde8 	bl	800be68 <_fflush_r>
 800b298:	68a1      	ldr	r1, [r4, #8]
 800b29a:	4b09      	ldr	r3, [pc, #36]	@ (800b2c0 <cleanup_stdio+0x38>)
 800b29c:	4299      	cmp	r1, r3
 800b29e:	d002      	beq.n	800b2a6 <cleanup_stdio+0x1e>
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 fde1 	bl	800be68 <_fflush_r>
 800b2a6:	68e1      	ldr	r1, [r4, #12]
 800b2a8:	4b06      	ldr	r3, [pc, #24]	@ (800b2c4 <cleanup_stdio+0x3c>)
 800b2aa:	4299      	cmp	r1, r3
 800b2ac:	d004      	beq.n	800b2b8 <cleanup_stdio+0x30>
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b4:	f000 bdd8 	b.w	800be68 <_fflush_r>
 800b2b8:	bd10      	pop	{r4, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20002158 	.word	0x20002158
 800b2c0:	200021c0 	.word	0x200021c0
 800b2c4:	20002228 	.word	0x20002228

0800b2c8 <global_stdio_init.part.0>:
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f8 <global_stdio_init.part.0+0x30>)
 800b2cc:	4c0b      	ldr	r4, [pc, #44]	@ (800b2fc <global_stdio_init.part.0+0x34>)
 800b2ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b300 <global_stdio_init.part.0+0x38>)
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2104      	movs	r1, #4
 800b2d8:	f7ff ff94 	bl	800b204 <std>
 800b2dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	2109      	movs	r1, #9
 800b2e4:	f7ff ff8e 	bl	800b204 <std>
 800b2e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f2:	2112      	movs	r1, #18
 800b2f4:	f7ff bf86 	b.w	800b204 <std>
 800b2f8:	20002290 	.word	0x20002290
 800b2fc:	20002158 	.word	0x20002158
 800b300:	0800b271 	.word	0x0800b271

0800b304 <__sfp_lock_acquire>:
 800b304:	4801      	ldr	r0, [pc, #4]	@ (800b30c <__sfp_lock_acquire+0x8>)
 800b306:	f000 ba10 	b.w	800b72a <__retarget_lock_acquire_recursive>
 800b30a:	bf00      	nop
 800b30c:	20002299 	.word	0x20002299

0800b310 <__sfp_lock_release>:
 800b310:	4801      	ldr	r0, [pc, #4]	@ (800b318 <__sfp_lock_release+0x8>)
 800b312:	f000 ba0b 	b.w	800b72c <__retarget_lock_release_recursive>
 800b316:	bf00      	nop
 800b318:	20002299 	.word	0x20002299

0800b31c <__sinit>:
 800b31c:	b510      	push	{r4, lr}
 800b31e:	4604      	mov	r4, r0
 800b320:	f7ff fff0 	bl	800b304 <__sfp_lock_acquire>
 800b324:	6a23      	ldr	r3, [r4, #32]
 800b326:	b11b      	cbz	r3, 800b330 <__sinit+0x14>
 800b328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b32c:	f7ff bff0 	b.w	800b310 <__sfp_lock_release>
 800b330:	4b04      	ldr	r3, [pc, #16]	@ (800b344 <__sinit+0x28>)
 800b332:	6223      	str	r3, [r4, #32]
 800b334:	4b04      	ldr	r3, [pc, #16]	@ (800b348 <__sinit+0x2c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1f5      	bne.n	800b328 <__sinit+0xc>
 800b33c:	f7ff ffc4 	bl	800b2c8 <global_stdio_init.part.0>
 800b340:	e7f2      	b.n	800b328 <__sinit+0xc>
 800b342:	bf00      	nop
 800b344:	0800b289 	.word	0x0800b289
 800b348:	20002290 	.word	0x20002290

0800b34c <_fwalk_sglue>:
 800b34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b350:	4607      	mov	r7, r0
 800b352:	4688      	mov	r8, r1
 800b354:	4614      	mov	r4, r2
 800b356:	2600      	movs	r6, #0
 800b358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b35c:	f1b9 0901 	subs.w	r9, r9, #1
 800b360:	d505      	bpl.n	800b36e <_fwalk_sglue+0x22>
 800b362:	6824      	ldr	r4, [r4, #0]
 800b364:	2c00      	cmp	r4, #0
 800b366:	d1f7      	bne.n	800b358 <_fwalk_sglue+0xc>
 800b368:	4630      	mov	r0, r6
 800b36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d907      	bls.n	800b384 <_fwalk_sglue+0x38>
 800b374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b378:	3301      	adds	r3, #1
 800b37a:	d003      	beq.n	800b384 <_fwalk_sglue+0x38>
 800b37c:	4629      	mov	r1, r5
 800b37e:	4638      	mov	r0, r7
 800b380:	47c0      	blx	r8
 800b382:	4306      	orrs	r6, r0
 800b384:	3568      	adds	r5, #104	@ 0x68
 800b386:	e7e9      	b.n	800b35c <_fwalk_sglue+0x10>

0800b388 <iprintf>:
 800b388:	b40f      	push	{r0, r1, r2, r3}
 800b38a:	b507      	push	{r0, r1, r2, lr}
 800b38c:	4906      	ldr	r1, [pc, #24]	@ (800b3a8 <iprintf+0x20>)
 800b38e:	ab04      	add	r3, sp, #16
 800b390:	6808      	ldr	r0, [r1, #0]
 800b392:	f853 2b04 	ldr.w	r2, [r3], #4
 800b396:	6881      	ldr	r1, [r0, #8]
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	f000 fa3d 	bl	800b818 <_vfiprintf_r>
 800b39e:	b003      	add	sp, #12
 800b3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3a4:	b004      	add	sp, #16
 800b3a6:	4770      	bx	lr
 800b3a8:	20000130 	.word	0x20000130

0800b3ac <_puts_r>:
 800b3ac:	6a03      	ldr	r3, [r0, #32]
 800b3ae:	b570      	push	{r4, r5, r6, lr}
 800b3b0:	6884      	ldr	r4, [r0, #8]
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	460e      	mov	r6, r1
 800b3b6:	b90b      	cbnz	r3, 800b3bc <_puts_r+0x10>
 800b3b8:	f7ff ffb0 	bl	800b31c <__sinit>
 800b3bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3be:	07db      	lsls	r3, r3, #31
 800b3c0:	d405      	bmi.n	800b3ce <_puts_r+0x22>
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	0598      	lsls	r0, r3, #22
 800b3c6:	d402      	bmi.n	800b3ce <_puts_r+0x22>
 800b3c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3ca:	f000 f9ae 	bl	800b72a <__retarget_lock_acquire_recursive>
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	0719      	lsls	r1, r3, #28
 800b3d2:	d502      	bpl.n	800b3da <_puts_r+0x2e>
 800b3d4:	6923      	ldr	r3, [r4, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d135      	bne.n	800b446 <_puts_r+0x9a>
 800b3da:	4621      	mov	r1, r4
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f000 f8c5 	bl	800b56c <__swsetup_r>
 800b3e2:	b380      	cbz	r0, 800b446 <_puts_r+0x9a>
 800b3e4:	f04f 35ff 	mov.w	r5, #4294967295
 800b3e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3ea:	07da      	lsls	r2, r3, #31
 800b3ec:	d405      	bmi.n	800b3fa <_puts_r+0x4e>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	059b      	lsls	r3, r3, #22
 800b3f2:	d402      	bmi.n	800b3fa <_puts_r+0x4e>
 800b3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3f6:	f000 f999 	bl	800b72c <__retarget_lock_release_recursive>
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	da04      	bge.n	800b40c <_puts_r+0x60>
 800b402:	69a2      	ldr	r2, [r4, #24]
 800b404:	429a      	cmp	r2, r3
 800b406:	dc17      	bgt.n	800b438 <_puts_r+0x8c>
 800b408:	290a      	cmp	r1, #10
 800b40a:	d015      	beq.n	800b438 <_puts_r+0x8c>
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	6022      	str	r2, [r4, #0]
 800b412:	7019      	strb	r1, [r3, #0]
 800b414:	68a3      	ldr	r3, [r4, #8]
 800b416:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b41a:	3b01      	subs	r3, #1
 800b41c:	60a3      	str	r3, [r4, #8]
 800b41e:	2900      	cmp	r1, #0
 800b420:	d1ed      	bne.n	800b3fe <_puts_r+0x52>
 800b422:	2b00      	cmp	r3, #0
 800b424:	da11      	bge.n	800b44a <_puts_r+0x9e>
 800b426:	4622      	mov	r2, r4
 800b428:	210a      	movs	r1, #10
 800b42a:	4628      	mov	r0, r5
 800b42c:	f000 f85f 	bl	800b4ee <__swbuf_r>
 800b430:	3001      	adds	r0, #1
 800b432:	d0d7      	beq.n	800b3e4 <_puts_r+0x38>
 800b434:	250a      	movs	r5, #10
 800b436:	e7d7      	b.n	800b3e8 <_puts_r+0x3c>
 800b438:	4622      	mov	r2, r4
 800b43a:	4628      	mov	r0, r5
 800b43c:	f000 f857 	bl	800b4ee <__swbuf_r>
 800b440:	3001      	adds	r0, #1
 800b442:	d1e7      	bne.n	800b414 <_puts_r+0x68>
 800b444:	e7ce      	b.n	800b3e4 <_puts_r+0x38>
 800b446:	3e01      	subs	r6, #1
 800b448:	e7e4      	b.n	800b414 <_puts_r+0x68>
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	1c5a      	adds	r2, r3, #1
 800b44e:	6022      	str	r2, [r4, #0]
 800b450:	220a      	movs	r2, #10
 800b452:	701a      	strb	r2, [r3, #0]
 800b454:	e7ee      	b.n	800b434 <_puts_r+0x88>
	...

0800b458 <puts>:
 800b458:	4b02      	ldr	r3, [pc, #8]	@ (800b464 <puts+0xc>)
 800b45a:	4601      	mov	r1, r0
 800b45c:	6818      	ldr	r0, [r3, #0]
 800b45e:	f7ff bfa5 	b.w	800b3ac <_puts_r>
 800b462:	bf00      	nop
 800b464:	20000130 	.word	0x20000130

0800b468 <__sread>:
 800b468:	b510      	push	{r4, lr}
 800b46a:	460c      	mov	r4, r1
 800b46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b470:	f000 f8fc 	bl	800b66c <_read_r>
 800b474:	2800      	cmp	r0, #0
 800b476:	bfab      	itete	ge
 800b478:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b47a:	89a3      	ldrhlt	r3, [r4, #12]
 800b47c:	181b      	addge	r3, r3, r0
 800b47e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b482:	bfac      	ite	ge
 800b484:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b486:	81a3      	strhlt	r3, [r4, #12]
 800b488:	bd10      	pop	{r4, pc}

0800b48a <__swrite>:
 800b48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b48e:	461f      	mov	r7, r3
 800b490:	898b      	ldrh	r3, [r1, #12]
 800b492:	05db      	lsls	r3, r3, #23
 800b494:	4605      	mov	r5, r0
 800b496:	460c      	mov	r4, r1
 800b498:	4616      	mov	r6, r2
 800b49a:	d505      	bpl.n	800b4a8 <__swrite+0x1e>
 800b49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f000 f8d0 	bl	800b648 <_lseek_r>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4be:	f000 b8f7 	b.w	800b6b0 <_write_r>

0800b4c2 <__sseek>:
 800b4c2:	b510      	push	{r4, lr}
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ca:	f000 f8bd 	bl	800b648 <_lseek_r>
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	89a3      	ldrh	r3, [r4, #12]
 800b4d2:	bf15      	itete	ne
 800b4d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4de:	81a3      	strheq	r3, [r4, #12]
 800b4e0:	bf18      	it	ne
 800b4e2:	81a3      	strhne	r3, [r4, #12]
 800b4e4:	bd10      	pop	{r4, pc}

0800b4e6 <__sclose>:
 800b4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ea:	f000 b89d 	b.w	800b628 <_close_r>

0800b4ee <__swbuf_r>:
 800b4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f0:	460e      	mov	r6, r1
 800b4f2:	4614      	mov	r4, r2
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	b118      	cbz	r0, 800b500 <__swbuf_r+0x12>
 800b4f8:	6a03      	ldr	r3, [r0, #32]
 800b4fa:	b90b      	cbnz	r3, 800b500 <__swbuf_r+0x12>
 800b4fc:	f7ff ff0e 	bl	800b31c <__sinit>
 800b500:	69a3      	ldr	r3, [r4, #24]
 800b502:	60a3      	str	r3, [r4, #8]
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	071a      	lsls	r2, r3, #28
 800b508:	d501      	bpl.n	800b50e <__swbuf_r+0x20>
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	b943      	cbnz	r3, 800b520 <__swbuf_r+0x32>
 800b50e:	4621      	mov	r1, r4
 800b510:	4628      	mov	r0, r5
 800b512:	f000 f82b 	bl	800b56c <__swsetup_r>
 800b516:	b118      	cbz	r0, 800b520 <__swbuf_r+0x32>
 800b518:	f04f 37ff 	mov.w	r7, #4294967295
 800b51c:	4638      	mov	r0, r7
 800b51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	6922      	ldr	r2, [r4, #16]
 800b524:	1a98      	subs	r0, r3, r2
 800b526:	6963      	ldr	r3, [r4, #20]
 800b528:	b2f6      	uxtb	r6, r6
 800b52a:	4283      	cmp	r3, r0
 800b52c:	4637      	mov	r7, r6
 800b52e:	dc05      	bgt.n	800b53c <__swbuf_r+0x4e>
 800b530:	4621      	mov	r1, r4
 800b532:	4628      	mov	r0, r5
 800b534:	f000 fc98 	bl	800be68 <_fflush_r>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d1ed      	bne.n	800b518 <__swbuf_r+0x2a>
 800b53c:	68a3      	ldr	r3, [r4, #8]
 800b53e:	3b01      	subs	r3, #1
 800b540:	60a3      	str	r3, [r4, #8]
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	6022      	str	r2, [r4, #0]
 800b548:	701e      	strb	r6, [r3, #0]
 800b54a:	6962      	ldr	r2, [r4, #20]
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	429a      	cmp	r2, r3
 800b550:	d004      	beq.n	800b55c <__swbuf_r+0x6e>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	07db      	lsls	r3, r3, #31
 800b556:	d5e1      	bpl.n	800b51c <__swbuf_r+0x2e>
 800b558:	2e0a      	cmp	r6, #10
 800b55a:	d1df      	bne.n	800b51c <__swbuf_r+0x2e>
 800b55c:	4621      	mov	r1, r4
 800b55e:	4628      	mov	r0, r5
 800b560:	f000 fc82 	bl	800be68 <_fflush_r>
 800b564:	2800      	cmp	r0, #0
 800b566:	d0d9      	beq.n	800b51c <__swbuf_r+0x2e>
 800b568:	e7d6      	b.n	800b518 <__swbuf_r+0x2a>
	...

0800b56c <__swsetup_r>:
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	4b29      	ldr	r3, [pc, #164]	@ (800b614 <__swsetup_r+0xa8>)
 800b570:	4605      	mov	r5, r0
 800b572:	6818      	ldr	r0, [r3, #0]
 800b574:	460c      	mov	r4, r1
 800b576:	b118      	cbz	r0, 800b580 <__swsetup_r+0x14>
 800b578:	6a03      	ldr	r3, [r0, #32]
 800b57a:	b90b      	cbnz	r3, 800b580 <__swsetup_r+0x14>
 800b57c:	f7ff fece 	bl	800b31c <__sinit>
 800b580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b584:	0719      	lsls	r1, r3, #28
 800b586:	d422      	bmi.n	800b5ce <__swsetup_r+0x62>
 800b588:	06da      	lsls	r2, r3, #27
 800b58a:	d407      	bmi.n	800b59c <__swsetup_r+0x30>
 800b58c:	2209      	movs	r2, #9
 800b58e:	602a      	str	r2, [r5, #0]
 800b590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b594:	81a3      	strh	r3, [r4, #12]
 800b596:	f04f 30ff 	mov.w	r0, #4294967295
 800b59a:	e033      	b.n	800b604 <__swsetup_r+0x98>
 800b59c:	0758      	lsls	r0, r3, #29
 800b59e:	d512      	bpl.n	800b5c6 <__swsetup_r+0x5a>
 800b5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5a2:	b141      	cbz	r1, 800b5b6 <__swsetup_r+0x4a>
 800b5a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5a8:	4299      	cmp	r1, r3
 800b5aa:	d002      	beq.n	800b5b2 <__swsetup_r+0x46>
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f000 f8bf 	bl	800b730 <_free_r>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5bc:	81a3      	strh	r3, [r4, #12]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	6063      	str	r3, [r4, #4]
 800b5c2:	6923      	ldr	r3, [r4, #16]
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	f043 0308 	orr.w	r3, r3, #8
 800b5cc:	81a3      	strh	r3, [r4, #12]
 800b5ce:	6923      	ldr	r3, [r4, #16]
 800b5d0:	b94b      	cbnz	r3, 800b5e6 <__swsetup_r+0x7a>
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b5d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5dc:	d003      	beq.n	800b5e6 <__swsetup_r+0x7a>
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f000 fc8f 	bl	800bf04 <__smakebuf_r>
 800b5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ea:	f013 0201 	ands.w	r2, r3, #1
 800b5ee:	d00a      	beq.n	800b606 <__swsetup_r+0x9a>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	60a2      	str	r2, [r4, #8]
 800b5f4:	6962      	ldr	r2, [r4, #20]
 800b5f6:	4252      	negs	r2, r2
 800b5f8:	61a2      	str	r2, [r4, #24]
 800b5fa:	6922      	ldr	r2, [r4, #16]
 800b5fc:	b942      	cbnz	r2, 800b610 <__swsetup_r+0xa4>
 800b5fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b602:	d1c5      	bne.n	800b590 <__swsetup_r+0x24>
 800b604:	bd38      	pop	{r3, r4, r5, pc}
 800b606:	0799      	lsls	r1, r3, #30
 800b608:	bf58      	it	pl
 800b60a:	6962      	ldrpl	r2, [r4, #20]
 800b60c:	60a2      	str	r2, [r4, #8]
 800b60e:	e7f4      	b.n	800b5fa <__swsetup_r+0x8e>
 800b610:	2000      	movs	r0, #0
 800b612:	e7f7      	b.n	800b604 <__swsetup_r+0x98>
 800b614:	20000130 	.word	0x20000130

0800b618 <memset>:
 800b618:	4402      	add	r2, r0
 800b61a:	4603      	mov	r3, r0
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d100      	bne.n	800b622 <memset+0xa>
 800b620:	4770      	bx	lr
 800b622:	f803 1b01 	strb.w	r1, [r3], #1
 800b626:	e7f9      	b.n	800b61c <memset+0x4>

0800b628 <_close_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4d06      	ldr	r5, [pc, #24]	@ (800b644 <_close_r+0x1c>)
 800b62c:	2300      	movs	r3, #0
 800b62e:	4604      	mov	r4, r0
 800b630:	4608      	mov	r0, r1
 800b632:	602b      	str	r3, [r5, #0]
 800b634:	f7f5 fa63 	bl	8000afe <_close>
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d102      	bne.n	800b642 <_close_r+0x1a>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	b103      	cbz	r3, 800b642 <_close_r+0x1a>
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	20002294 	.word	0x20002294

0800b648 <_lseek_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4d07      	ldr	r5, [pc, #28]	@ (800b668 <_lseek_r+0x20>)
 800b64c:	4604      	mov	r4, r0
 800b64e:	4608      	mov	r0, r1
 800b650:	4611      	mov	r1, r2
 800b652:	2200      	movs	r2, #0
 800b654:	602a      	str	r2, [r5, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	f7f5 fa78 	bl	8000b4c <_lseek>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_lseek_r+0x1e>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_lseek_r+0x1e>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	20002294 	.word	0x20002294

0800b66c <_read_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d07      	ldr	r5, [pc, #28]	@ (800b68c <_read_r+0x20>)
 800b670:	4604      	mov	r4, r0
 800b672:	4608      	mov	r0, r1
 800b674:	4611      	mov	r1, r2
 800b676:	2200      	movs	r2, #0
 800b678:	602a      	str	r2, [r5, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	f7f5 fa06 	bl	8000a8c <_read>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_read_r+0x1e>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_read_r+0x1e>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	20002294 	.word	0x20002294

0800b690 <_sbrk_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d06      	ldr	r5, [pc, #24]	@ (800b6ac <_sbrk_r+0x1c>)
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	602b      	str	r3, [r5, #0]
 800b69c:	f7f5 fa64 	bl	8000b68 <_sbrk>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_sbrk_r+0x1a>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_sbrk_r+0x1a>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	20002294 	.word	0x20002294

0800b6b0 <_write_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d07      	ldr	r5, [pc, #28]	@ (800b6d0 <_write_r+0x20>)
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	4608      	mov	r0, r1
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	602a      	str	r2, [r5, #0]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f7f5 fa01 	bl	8000ac6 <_write>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_write_r+0x1e>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_write_r+0x1e>
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	20002294 	.word	0x20002294

0800b6d4 <__errno>:
 800b6d4:	4b01      	ldr	r3, [pc, #4]	@ (800b6dc <__errno+0x8>)
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	20000130 	.word	0x20000130

0800b6e0 <__libc_init_array>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b718 <__libc_init_array+0x38>)
 800b6e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b71c <__libc_init_array+0x3c>)
 800b6e6:	1b64      	subs	r4, r4, r5
 800b6e8:	10a4      	asrs	r4, r4, #2
 800b6ea:	2600      	movs	r6, #0
 800b6ec:	42a6      	cmp	r6, r4
 800b6ee:	d109      	bne.n	800b704 <__libc_init_array+0x24>
 800b6f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b720 <__libc_init_array+0x40>)
 800b6f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b724 <__libc_init_array+0x44>)
 800b6f4:	f000 fc64 	bl	800bfc0 <_init>
 800b6f8:	1b64      	subs	r4, r4, r5
 800b6fa:	10a4      	asrs	r4, r4, #2
 800b6fc:	2600      	movs	r6, #0
 800b6fe:	42a6      	cmp	r6, r4
 800b700:	d105      	bne.n	800b70e <__libc_init_array+0x2e>
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	f855 3b04 	ldr.w	r3, [r5], #4
 800b708:	4798      	blx	r3
 800b70a:	3601      	adds	r6, #1
 800b70c:	e7ee      	b.n	800b6ec <__libc_init_array+0xc>
 800b70e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b712:	4798      	blx	r3
 800b714:	3601      	adds	r6, #1
 800b716:	e7f2      	b.n	800b6fe <__libc_init_array+0x1e>
 800b718:	080105ec 	.word	0x080105ec
 800b71c:	080105ec 	.word	0x080105ec
 800b720:	080105ec 	.word	0x080105ec
 800b724:	080105f0 	.word	0x080105f0

0800b728 <__retarget_lock_init_recursive>:
 800b728:	4770      	bx	lr

0800b72a <__retarget_lock_acquire_recursive>:
 800b72a:	4770      	bx	lr

0800b72c <__retarget_lock_release_recursive>:
 800b72c:	4770      	bx	lr
	...

0800b730 <_free_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	4605      	mov	r5, r0
 800b734:	2900      	cmp	r1, #0
 800b736:	d041      	beq.n	800b7bc <_free_r+0x8c>
 800b738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b73c:	1f0c      	subs	r4, r1, #4
 800b73e:	2b00      	cmp	r3, #0
 800b740:	bfb8      	it	lt
 800b742:	18e4      	addlt	r4, r4, r3
 800b744:	f7ff fd52 	bl	800b1ec <__malloc_lock>
 800b748:	4a1d      	ldr	r2, [pc, #116]	@ (800b7c0 <_free_r+0x90>)
 800b74a:	6813      	ldr	r3, [r2, #0]
 800b74c:	b933      	cbnz	r3, 800b75c <_free_r+0x2c>
 800b74e:	6063      	str	r3, [r4, #4]
 800b750:	6014      	str	r4, [r2, #0]
 800b752:	4628      	mov	r0, r5
 800b754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b758:	f7ff bd4e 	b.w	800b1f8 <__malloc_unlock>
 800b75c:	42a3      	cmp	r3, r4
 800b75e:	d908      	bls.n	800b772 <_free_r+0x42>
 800b760:	6820      	ldr	r0, [r4, #0]
 800b762:	1821      	adds	r1, r4, r0
 800b764:	428b      	cmp	r3, r1
 800b766:	bf01      	itttt	eq
 800b768:	6819      	ldreq	r1, [r3, #0]
 800b76a:	685b      	ldreq	r3, [r3, #4]
 800b76c:	1809      	addeq	r1, r1, r0
 800b76e:	6021      	streq	r1, [r4, #0]
 800b770:	e7ed      	b.n	800b74e <_free_r+0x1e>
 800b772:	461a      	mov	r2, r3
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	b10b      	cbz	r3, 800b77c <_free_r+0x4c>
 800b778:	42a3      	cmp	r3, r4
 800b77a:	d9fa      	bls.n	800b772 <_free_r+0x42>
 800b77c:	6811      	ldr	r1, [r2, #0]
 800b77e:	1850      	adds	r0, r2, r1
 800b780:	42a0      	cmp	r0, r4
 800b782:	d10b      	bne.n	800b79c <_free_r+0x6c>
 800b784:	6820      	ldr	r0, [r4, #0]
 800b786:	4401      	add	r1, r0
 800b788:	1850      	adds	r0, r2, r1
 800b78a:	4283      	cmp	r3, r0
 800b78c:	6011      	str	r1, [r2, #0]
 800b78e:	d1e0      	bne.n	800b752 <_free_r+0x22>
 800b790:	6818      	ldr	r0, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	6053      	str	r3, [r2, #4]
 800b796:	4408      	add	r0, r1
 800b798:	6010      	str	r0, [r2, #0]
 800b79a:	e7da      	b.n	800b752 <_free_r+0x22>
 800b79c:	d902      	bls.n	800b7a4 <_free_r+0x74>
 800b79e:	230c      	movs	r3, #12
 800b7a0:	602b      	str	r3, [r5, #0]
 800b7a2:	e7d6      	b.n	800b752 <_free_r+0x22>
 800b7a4:	6820      	ldr	r0, [r4, #0]
 800b7a6:	1821      	adds	r1, r4, r0
 800b7a8:	428b      	cmp	r3, r1
 800b7aa:	bf04      	itt	eq
 800b7ac:	6819      	ldreq	r1, [r3, #0]
 800b7ae:	685b      	ldreq	r3, [r3, #4]
 800b7b0:	6063      	str	r3, [r4, #4]
 800b7b2:	bf04      	itt	eq
 800b7b4:	1809      	addeq	r1, r1, r0
 800b7b6:	6021      	streq	r1, [r4, #0]
 800b7b8:	6054      	str	r4, [r2, #4]
 800b7ba:	e7ca      	b.n	800b752 <_free_r+0x22>
 800b7bc:	bd38      	pop	{r3, r4, r5, pc}
 800b7be:	bf00      	nop
 800b7c0:	20002154 	.word	0x20002154

0800b7c4 <__sfputc_r>:
 800b7c4:	6893      	ldr	r3, [r2, #8]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	b410      	push	{r4}
 800b7cc:	6093      	str	r3, [r2, #8]
 800b7ce:	da08      	bge.n	800b7e2 <__sfputc_r+0x1e>
 800b7d0:	6994      	ldr	r4, [r2, #24]
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	db01      	blt.n	800b7da <__sfputc_r+0x16>
 800b7d6:	290a      	cmp	r1, #10
 800b7d8:	d103      	bne.n	800b7e2 <__sfputc_r+0x1e>
 800b7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7de:	f7ff be86 	b.w	800b4ee <__swbuf_r>
 800b7e2:	6813      	ldr	r3, [r2, #0]
 800b7e4:	1c58      	adds	r0, r3, #1
 800b7e6:	6010      	str	r0, [r2, #0]
 800b7e8:	7019      	strb	r1, [r3, #0]
 800b7ea:	4608      	mov	r0, r1
 800b7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <__sfputs_r>:
 800b7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	460f      	mov	r7, r1
 800b7f8:	4614      	mov	r4, r2
 800b7fa:	18d5      	adds	r5, r2, r3
 800b7fc:	42ac      	cmp	r4, r5
 800b7fe:	d101      	bne.n	800b804 <__sfputs_r+0x12>
 800b800:	2000      	movs	r0, #0
 800b802:	e007      	b.n	800b814 <__sfputs_r+0x22>
 800b804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b808:	463a      	mov	r2, r7
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7ff ffda 	bl	800b7c4 <__sfputc_r>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d1f3      	bne.n	800b7fc <__sfputs_r+0xa>
 800b814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b818 <_vfiprintf_r>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	460d      	mov	r5, r1
 800b81e:	b09d      	sub	sp, #116	@ 0x74
 800b820:	4614      	mov	r4, r2
 800b822:	4698      	mov	r8, r3
 800b824:	4606      	mov	r6, r0
 800b826:	b118      	cbz	r0, 800b830 <_vfiprintf_r+0x18>
 800b828:	6a03      	ldr	r3, [r0, #32]
 800b82a:	b90b      	cbnz	r3, 800b830 <_vfiprintf_r+0x18>
 800b82c:	f7ff fd76 	bl	800b31c <__sinit>
 800b830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b832:	07d9      	lsls	r1, r3, #31
 800b834:	d405      	bmi.n	800b842 <_vfiprintf_r+0x2a>
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	059a      	lsls	r2, r3, #22
 800b83a:	d402      	bmi.n	800b842 <_vfiprintf_r+0x2a>
 800b83c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b83e:	f7ff ff74 	bl	800b72a <__retarget_lock_acquire_recursive>
 800b842:	89ab      	ldrh	r3, [r5, #12]
 800b844:	071b      	lsls	r3, r3, #28
 800b846:	d501      	bpl.n	800b84c <_vfiprintf_r+0x34>
 800b848:	692b      	ldr	r3, [r5, #16]
 800b84a:	b99b      	cbnz	r3, 800b874 <_vfiprintf_r+0x5c>
 800b84c:	4629      	mov	r1, r5
 800b84e:	4630      	mov	r0, r6
 800b850:	f7ff fe8c 	bl	800b56c <__swsetup_r>
 800b854:	b170      	cbz	r0, 800b874 <_vfiprintf_r+0x5c>
 800b856:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b858:	07dc      	lsls	r4, r3, #31
 800b85a:	d504      	bpl.n	800b866 <_vfiprintf_r+0x4e>
 800b85c:	f04f 30ff 	mov.w	r0, #4294967295
 800b860:	b01d      	add	sp, #116	@ 0x74
 800b862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b866:	89ab      	ldrh	r3, [r5, #12]
 800b868:	0598      	lsls	r0, r3, #22
 800b86a:	d4f7      	bmi.n	800b85c <_vfiprintf_r+0x44>
 800b86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b86e:	f7ff ff5d 	bl	800b72c <__retarget_lock_release_recursive>
 800b872:	e7f3      	b.n	800b85c <_vfiprintf_r+0x44>
 800b874:	2300      	movs	r3, #0
 800b876:	9309      	str	r3, [sp, #36]	@ 0x24
 800b878:	2320      	movs	r3, #32
 800b87a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b87e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b882:	2330      	movs	r3, #48	@ 0x30
 800b884:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ba34 <_vfiprintf_r+0x21c>
 800b888:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b88c:	f04f 0901 	mov.w	r9, #1
 800b890:	4623      	mov	r3, r4
 800b892:	469a      	mov	sl, r3
 800b894:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b898:	b10a      	cbz	r2, 800b89e <_vfiprintf_r+0x86>
 800b89a:	2a25      	cmp	r2, #37	@ 0x25
 800b89c:	d1f9      	bne.n	800b892 <_vfiprintf_r+0x7a>
 800b89e:	ebba 0b04 	subs.w	fp, sl, r4
 800b8a2:	d00b      	beq.n	800b8bc <_vfiprintf_r+0xa4>
 800b8a4:	465b      	mov	r3, fp
 800b8a6:	4622      	mov	r2, r4
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f7ff ffa1 	bl	800b7f2 <__sfputs_r>
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	f000 80a7 	beq.w	800ba04 <_vfiprintf_r+0x1ec>
 800b8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8b8:	445a      	add	r2, fp
 800b8ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 809f 	beq.w	800ba04 <_vfiprintf_r+0x1ec>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d0:	f10a 0a01 	add.w	sl, sl, #1
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	9307      	str	r3, [sp, #28]
 800b8d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8de:	4654      	mov	r4, sl
 800b8e0:	2205      	movs	r2, #5
 800b8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e6:	4853      	ldr	r0, [pc, #332]	@ (800ba34 <_vfiprintf_r+0x21c>)
 800b8e8:	f7f4 fc82 	bl	80001f0 <memchr>
 800b8ec:	9a04      	ldr	r2, [sp, #16]
 800b8ee:	b9d8      	cbnz	r0, 800b928 <_vfiprintf_r+0x110>
 800b8f0:	06d1      	lsls	r1, r2, #27
 800b8f2:	bf44      	itt	mi
 800b8f4:	2320      	movmi	r3, #32
 800b8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8fa:	0713      	lsls	r3, r2, #28
 800b8fc:	bf44      	itt	mi
 800b8fe:	232b      	movmi	r3, #43	@ 0x2b
 800b900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b904:	f89a 3000 	ldrb.w	r3, [sl]
 800b908:	2b2a      	cmp	r3, #42	@ 0x2a
 800b90a:	d015      	beq.n	800b938 <_vfiprintf_r+0x120>
 800b90c:	9a07      	ldr	r2, [sp, #28]
 800b90e:	4654      	mov	r4, sl
 800b910:	2000      	movs	r0, #0
 800b912:	f04f 0c0a 	mov.w	ip, #10
 800b916:	4621      	mov	r1, r4
 800b918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b91c:	3b30      	subs	r3, #48	@ 0x30
 800b91e:	2b09      	cmp	r3, #9
 800b920:	d94b      	bls.n	800b9ba <_vfiprintf_r+0x1a2>
 800b922:	b1b0      	cbz	r0, 800b952 <_vfiprintf_r+0x13a>
 800b924:	9207      	str	r2, [sp, #28]
 800b926:	e014      	b.n	800b952 <_vfiprintf_r+0x13a>
 800b928:	eba0 0308 	sub.w	r3, r0, r8
 800b92c:	fa09 f303 	lsl.w	r3, r9, r3
 800b930:	4313      	orrs	r3, r2
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	46a2      	mov	sl, r4
 800b936:	e7d2      	b.n	800b8de <_vfiprintf_r+0xc6>
 800b938:	9b03      	ldr	r3, [sp, #12]
 800b93a:	1d19      	adds	r1, r3, #4
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	9103      	str	r1, [sp, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	bfbb      	ittet	lt
 800b944:	425b      	neglt	r3, r3
 800b946:	f042 0202 	orrlt.w	r2, r2, #2
 800b94a:	9307      	strge	r3, [sp, #28]
 800b94c:	9307      	strlt	r3, [sp, #28]
 800b94e:	bfb8      	it	lt
 800b950:	9204      	strlt	r2, [sp, #16]
 800b952:	7823      	ldrb	r3, [r4, #0]
 800b954:	2b2e      	cmp	r3, #46	@ 0x2e
 800b956:	d10a      	bne.n	800b96e <_vfiprintf_r+0x156>
 800b958:	7863      	ldrb	r3, [r4, #1]
 800b95a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b95c:	d132      	bne.n	800b9c4 <_vfiprintf_r+0x1ac>
 800b95e:	9b03      	ldr	r3, [sp, #12]
 800b960:	1d1a      	adds	r2, r3, #4
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	9203      	str	r2, [sp, #12]
 800b966:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b96a:	3402      	adds	r4, #2
 800b96c:	9305      	str	r3, [sp, #20]
 800b96e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ba44 <_vfiprintf_r+0x22c>
 800b972:	7821      	ldrb	r1, [r4, #0]
 800b974:	2203      	movs	r2, #3
 800b976:	4650      	mov	r0, sl
 800b978:	f7f4 fc3a 	bl	80001f0 <memchr>
 800b97c:	b138      	cbz	r0, 800b98e <_vfiprintf_r+0x176>
 800b97e:	9b04      	ldr	r3, [sp, #16]
 800b980:	eba0 000a 	sub.w	r0, r0, sl
 800b984:	2240      	movs	r2, #64	@ 0x40
 800b986:	4082      	lsls	r2, r0
 800b988:	4313      	orrs	r3, r2
 800b98a:	3401      	adds	r4, #1
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b992:	4829      	ldr	r0, [pc, #164]	@ (800ba38 <_vfiprintf_r+0x220>)
 800b994:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b998:	2206      	movs	r2, #6
 800b99a:	f7f4 fc29 	bl	80001f0 <memchr>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d03f      	beq.n	800ba22 <_vfiprintf_r+0x20a>
 800b9a2:	4b26      	ldr	r3, [pc, #152]	@ (800ba3c <_vfiprintf_r+0x224>)
 800b9a4:	bb1b      	cbnz	r3, 800b9ee <_vfiprintf_r+0x1d6>
 800b9a6:	9b03      	ldr	r3, [sp, #12]
 800b9a8:	3307      	adds	r3, #7
 800b9aa:	f023 0307 	bic.w	r3, r3, #7
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	9303      	str	r3, [sp, #12]
 800b9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b4:	443b      	add	r3, r7
 800b9b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b8:	e76a      	b.n	800b890 <_vfiprintf_r+0x78>
 800b9ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9be:	460c      	mov	r4, r1
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	e7a8      	b.n	800b916 <_vfiprintf_r+0xfe>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	3401      	adds	r4, #1
 800b9c8:	9305      	str	r3, [sp, #20]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	f04f 0c0a 	mov.w	ip, #10
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9d6:	3a30      	subs	r2, #48	@ 0x30
 800b9d8:	2a09      	cmp	r2, #9
 800b9da:	d903      	bls.n	800b9e4 <_vfiprintf_r+0x1cc>
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d0c6      	beq.n	800b96e <_vfiprintf_r+0x156>
 800b9e0:	9105      	str	r1, [sp, #20]
 800b9e2:	e7c4      	b.n	800b96e <_vfiprintf_r+0x156>
 800b9e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e7f0      	b.n	800b9d0 <_vfiprintf_r+0x1b8>
 800b9ee:	ab03      	add	r3, sp, #12
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	462a      	mov	r2, r5
 800b9f4:	4b12      	ldr	r3, [pc, #72]	@ (800ba40 <_vfiprintf_r+0x228>)
 800b9f6:	a904      	add	r1, sp, #16
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f3af 8000 	nop.w
 800b9fe:	4607      	mov	r7, r0
 800ba00:	1c78      	adds	r0, r7, #1
 800ba02:	d1d6      	bne.n	800b9b2 <_vfiprintf_r+0x19a>
 800ba04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba06:	07d9      	lsls	r1, r3, #31
 800ba08:	d405      	bmi.n	800ba16 <_vfiprintf_r+0x1fe>
 800ba0a:	89ab      	ldrh	r3, [r5, #12]
 800ba0c:	059a      	lsls	r2, r3, #22
 800ba0e:	d402      	bmi.n	800ba16 <_vfiprintf_r+0x1fe>
 800ba10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba12:	f7ff fe8b 	bl	800b72c <__retarget_lock_release_recursive>
 800ba16:	89ab      	ldrh	r3, [r5, #12]
 800ba18:	065b      	lsls	r3, r3, #25
 800ba1a:	f53f af1f 	bmi.w	800b85c <_vfiprintf_r+0x44>
 800ba1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba20:	e71e      	b.n	800b860 <_vfiprintf_r+0x48>
 800ba22:	ab03      	add	r3, sp, #12
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	462a      	mov	r2, r5
 800ba28:	4b05      	ldr	r3, [pc, #20]	@ (800ba40 <_vfiprintf_r+0x228>)
 800ba2a:	a904      	add	r1, sp, #16
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f000 f879 	bl	800bb24 <_printf_i>
 800ba32:	e7e4      	b.n	800b9fe <_vfiprintf_r+0x1e6>
 800ba34:	080105b0 	.word	0x080105b0
 800ba38:	080105ba 	.word	0x080105ba
 800ba3c:	00000000 	.word	0x00000000
 800ba40:	0800b7f3 	.word	0x0800b7f3
 800ba44:	080105b6 	.word	0x080105b6

0800ba48 <_printf_common>:
 800ba48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba4c:	4616      	mov	r6, r2
 800ba4e:	4698      	mov	r8, r3
 800ba50:	688a      	ldr	r2, [r1, #8]
 800ba52:	690b      	ldr	r3, [r1, #16]
 800ba54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	bfb8      	it	lt
 800ba5c:	4613      	movlt	r3, r2
 800ba5e:	6033      	str	r3, [r6, #0]
 800ba60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba64:	4607      	mov	r7, r0
 800ba66:	460c      	mov	r4, r1
 800ba68:	b10a      	cbz	r2, 800ba6e <_printf_common+0x26>
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	6033      	str	r3, [r6, #0]
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	0699      	lsls	r1, r3, #26
 800ba72:	bf42      	ittt	mi
 800ba74:	6833      	ldrmi	r3, [r6, #0]
 800ba76:	3302      	addmi	r3, #2
 800ba78:	6033      	strmi	r3, [r6, #0]
 800ba7a:	6825      	ldr	r5, [r4, #0]
 800ba7c:	f015 0506 	ands.w	r5, r5, #6
 800ba80:	d106      	bne.n	800ba90 <_printf_common+0x48>
 800ba82:	f104 0a19 	add.w	sl, r4, #25
 800ba86:	68e3      	ldr	r3, [r4, #12]
 800ba88:	6832      	ldr	r2, [r6, #0]
 800ba8a:	1a9b      	subs	r3, r3, r2
 800ba8c:	42ab      	cmp	r3, r5
 800ba8e:	dc26      	bgt.n	800bade <_printf_common+0x96>
 800ba90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba94:	6822      	ldr	r2, [r4, #0]
 800ba96:	3b00      	subs	r3, #0
 800ba98:	bf18      	it	ne
 800ba9a:	2301      	movne	r3, #1
 800ba9c:	0692      	lsls	r2, r2, #26
 800ba9e:	d42b      	bmi.n	800baf8 <_printf_common+0xb0>
 800baa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800baa4:	4641      	mov	r1, r8
 800baa6:	4638      	mov	r0, r7
 800baa8:	47c8      	blx	r9
 800baaa:	3001      	adds	r0, #1
 800baac:	d01e      	beq.n	800baec <_printf_common+0xa4>
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	6922      	ldr	r2, [r4, #16]
 800bab2:	f003 0306 	and.w	r3, r3, #6
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	bf02      	ittt	eq
 800baba:	68e5      	ldreq	r5, [r4, #12]
 800babc:	6833      	ldreq	r3, [r6, #0]
 800babe:	1aed      	subeq	r5, r5, r3
 800bac0:	68a3      	ldr	r3, [r4, #8]
 800bac2:	bf0c      	ite	eq
 800bac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bac8:	2500      	movne	r5, #0
 800baca:	4293      	cmp	r3, r2
 800bacc:	bfc4      	itt	gt
 800bace:	1a9b      	subgt	r3, r3, r2
 800bad0:	18ed      	addgt	r5, r5, r3
 800bad2:	2600      	movs	r6, #0
 800bad4:	341a      	adds	r4, #26
 800bad6:	42b5      	cmp	r5, r6
 800bad8:	d11a      	bne.n	800bb10 <_printf_common+0xc8>
 800bada:	2000      	movs	r0, #0
 800badc:	e008      	b.n	800baf0 <_printf_common+0xa8>
 800bade:	2301      	movs	r3, #1
 800bae0:	4652      	mov	r2, sl
 800bae2:	4641      	mov	r1, r8
 800bae4:	4638      	mov	r0, r7
 800bae6:	47c8      	blx	r9
 800bae8:	3001      	adds	r0, #1
 800baea:	d103      	bne.n	800baf4 <_printf_common+0xac>
 800baec:	f04f 30ff 	mov.w	r0, #4294967295
 800baf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf4:	3501      	adds	r5, #1
 800baf6:	e7c6      	b.n	800ba86 <_printf_common+0x3e>
 800baf8:	18e1      	adds	r1, r4, r3
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	2030      	movs	r0, #48	@ 0x30
 800bafe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb02:	4422      	add	r2, r4
 800bb04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb0c:	3302      	adds	r3, #2
 800bb0e:	e7c7      	b.n	800baa0 <_printf_common+0x58>
 800bb10:	2301      	movs	r3, #1
 800bb12:	4622      	mov	r2, r4
 800bb14:	4641      	mov	r1, r8
 800bb16:	4638      	mov	r0, r7
 800bb18:	47c8      	blx	r9
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d0e6      	beq.n	800baec <_printf_common+0xa4>
 800bb1e:	3601      	adds	r6, #1
 800bb20:	e7d9      	b.n	800bad6 <_printf_common+0x8e>
	...

0800bb24 <_printf_i>:
 800bb24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb28:	7e0f      	ldrb	r7, [r1, #24]
 800bb2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb2c:	2f78      	cmp	r7, #120	@ 0x78
 800bb2e:	4691      	mov	r9, r2
 800bb30:	4680      	mov	r8, r0
 800bb32:	460c      	mov	r4, r1
 800bb34:	469a      	mov	sl, r3
 800bb36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb3a:	d807      	bhi.n	800bb4c <_printf_i+0x28>
 800bb3c:	2f62      	cmp	r7, #98	@ 0x62
 800bb3e:	d80a      	bhi.n	800bb56 <_printf_i+0x32>
 800bb40:	2f00      	cmp	r7, #0
 800bb42:	f000 80d1 	beq.w	800bce8 <_printf_i+0x1c4>
 800bb46:	2f58      	cmp	r7, #88	@ 0x58
 800bb48:	f000 80b8 	beq.w	800bcbc <_printf_i+0x198>
 800bb4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb54:	e03a      	b.n	800bbcc <_printf_i+0xa8>
 800bb56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb5a:	2b15      	cmp	r3, #21
 800bb5c:	d8f6      	bhi.n	800bb4c <_printf_i+0x28>
 800bb5e:	a101      	add	r1, pc, #4	@ (adr r1, 800bb64 <_printf_i+0x40>)
 800bb60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb64:	0800bbbd 	.word	0x0800bbbd
 800bb68:	0800bbd1 	.word	0x0800bbd1
 800bb6c:	0800bb4d 	.word	0x0800bb4d
 800bb70:	0800bb4d 	.word	0x0800bb4d
 800bb74:	0800bb4d 	.word	0x0800bb4d
 800bb78:	0800bb4d 	.word	0x0800bb4d
 800bb7c:	0800bbd1 	.word	0x0800bbd1
 800bb80:	0800bb4d 	.word	0x0800bb4d
 800bb84:	0800bb4d 	.word	0x0800bb4d
 800bb88:	0800bb4d 	.word	0x0800bb4d
 800bb8c:	0800bb4d 	.word	0x0800bb4d
 800bb90:	0800bccf 	.word	0x0800bccf
 800bb94:	0800bbfb 	.word	0x0800bbfb
 800bb98:	0800bc89 	.word	0x0800bc89
 800bb9c:	0800bb4d 	.word	0x0800bb4d
 800bba0:	0800bb4d 	.word	0x0800bb4d
 800bba4:	0800bcf1 	.word	0x0800bcf1
 800bba8:	0800bb4d 	.word	0x0800bb4d
 800bbac:	0800bbfb 	.word	0x0800bbfb
 800bbb0:	0800bb4d 	.word	0x0800bb4d
 800bbb4:	0800bb4d 	.word	0x0800bb4d
 800bbb8:	0800bc91 	.word	0x0800bc91
 800bbbc:	6833      	ldr	r3, [r6, #0]
 800bbbe:	1d1a      	adds	r2, r3, #4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6032      	str	r2, [r6, #0]
 800bbc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e09c      	b.n	800bd0a <_printf_i+0x1e6>
 800bbd0:	6833      	ldr	r3, [r6, #0]
 800bbd2:	6820      	ldr	r0, [r4, #0]
 800bbd4:	1d19      	adds	r1, r3, #4
 800bbd6:	6031      	str	r1, [r6, #0]
 800bbd8:	0606      	lsls	r6, r0, #24
 800bbda:	d501      	bpl.n	800bbe0 <_printf_i+0xbc>
 800bbdc:	681d      	ldr	r5, [r3, #0]
 800bbde:	e003      	b.n	800bbe8 <_printf_i+0xc4>
 800bbe0:	0645      	lsls	r5, r0, #25
 800bbe2:	d5fb      	bpl.n	800bbdc <_printf_i+0xb8>
 800bbe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	da03      	bge.n	800bbf4 <_printf_i+0xd0>
 800bbec:	232d      	movs	r3, #45	@ 0x2d
 800bbee:	426d      	negs	r5, r5
 800bbf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbf4:	4858      	ldr	r0, [pc, #352]	@ (800bd58 <_printf_i+0x234>)
 800bbf6:	230a      	movs	r3, #10
 800bbf8:	e011      	b.n	800bc1e <_printf_i+0xfa>
 800bbfa:	6821      	ldr	r1, [r4, #0]
 800bbfc:	6833      	ldr	r3, [r6, #0]
 800bbfe:	0608      	lsls	r0, r1, #24
 800bc00:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc04:	d402      	bmi.n	800bc0c <_printf_i+0xe8>
 800bc06:	0649      	lsls	r1, r1, #25
 800bc08:	bf48      	it	mi
 800bc0a:	b2ad      	uxthmi	r5, r5
 800bc0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc0e:	4852      	ldr	r0, [pc, #328]	@ (800bd58 <_printf_i+0x234>)
 800bc10:	6033      	str	r3, [r6, #0]
 800bc12:	bf14      	ite	ne
 800bc14:	230a      	movne	r3, #10
 800bc16:	2308      	moveq	r3, #8
 800bc18:	2100      	movs	r1, #0
 800bc1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc1e:	6866      	ldr	r6, [r4, #4]
 800bc20:	60a6      	str	r6, [r4, #8]
 800bc22:	2e00      	cmp	r6, #0
 800bc24:	db05      	blt.n	800bc32 <_printf_i+0x10e>
 800bc26:	6821      	ldr	r1, [r4, #0]
 800bc28:	432e      	orrs	r6, r5
 800bc2a:	f021 0104 	bic.w	r1, r1, #4
 800bc2e:	6021      	str	r1, [r4, #0]
 800bc30:	d04b      	beq.n	800bcca <_printf_i+0x1a6>
 800bc32:	4616      	mov	r6, r2
 800bc34:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc38:	fb03 5711 	mls	r7, r3, r1, r5
 800bc3c:	5dc7      	ldrb	r7, [r0, r7]
 800bc3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc42:	462f      	mov	r7, r5
 800bc44:	42bb      	cmp	r3, r7
 800bc46:	460d      	mov	r5, r1
 800bc48:	d9f4      	bls.n	800bc34 <_printf_i+0x110>
 800bc4a:	2b08      	cmp	r3, #8
 800bc4c:	d10b      	bne.n	800bc66 <_printf_i+0x142>
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	07df      	lsls	r7, r3, #31
 800bc52:	d508      	bpl.n	800bc66 <_printf_i+0x142>
 800bc54:	6923      	ldr	r3, [r4, #16]
 800bc56:	6861      	ldr	r1, [r4, #4]
 800bc58:	4299      	cmp	r1, r3
 800bc5a:	bfde      	ittt	le
 800bc5c:	2330      	movle	r3, #48	@ 0x30
 800bc5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc66:	1b92      	subs	r2, r2, r6
 800bc68:	6122      	str	r2, [r4, #16]
 800bc6a:	f8cd a000 	str.w	sl, [sp]
 800bc6e:	464b      	mov	r3, r9
 800bc70:	aa03      	add	r2, sp, #12
 800bc72:	4621      	mov	r1, r4
 800bc74:	4640      	mov	r0, r8
 800bc76:	f7ff fee7 	bl	800ba48 <_printf_common>
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	d14a      	bne.n	800bd14 <_printf_i+0x1f0>
 800bc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc82:	b004      	add	sp, #16
 800bc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	f043 0320 	orr.w	r3, r3, #32
 800bc8e:	6023      	str	r3, [r4, #0]
 800bc90:	4832      	ldr	r0, [pc, #200]	@ (800bd5c <_printf_i+0x238>)
 800bc92:	2778      	movs	r7, #120	@ 0x78
 800bc94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	6831      	ldr	r1, [r6, #0]
 800bc9c:	061f      	lsls	r7, r3, #24
 800bc9e:	f851 5b04 	ldr.w	r5, [r1], #4
 800bca2:	d402      	bmi.n	800bcaa <_printf_i+0x186>
 800bca4:	065f      	lsls	r7, r3, #25
 800bca6:	bf48      	it	mi
 800bca8:	b2ad      	uxthmi	r5, r5
 800bcaa:	6031      	str	r1, [r6, #0]
 800bcac:	07d9      	lsls	r1, r3, #31
 800bcae:	bf44      	itt	mi
 800bcb0:	f043 0320 	orrmi.w	r3, r3, #32
 800bcb4:	6023      	strmi	r3, [r4, #0]
 800bcb6:	b11d      	cbz	r5, 800bcc0 <_printf_i+0x19c>
 800bcb8:	2310      	movs	r3, #16
 800bcba:	e7ad      	b.n	800bc18 <_printf_i+0xf4>
 800bcbc:	4826      	ldr	r0, [pc, #152]	@ (800bd58 <_printf_i+0x234>)
 800bcbe:	e7e9      	b.n	800bc94 <_printf_i+0x170>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	f023 0320 	bic.w	r3, r3, #32
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	e7f6      	b.n	800bcb8 <_printf_i+0x194>
 800bcca:	4616      	mov	r6, r2
 800bccc:	e7bd      	b.n	800bc4a <_printf_i+0x126>
 800bcce:	6833      	ldr	r3, [r6, #0]
 800bcd0:	6825      	ldr	r5, [r4, #0]
 800bcd2:	6961      	ldr	r1, [r4, #20]
 800bcd4:	1d18      	adds	r0, r3, #4
 800bcd6:	6030      	str	r0, [r6, #0]
 800bcd8:	062e      	lsls	r6, r5, #24
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	d501      	bpl.n	800bce2 <_printf_i+0x1be>
 800bcde:	6019      	str	r1, [r3, #0]
 800bce0:	e002      	b.n	800bce8 <_printf_i+0x1c4>
 800bce2:	0668      	lsls	r0, r5, #25
 800bce4:	d5fb      	bpl.n	800bcde <_printf_i+0x1ba>
 800bce6:	8019      	strh	r1, [r3, #0]
 800bce8:	2300      	movs	r3, #0
 800bcea:	6123      	str	r3, [r4, #16]
 800bcec:	4616      	mov	r6, r2
 800bcee:	e7bc      	b.n	800bc6a <_printf_i+0x146>
 800bcf0:	6833      	ldr	r3, [r6, #0]
 800bcf2:	1d1a      	adds	r2, r3, #4
 800bcf4:	6032      	str	r2, [r6, #0]
 800bcf6:	681e      	ldr	r6, [r3, #0]
 800bcf8:	6862      	ldr	r2, [r4, #4]
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f7f4 fa77 	bl	80001f0 <memchr>
 800bd02:	b108      	cbz	r0, 800bd08 <_printf_i+0x1e4>
 800bd04:	1b80      	subs	r0, r0, r6
 800bd06:	6060      	str	r0, [r4, #4]
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd12:	e7aa      	b.n	800bc6a <_printf_i+0x146>
 800bd14:	6923      	ldr	r3, [r4, #16]
 800bd16:	4632      	mov	r2, r6
 800bd18:	4649      	mov	r1, r9
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	47d0      	blx	sl
 800bd1e:	3001      	adds	r0, #1
 800bd20:	d0ad      	beq.n	800bc7e <_printf_i+0x15a>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	079b      	lsls	r3, r3, #30
 800bd26:	d413      	bmi.n	800bd50 <_printf_i+0x22c>
 800bd28:	68e0      	ldr	r0, [r4, #12]
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	4298      	cmp	r0, r3
 800bd2e:	bfb8      	it	lt
 800bd30:	4618      	movlt	r0, r3
 800bd32:	e7a6      	b.n	800bc82 <_printf_i+0x15e>
 800bd34:	2301      	movs	r3, #1
 800bd36:	4632      	mov	r2, r6
 800bd38:	4649      	mov	r1, r9
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	47d0      	blx	sl
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d09d      	beq.n	800bc7e <_printf_i+0x15a>
 800bd42:	3501      	adds	r5, #1
 800bd44:	68e3      	ldr	r3, [r4, #12]
 800bd46:	9903      	ldr	r1, [sp, #12]
 800bd48:	1a5b      	subs	r3, r3, r1
 800bd4a:	42ab      	cmp	r3, r5
 800bd4c:	dcf2      	bgt.n	800bd34 <_printf_i+0x210>
 800bd4e:	e7eb      	b.n	800bd28 <_printf_i+0x204>
 800bd50:	2500      	movs	r5, #0
 800bd52:	f104 0619 	add.w	r6, r4, #25
 800bd56:	e7f5      	b.n	800bd44 <_printf_i+0x220>
 800bd58:	080105c1 	.word	0x080105c1
 800bd5c:	080105d2 	.word	0x080105d2

0800bd60 <__sflush_r>:
 800bd60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd68:	0716      	lsls	r6, r2, #28
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	d454      	bmi.n	800be1a <__sflush_r+0xba>
 800bd70:	684b      	ldr	r3, [r1, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	dc02      	bgt.n	800bd7c <__sflush_r+0x1c>
 800bd76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	dd48      	ble.n	800be0e <__sflush_r+0xae>
 800bd7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd7e:	2e00      	cmp	r6, #0
 800bd80:	d045      	beq.n	800be0e <__sflush_r+0xae>
 800bd82:	2300      	movs	r3, #0
 800bd84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd88:	682f      	ldr	r7, [r5, #0]
 800bd8a:	6a21      	ldr	r1, [r4, #32]
 800bd8c:	602b      	str	r3, [r5, #0]
 800bd8e:	d030      	beq.n	800bdf2 <__sflush_r+0x92>
 800bd90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd92:	89a3      	ldrh	r3, [r4, #12]
 800bd94:	0759      	lsls	r1, r3, #29
 800bd96:	d505      	bpl.n	800bda4 <__sflush_r+0x44>
 800bd98:	6863      	ldr	r3, [r4, #4]
 800bd9a:	1ad2      	subs	r2, r2, r3
 800bd9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd9e:	b10b      	cbz	r3, 800bda4 <__sflush_r+0x44>
 800bda0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bda2:	1ad2      	subs	r2, r2, r3
 800bda4:	2300      	movs	r3, #0
 800bda6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bda8:	6a21      	ldr	r1, [r4, #32]
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b0      	blx	r6
 800bdae:	1c43      	adds	r3, r0, #1
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	d106      	bne.n	800bdc2 <__sflush_r+0x62>
 800bdb4:	6829      	ldr	r1, [r5, #0]
 800bdb6:	291d      	cmp	r1, #29
 800bdb8:	d82b      	bhi.n	800be12 <__sflush_r+0xb2>
 800bdba:	4a2a      	ldr	r2, [pc, #168]	@ (800be64 <__sflush_r+0x104>)
 800bdbc:	40ca      	lsrs	r2, r1
 800bdbe:	07d6      	lsls	r6, r2, #31
 800bdc0:	d527      	bpl.n	800be12 <__sflush_r+0xb2>
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	6062      	str	r2, [r4, #4]
 800bdc6:	04d9      	lsls	r1, r3, #19
 800bdc8:	6922      	ldr	r2, [r4, #16]
 800bdca:	6022      	str	r2, [r4, #0]
 800bdcc:	d504      	bpl.n	800bdd8 <__sflush_r+0x78>
 800bdce:	1c42      	adds	r2, r0, #1
 800bdd0:	d101      	bne.n	800bdd6 <__sflush_r+0x76>
 800bdd2:	682b      	ldr	r3, [r5, #0]
 800bdd4:	b903      	cbnz	r3, 800bdd8 <__sflush_r+0x78>
 800bdd6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bdd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdda:	602f      	str	r7, [r5, #0]
 800bddc:	b1b9      	cbz	r1, 800be0e <__sflush_r+0xae>
 800bdde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bde2:	4299      	cmp	r1, r3
 800bde4:	d002      	beq.n	800bdec <__sflush_r+0x8c>
 800bde6:	4628      	mov	r0, r5
 800bde8:	f7ff fca2 	bl	800b730 <_free_r>
 800bdec:	2300      	movs	r3, #0
 800bdee:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdf0:	e00d      	b.n	800be0e <__sflush_r+0xae>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	47b0      	blx	r6
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	1c50      	adds	r0, r2, #1
 800bdfc:	d1c9      	bne.n	800bd92 <__sflush_r+0x32>
 800bdfe:	682b      	ldr	r3, [r5, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d0c6      	beq.n	800bd92 <__sflush_r+0x32>
 800be04:	2b1d      	cmp	r3, #29
 800be06:	d001      	beq.n	800be0c <__sflush_r+0xac>
 800be08:	2b16      	cmp	r3, #22
 800be0a:	d11e      	bne.n	800be4a <__sflush_r+0xea>
 800be0c:	602f      	str	r7, [r5, #0]
 800be0e:	2000      	movs	r0, #0
 800be10:	e022      	b.n	800be58 <__sflush_r+0xf8>
 800be12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be16:	b21b      	sxth	r3, r3
 800be18:	e01b      	b.n	800be52 <__sflush_r+0xf2>
 800be1a:	690f      	ldr	r7, [r1, #16]
 800be1c:	2f00      	cmp	r7, #0
 800be1e:	d0f6      	beq.n	800be0e <__sflush_r+0xae>
 800be20:	0793      	lsls	r3, r2, #30
 800be22:	680e      	ldr	r6, [r1, #0]
 800be24:	bf08      	it	eq
 800be26:	694b      	ldreq	r3, [r1, #20]
 800be28:	600f      	str	r7, [r1, #0]
 800be2a:	bf18      	it	ne
 800be2c:	2300      	movne	r3, #0
 800be2e:	eba6 0807 	sub.w	r8, r6, r7
 800be32:	608b      	str	r3, [r1, #8]
 800be34:	f1b8 0f00 	cmp.w	r8, #0
 800be38:	dde9      	ble.n	800be0e <__sflush_r+0xae>
 800be3a:	6a21      	ldr	r1, [r4, #32]
 800be3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be3e:	4643      	mov	r3, r8
 800be40:	463a      	mov	r2, r7
 800be42:	4628      	mov	r0, r5
 800be44:	47b0      	blx	r6
 800be46:	2800      	cmp	r0, #0
 800be48:	dc08      	bgt.n	800be5c <__sflush_r+0xfc>
 800be4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be52:	81a3      	strh	r3, [r4, #12]
 800be54:	f04f 30ff 	mov.w	r0, #4294967295
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	4407      	add	r7, r0
 800be5e:	eba8 0800 	sub.w	r8, r8, r0
 800be62:	e7e7      	b.n	800be34 <__sflush_r+0xd4>
 800be64:	20400001 	.word	0x20400001

0800be68 <_fflush_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	690b      	ldr	r3, [r1, #16]
 800be6c:	4605      	mov	r5, r0
 800be6e:	460c      	mov	r4, r1
 800be70:	b913      	cbnz	r3, 800be78 <_fflush_r+0x10>
 800be72:	2500      	movs	r5, #0
 800be74:	4628      	mov	r0, r5
 800be76:	bd38      	pop	{r3, r4, r5, pc}
 800be78:	b118      	cbz	r0, 800be82 <_fflush_r+0x1a>
 800be7a:	6a03      	ldr	r3, [r0, #32]
 800be7c:	b90b      	cbnz	r3, 800be82 <_fflush_r+0x1a>
 800be7e:	f7ff fa4d 	bl	800b31c <__sinit>
 800be82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d0f3      	beq.n	800be72 <_fflush_r+0xa>
 800be8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be8c:	07d0      	lsls	r0, r2, #31
 800be8e:	d404      	bmi.n	800be9a <_fflush_r+0x32>
 800be90:	0599      	lsls	r1, r3, #22
 800be92:	d402      	bmi.n	800be9a <_fflush_r+0x32>
 800be94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be96:	f7ff fc48 	bl	800b72a <__retarget_lock_acquire_recursive>
 800be9a:	4628      	mov	r0, r5
 800be9c:	4621      	mov	r1, r4
 800be9e:	f7ff ff5f 	bl	800bd60 <__sflush_r>
 800bea2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bea4:	07da      	lsls	r2, r3, #31
 800bea6:	4605      	mov	r5, r0
 800bea8:	d4e4      	bmi.n	800be74 <_fflush_r+0xc>
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	059b      	lsls	r3, r3, #22
 800beae:	d4e1      	bmi.n	800be74 <_fflush_r+0xc>
 800beb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800beb2:	f7ff fc3b 	bl	800b72c <__retarget_lock_release_recursive>
 800beb6:	e7dd      	b.n	800be74 <_fflush_r+0xc>

0800beb8 <__swhatbuf_r>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	460c      	mov	r4, r1
 800bebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec0:	2900      	cmp	r1, #0
 800bec2:	b096      	sub	sp, #88	@ 0x58
 800bec4:	4615      	mov	r5, r2
 800bec6:	461e      	mov	r6, r3
 800bec8:	da0d      	bge.n	800bee6 <__swhatbuf_r+0x2e>
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bed0:	f04f 0100 	mov.w	r1, #0
 800bed4:	bf14      	ite	ne
 800bed6:	2340      	movne	r3, #64	@ 0x40
 800bed8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bedc:	2000      	movs	r0, #0
 800bede:	6031      	str	r1, [r6, #0]
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	b016      	add	sp, #88	@ 0x58
 800bee4:	bd70      	pop	{r4, r5, r6, pc}
 800bee6:	466a      	mov	r2, sp
 800bee8:	f000 f848 	bl	800bf7c <_fstat_r>
 800beec:	2800      	cmp	r0, #0
 800beee:	dbec      	blt.n	800beca <__swhatbuf_r+0x12>
 800bef0:	9901      	ldr	r1, [sp, #4]
 800bef2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bef6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800befa:	4259      	negs	r1, r3
 800befc:	4159      	adcs	r1, r3
 800befe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf02:	e7eb      	b.n	800bedc <__swhatbuf_r+0x24>

0800bf04 <__smakebuf_r>:
 800bf04:	898b      	ldrh	r3, [r1, #12]
 800bf06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf08:	079d      	lsls	r5, r3, #30
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	d507      	bpl.n	800bf20 <__smakebuf_r+0x1c>
 800bf10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	6123      	str	r3, [r4, #16]
 800bf18:	2301      	movs	r3, #1
 800bf1a:	6163      	str	r3, [r4, #20]
 800bf1c:	b003      	add	sp, #12
 800bf1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf20:	ab01      	add	r3, sp, #4
 800bf22:	466a      	mov	r2, sp
 800bf24:	f7ff ffc8 	bl	800beb8 <__swhatbuf_r>
 800bf28:	9f00      	ldr	r7, [sp, #0]
 800bf2a:	4605      	mov	r5, r0
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f7ff f8dc 	bl	800b0ec <_malloc_r>
 800bf34:	b948      	cbnz	r0, 800bf4a <__smakebuf_r+0x46>
 800bf36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3a:	059a      	lsls	r2, r3, #22
 800bf3c:	d4ee      	bmi.n	800bf1c <__smakebuf_r+0x18>
 800bf3e:	f023 0303 	bic.w	r3, r3, #3
 800bf42:	f043 0302 	orr.w	r3, r3, #2
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	e7e2      	b.n	800bf10 <__smakebuf_r+0xc>
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	6020      	str	r0, [r4, #0]
 800bf4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf52:	81a3      	strh	r3, [r4, #12]
 800bf54:	9b01      	ldr	r3, [sp, #4]
 800bf56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf5a:	b15b      	cbz	r3, 800bf74 <__smakebuf_r+0x70>
 800bf5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf60:	4630      	mov	r0, r6
 800bf62:	f000 f81d 	bl	800bfa0 <_isatty_r>
 800bf66:	b128      	cbz	r0, 800bf74 <__smakebuf_r+0x70>
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	f023 0303 	bic.w	r3, r3, #3
 800bf6e:	f043 0301 	orr.w	r3, r3, #1
 800bf72:	81a3      	strh	r3, [r4, #12]
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	431d      	orrs	r5, r3
 800bf78:	81a5      	strh	r5, [r4, #12]
 800bf7a:	e7cf      	b.n	800bf1c <__smakebuf_r+0x18>

0800bf7c <_fstat_r>:
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	4d07      	ldr	r5, [pc, #28]	@ (800bf9c <_fstat_r+0x20>)
 800bf80:	2300      	movs	r3, #0
 800bf82:	4604      	mov	r4, r0
 800bf84:	4608      	mov	r0, r1
 800bf86:	4611      	mov	r1, r2
 800bf88:	602b      	str	r3, [r5, #0]
 800bf8a:	f7f4 fdc4 	bl	8000b16 <_fstat>
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	d102      	bne.n	800bf98 <_fstat_r+0x1c>
 800bf92:	682b      	ldr	r3, [r5, #0]
 800bf94:	b103      	cbz	r3, 800bf98 <_fstat_r+0x1c>
 800bf96:	6023      	str	r3, [r4, #0]
 800bf98:	bd38      	pop	{r3, r4, r5, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20002294 	.word	0x20002294

0800bfa0 <_isatty_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	4d06      	ldr	r5, [pc, #24]	@ (800bfbc <_isatty_r+0x1c>)
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	4608      	mov	r0, r1
 800bfaa:	602b      	str	r3, [r5, #0]
 800bfac:	f7f4 fdc3 	bl	8000b36 <_isatty>
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	d102      	bne.n	800bfba <_isatty_r+0x1a>
 800bfb4:	682b      	ldr	r3, [r5, #0]
 800bfb6:	b103      	cbz	r3, 800bfba <_isatty_r+0x1a>
 800bfb8:	6023      	str	r3, [r4, #0]
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	20002294 	.word	0x20002294

0800bfc0 <_init>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr

0800bfcc <_fini>:
 800bfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfce:	bf00      	nop
 800bfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd2:	bc08      	pop	{r3}
 800bfd4:	469e      	mov	lr, r3
 800bfd6:	4770      	bx	lr
